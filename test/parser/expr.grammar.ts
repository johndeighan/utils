"use strict";
// expr.grammar.civet

import {
	Rule,
	All, Any, Plus, Optional, Star,
	} from '../../src/lib/parser.lib.ts'

// ---------------------------------------------------------------------------

// --- Regular Expressions - to use in rules

const reIdent = /^([a-zA-Z_$][a-zA-Z0-9_$]*)/
reIdent.toString = () => 'reIdent'

const reNumber = /^((?:[0-9]+\.?[0-9]*|\.[0-9]+)(?:[eE][-+]?[0-9]+)?)\b/
reNumber.toString = () => 'reNumber'

const reAddOp = /[+\-]/
reAddOp.toString = () => 'reOp'

const reMultOp = /[\*\/]/
reMultOp.toString = () => 'reOp'

// ---------------------------------------------------------------------------

const cb = (rule: Rule, lMatches: any[]) => {
	console.log(`CALLBACK ${rule.label}`)
}

const factor = Any([
	reNumber
//	All [ '(' expr ')' ]
	])
factor.label = 'factor'

const term = All([
	factor,
	Star(All([ reMultOp, factor ]))
	])
term.label = 'term'

export const expr = All([
	term,
	Star(All([ reAddOp, term ]))
	], cb)
expr.label = 'expr'

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVzdC9wYXJzZXIvZXhwci5ncmFtbWFyLmNpdmV0LnRzeCIsInNvdXJjZXMiOlsidGVzdC9wYXJzZXIvZXhwci5ncmFtbWFyLmNpdmV0Il0sIm1hcHBpbmdzIjoiO0FBQUEscUJBQW9CO0FBQ3BCLEFBQUE7QUFDQSxBQUFBLE1BQU0sQ0FBQyxDQUFDO0FBQ1IsQ0FBQyxJQUFJLENBQUM7QUFDTixDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLElBQUksQ0FBQztBQUNoQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsNkJBQTZCO0FBQ3JDLEFBQUE7QUFDQSxBQUFBLDhFQUE2RTtBQUM3RSxBQUFBO0FBQ0EsQUFBQSw0Q0FBMkM7QUFDM0MsQUFBQTtBQUNBLEFBQUEsQUFBTyxNQUFQLE9BQU8sQ0FBQyxDQUFFLENBQUMsQ0FBRyxFQUFFLEFBQUMsVUFBVSxBQUFDLGFBQWEsQ0FBQyxBQUFDLENBQUMsQUFBQyxDQUFHO0FBQ2hELEFBQUEsQUFBQSxPQUFPLENBQUMsUUFBUSxDLENBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsU0FBUztBQUNsQyxBQUFBO0FBQ0EsQUFBQSxBQUFRLE1BQVIsUUFBUSxDQUFDLENBQUUsQ0FBQyxDQUFHLENBQUMsQUFDZixDQUFDLEFBQ0EsR0FBRyxBQUNGLEtBQUssQ0FBQyxBQUFDLEVBQUUsQ0FBQyxBQUFDLEtBQUssQ0FBQyxBQUFDLENBQUMsQUFBQyxFQUFFLEFBQUMsS0FBSyxDQUFDLEFBQzdCLENBQUMsQUFDRixHQUFHLEFBQ0YsSUFBSSxBQUFDLElBQUksQ0FBQyxBQUFDLEtBQUssQ0FBQyxBQUNqQixFQUFFLEFBQ0gsQ0FBQyxFQUFFLEFBQ0osQ0FBRztBQUNKLEFBQUEsQUFBQSxRQUFRLENBQUMsUUFBUSxDLENBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsVUFBVTtBQUNwQyxBQUFBO0FBQ0EsQUFBQSxBQUFPLE1BQVAsT0FBTyxDQUFDLENBQUUsQ0FBQyxPQUFPO0FBQ2xCLEFBQUEsQUFBQSxPQUFPLENBQUMsUUFBUSxDLENBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsTUFBTTtBQUMvQixBQUFBO0FBQ0EsQUFBQSxBQUFRLE1BQVIsUUFBUSxDQUFDLENBQUUsQ0FBQyxRQUFRO0FBQ3BCLEFBQUEsQUFBQSxRQUFRLENBQUMsUUFBUSxDLENBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsTUFBTTtBQUNoQyxBQUFBO0FBQ0EsQUFBQSw4RUFBNkU7QUFDN0UsQUFBQTtBQUNBLEFBQUEsQUFBRSxNQUFGLEVBQUUsQ0FBQyxDQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFBLENBQUE7QUFDdEMsQUFBQSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUEsQUFBQyxDQUFDLFNBQVMsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQztBQUFBLENBQUE7QUFDckMsQUFBQTtBQUNBLEFBQUEsQUFBTSxNQUFOLE1BQU0sQ0FBQyxDQUFFLENBQUMsR0FBRyxDQUFBLEFBQUMsQ0FBQztBQUNmLEFBQUEsQ0FBQyxRQUFRO0FBQ1QsQUFBQSx1QkFBc0I7QUFDdEIsQUFBQSxDQUFDLENBQUMsQ0FBQTtBQUNGLEFBQUEsQUFBQSxNQUFNLENBQUMsS0FBSyxDLENBQUUsQ0FBQyxRQUFRO0FBQ3ZCLEFBQUE7QUFDQSxBQUFBLEFBQUksTUFBSixJQUFJLENBQUMsQ0FBRSxDQUFDLEdBQUcsQ0FBQSxBQUFDLENBQUM7QUFDYixBQUFBLENBQUMsTUFBTSxDQUFBO0FBQ1AsQUFBQSxDQUFDLElBQUksQ0FBQSxBQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFBO0FBQy9CLEFBQUEsQ0FBQyxDQUFDLENBQUE7QUFDRixBQUFBLEFBQUEsSUFBSSxDQUFDLEtBQUssQyxDQUFFLENBQUMsTUFBTTtBQUNuQixBQUFBO0FBQ0EsQUFBQSxBQUFBLE1BQU0sQ0FBSyxNQUFKLElBQUksQ0FBQyxDQUFFLENBQUMsR0FBRyxDQUFBLEFBQUMsQ0FBQztBQUNwQixBQUFBLENBQUMsSUFBSSxDQUFBO0FBQ0wsQUFBQSxDQUFDLElBQUksQ0FBQSxBQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFBO0FBQzVCLEFBQUEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUE7QUFDTixBQUFBLEFBQUEsSUFBSSxDQUFDLEtBQUssQyxDQUFFLENBQUMsTUFBTTtBQUNuQiIsIm5hbWVzIjpbXSwic291cmNlc0NvbnRlbnQiOlsiIyBleHByLmdyYW1tYXIuY2l2ZXRcclxuXHJcbmltcG9ydCB7XHJcblx0UnVsZSxcclxuXHRBbGwsIEFueSwgUGx1cywgT3B0aW9uYWwsIFN0YXIsXHJcblx0fSBmcm9tICcuLi8uLi9zcmMvbGliL3BhcnNlci5saWIudHMnXHJcblxyXG4jIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cclxuIyAtLS0gUmVndWxhciBFeHByZXNzaW9ucyAtIHRvIHVzZSBpbiBydWxlc1xyXG5cclxucmVJZGVudCA6PSAvLy9eKCBbYS16QS1aXyRdIFthLXpBLVowLTlfJF0qICkgLy8vXHJcbnJlSWRlbnQudG9TdHJpbmcgPSAoKSA9PiAncmVJZGVudCdcclxuXHJcbnJlTnVtYmVyIDo9IC8vL15cclxuXHQoXHJcblx0XHQoPzpcclxuXHRcdFx0WzAtOV0rIFxcLj8gWzAtOV0qIHwgXFwuIFswLTldK1xyXG5cdFx0XHQpXHJcblx0XHQoPzpcclxuXHRcdFx0W2VFXSBbLStdPyBbMC05XStcclxuXHRcdFx0KT9cclxuXHRcdClcXGJcclxuXHQvLy9cclxucmVOdW1iZXIudG9TdHJpbmcgPSAoKSA9PiAncmVOdW1iZXInXHJcblxyXG5yZUFkZE9wIDo9IC9bK1xcLV0vXHJcbnJlQWRkT3AudG9TdHJpbmcgPSAoKSA9PiAncmVPcCdcclxuXHJcbnJlTXVsdE9wIDo9IC9bXFwqXFwvXS9cclxucmVNdWx0T3AudG9TdHJpbmcgPSAoKSA9PiAncmVPcCdcclxuXHJcbiMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblxyXG5jYiA6PSAocnVsZTogUnVsZSwgbE1hdGNoZXM6IGFueVtdKSA9PlxyXG5cdGNvbnNvbGUubG9nIFwiQ0FMTEJBQ0sgI3tydWxlLmxhYmVsfVwiXHJcblxyXG5mYWN0b3IgOj0gQW55IFtcclxuXHRyZU51bWJlclxyXG4jXHRBbGwgWyAnKCcgZXhwciAnKScgXVxyXG5cdF1cclxuZmFjdG9yLmxhYmVsID0gJ2ZhY3RvcidcclxuXHJcbnRlcm0gOj0gQWxsIFtcclxuXHRmYWN0b3JcclxuXHRTdGFyIEFsbChbIHJlTXVsdE9wLCBmYWN0b3IgXSlcclxuXHRdXHJcbnRlcm0ubGFiZWwgPSAndGVybSdcclxuXHJcbmV4cG9ydCBleHByIDo9IEFsbCBbXHJcblx0dGVybVxyXG5cdFN0YXIgQWxsKFsgcmVBZGRPcCwgdGVybSBdKVxyXG5cdF0sIGNiXHJcbmV4cHIubGFiZWwgPSAnZXhwcidcclxuIl19