# expr.grammar.civet

import {
	Rule,
	All, Any, Plus, Optional, Star,
	} from '../../src/lib/parser.lib.ts'

# ---------------------------------------------------------------------------

# --- Regular Expressions - to use in rules

reIdent := ///^( [a-zA-Z_$] [a-zA-Z0-9_$]* ) ///
reIdent.toString = () => 'reIdent'

reNumber := ///^
	(
		(?:
			[0-9]+ \.? [0-9]* | \. [0-9]+
			)
		(?:
			[eE] [-+]? [0-9]+
			)?
		)\b
	///
reNumber.toString = () => 'reNumber'

reAddOp := /[+\-]/
reAddOp.toString = () => 'reOp'

reMultOp := /[\*\/]/
reMultOp.toString = () => 'reOp'

# ---------------------------------------------------------------------------

cb := (rule: Rule, lMatches: any[]) =>
	console.log "CALLBACK #{rule.label}"

factor := Any [
	reNumber
#	All [ '(' expr ')' ]
	]
factor.label = 'factor'

term := All [
	factor
	Star All([ reMultOp, factor ])
	]
term.label = 'term'

export expr := All [
	term
	Star All([ reAddOp, term ])
	], cb
expr.label = 'expr'
