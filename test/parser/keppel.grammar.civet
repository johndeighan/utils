# keppel.grammar.civet

import {
	undef, hash, assert,
	} from '../../src/lib/datatypes.lib.ts'
import {
	TRule, TState,
	Ignore, All, Any, Plus, Optional, Node,
	} from '../../src/lib/parser.lib.ts'

# ---------------------------------------------------------------------------

reIdent: RegExp := /^([a-zA-Z][a-zA-Z0-9_-]*)/

QString: TRule := Any [
	/^'([^']*)'/
	/^"([^"]*)"/
	]

Attr := Node<hash>(
	All('Attr', [
		reIdent,
		'=',
		QString
		]),
	($, $next) =>
		[name, value] := $next.lMatches
		return {name, value}
	)

Attributes := Node<hash>(
	All('Attributes', [
		'(',
		Attr,
		Optional(Plus(All('MoreAttr', [',', Attr]))),
		')'
		]),
	($, $next) =>
		return {attributes: $next.lMatches}
	)

Id := Node<hash>(
	All('Id', [
		'#',
		reIdent
		]),
	($, $next) =>
		return {$next.lMatches[0]}
	)

Classes := Node<hash>(
	Plus(All([
		'.',
		reIdent
		])),
	($, $next) =>
		return {classes: $next.lMatches}
	)

Header := Node<hash>(
	All('Header', [
		reIdent,
		Optional(Attributes),
		Optional(Id),
		Optional(Classes)
		]),
	($, $next) =>
		[name, ...lOthers] := $next.lMatches
		return Object.assign {tag: name}, lOthers...
	)

ThisGrammar := ($: TState) => Keppel($)

Body := Node<hash>(
	All('Body', [
		'[',
		ThisGrammar,
		']'
		]),
	($, $next) =>
		return {$next.lMatches[0]}
	)

Element: TRule := Node<hash>(
	All('Element', [
		Header,
		Optional(Body)
		]),
	($, $next) =>
		[header, body] := $next.stack || []
		if (typeof header == 'object')
			return Object.assign({type: 'element', ...header}, body || {})
		else
			return undef
	)

FreeText := Node<hash>(
	QString,
	($, $next) =>
		console.log "Free Text:"
		console.log $next.lMatches
		console.log "-----"
		return {
			type: 'free text',
			value: $next.lMatches[0]
			}
	);

Keppel := Node<hash>(
	Plus(Any([Element, FreeText])),
	($, $next) =>
		console.log "STACK:"
		console.log $next.stack
		console.log '------'
		return $next.stack[0] || {}
	)

# --- Ignore line comments and all whitespace
reIgnore: RegExp := /^\s+|^\/\/[^\r\n]*\n/

export KeppelGrammar := Ignore(reIgnore, ThisGrammar)
