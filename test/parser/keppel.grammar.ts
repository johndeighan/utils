"use strict";
// keppel.grammar.civet

import {
	TRule, TState,
	Ignore, All, Any, Plus, Optional, Node,
	} from '../../src/lib/parser.lib.ts'
import {hash} from '../../src/lib/datatypes.lib.ts'

// ---------------------------------------------------------------------------

const reIdent: RegExp = /^([a-zA-Z][a-zA-Z0-9_-]*)/

const QString: TRule = Any(
	/^'([^']*)'/,
	/^"([^"]*)"/
	)

const Attr = Node<hash>(
	All(
		reIdent,
		'=',
		QString
		),
	(lMatches: hash[]) => {
		const [name, value] = lMatches
		return {name, value}
	}
	)

const Attributes = Node<hash>(
	All(
		'(',
		Attr,
		Optional(Plus(All(',', Attr))),
		')'
		),
	(lMatches: hash[]) => {
		return {attributes: lMatches}
	}
	)

const Id = Node<hash>(
	All(
		'#',
		reIdent
		),
	(lMatches: hash[]) => {
		return {[0]: lMatches[0]}
	}
	)

const Classes = Node<hash>(
	Plus(All(
		'.',
		reIdent
		)),
	(lMatches: hash[]) => {
		return {classes: lMatches}
	}
	)

const Header = Node<hash>(
	All(
		reIdent,
		Optional(Attributes),
		Optional(Id),
		Optional(Classes)
		),
	(lMatches: hash[]) => {
		const [name, ...lOthers] = lMatches
		return Object.assign({tag: name}, ...lOthers)
	}
	)

const ThisGrammar = ($: TState) => Keppel($)

const Body = Node<hash>(
	All(
		'[',
		ThisGrammar,
		']'
		),
	(lMatches: hash[]) => {
		return {[0]: lMatches[0]}
	}
	)

const Element: TRule = Node<hash>(
	All(
		Header,
		Optional(Body)
		),
	(lMatches: hash[]) => {
		const [header, body] = lMatches
		return Object.assign({type: 'element', ...header}, body || {})
	}
	)

const FreeText = Node<hash>(
	QString,
	(lMatches: hash[]) => {
		console.log("Free Text:")
		console.log(lMatches)
		console.log("-----")
		return {
			type: 'free text',
			value: lMatches[0]
			}
	}
	);

const Keppel = Node<hash>(
	Plus(Any(Element, FreeText)),
	(lMatches: hash[]) => {
		console.log("STACK:")
		console.log(lMatches)
		console.log('------')
		return lMatches[0]
	}
	)

// --- Ignore line comments and all whitespace
const reIgnore: RegExp = /^\s+|^\/\/[^\r\n]*\n/

export const KeppelGrammar = Ignore(reIgnore, ThisGrammar)

//# sourceMappingURL=data:application/json;charset=utf-8;base64,