"use strict";
// keppel.grammar.civet

import {
	undef, hash, assert,
	} from '../../src/lib/datatypes.lib.ts'
import {
	TRule, TState,
	Ignore, All, Any, Plus, Optional, Node,
	} from '../../src/lib/parser.lib.ts'

// ---------------------------------------------------------------------------

const reIdent: RegExp = /^([a-zA-Z][a-zA-Z0-9_-]*)/

const QString: TRule = Any([
	/^'([^']*)'/,
	/^"([^"]*)"/
	])

const Attr = Node<hash>(
	All('Attr', [
		reIdent,
		'=',
		QString
		]),
	($, $next) => {
		const [name, value] = $next.lMatches
		return {name, value}
	}
	)

const Attributes = Node<hash>(
	All('Attributes', [
		'(',
		Attr,
		Optional(Plus(All('MoreAttr', [',', Attr]))),
		')'
		]),
	($, $next) => {
		return {attributes: $next.lMatches}
	}
	)

const Id = Node<hash>(
	All('Id', [
		'#',
		reIdent
		]),
	($, $next) => {
		return {[0]: $next.lMatches[0]}
	}
	)

const Classes = Node<hash>(
	Plus(All([
		'.',
		reIdent
		])),
	($, $next) => {
		return {classes: $next.lMatches}
	}
	)

const Header = Node<hash>(
	All('Header', [
		reIdent,
		Optional(Attributes),
		Optional(Id),
		Optional(Classes)
		]),
	($, $next) => {
		const [name, ...lOthers] = $next.lMatches
		return Object.assign({tag: name}, ...lOthers)
	}
	)

const ThisGrammar = ($: TState) => Keppel($)

const Body = Node<hash>(
	All('Body', [
		'[',
		ThisGrammar,
		']'
		]),
	($, $next) => {
		return {[0]: $next.lMatches[0]}
	}
	)

const Element: TRule = Node<hash>(
	All('Element', [
		Header,
		Optional(Body)
		]),
	($, $next) => {
		const [header, body] = $next.stack || []
		if (typeof header === 'object') {
			return Object.assign({type: 'element', ...header}, body || {})
		}
		else {
			return undef
		}
	}
	)

const FreeText = Node<hash>(
	QString,
	($, $next) => {
		console.log("Free Text:")
		console.log($next.lMatches)
		console.log("-----")
		return {
			type: 'free text',
			value: $next.lMatches[0]
			}
	}
	);

const Keppel = Node<hash>(
	Plus(Any([Element, FreeText])),
	($, $next) => {
		console.log("STACK:")
		console.log($next.stack)
		console.log('------')
		return $next.stack[0] || {}
	}
	)

// --- Ignore line comments and all whitespace
const reIgnore: RegExp = /^\s+|^\/\/[^\r\n]*\n/

export const KeppelGrammar = Ignore(reIgnore, ThisGrammar)

//# sourceMappingURL=data:application/json;charset=utf-8;base64,