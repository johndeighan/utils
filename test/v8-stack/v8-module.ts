"use strict";
// v8-module.civet

import {getMyCaller, stackFrame} from '@jdeighan/utils/v8-stack'

// ---------------------------------------------------------------------------

type bothFrames = ((stackFrame | undefined))[]

const isBothFrames = (x: any): x is bothFrames => {
	return Array.isArray(x) && (x.length === 2)
}

// ---------------------------------------------------------------------------

export const getBoth = function(): bothFrames {

	const result = secondFunc('both')
	if (Array.isArray(result)) {
		return result
	}
	else {
		throw new Error("Expected array, got stackFrame")
	}
}

// ---------------------------------------------------------------------------

export const getDirect = function(): (stackFrame | undefined) {

	const result = secondFunc('direct')
	if (Array.isArray(result)) {
		throw new Error("Got unexpected array")
	}
	return result
}

// ---------------------------------------------------------------------------

export const getOutside = function(): (stackFrame | undefined) {

	const result = secondFunc('outside')
	if (Array.isArray(result)) {
		throw new Error("Got unexpected array")
	}
	return result
}

// ---------------------------------------------------------------------------

const secondFunc = function(type: string): bothFrames | (stackFrame | undefined) {

	return thirdFunc(type)
}

// ---------------------------------------------------------------------------

const thirdFunc = function(type: string): bothFrames | (stackFrame | undefined) {

	// --- direct caller should be 'secondFunc'
	//     outside caller should be the function
	//        that called getCaller()
	switch(type) {
		case 'both': {
			return [getMyCaller(), getMyCaller()]
		}
		case 'direct': {
			return getMyCaller()
		}
		case 'outside': {
			return getMyCaller()
		}
		default: {
			throw new Error(`Unknown type: ${type}`)
		}
	}
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVzdC92OC1zdGFjay92OC1tb2R1bGUuY2l2ZXQudHN4Iiwic291cmNlcyI6WyJ0ZXN0L3Y4LXN0YWNrL3Y4LW1vZHVsZS5jaXZldCJdLCJtYXBwaW5ncyI6IjtBQUFBLGtCQUFpQjtBQUNqQixBQUFBO0FBQ0EsQUFBQSxNQUFNLENBQUMsQ0FBQyxXQUFXLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxJQUFJLENBQUMsMEJBQTBCO0FBQ2hFLEFBQUE7QUFDQSxBQUFBLDhFQUE2RTtBQUM3RSxBQUFBO0FBQ0EsQUFBQSxBQUFBLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLEMsQ0FBQyxVLFksQ0FBVyxDQUFDLENBQUMsQ0FBQztBQUNqQyxBQUFBO0FBQ0EsQUFBQSxBQUFZLE1BQVosWUFBWSxDQUFDLENBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxVQUFVLENBQUMsRUFBRSxDQUFBLENBQUE7QUFDNUMsQUFBQSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsR0FBRSxDQUFDLENBQUMsQztBQUFDLENBQUE7QUFDM0MsQUFBQTtBQUNBLEFBQUEsOEVBQTZFO0FBQzdFLEFBQUE7QUFDQSxBQUFBLEFBQUEsTUFBTSxDQUFRLE1BQVAsT0FBTyxDQUFDLENBQUUsQ0FBZ0IsUUFBZixDQUFDLENBQUMsQ0FBQyxDQUFDLFVBQWEsQ0FBQSxDQUFBO0FBQ25DLEFBQUE7QUFDQSxBQUFBLENBQU8sTUFBTixNQUFNLENBQUMsQ0FBRSxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUM7QUFDN0IsQUFBQSxDQUFDLEdBQUcsQ0FBQSxLQUFLLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFBLENBQUEsQ0FBQTtBQUN6QixBQUFBLEVBQUUsTUFBTSxDQUFDLE07Q0FBTSxDQUFBO0FBQ2YsQUFB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LElBQUksQ0FBQyxDQUFDLEM7RUFBQSxDO0NBQUEsQztBQUFBLENBQUE7QUFDMUMiLCJuYW1lcyI6W10sInNvdXJjZXNDb250ZW50IjpbIiMgdjgtbW9kdWxlLmNpdmV0XHJcblxyXG5pbXBvcnQge2dldE15Q2FsbGVyLCBzdGFja0ZyYW1lfSBmcm9tICdAamRlaWdoYW4vdXRpbHMvdjgtc3RhY2snXHJcblxyXG4jIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cclxudHlwZSBib3RoRnJhbWVzID0gKHN0YWNrRnJhbWU/KVtdXHJcblxyXG5pc0JvdGhGcmFtZXMgOj0gKHg6IGFueSk6IHggaXMgYm90aEZyYW1lcyA9PlxyXG5cdHJldHVybiBBcnJheS5pc0FycmF5KHgpICYmICh4Lmxlbmd0aCA9PSAyKVxyXG5cclxuIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuXHJcbmV4cG9ydCBnZXRCb3RoIDo9ICgpOiBib3RoRnJhbWVzIC0+XHJcblxyXG5cdHJlc3VsdCA6PSBzZWNvbmRGdW5jKCdib3RoJylcclxuXHRpZiBBcnJheS5pc0FycmF5KHJlc3VsdClcclxuXHRcdHJldHVybiByZXN1bHRcclxuXHRlbHNlXHJcblx0XHR0aHJvdyBuZXcgRXJyb3IoXCJFeHBlY3RlZCBhcnJheSwgZ290IHN0YWNrRnJhbWVcIilcclxuXHJcbiMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblxyXG5leHBvcnQgZ2V0RGlyZWN0IDo9ICgpOiBzdGFja0ZyYW1lPyAtPlxyXG5cclxuXHRyZXN1bHQgOj0gc2Vjb25kRnVuYygnZGlyZWN0JylcclxuXHRpZiBBcnJheS5pc0FycmF5KHJlc3VsdClcclxuXHRcdHRocm93IG5ldyBFcnJvcihcIkdvdCB1bmV4cGVjdGVkIGFycmF5XCIpXHJcblx0cmV0dXJuIHJlc3VsdFxyXG5cclxuIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuXHJcbmV4cG9ydCBnZXRPdXRzaWRlIDo9ICgpOiBzdGFja0ZyYW1lPyAtPlxyXG5cclxuXHRyZXN1bHQgOj0gc2Vjb25kRnVuYygnb3V0c2lkZScpXHJcblx0aWYgQXJyYXkuaXNBcnJheShyZXN1bHQpXHJcblx0XHR0aHJvdyBuZXcgRXJyb3IoXCJHb3QgdW5leHBlY3RlZCBhcnJheVwiKVxyXG5cdHJldHVybiByZXN1bHRcclxuXHJcbiMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblxyXG5zZWNvbmRGdW5jIDo9ICh0eXBlOiBzdHJpbmcpOiBib3RoRnJhbWVzIHwgc3RhY2tGcmFtZT8gLT5cclxuXHJcblx0cmV0dXJuIHRoaXJkRnVuYyh0eXBlKVxyXG5cclxuIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuXHJcbnRoaXJkRnVuYyA6PSAodHlwZTogc3RyaW5nKTogYm90aEZyYW1lcyB8IHN0YWNrRnJhbWU/IC0+XHJcblxyXG5cdCMgLS0tIGRpcmVjdCBjYWxsZXIgc2hvdWxkIGJlICdzZWNvbmRGdW5jJ1xyXG5cdCMgICAgIG91dHNpZGUgY2FsbGVyIHNob3VsZCBiZSB0aGUgZnVuY3Rpb25cclxuXHQjICAgICAgICB0aGF0IGNhbGxlZCBnZXRDYWxsZXIoKVxyXG5cdHN3aXRjaCB0eXBlXHJcblx0XHR3aGVuICdib3RoJ1xyXG5cdFx0XHRyZXR1cm4gW2dldE15Q2FsbGVyKCksIGdldE15Q2FsbGVyKCldXHJcblx0XHR3aGVuICdkaXJlY3QnXHJcblx0XHRcdHJldHVybiBnZXRNeUNhbGxlcigpXHJcblx0XHR3aGVuICdvdXRzaWRlJ1xyXG5cdFx0XHRyZXR1cm4gZ2V0TXlDYWxsZXIoKVxyXG5cdFx0ZWxzZVxyXG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IgXCJVbmtub3duIHR5cGU6ICN7dHlwZX1cIlxyXG4iXX0=