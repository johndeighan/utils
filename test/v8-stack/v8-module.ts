"use strict";
// v8-module.coffee

import {getMyCaller, stackFrame} from '@jdeighan/utils/v8-stack'

// ---------------------------------------------------------------------------

type bothFrames = (stackFrame | undefined)[]

const isBothFrames = (x: any): x is bothFrames => {
	return Array.isArray(x) && (x.length === 2)
}

// ---------------------------------------------------------------------------

export const getBoth = function(): bothFrames {

	const result = secondFunc('both')
	if (Array.isArray(result)) {
		return result
	}
	else {
		throw new Error("Expected array, got stackFrame")
	}
}

// ---------------------------------------------------------------------------

export const getDirect = function(): (stackFrame | undefined) {

	const result = secondFunc('direct')
	if (Array.isArray(result)) {
		throw new Error("Got unexpected array")
	}
	return result
}

// ---------------------------------------------------------------------------

export const getOutside = function(): (stackFrame | undefined) {

	const result = secondFunc('outside')
	if (Array.isArray(result)) {
		throw new Error("Got unexpected array")
	}
	return result
}

// ---------------------------------------------------------------------------

const secondFunc = function(type: string): bothFrames | (stackFrame | undefined) {

	return thirdFunc(type)
}

// ---------------------------------------------------------------------------

const thirdFunc = function(type: string): bothFrames | (stackFrame | undefined) {

	// --- direct caller should be 'secondFunc'
	//     outside caller should be the function
	//        that called getCaller()
	switch(type) {
		case 'both': {
			return [getMyCaller(), getMyCaller()]
		}
		case 'direct': {
			return getMyCaller()
		}
		case 'outside': {
			return getMyCaller()
		}
		default: {
			throw new Error(`Unknown type: ${type}`)
		}
	}
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVzdC92OC1zdGFjay92OC1tb2R1bGUuY2l2ZXQudHN4Iiwic291cmNlcyI6WyJ0ZXN0L3Y4LXN0YWNrL3Y4LW1vZHVsZS5jaXZldCJdLCJtYXBwaW5ncyI6IjtBQUFBLG1CQUFrQjtBQUNsQixBQUFBO0FBQ0EsQUFBQSxNQUFNLENBQUMsQ0FBQyxXQUFXLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxJQUFJLENBQUMsMEJBQTBCO0FBQ2hFLEFBQUE7QUFDQSxBQUFBLDhFQUE2RTtBQUM3RSxBQUFBO0FBQ0EsQUFBQSxBQUFBLElBQUksQ0FBQyxVQUFVLENBQUMsQyxDLENBQUMsQUFBQyxVLFksQ0FBVyxDQUFDLENBQUM7QUFDL0IsQUFBQTtBQUNBLEFBQUEsQUFBWSxNQUFaLFlBQVksQ0FBQyxDQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsVUFBVSxDQUFDLEVBQUUsQ0FBQSxDQUFBO0FBQzVDLEFBQUEsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLEdBQUUsQ0FBQyxDQUFDLEM7QUFBQyxDQUFBO0FBQzNDLEFBQUE7QUFDQSxBQUFBLDhFQUE2RTtBQUM3RSxBQUFBO0FBQ0EsQUFBQSxBQUFBLE1BQU0sQ0FBUSxNQUFQLE9BQU8sQ0FBQyxDQUFFLENBQWdCLFFBQWYsQ0FBQyxDQUFDLENBQUMsQ0FBQyxVQUFhLENBQUEsQ0FBQTtBQUNuQyxBQUFBO0FBQ0EsQUFBQSxDQUFPLE1BQU4sTUFBTSxDQUFDLENBQUUsQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDO0FBQzdCLEFBQUEsQ0FBQyxHQUFHLENBQUEsS0FBSyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQSxDQUFBLENBQUE7QUFDekIsQUFBQSxFQUFFLE1BQU0sQ0FBQyxNO0NBQU0sQ0FBQTtBQUNmLEFBQUEsQ0FBQyxJ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QUMsQ0FBQyxDO0VBQUEsQztDQUFBLEM7QUFBQSxDQUFBO0FBQzFDIiwibmFtZXMiOltdLCJzb3VyY2VzQ29udGVudCI6WyIjIHY4LW1vZHVsZS5jb2ZmZWVcclxuXHJcbmltcG9ydCB7Z2V0TXlDYWxsZXIsIHN0YWNrRnJhbWV9IGZyb20gJ0BqZGVpZ2hhbi91dGlscy92OC1zdGFjaydcclxuXHJcbiMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblxyXG50eXBlIGJvdGhGcmFtZXMgPSBzdGFja0ZyYW1lP1tdXHJcblxyXG5pc0JvdGhGcmFtZXMgOj0gKHg6IGFueSk6IHggaXMgYm90aEZyYW1lcyA9PlxyXG5cdHJldHVybiBBcnJheS5pc0FycmF5KHgpICYmICh4Lmxlbmd0aCA9PSAyKVxyXG5cclxuIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuXHJcbmV4cG9ydCBnZXRCb3RoIDo9ICgpOiBib3RoRnJhbWVzIC0+XHJcblxyXG5cdHJlc3VsdCA6PSBzZWNvbmRGdW5jKCdib3RoJylcclxuXHRpZiBBcnJheS5pc0FycmF5KHJlc3VsdClcclxuXHRcdHJldHVybiByZXN1bHRcclxuXHRlbHNlXHJcblx0XHR0aHJvdyBuZXcgRXJyb3IoXCJFeHBlY3RlZCBhcnJheSwgZ290IHN0YWNrRnJhbWVcIilcclxuXHJcbiMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblxyXG5leHBvcnQgZ2V0RGlyZWN0IDo9ICgpOiBzdGFja0ZyYW1lPyAtPlxyXG5cclxuXHRyZXN1bHQgOj0gc2Vjb25kRnVuYygnZGlyZWN0JylcclxuXHRpZiBBcnJheS5pc0FycmF5KHJlc3VsdClcclxuXHRcdHRocm93IG5ldyBFcnJvcihcIkdvdCB1bmV4cGVjdGVkIGFycmF5XCIpXHJcblx0cmV0dXJuIHJlc3VsdFxyXG5cclxuIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuXHJcbmV4cG9ydCBnZXRPdXRzaWRlIDo9ICgpOiBzdGFja0ZyYW1lPyAtPlxyXG5cclxuXHRyZXN1bHQgOj0gc2Vjb25kRnVuYygnb3V0c2lkZScpXHJcblx0aWYgQXJyYXkuaXNBcnJheShyZXN1bHQpXHJcblx0XHR0aHJvdyBuZXcgRXJyb3IoXCJHb3QgdW5leHBlY3RlZCBhcnJheVwiKVxyXG5cdHJldHVybiByZXN1bHRcclxuXHJcbiMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblxyXG5zZWNvbmRGdW5jIDo9ICh0eXBlOiBzdHJpbmcpOiBib3RoRnJhbWVzIHwgc3RhY2tGcmFtZT8gLT5cclxuXHJcblx0cmV0dXJuIHRoaXJkRnVuYyh0eXBlKVxyXG5cclxuIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuXHJcbnRoaXJkRnVuYyA6PSAodHlwZTogc3RyaW5nKTogYm90aEZyYW1lcyB8IHN0YWNrRnJhbWU/IC0+XHJcblxyXG5cdCMgLS0tIGRpcmVjdCBjYWxsZXIgc2hvdWxkIGJlICdzZWNvbmRGdW5jJ1xyXG5cdCMgICAgIG91dHNpZGUgY2FsbGVyIHNob3VsZCBiZSB0aGUgZnVuY3Rpb25cclxuXHQjICAgICAgICB0aGF0IGNhbGxlZCBnZXRDYWxsZXIoKVxyXG5cdHN3aXRjaCB0eXBlXHJcblx0XHR3aGVuICdib3RoJ1xyXG5cdFx0XHRyZXR1cm4gW2dldE15Q2FsbGVyKCksIGdldE15Q2FsbGVyKCldXHJcblx0XHR3aGVuICdkaXJlY3QnXHJcblx0XHRcdHJldHVybiBnZXRNeUNhbGxlcigpXHJcblx0XHR3aGVuICdvdXRzaWRlJ1xyXG5cdFx0XHRyZXR1cm4gZ2V0TXlDYWxsZXIoKVxyXG5cdFx0ZWxzZVxyXG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IgXCJVbmtub3duIHR5cGU6ICN7dHlwZX1cIlxyXG4iXX0=