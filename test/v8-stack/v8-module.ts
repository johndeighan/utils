"use strict";
// v8-module.coffee

import {getMyCaller} from '@jdeighan/utils/v8-stack'
import type {stackFrame} from '@jdeighan/utils/v8-stack'

// ---------------------------------------------------------------------------

type bothFrames = (stackFrame | undefined)[]

const isBothFrames = (x: any): x is bothFrames => {
	return Array.isArray(x) && (x.length === 2)
}

// ---------------------------------------------------------------------------

export const getBoth = function(): bothFrames {

	const result = secondFunc('both')
	if (Array.isArray(result)) {
		return result
	}
	else {
		throw new Error("Expected array, got stackFrame")
	}
}

// ---------------------------------------------------------------------------

export const getDirect = function(): (stackFrame | undefined) {

	const result = secondFunc('direct')
	if (Array.isArray(result)) {
		throw new Error("Got unexpected array")
	}
	return result
}

// ---------------------------------------------------------------------------

export const getOutside = function(): (stackFrame | undefined) {

	const result = secondFunc('outside')
	if (Array.isArray(result)) {
		throw new Error("Got unexpected array")
	}
	return result
}

// ---------------------------------------------------------------------------

const secondFunc = function(type: string): bothFrames | (stackFrame | undefined) {

	return thirdFunc(type)
}

// ---------------------------------------------------------------------------

const thirdFunc = function(type: string): bothFrames | (stackFrame | undefined) {

	// --- direct caller should be 'secondFunc'
	//     outside caller should be the function
	//        that called getCaller()
	switch(type) {
		case 'both': {
			return [getMyCaller(), getMyCaller()]
		}
		case 'direct': {
			return getMyCaller()
		}
		case 'outside': {
			return getMyCaller()
		}
		default: {
			throw new Error(`Unknown type: ${type}`)
		}
	}
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVzdC92OC1zdGFjay92OC1tb2R1bGUuY2l2ZXQudHN4Iiwic291cmNlcyI6WyJ0ZXN0L3Y4LXN0YWNrL3Y4LW1vZHVsZS5jaXZldCJdLCJtYXBwaW5ncyI6IjtBQUFBLG1CQUFrQjtBQUNsQixBQUFBO0FBQ0EsQUFBQSxNQUFNLENBQUMsQ0FBQyxXQUFXLENBQUMsQ0FBQyxJQUFJLENBQUMsMEJBQTBCO0FBQ3BELEFBQUEsQUFBQSxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsSUFBSSxDQUFDLDBCQUEwQjtBQUN4RCxBQUFBO0FBQ0EsQUFBQSw4RUFBNkU7QUFDN0UsQUFBQTtBQUNBLEFBQUEsQUFBQSxJQUFJLENBQUMsVUFBVSxDQUFDLEMsQyxDQUFDLEFBQUMsVSxZLENBQVcsQ0FBQyxDQUFDO0FBQy9CLEFBQUE7QUFDQSxBQUFBLEFBQVksTUFBWixZQUFZLENBQUMsQ0FBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLFVBQVUsQ0FBQyxFQUFFLENBQUEsQ0FBQTtBQUM1QyxBQUFBLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxHQUFFLENBQUMsQ0FBQyxDO0FBQUMsQ0FBQTtBQUMzQyxBQUFBO0FBQ0EsQUFBQSw4RUFBNkU7QUFDN0UsQUFBQTtBQUNBLEFBQUEsQUFBQSxNQUFNLENBQVEsTUFBUCxPQUFPLENBQUMsQ0FBRSxDQUFnQixRQUFmLENBQUMsQ0FBQyxDQUFDLENBQUMsVUFBYSxDQUFBLENBQUE7QUFDbkMsQUFBQTtBQUNBLEFBQUEsQ0FBTyxNQUFOLE1BQU0sQ0FBQyxDQUFFLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQztBQUM3QixBQUFBLENBQUMsR0FBRyxDQUFBLEtBQUssQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUEsQ0FBQSxD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LEtBQUssQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFBLEFBQUMsQ0FBQyxjQUFjLEVBQUUsSUFBSSxDQUFDLENBQUMsQztFQUFBLEM7Q0FBQSxDO0FBQUEsQ0FBQTtBQUMxQyIsIm5hbWVzIjpbXSwic291cmNlc0NvbnRlbnQiOlsiIyB2OC1tb2R1bGUuY29mZmVlXHJcblxyXG5pbXBvcnQge2dldE15Q2FsbGVyfSBmcm9tICdAamRlaWdoYW4vdXRpbHMvdjgtc3RhY2snXHJcbmltcG9ydCB0eXBlIHtzdGFja0ZyYW1lfSBmcm9tICdAamRlaWdoYW4vdXRpbHMvdjgtc3RhY2snXHJcblxyXG4jIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cclxudHlwZSBib3RoRnJhbWVzID0gc3RhY2tGcmFtZT9bXVxyXG5cclxuaXNCb3RoRnJhbWVzIDo9ICh4OiBhbnkpOiB4IGlzIGJvdGhGcmFtZXMgPT5cclxuXHRyZXR1cm4gQXJyYXkuaXNBcnJheSh4KSAmJiAoeC5sZW5ndGggPT0gMilcclxuXHJcbiMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblxyXG5leHBvcnQgZ2V0Qm90aCA6PSAoKTogYm90aEZyYW1lcyAtPlxyXG5cclxuXHRyZXN1bHQgOj0gc2Vjb25kRnVuYygnYm90aCcpXHJcblx0aWYgQXJyYXkuaXNBcnJheShyZXN1bHQpXHJcblx0XHRyZXR1cm4gcmVzdWx0XHJcblx0ZWxzZVxyXG5cdFx0dGhyb3cgbmV3IEVycm9yKFwiRXhwZWN0ZWQgYXJyYXksIGdvdCBzdGFja0ZyYW1lXCIpXHJcblxyXG4jIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cclxuZXhwb3J0IGdldERpcmVjdCA6PSAoKTogc3RhY2tGcmFtZT8gLT5cclxuXHJcblx0cmVzdWx0IDo9IHNlY29uZEZ1bmMoJ2RpcmVjdCcpXHJcblx0aWYgQXJyYXkuaXNBcnJheShyZXN1bHQpXHJcblx0XHR0aHJvdyBuZXcgRXJyb3IoXCJHb3QgdW5leHBlY3RlZCBhcnJheVwiKVxyXG5cdHJldHVybiByZXN1bHRcclxuXHJcbiMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblxyXG5leHBvcnQgZ2V0T3V0c2lkZSA6PSAoKTogc3RhY2tGcmFtZT8gLT5cclxuXHJcblx0cmVzdWx0IDo9IHNlY29uZEZ1bmMoJ291dHNpZGUnKVxyXG5cdGlmIEFycmF5LmlzQXJyYXkocmVzdWx0KVxyXG5cdFx0dGhyb3cgbmV3IEVycm9yKFwiR290IHVuZXhwZWN0ZWQgYXJyYXlcIilcclxuXHRyZXR1cm4gcmVzdWx0XHJcblxyXG4jIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cclxuc2Vjb25kRnVuYyA6PSAodHlwZTogc3RyaW5nKTogYm90aEZyYW1lcyB8IHN0YWNrRnJhbWU/IC0+XHJcblxyXG5cdHJldHVybiB0aGlyZEZ1bmModHlwZSlcclxuXHJcbiMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblxyXG50aGlyZEZ1bmMgOj0gKHR5cGU6IHN0cmluZyk6IGJvdGhGcmFtZXMgfCBzdGFja0ZyYW1lPyAtPlxyXG5cclxuXHQjIC0tLSBkaXJlY3QgY2FsbGVyIHNob3VsZCBiZSAnc2Vjb25kRnVuYydcclxuXHQjICAgICBvdXRzaWRlIGNhbGxlciBzaG91bGQgYmUgdGhlIGZ1bmN0aW9uXHJcblx0IyAgICAgICAgdGhhdCBjYWxsZWQgZ2V0Q2FsbGVyKClcclxuXHRzd2l0Y2ggdHlwZVxyXG5cdFx0d2hlbiAnYm90aCdcclxuXHRcdFx0cmV0dXJuIFtnZXRNeUNhbGxlcigpLCBnZXRNeUNhbGxlcigpXVxyXG5cdFx0d2hlbiAnZGlyZWN0J1xyXG5cdFx0XHRyZXR1cm4gZ2V0TXlDYWxsZXIoKVxyXG5cdFx0d2hlbiAnb3V0c2lkZSdcclxuXHRcdFx0cmV0dXJuIGdldE15Q2FsbGVyKClcclxuXHRcdGVsc2VcclxuXHRcdFx0dGhyb3cgbmV3IEVycm9yIFwiVW5rbm93biB0eXBlOiAje3R5cGV9XCJcclxuIl19