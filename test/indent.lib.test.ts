"use strict";
// indent.lib.test.civet

import {
	undef, defined, notdefined, spaces, tabs, DBG,
	assert, throwsError, getCmdArgs, deeplyEquals,
	oneIndent, resetOneIndent, indentLevel, splitLine,
	indented, undented,
	} from '../src/lib/utils.lib.ts'
import {
	equal, truthy, falsy, like, listLike, succeeds, fails,
	} from '../src/lib/unit-test.lib.ts'

const hArgs = getCmdArgs()

// ---------------------------------------------------------------------------

DBG("const oneIndent", "resetOneIndent()")

equal(oneIndent, undef)
equal(indentLevel("\t\tabc"), 2)  // --- sets oneIndent
equal(oneIndent, tabs(1))
resetOneIndent()
equal(oneIndent, undef)

equal(indentLevel("   abc"), 1)  // --- sets oneIndent
equal(oneIndent, spaces(3))
resetOneIndent()

// ---------------------------------------------------------------------------

// --- TEST using TABs ---

// ---------------------------------------------------------------------------

DBG("indentLevel()")

succeeds(() => {
	resetOneIndent()
	assert(notdefined(oneIndent))

	assert((indentLevel('abc') === 0))
	assert((indentLevel('\tabc') === 1))
	assert(defined(oneIndent))
	assert((oneIndent === '\t'))
	assert((indentLevel('\t\tabc') === 2))
	throwsError(() => indentLevel('\t abc'))
	throwsError(() => indentLevel(' \tabc'))
	assert(indentLevel('abc') === 0)

	assert(indentLevel('abc') === 0)
	assert(indentLevel('\tabc') === 1)
	assert(indentLevel('\t\tabc') === 2)
})

// ---------------------------------------------------------------------------

DBG("type lineDesc", "splitLine()")

succeeds(() => {
	resetOneIndent()
	assert(deeplyEquals(splitLine('abc'), [0, 'abc']))
	assert(deeplyEquals(splitLine('\t\tabc'), [2, 'abc']))

	assert(deeplyEquals(splitLine('\tabc'), [1, 'abc']))

	// --- fails since we're now expecting TABs
	throwsError(() =>  splitLine('      abc'))
})

// ---------------------------------------------------------------------------

DBG("indented()")

succeeds(() => {
	resetOneIndent()
	assert(indented('abc') === '\tabc')
	assert(indented('abc', 2) === '\t\tabc')

	assert(indentLevel('\tabc') === 1)
	assert(indented('abc', 2) === (tabs(2) + 'abc'))
	assert(indented('abc', 2) === `${tabs(2)}abc`)
})

// --- Test with blocks

succeeds(() => {
	resetOneIndent()
	assert(indented(`first line
\tsecond line
\t\tthird line`) === `\tfirst line
\t\tsecond line
\t\t\tthird line`)

	assert(indented(`first line
\tsecond line
\t\tthird line`, 2) === `\t\tfirst line
\t\t\tsecond line
\t\t\t\tthird line`)
})

// --- Test with arrays

succeeds(() => {
	resetOneIndent()
	assert(deeplyEquals(indented([
		'first line',
		'\tsecond line',
		'\t\tthird line'
		]), [
		'\tfirst line',
		'\t\tsecond line',
		'\t\t\tthird line'
		]))

	assert(deeplyEquals(indented([
		'first line',
		'\tsecond line',
		'\t\tthird line'
		], 2), [
		'\t\tfirst line',
		'\t\t\tsecond line',
		'\t\t\t\tthird line'
		]))
})

// ---------------------------------------------------------------------------

DBG("undented()")

succeeds(() => {
	resetOneIndent()
	equal(undented(`\tabc
\t\tdef
\t\t\tghi`), `abc
\tdef
\t\tghi`)
})

// ---------------------------------------------------------------------------

// TEST using 3 spaces

// ---------------------------------------------------------------------------

DBG("resetOneIndent()")

succeeds(() => {
	resetOneIndent()
	assert(notdefined(oneIndent))
	assert((indentLevel('\t\tabc') === 2))
	assert((oneIndent === '\t'))
})

succeeds(() => {
	resetOneIndent()
	assert(notdefined(oneIndent))
	assert((indentLevel('   abc') === 1))
	assert((indentLevel('      abc') === 2))
	assert((oneIndent === '   '))
})

// ---------------------------------------------------------------------------

DBG("indentLevel()")

succeeds(() => {
	resetOneIndent()
	assert(indentLevel('abc') === 0)
	assert(indentLevel('   abc') === 1)
	assert(indentLevel('      abc') === 2)
	throwsError(() => indentLevel('\t abc'))
	throwsError(() => indentLevel(' \tabc'))
	assert((indentLevel('abc') === 0))

	assert(indentLevel('abc') === 0)
	assert(indentLevel('   abc') === 1)
	assert(indentLevel('      abc') === 2)
})

// ---------------------------------------------------------------------------

DBG("splitLine()")

succeeds(() => {
	resetOneIndent()
	assert(notdefined(oneIndent))

	assert(deeplyEquals(splitLine('abc'), [0, 'abc']))
	assert(notdefined(oneIndent))
	assert(deeplyEquals(splitLine('   abc'), [1, 'abc']))
	assert(defined(oneIndent))
	assert(deeplyEquals(splitLine('      abc'), [2, 'abc']))
	assert((oneIndent === '   '))

	assert(deeplyEquals(splitLine('   abc'), [1, 'abc']))

	// ---fails since we're now expecting spaces
	throwsError(() => splitLine('\t\tabc'))
})

// ---------------------------------------------------------------------------

DBG("indented()")

succeeds(() => {
	resetOneIndent('   ')
	assert((indented('abc', 2) === '      abc'))
	assert((indented('abc') === '   abc'))

	assert((indentLevel('   abc') === 1))
	assert((indented('abc', 2) === spaces(6) + 'abc'))
})

// --- Test with blocks

succeeds(() => {
	resetOneIndent(spaces(3))
	assert(indented(`first line
${spaces(3)}second line
${spaces(6)}third line`) === `${spaces(3)}first line
${spaces(6)}second line
${spaces(9)}third line`)

	assert(indented(`first line
${spaces(3)}second line
${spaces(6)}third line`, 2) === `${spaces(6)}first line
${spaces(9)}second line
${spaces(12)}third line`)
})

// --- Test with arrays

succeeds(() => {
	resetOneIndent('   ')
	assert(deeplyEquals(indented([
		'first line',
		'   second line',
		'      third line'
		]), [
		'   first line',
		'      second line',
		'         third line'
		]))

	assert(deeplyEquals(indented([
		'first line',
		'   second line',
		'      third line'
		], 2), [
		'      first line',
		'         second line',
		'            third line'
		]))
})

// ---------------------------------------------------------------------------

DBG("undented()")

equal(undented(`${spaces(6)}abc
${spaces(9)}def
${spaces(12)}ghi`), `abc
${spaces(3)}def
${spaces(6)}ghi`)

//# sourceMappingURL=data:application/json;charset=utf-8;base64,