"use strict";
// exec-utils.test.civet

import {
	mkstr, getCmdLine, getProcOpt, getFinalResult,
	execCmd, execCmdSync, cmdSucceeds,
	execCmdResult, getCmdArgs, DBG,
	} from '../src/lib/utils.ts'
import {
	equal, like, succeeds, fails, truthy, falsy,
	} from '../src/lib/unit-test.ts'

const hArgs = getCmdArgs()

// ---------------------------------------------------------------------------

DBG("mkstr(x)")

const buffer = new ArrayBuffer(3)
const view = new Int8Array(buffer)

view[0] = 97
view[1] = 98
view[2] = 99

equal(mkstr('abc'), 'abc')
equal(mkstr(buffer), 'abc')
equal(mkstr(view), 'abc')

DBG("getCmdLine()")

equal(getCmdLine('dothis', ['-a', 'willy']), 'dothis -a willy')

DBG("getProcOpt()")

like(getProcOpt(['-h'], true), {
	args: ['-h'],
	stdout: 'piped',
	stderr: 'piped'
	})

like(getProcOpt(['-h'], false), {
	stdout: 'inherit',
	stderr: 'inherit'
	})

DBG("getFinalResult()")

//     no unit tests yet

DBG("execCmd()");

(async () => {
	const hResult = await execCmd('echo', ["Hello"], 'collect')
	equal(hResult.code, 0)
	equal(hResult.stdout, "Hello\n")
}
	)()

DBG("execCmdSync()")

equal(execCmdSync("echo", ["Hello"]).code, 0);

(() => {
	const hResult = execCmdSync('echo', ["Hello"], 'collect')
	equal(hResult.code, 0)
	equal(hResult.stdout, "Hello\n")
}
	)()

DBG("cmdSucceeds(cmdName, lArgs, hOptions)")

truthy(cmdSucceeds('ls'))
falsy( cmdSucceeds('nosuchcmd'))

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVzdC9leGVjLXV0aWxzLnRlc3QuY2l2ZXQudHN4Iiwic291cmNlcyI6WyJ0ZXN0L2V4ZWMtdXRpbHMudGVzdC5jaXZldCJdLCJtYXBwaW5ncyI6IjtBQUFBLHdCQUF1QjtBQUN2QixBQUFBO0FBQ0EsQUFBQSxNQUFNLENBQUMsQ0FBQztBQUNSLENBQUMsS0FBSyxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsY0FBYyxDQUFDO0FBQy9DLENBQUMsT0FBTyxDQUFDLENBQUMsV0FBVyxDQUFDLENBQUMsV0FBVyxDQUFDO0FBQ25DLENBQUMsYUFBYSxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsR0FBRyxDQUFDO0FBQ2hDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxxQkFBcUI7QUFDN0IsQUFBQSxBQUFBLE1BQU0sQ0FBQyxDQUFDO0FBQ1IsQ0FBQyxLQUFLLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxLQUFLLENBQUM7QUFDN0MsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLHlCQUF5QjtBQUNqQyxBQUFBO0FBQ0EsQUFBQSxBQUFLLE1BQUwsS0FBSyxDQUFDLENBQUUsQ0FBQyxVQUFVLENBQUMsQ0FBQztBQUNyQixBQUFBO0FBQ0EsQUFBQSw4RUFBNkU7QUFDN0UsQUFBQTtBQUNBLEFBQUEsQUFBQSxHQUFHLENBQUEsQUFBQyxVQUFVLENBQUE7QUFDZCxBQUFBO0FBQ0EsQUFBQSxBQUFNLE1BQU4sTUFBTSxDQUFDLENBQUUsQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQztBQUM1QixBQUFBLEFBQUksTUFBSixJQUFJLENBQUMsQ0FBRSxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDO0FBQzdCLEFBQUE7QUFDQSxBQUFBLEFBQUEsSUFBSSxDQUFDLENBQUMsQ0FBQyxDLENBQUUsQ0FBQyxFQUFFO0FBQ1osQUFBQSxBQUFBLElB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LENBQUEsQUFBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFBO0FBQ3RCLEFBQUEsQ0FBQyxLQUFLLENBQUEsQUFBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsU0FBUyxDO0FBQUEsQ0FBQTtBQUNoQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ0osQUFBQTtBQUNBLEFBQUEsQUFBQSxHQUFHLENBQUEsQUFBQyx1Q0FBdUMsQ0FBQTtBQUMzQyxBQUFBO0FBQ0EsQUFBQSxBQUFBLE1BQU0sQ0FBQSxBQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUN4QixBQUFBLEFBQUEsS0FBSyxDQUFBLENBQUUsV0FBVyxDQUFDLFdBQVcsQ0FBQyxDQUFBO0FBQy9CIiwibmFtZXMiOltdLCJzb3VyY2VzQ29udGVudCI6WyIjIGV4ZWMtdXRpbHMudGVzdC5jaXZldFxuXG5pbXBvcnQge1xuXHRta3N0ciwgZ2V0Q21kTGluZSwgZ2V0UHJvY09wdCwgZ2V0RmluYWxSZXN1bHQsXG5cdGV4ZWNDbWQsIGV4ZWNDbWRTeW5jLCBjbWRTdWNjZWVkcyxcblx0ZXhlY0NtZFJlc3VsdCwgZ2V0Q21kQXJncywgREJHLFxuXHR9IGZyb20gJy4uL3NyYy9saWIvdXRpbHMudHMnXG5pbXBvcnQge1xuXHRlcXVhbCwgbGlrZSwgc3VjY2VlZHMsIGZhaWxzLCB0cnV0aHksIGZhbHN5LFxuXHR9IGZyb20gJy4uL3NyYy9saWIvdW5pdC10ZXN0LnRzJ1xuXG5oQXJncyA6PSBnZXRDbWRBcmdzKClcblxuIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuREJHIFwibWtzdHIoeClcIlxuXG5idWZmZXIgOj0gbmV3IEFycmF5QnVmZmVyKDMpXG52aWV3IDo9IG5ldyBJbnQ4QXJyYXkoYnVmZmVyKVxuXG52aWV3WzBdID0gOTdcbnZpZXdbMV0gPSA5OFxudmlld1syXSA9IDk5XG5cbmVxdWFsIG1rc3RyKCdhYmMnKSwgJ2FiYydcbmVxdWFsIG1rc3RyKGJ1ZmZlciksICdhYmMnXG5lcXVhbCBta3N0cih2aWV3KSwgJ2FiYydcblxuREJHIFwiZ2V0Q21kTGluZSgpXCJcblxuZXF1YWwgZ2V0Q21kTGluZSgnZG90aGlzJywgWyctYScsICd3aWxseSddKSwgJ2RvdGhpcyAtYSB3aWxseSdcblxuREJHIFwiZ2V0UHJvY09wdCgpXCJcblxubGlrZSBnZXRQcm9jT3B0KFsnLWgnXSwgdHJ1ZSksIHtcblx0YXJnczogWyctaCddXG5cdHN0ZG91dDogJ3BpcGVkJ1xuXHRzdGRlcnI6ICdwaXBlZCdcblx0fVxuXG5saWtlIGdldFByb2NPcHQoWyctaCddLCBmYWxzZSksIHtcblx0c3Rkb3V0OiAnaW5oZXJpdCdcblx0c3RkZXJyOiAnaW5oZXJpdCdcblx0fVxuXG5EQkcgXCJnZXRGaW5hbFJlc3VsdCgpXCJcblxuIyAgICAgbm8gdW5pdCB0ZXN0cyB5ZXRcblxuREJHIFwiZXhlY0NtZCgpXCJcblxuKCgpID0+XG5cdGhSZXN1bHQgOj0gYXdhaXQgZXhlY0NtZCgnZWNobycsIFtcIkhlbGxvXCJdLCAnY29sbGVjdCcpXG5cdGVxdWFsIGhSZXN1bHQuY29kZSwgMFxuXHRlcXVhbCBoUmVzdWx0LnN0ZG91dCwgXCJIZWxsb1xcblwiXG5cdCkoKVxuXG5EQkcgXCJleGVjQ21kU3luYygpXCJcblxuZXF1YWwgZXhlY0NtZFN5bmMoXCJlY2hvXCIsIFtcIkhlbGxvXCJdKS5jb2RlLCAwXG5cbigoKSA9PlxuXHRoUmVzdWx0IDo9IGV4ZWNDbWRTeW5jKCdlY2hvJywgW1wiSGVsbG9cIl0sICdjb2xsZWN0Jylcblx0ZXF1YWwgaFJlc3VsdC5jb2RlLCAwXG5cdGVxdWFsIGhSZXN1bHQuc3Rkb3V0LCBcIkhlbGxvXFxuXCJcblx0KSgpXG5cbkRCRyBcImNtZFN1Y2NlZWRzKGNtZE5hbWUsIGxBcmdzLCBoT3B0aW9ucylcIlxuXG50cnV0aHkgY21kU3VjY2VlZHMoJ2xzJylcbmZhbHN5ICBjbWRTdWNjZWVkcygnbm9zdWNoY21kJylcbiJdfQ==