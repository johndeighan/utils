"use strict";
// exec.lib.test.civet

import {
	isEmpty, nonEmpty,
	mkstr, getCmdLine, getProcOpt, typeCheck,
	execCmd, execCmdSync, cmdSucceeds, setDirTree,
	TExecResult, getCmdArgs, DBG, o,
	} from '../src/lib/utils.lib.ts'
import {
	equal, like, succeeds, fails, truthy, falsy,
	} from '../src/lib/unit-test.lib.ts'

const hArgs = getCmdArgs()

// ---------------------------------------------------------------------------

const setup = (): void => {

	DBG("setDirTree()")

	setDirTree('test/exec', `bad.civet
	str: string := undef
`)
}

setup()

// ---------------------------------------------------------------------------

DBG("mkstr(x)")

const buffer = new ArrayBuffer(3)
const view = new Int8Array(buffer)

view[0] = 97
view[1] = 98
view[2] = 99

equal(mkstr('abc'), 'abc')
equal(mkstr(buffer), 'abc')
equal(mkstr(view), 'abc')

DBG("getCmdLine()")

equal(getCmdLine('dothis', ['-a', 'willy']), 'dothis -a willy')

DBG("getProcOpt()")

like(getProcOpt(['-h'], true), {
	args: ['-h'],
	stdout: 'piped',
	stderr: 'piped'
	})

like(getProcOpt(['-h'], false), {
	stdout: 'inherit',
	stderr: 'inherit'
	})

DBG("execCmd()", "type TExecResult");

(async () => {
	const hResult = await execCmd('echo', ["Hello"], o`collect`)
	equal(hResult.code, 0)
	equal(hResult.stdout, "Hello\n")
}
	)()

DBG("execCmdSync()", "type TExecResult")

equal(execCmdSync("echo", ["Hello"]).code, 0);

(() => {
	const hResult = execCmdSync('echo', ["Hello"], o`collect`)
	equal(hResult.code, 0)
	equal(hResult.stdout, "Hello\n")
}
	)()

DBG("cmdSucceeds(cmdName, lArgs, hOptions)")

truthy(cmdSucceeds('ls'))
falsy( cmdSucceeds('nosuchcmd'))

DBG("typeCheck(tsCode)")

truthy(isEmpty(typeCheck("let s: string = 'abc';")))
truthy(nonEmpty(typeCheck("let s: string = 42;")))

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVzdC9leGVjLmxpYi50ZXN0LmNpdmV0LnRzeCIsInNvdXJjZXMiOlsidGVzdC9leGVjLmxpYi50ZXN0LmNpdmV0Il0sIm1hcHBpbmdzIjoiO0FBQUEsc0JBQXFCO0FBQ3JCLEFBQUE7QUFDQSxBQUFBLE1BQU0sQ0FBQyxDQUFDO0FBQ1IsQ0FBQyxPQUFPLENBQUMsQ0FBQyxRQUFRLENBQUM7QUFDbkIsQ0FBQyxLQUFLLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxTQUFTLENBQUM7QUFDMUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxXQUFXLENBQUMsQ0FBQyxXQUFXLENBQUMsQ0FBQyxVQUFVLENBQUM7QUFDL0MsQ0FBQyxXQUFXLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDakMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLHlCQUF5QjtBQUNqQyxBQUFBLEFBQUEsTUFBTSxDQUFDLENBQUM7QUFDUixDQUFDLEtBQUssQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEtBQUssQ0FBQztBQUM3QyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsNkJBQTZCO0FBQ3JDLEFBQUE7QUFDQSxBQUFBLEFBQUssTUFBTCxLQUFLLENBQUMsQ0FBRSxDQUFDLFVBQVUsQ0FBQyxDQUFDO0FBQ3JCLEFBQUE7QUFDQSxBQUFBLDhFQUE2RTtBQUM3RSxBQUFBO0FBQ0EsQUFBQSxBQUFLLE1BQUwsS0FBSyxDQUFDLENBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUEsQ0FBQTtBQUNwQixBQUFBO0FBQ0EsQUFBQSxDQUFDLEdBQUcsQ0FBQSxBQUFDLGNBQWMsQ0FBQTtBQUNuQixBQUFBO0FBQ0EsQUFBQSxDQUFDLFVBQVUsQ0FBQSxBQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUc7QUFDNUI7QUFDQSxB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bGliLnRlc3QuY2l2ZXRcblxuaW1wb3J0IHtcblx0aXNFbXB0eSwgbm9uRW1wdHksXG5cdG1rc3RyLCBnZXRDbWRMaW5lLCBnZXRQcm9jT3B0LCB0eXBlQ2hlY2ssXG5cdGV4ZWNDbWQsIGV4ZWNDbWRTeW5jLCBjbWRTdWNjZWVkcywgc2V0RGlyVHJlZSxcblx0VEV4ZWNSZXN1bHQsIGdldENtZEFyZ3MsIERCRywgbyxcblx0fSBmcm9tICcuLi9zcmMvbGliL3V0aWxzLmxpYi50cydcbmltcG9ydCB7XG5cdGVxdWFsLCBsaWtlLCBzdWNjZWVkcywgZmFpbHMsIHRydXRoeSwgZmFsc3ksXG5cdH0gZnJvbSAnLi4vc3JjL2xpYi91bml0LXRlc3QubGliLnRzJ1xuXG5oQXJncyA6PSBnZXRDbWRBcmdzKClcblxuIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuc2V0dXAgOj0gKCk6IHZvaWQgPT5cblxuXHREQkcgXCJzZXREaXJUcmVlKClcIlxuXG5cdHNldERpclRyZWUgJ3Rlc3QvZXhlYycsIFwiXCJcIlxuXHRcdGJhZC5jaXZldFxuXHRcdFx0c3RyOiBzdHJpbmcgOj0gdW5kZWZcblxuXHRcdFwiXCJcIlxuXG5zZXR1cCgpXG5cbiMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbkRCRyBcIm1rc3RyKHgpXCJcblxuYnVmZmVyIDo9IG5ldyBBcnJheUJ1ZmZlcigzKVxudmlldyA6PSBuZXcgSW50OEFycmF5KGJ1ZmZlcilcblxudmlld1swXSA9IDk3XG52aWV3WzFdID0gOThcbnZpZXdbMl0gPSA5OVxuXG5lcXVhbCBta3N0cignYWJjJyksICdhYmMnXG5lcXVhbCBta3N0cihidWZmZXIpLCAnYWJjJ1xuZXF1YWwgbWtzdHIodmlldyksICdhYmMnXG5cbkRCRyBcImdldENtZExpbmUoKVwiXG5cbmVxdWFsIGdldENtZExpbmUoJ2RvdGhpcycsIFsnLWEnLCAnd2lsbHknXSksICdkb3RoaXMgLWEgd2lsbHknXG5cbkRCRyBcImdldFByb2NPcHQoKVwiXG5cbmxpa2UgZ2V0UHJvY09wdChbJy1oJ10sIHRydWUpLCB7XG5cdGFyZ3M6IFsnLWgnXVxuXHRzdGRvdXQ6ICdwaXBlZCdcblx0c3RkZXJyOiAncGlwZWQnXG5cdH1cblxubGlrZSBnZXRQcm9jT3B0KFsnLWgnXSwgZmFsc2UpLCB7XG5cdHN0ZG91dDogJ2luaGVyaXQnXG5cdHN0ZGVycjogJ2luaGVyaXQnXG5cdH1cblxuREJHIFwiZXhlY0NtZCgpXCIsIFwidHlwZSBURXhlY1Jlc3VsdFwiXG5cbigoKSA9PlxuXHRoUmVzdWx0IDo9IGF3YWl0IGV4ZWNDbWQoJ2VjaG8nLCBbXCJIZWxsb1wiXSwgbydjb2xsZWN0Jylcblx0ZXF1YWwgaFJlc3VsdC5jb2RlLCAwXG5cdGVxdWFsIGhSZXN1bHQuc3Rkb3V0LCBcIkhlbGxvXFxuXCJcblx0KSgpXG5cbkRCRyBcImV4ZWNDbWRTeW5jKClcIiwgXCJ0eXBlIFRFeGVjUmVzdWx0XCJcblxuZXF1YWwgZXhlY0NtZFN5bmMoXCJlY2hvXCIsIFtcIkhlbGxvXCJdKS5jb2RlLCAwXG5cbigoKSA9PlxuXHRoUmVzdWx0IDo9IGV4ZWNDbWRTeW5jKCdlY2hvJywgW1wiSGVsbG9cIl0sIG8nY29sbGVjdCcpXG5cdGVxdWFsIGhSZXN1bHQuY29kZSwgMFxuXHRlcXVhbCBoUmVzdWx0LnN0ZG91dCwgXCJIZWxsb1xcblwiXG5cdCkoKVxuXG5EQkcgXCJjbWRTdWNjZWVkcyhjbWROYW1lLCBsQXJncywgaE9wdGlvbnMpXCJcblxudHJ1dGh5IGNtZFN1Y2NlZWRzKCdscycpXG5mYWxzeSAgY21kU3VjY2VlZHMoJ25vc3VjaGNtZCcpXG5cbkRCRyBcInR5cGVDaGVjayh0c0NvZGUpXCJcblxudHJ1dGh5IGlzRW1wdHkodHlwZUNoZWNrKFwibGV0IHM6IHN0cmluZyA9ICdhYmMnO1wiKSlcbnRydXRoeSBub25FbXB0eSh0eXBlQ2hlY2soXCJsZXQgczogc3RyaW5nID0gNDI7XCIpKVxuIl19