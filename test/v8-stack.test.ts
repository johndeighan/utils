"use strict";
// v8-stack.test.civet

import {
	undef, defined, notdefined, assert, croak,
	DBG,
	compileAllFiles, relpath, getCmdArgs,
	} from '../src/lib/utils.ts'
import {
	getV8Stack, getMyCaller,
	getMyOutsideCaller, getV8StackStr,
	stackFrame,
	} from '../src/lib/v8-stack.ts'
import {
	equal, like,
	} from '../src/lib/unit-test.ts'

import {getBoth} from './v8-stack/v8-module.ts'

const hArgs = getCmdArgs()

// ---------------------------------------------------------------------------

DBG("type stackFrame")
DBG("getV8Stack()");

(function() {
	let stack1: stackFrame[] = []
	let stack2: stackFrame[] = []

	const main = () => {
		func1()
		func2()
	}

	const func1 = function() {
		stack1 = getV8Stack()
		return
	}

	const func2 = function() {
		stack2 = getV8Stack()
		return
	}

	main()
	like(stack1, [
		{
			type: 'function',
			name: 'func1',
			source: 'test/v8-stack.test.civet',
			line: 35
			},
		{
			type: 'function',
			name: 'main',
			source: 'test/v8-stack.test.civet',
			line: 31
			},
		{
			type: 'function',
			name: '<anon>',
			source: 'test/v8-stack.test.civet',
			line: 42
			},
		{
			type: 'script',
			source: 'test/v8-stack.test.civet',
			line: 94
			}
		])

	like(stack2, [
		{
			type: 'function',
			name: 'func2',
			source: 'test/v8-stack.test.civet',
			line: 39
			},
		{
			type: 'function',
			name: 'main',
			source: 'test/v8-stack.test.civet',
			line: 32
			},
		{
			type: 'function',
			name: '<anon>',
			source: 'test/v8-stack.test.civet',
			line: 42
			},
		{
			type: 'script',
			source: 'test/v8-stack.test.civet',
			line: 94
			}
		])
}
	)()

// ---------------------------------------------------------------------------

DBG("getV8StackStr()");

(function() {
	let stack1: string = ''
	let stack2: string = ''

	const main = function() {
		func1()
		func2()
	}

	const func1 = function() {
		stack1 = getV8StackStr()
		return
	}

	const func2 = function() {
		stack2 = getV8StackStr()
		return
	}

	main()
	equal(stack1, `[function func1    ] test/v8-stack.test.civet:109:11
[function main     ] test/v8-stack.test.civet:105:2
[function <anon>   ] test/v8-stack.test.civet:116:1
[script            ] test/v8-stack.test.civet:130:2`)

	equal(stack2, `[function func2    ] test/v8-stack.test.civet:113:11
[function main     ] test/v8-stack.test.civet:106:2
[function <anon>   ] test/v8-stack.test.civet:116:1
[script            ] test/v8-stack.test.civet:130:2`)
}
	)()

// ---------------------------------------------------------------------------

DBG("getMyCaller()");

(function() {
	let caller1: (stackFrame | undefined) = undef
	let caller2: (stackFrame | undefined) = undef

	const main = function() {
		func1()
		func2()
	}

	const func1 = function() {
		caller1 = getMyCaller()
	}

	const func2 = function() {
		caller2 = getMyCaller()
		return
	}

	main()
	like(caller1, {
		type: 'function',
		name: 'main',
		source: 'test/v8-stack.test.civet'
		})
	like(caller2, {
		type: 'function',
		name: 'main',
		source: 'test/v8-stack.test.civet'
		})
}
	)();

// ---------------------------------------------------------------------------

(function() {
	let hCaller: (stackFrame | undefined) = undef

	const main = function() {
		func1()
		func2()
	}

	const func1 = function() {
		return
	}

	const func2 = function() {
		hCaller = getMyCaller()
		return
	}

	// ------------------------------------------------------------------------

	main()

	like(hCaller, {
		type: 'function',
		name: 'main',
		source: 'test/v8-stack.test.civet'
		})
}

	)();

// ---------------------------------------------------------------------------

(function() {
	let lCallers1: ((stackFrame | undefined))[] = []
	let lCallers2: ((stackFrame | undefined))[] = []

	const main = function() {
		func1()
		func2()
	}

	const func1 = function() {
		lCallers1 = getBoth()
	}

	const func2 = function() {
		lCallers2 = getBoth()
		return
	}

	main()
	like(lCallers1[0], {
		type: 'function',
		name: 'secondFunc',
		source: 'test/v8-stack/v8-module.civet'
		})
	like(lCallers1[1], {
		type: 'function',
		name: 'secondFunc',
		source: 'test/v8-stack/v8-module.civet'
		})
	like(lCallers2[0], {
		type: 'function',
		name: 'secondFunc',
		source: 'test/v8-stack/v8-module.civet'
		})
	like(lCallers2[1], {
		type: 'function',
		name: 'secondFunc',
		source: 'test/v8-stack/v8-module.civet'
		})
}

	)();

// ---------------------------------------------------------------------------

(async () => {
	const func1 = async () => {
		return await func2()
	}

	const func2 = async () => {
		return await getV8StackStr()
	}

	equal(await func1(), `[function func2    ] test/v8-stack.test.civet:240:15
[function func1    ] test/v8-stack.test.civet:237:15
[function <anon>   ] test/v8-stack.test.civet:242:13
[script            ] test/v8-stack.test.civet:249:2`)
}

	)();

// ---------------------------------------------------------------------------

(async () => {
	const func1 = async () => {
		func2()
		return await getV8StackStr()
	}

	const func2 = () => {
		return 2 * 2
	}

	equal(await func1(), `[function func1    ] test/v8-stack.test.civet:256:15
[function <anon>   ] test/v8-stack.test.civet:261:13
[script            ] test/v8-stack.test.civet:266:2`)
}
	)();

// ---------------------------------------------------------------------------

(function() {
	let caller1: (stackFrame | undefined) = undef
	let caller2: (stackFrame | undefined) = undef

	const main = function() {
		func1()
		func2()
	}

	const func1 = function() {
		caller1 = getMyCaller()
	}

	const func2 = function() {
		caller2 = getMyCaller()
		return
	}

	main()
	like(caller1, {
		type: 'function',
		name: 'main',
		source: 'test/v8-stack.test.civet'
		})
	like(caller2, {
		type: 'function',
		name: 'main',
		source: 'test/v8-stack.test.civet'
		})
}
	)()

// ---------------------------------------------------------------------------

DBG("getMyOutsideCaller()");

(function() {
	let caller1: (stackFrame | undefined) = undef
	let caller2: (stackFrame | undefined) = undef

	const main = function() {
		func1()
		func2()
	}

	const func1 = function() {
		caller1 = getMyOutsideCaller()
	}

	const func2 = function() {
		caller2 = getMyOutsideCaller()
		return
	}

	main()
	like(caller1, {
		type: 'function',
		name: 'main',
		source: 'test/v8-stack.test.civet'
		})
	like(caller2, {
		type: 'function',
		name: 'main',
		source: 'test/v8-stack.test.civet'
		})
}
	)()


//# sourceMappingURL=data:application/json;charset=utf-8;base64,