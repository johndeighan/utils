"use strict";
// parser.lib.test.civet

import {
	undef, hash, getCmdArgs, DBG, o,
	} from '../src/lib/utils.lib.ts'
// import {
// 	KeppelGrammar,
// 	} from './parser/keppel.grammar.ts'
import {
	TState, getNewState, StringMatcher, RegexMatcher,
	All, Any, Plus, Optional, Star,
	getParser, getLineAndColumn, Node,
	} from '../src/lib/parser.lib.ts'
import {
	equal, same, like, succeeds, fails, truthy, falsy,
	matches, isType, notType, objListLike,
	} from '../src/lib/unit-test.lib.ts'

getCmdArgs()
//  htmlParse := getParser<hash>(KeppelGrammar)

// ---------------------------------------------------------------------------
// --- test getLineAndColumn()

equal(getLineAndColumn('abc\ndef\nghi', 5), [2, 2])
equal(getLineAndColumn('abcd\nefgh\nijkl', 5), [2, 1])

// ---------------------------------------------------------------------------
// --- test getNewState()

equal(getNewState('abc'), {
	text: 'abc',
	pos: 0
	})

equal(getNewState('abc', 2), {
	text: 'abc',
	pos: 2
	});

// ---------------------------------------------------------------------------
// --- test StringMatcher()

(() => {
	const rule = StringMatcher('abc')
	like(rule(getNewState('abcdef')), {pos: 3})
	fails(() => rule(getNewState('abcdef', 3)))
}
	)();

(() => {
	const rule = StringMatcher('def')
	like(rule(getNewState('abcdef')), {pos: 0})
	like(rule(getNewState('abcdef', 3)), {pos: 6})

	// --- On failure to match, should return undef
	const $ = getNewState('abcdef')
	equal(rule($), undef)
}
	)();

// ---------------------------------------------------------------------------
// --- test RegexMatcher()

(() => {
	const rule = RegexMatcher(/^[\.\#]\s/)
	like(rule(getNewState('. abc')), {pos: 2})
	fails(() => rule(getNewState('. abc', 1)))
}
	)();

(() => {
	const rule = RegexMatcher(/^[\.\#]\s/)
	like(rule(getNewState('abc . def')), {pos: 0})
	like(rule(getNewState('abc . def', 4)), {pos: 6})

	// --- On failure to match, should return undef
	const $ = getNewState('abc . abc')
	equal(rule($), undef)
}
	)();

// ---------------------------------------------------------------------------
// --- test Node<T>

(() => {
	const reducer = (
			$: TState,
			$next: TState
			): string => {
		return 'X'
	}

	// --- This rule will attempt to match the string 'abc'
	//     when it matches, the reducer is called, and
	//     what it returns is put on the stack
	const rule = Node<string>('abc', reducer)

	const $ = getNewState('abcdef')
	equal(rule($), {
	   "text": "abcdef",
	   "stack": ['X'],
		"pos": 3
		})
}
	)()

// ---------------------------------------------------------------------------
// Build and test some very simple rules

const reIdent = /^([a-zA-Z_$][a-zA-Z0-9_$]*)/
reIdent.toString = () => 'reIdent'

const reNumber = /^((?:[0-9]+\.?[0-9]*|\.[0-9]+)(?:[eE][-+]?[0-9]+)?)\b/
reNumber.toString = () => 'reNumber'

const reOp = /[+\-*\/]/
reOp.toString = () => 'reOp'

// --- Define the grammer productions

const value = Any([reIdent, reNumber])
value.toString = () => 'value'

const stmt = Any([
	All([reIdent, '=', value]),
	All([value, reOp, value])
	])
stmt.toString = () => 'stmt'

const program = All([
	stmt,
	Star(All([';', stmt]))
	])
program.toString = () => 'program';

(() => {
	const parse = getParser<string>(reIdent)
	succeeds(() => parse('abc'))
	succeeds(() => parse(' abc  '))  // --- whitespace skipped
	fails(   () => parse('1abc'))
	fails(   () => parse('abc def'))
	succeeds(() => getParser<string>(reIdent, o`partial`)('abc def'))
}
	)();

(() => {
	const parse = getParser<string>(reOp)
	succeeds(() => parse('+'))
	succeeds(() => parse('  -  '))
	succeeds(() => parse('*'))
	succeeds(() => parse('  /  '))
	fails(   () => parse('!'))
}
	)();

(() => {
	const parse = getParser<string>(value)
	succeeds(() => parse('n'))
	succeeds(() => parse('  n  '))
	succeeds(() => parse('42'))
	succeeds(() => parse('  42  '))
	fails(   () => parse('!'))
}
	)();

(() => {
	const parse = getParser<string>(stmt)
	succeeds(() => parse('n = 42'))
	succeeds(() => parse('  n=42  '))
	succeeds(() => parse('a=b'))
	succeeds(() => parse('  a = b  '))
	fails(   () => parse('!'))
}
	)();

(() => {
	const parse = getParser<string>(reNumber)
	succeeds(() => parse('42'))
	succeeds(() => parse('  42  '))
	succeeds(() => parse('3.14'))
	succeeds(() => parse('  3.14  '))
	succeeds(() => parse('3.14e5'))
	succeeds(() => parse('  3.14E5  '))
	fails(   () => parse('!'))
}
	)();

(() => {
	const parse = getParser<string>(program)
	succeeds(() => parse('x = 42; y = 33; x*y'))
	succeeds(() => parse(`x = 42;
y = 33;
x * y`))
}
	)()


//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVzdC9wYXJzZXIubGliLnRlc3QuY2l2ZXQudHN4Iiwic291cmNlcyI6WyJ0ZXN0L3BhcnNlci5saWIudGVzdC5jaXZldCJdLCJtYXBwaW5ncyI6IjtBQUFBLHdCQUF1QjtBQUN2QixBQUFBO0FBQ0EsQUFBQSxNQUFNLENBQUMsQ0FBQztBQUNSLENBQUMsS0FBSyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ2pDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyx5QkFBeUI7QUFDakMsQUFBQSxXQUFVO0FBQ1YsQUFBQSxrQkFBaUI7QUFDakIsQUFBQSx1Q0FBc0M7QUFDdEMsQUFBQSxBQUFBLE1BQU0sQ0FBQyxDQUFDO0FBQ1IsQ0FBQyxNQUFNLENBQUMsQ0FBQyxXQUFXLENBQUMsQ0FBQyxhQUFhLENBQUMsQ0FBQyxZQUFZLENBQUM7QUFDbEQsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxJQUFJLENBQUM7QUFDaEMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLElBQUksQ0FBQztBQUNuQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsMEJBQTBCO0FBQ2xDLEFBQUEsQUFBQSxNQUFNLENBQUMsQ0FBQztBQUNSLENBQUMsS0FBSyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsS0FBSyxDQUFDO0FBQ25ELENBQUMsT0FBTyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsV0FBVyxDQUFDO0FBQ3ZDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyw2QkFBNkI7QUFDckMsQUFBQTtBQUNBLEFBQUEsQUFBQSxVQUFVLENBQUMsQ0FBQztBQUNaLEFBQUEsK0NBQThDO0FBQzlDLEFBQUE7QUFDQSxBQUFBLDhFQUE2RTtBQUM3RSxBQUFBLDhCQUE2QjtBQUM3QixBQUFBO0FBQ0EsQUFBQSxBQUFBLEtBQUssQ0FBQSxBQUFDLGdCQUFnQixDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQTtBQUNsRCxBQUFBLEFBQUEsS0FBSyxDQUFBLEFBQUMsZ0JBQWdCLENBQUMsa0JBQWtCLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7QUFDckQsQUFBQTtBQUNBLEFBQUEsOEVBQTZFO0FBQzdFLEFBQUEseUJBQXdCO0FBQ3hCLEFBQUE7QUFDQSxBQUFBLEFBQUEsS0FBSyxDQUFBLEFBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUMzQixBQUFBLENBQUMsSUFBSSxDQUFDLENBQUMsS0FBSyxDQUFBO0FBQ1osQUFBQSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7QUFDUCxDQUFDLENBQUMsQ0FBQTtBQUNGLEFBQUE7QUFDQSxBQUFBLEFBQUEsS0FBSyxDQUFBLEFBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUM5QixBQUFBLENBQUMsSUFBSSxDQUFDLENBQUMsS0FBSyxDQUFBO0FBQ1osQUFBQSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7QUFDUCxDQUFDLENBQUMsQyxDQUFBO0FBQ0YsQUFBQTtBQUNBLEFBQUEsOEVBQTZFO0FBQzdFLEFBQUEsMkJBQTBCO0FBQzFCLEFBQUE7QUFDQSxBQUFBLEFBQUEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUEsQ0FBQTtBQUNOLEFBQUEsQ0FBSyxNQUFKLElBQUksQ0FBQyxDQUFFLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQztBQUM3QixBQUFBLENBQUMsSUFBSSxDQUFBLEFBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQTtBQUMzQyxBQUFBLENBQUMsS0FBSyxDQUFBLEFBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQztBQUFBLENBQUE7QUFDM0MsQ0FBQyxDQUFDLENBQUMsQyxDQUFDO0FBQ0osQUFBQTtBQUNBLEFBQUEsQUFBQSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQSxDQUFBO0FBQ04sQUFBQSxDQUFLLE1BQUosSUFBSSxDQUFDLENBQUUsQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDO0FBQzdCLEFBQUEsQ0FBQyxJQUFJLENBQUEsQUFBQyxJQUFJLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBO0FBQzNDLEFBQUEsQ0FBQyxJQUFJLENBQUEsQUFBQyxJQUFJLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBO0FBQzlDLEFBQUE7QUFDQSxBQUFBLENBQUMsK0NBQThDO0FBQy9DLEFBQUEsQ0FBRSxNQUFELENBQUMsQ0FBQyxDQUFFLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQztBQUMzQixBQUFBLENBQUMsS0FBSyxDQUFBLEFBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDO0FBQUEsQ0FBQTtBQUNyQixDQUFDLENBQUMsQ0FBQyxDLENBQUM7QUFDSixBQUFBO0FBQ0EsQUFBQSw4RUFBNkU7QUFDN0UsQUFBQSwwQkFBeUI7QUFDekIsQUFBQTtBQUNBLEFBQUEsQUFBQSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQSxDQUFBO0FBQ04sQUFBQSxDQUFLLE1BQUosSUFBSSxDQUFDLENBQUUsQ0FBQyxZQUFZLENBQUMsV0FBVyxDQUFDO0FBQ2xDLEFBQUEsQ0FBQyxJQUFJLENBQUEsQUFBQyxJQUFJLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBO0FBQzFDLEFBQUEsQ0FBQyxLQUFLLENBQUEsQUFBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDO0FBQUEsQ0FBQTtBQUMxQyxDQUFDLENBQUMsQ0FBQyxDLENBQUM7QUFDSixBQUFBO0FBQ0EsQUFBQSxBQUFBLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFBLENBQUE7QUFDTixBQUFBLENBQUssTUFBSixJQUFJLENBQUMsQ0FBRSxDQUFDLFlBQVksQ0FBQyxXQUFXLENBQUM7QUFDbEMsQUFBQSxDQUFDLElBQUksQ0FBQSxBQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7QUFDOUMsQUFBQSxDQUFDLElBQUksQ0FBQSxBQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7QUFDakQsQUFBQTtBQUNBLEFBQUEsQ0FBQywrQ0FBOEM7QUFDL0MsQUFBQSxDQUFFLE1BQUQsQ0FBQyxDQUFDLENBQUUsQ0FBQyxXQUFXLENBQUMsV0FBVyxDQUFDO0FBQzlCLEFBQUEsQ0FBQyxLQUFLLENBQUEsQUFBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLEM7QUFBQSxDQUFBO0FBQ3JCLENBQUMsQ0FBQyxDQUFDLEMsQ0FBQztBQUNKLEFBQUE7QUFDQSxBQUFBLDhFQUE2RTtBQUM3RSxBQUFBLG1CQUFrQjtBQUNsQixBQUFBO0FBQ0EsQUFBQSxBQUFBLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFBLENBQUE7QUFDTixBQUFBLENBQVEsTUFBUCxPQUFPLENBQUMsQ0FBRSxDQUFDLENBQUM7QUFDYixBQUFBLEdBQUcsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFBO0FBQ1osQUFBQSxHQUFHLEtBQUssQ0FBQyxDQUFDLE1BQU07QUFDaEIsR0FBRyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFBLENBQUE7QUFDZixBQUFBLEVBQUUsTUFBTSxDQUFDLEc7Q0FBRyxDQUFBO0FBQ1osQUFBQTtBQUNBLEFBQUEsQ0FBQyx1REFBc0Q7QUFDdkQsQUFBQSxDQUFDLGtEQUFpRDtBQUNsRCxBQUFBLENBQUMsMENBQXlDO0FBQzFDLEFBQUEsQ0FBSyxNQUFKLElBQUksQ0FBQyxDQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLE9BQU8sQ0FBQztBQUNyQyxBQUFBO0FBQ0EsQUFBQSxDQUFFLE1BQUQsQ0FBQyxDQUFDLENBQUUsQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDO0FBQzNCLEFBQUEsQ0FBQyxLQUFLLENBQUEsQUFBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ2pCLEFBQUEsSUFBSSxNQUFNLENBQUMsQ0FBQyxRQUFRLENBQUM7QUFDckIsQUFBQSxJQUFJLE9BQU8sQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDbkIsQUFBQSxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUM7QUFDVixFQUFFLENBQUMsQztBQUFBLENBQUE7QUFDSCxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ0osQUFBQTtBQUNBLEFBQUEsOEVBQTZFO0FBQzdFLEFBQUEsd0NBQXVDO0FBQ3ZDLEFBQUE7QUFDQSxBQUFBLEFBQU8sTUFBUCxPQUFPLENBQUMsQ0FBRSxDQUFDLENBQUcsRUFBRSxBQUFDLFVBQVUsQUFBQyxhQUFhLENBQUMsQUFBQyxDQUFDLEFBQUMsQ0FBRztBQUNoRCxBQUFBLEFBQUEsT0FBTyxDQUFDLFFBQVEsQyxDQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLFNBQVM7QUFDbEMsQUFBQTtBQUNBLEFBQUEsQUFBUSxNQUFSLFFBQVEsQ0FBQyxDQUFFLENBQUMsQ0FBRyxDQUFDLEFBQ2YsQ0FBQyxBQUNBLEdBQUcsQUFDRixLQUFLLENBQUMsQUFBQyxFQUFFLENBQUMsQUFBQyxLQUFLLENBQUMsQUFBQyxDQUFDLEFBQUMsRUFBRSxBQUFDLEtBQUssQ0FBQyxBQUM3QixDQUFDLEFBQ0YsR0FBRyxBQUNGLElBQUksQUFBQyxJQUFJLENBQUMsQUFBQyxLQUFLLENBQUMsQUFDakIsRUFBRSxBQUNILENBQUMsRUFBRSxBQUNKLENBQUc7QUFDSixBQUFBLEFBQUEsUUFBUSxDQUFDLFFBQVEsQyxDQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLFVBQVU7QUFDcEMsQUFBQTtBQUNBLEFBQUEsQUFBSSxNQUFKLElBQUksQ0FBQyxDQUFFLENBQUMsVUFBVTtBQUNsQixBQUFBLEFBQUEsSUFBSSxDQUFDLFFBQVEsQyxDQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLE1BQU07QUFDNUIsQUFBQTtBQUNBLEFBQUEscUNBQW9DO0FBQ3BDLEFBQUE7QUFDQSxBQUFBLEFBQUssTUFBTCxLQUFLLENBQUMsQ0FBRSxDQUFDLEdBQUcsQ0FBQSxBQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUE7QUFDaEMsQUFBQSxBQUFBLEtBQUssQ0FBQyxRQUFRLEMsQ0FBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxPQUFPO0FBQzlCLEFBQUE7QUFDQSxBQUFBLEFBQUksTUFBSixJQUFJLENBQUMsQ0FBRSxDQUFDLEdBQUcsQ0FBQSxBQUFDLENBQUM7QUFDYixBQUFBLENBQUMsR0FBRyxDQUFBLEFBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQSxDQUFBO0FBQzFCLEFBQUEsQ0FBQyxHQUFHLENBQUEsQUFBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFBO0FBQ3pCLEFBQUEsQ0FBQyxDQUFDLENBQUE7QUFDRixBQUFBLEFBQUEsSUFBSSxDQUFDLFFBQVEsQyxDQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLE1BQU07QUFDNUIsQUFBQTtBQUNBLEFBQUEsQUFBTyxNQUFQLE9BQU8sQ0FBQyxDQUFFLENBQUMsR0FBRyxDQUFBLEFBQUMsQ0FBQztBQUNoQixBQUFBLENBQUMsSUFBSSxDQUFBO0FBQ0wsQUFBQSxDQUF1QixJLENBQVAsRyxDQUFmLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDLEMsQ0FBZ0I7QUFDM0IsQUFBQSxDQUFDLENBQUMsQ0FBQTtBQUNGLEFBQUEsQUFBQSxPQUFPLENBQUMsUUFBUSxDLENBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsUyxDQUFTO0FBQ2xDLEFBQUE7QUFDQSxBQUFBLEFBQUEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUEsQ0FBQTtBQUNOLEFBQUEsQ0FBTSxNQUFMLEtBQUssQ0FBQyxDQUFFLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDLE9BQU8sQ0FBQztBQUNwQyxBQUFBLENBQUMsUUFBUSxDQUFBLEFBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQSxBQUFDLEtBQUssQ0FBQSxDQUFBO0FBQzNCLEFBQUEsQ0FBQyxRQUFRLENBQUEsQUFBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFBLEFBQUMsUUFBUSxDQUFBLENBQUEsRUFBRSx5QkFBd0I7QUFDeEQsQUFBQSxDQUFDLEtBQUssQ0FBQSxHQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUEsQUFBQyxNQUFNLENBQUEsQ0FBQTtBQUM1QixBQUFBLENBQUMsS0FBSyxDQUFBLEdBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQSxBQUFDLFNBQVMsQ0FBQSxDQUFBO0FBQy9CLEFBQUEsQ0FBQyxRQUFRLENBQUEsQUFBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLEMsU0FBVSxDQUFDLENBQUEsQUFBQyxTQUFTLENBQUEsQztBQUFBLENBQUE7QUFDaEUsQ0FBQyxDQUFDLENBQUMsQyxDQUFDO0FBQ0osQUFBQTtBQUNBLEFBQUEsQUFBQSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQSxDQUFBO0FBQ04sQUFBQSxDQUFNLE1BQUwsS0FBSyxDQUFDLENBQUUsQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDO0FBQ2pDLEFBQUEsQ0FBQyxRQUFRLENBQUEsQUFBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFBLEFBQUMsR0FBRyxDQUFBLENBQUE7QUFDekIsQUFBQSxDQUFDLFFBQVEsQ0FBQSxBQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUEsQUFBQyxPQUFPLENBQUEsQ0FBQTtBQUM3QixBQUFBLENBQUMsUUFBUSxDQUFBLEFBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQSxBQUFDLEdBQUcsQ0FBQSxDQUFBO0FBQ3pCLEFBQUEsQ0FBQyxRQUFRLENBQUEsQUFBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFBLEFBQUMsT0FBTyxDQUFBLENBQUE7QUFDN0IsQUFBQSxDQUFDLEtBQUssQ0FBQSxHQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUEsQUFBQyxHQUFHLENBQUEsQztBQUFBLENBQUE7QUFDekIsQ0FBQyxDQUFDLENBQUMsQyxDQUFDO0FBQ0osQUFBQTtBQUNBLEFBQUEsQUFBQSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQSxDQUFBO0FBQ04sQUFBQSxDQUFNLE1BQUwsS0FBSyxDQUFDLENBQUUsQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUMsS0FBSyxDQUFDO0FBQ2xDLEFBQUEsQ0FBQyxRQUFRLENBQUEsQUFBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFBLEFBQUMsR0FBRyxDQUFBLENBQUE7QUFDekIsQUFBQSxDQUFDLFFBQVEsQ0FBQSxBQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUEsQUFBQyxPQUFPLENBQUEsQ0FBQTtBQUM3QixBQUFBLENBQUMsUUFBUSxDQUFBLEFBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQSxBQUFDLElBQUksQ0FBQSxDQUFBO0FBQzFCLEFBQUEsQ0FBQyxRQUFRLENBQUEsQUFBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFBLEFBQUMsUUFBUSxDQUFBLENBQUE7QUFDOUIsQUFBQSxDQUFDLEtBQUssQ0FBQSxHQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUEsQUFBQyxHQUFHLENBQUEsQztBQUFBLENBQUE7QUFDekIsQ0FBQyxDQUFDLENBQUMsQyxDQUFDO0FBQ0osQUFBQTtBQUNBLEFBQUEsQUFBQSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQSxDQUFBO0FBQ04sQUFBQSxDQUFNLE1BQUwsS0FBSyxDQUFDLENBQUUsQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDO0FBQ2pDLEFBQUEsQ0FBQyxRQUFRLENBQUEsQUFBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFBLEFBQUMsUUFBUSxDQUFBLENBQUE7QUFDOUIsQUFBQSxDQUFDLFFBQVEsQ0FBQSxBQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUEsQUFBQyxVQUFVLENBQUEsQ0FBQTtBQUNoQyxBQUFBLENBQUMsUUFBUSxDQUFBLEFBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQSxBQUFDLEtBQUssQ0FBQSxDQUFBO0FBQzNCLEFBQUEsQ0FBQyxRQUFRLENBQUEsQUFBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFBLEFBQUMsV0FBVyxDQUFBLENBQUE7QUFDakMsQUFBQSxDQUFDLEtBQUssQ0FBQSxHQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUEsQUFBQyxHQUFHLENBQUEsQztBQUFBLENBQUE7QUFDekIsQ0FBQyxDQUFDLENBQUMsQyxDQUFDO0FBQ0osQUFBQTtBQUNBLEFBQUEsQUFBQSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQSxDQUFBO0FBQ04sQUFBQSxDQUFNLE1BQUwsS0FBSyxDQUFDLENBQUUsQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUMsUUFBUSxDQUFDO0FBQ3JDLEFBQUEsQ0FBQyxRQUFRLENBQUEsQUFBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFBLEFBQUMsSUFBSSxDQUFBLENBQUE7QUFDMUIsQUFBQSxDQUFDLFFBQVEsQ0FBQSxBQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUEsQUFBQyxRQUFRLENBQUEsQ0FBQTtBQUM5QixBQUFBLENBQUMsUUFBUSxDQUFBLEFBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQSxBQUFDLE1BQU0sQ0FBQSxDQUFBO0FBQzVCLEFBQUEsQ0FBQyxRQUFRLENBQUEsQUFBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFBLEFBQUMsVUFBVSxDQUFBLENBQUE7QUFDaEMsQUFBQSxDQUFDLFFBQVEsQ0FBQSxBQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUEsQUFBQyxRQUFRLENBQUEsQ0FBQTtBQUM5QixBQUFBLENBQUMsUUFBUSxDQUFBLEFBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQSxBQUFDLFlBQVksQ0FBQSxDQUFBO0FBQ2xDLEFBQUEsQ0FBQyxLQUFLLENBQUEsR0FBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFBLEFBQUMsR0FBRyxDQUFBLEM7QUFBQSxDQUFBO0FBQ3pCLENBQUMsQ0FBQyxDQUFDLEMsQ0FBQztBQUNKLEFBQUE7QUFDQSxBQUFBLEFBQUEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUEsQ0FBQTtBQUNOLEFBQUEsQ0FBTSxNQUFMLEtBQUssQ0FBQyxDQUFFLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDLE9BQU8sQ0FBQztBQUNwQyxBQUFBLENBQUMsUUFBUSxDQUFBLEFBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQSxBQUFDLHFCQUFxQixDQUFBLENBQUE7QUFDM0MsQUFBQSxDQUFDLFFBQVEsQ0FBQSxBQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUEsQUFBQyxDQUFHO0FBQ3pCO0FBQ0EsS0FFRSxDQUFHLENBQUEsQztBQUFBLENBQUE7QUFDTCxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ0o7QUFDQSIsIm5hbWVzIjpbXSwic291cmNlc0NvbnRlbnQiOlsiIyBwYXJzZXIubGliLnRlc3QuY2l2ZXRcblxuaW1wb3J0IHtcblx0dW5kZWYsIGhhc2gsIGdldENtZEFyZ3MsIERCRywgbyxcblx0fSBmcm9tICcuLi9zcmMvbGliL3V0aWxzLmxpYi50cydcbiMgaW1wb3J0IHtcbiMgXHRLZXBwZWxHcmFtbWFyLFxuIyBcdH0gZnJvbSAnLi9wYXJzZXIva2VwcGVsLmdyYW1tYXIudHMnXG5pbXBvcnQge1xuXHRUU3RhdGUsIGdldE5ld1N0YXRlLCBTdHJpbmdNYXRjaGVyLCBSZWdleE1hdGNoZXIsXG5cdEFsbCwgQW55LCBQbHVzLCBPcHRpb25hbCwgU3Rhcixcblx0Z2V0UGFyc2VyLCBnZXRMaW5lQW5kQ29sdW1uLCBOb2RlLFxuXHR9IGZyb20gJy4uL3NyYy9saWIvcGFyc2VyLmxpYi50cydcbmltcG9ydCB7XG5cdGVxdWFsLCBzYW1lLCBsaWtlLCBzdWNjZWVkcywgZmFpbHMsIHRydXRoeSwgZmFsc3ksXG5cdG1hdGNoZXMsIGlzVHlwZSwgbm90VHlwZSwgb2JqTGlzdExpa2UsXG5cdH0gZnJvbSAnLi4vc3JjL2xpYi91bml0LXRlc3QubGliLnRzJ1xuXG5nZXRDbWRBcmdzKClcbiMgIGh0bWxQYXJzZSA6PSBnZXRQYXJzZXI8aGFzaD4oS2VwcGVsR3JhbW1hcilcblxuIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiMgLS0tIHRlc3QgZ2V0TGluZUFuZENvbHVtbigpXG5cbmVxdWFsIGdldExpbmVBbmRDb2x1bW4oJ2FiY1xcbmRlZlxcbmdoaScsIDUpLCBbMiwgMl1cbmVxdWFsIGdldExpbmVBbmRDb2x1bW4oJ2FiY2RcXG5lZmdoXFxuaWprbCcsIDUpLCBbMiwgMV1cblxuIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiMgLS0tIHRlc3QgZ2V0TmV3U3RhdGUoKVxuXG5lcXVhbCBnZXROZXdTdGF0ZSgnYWJjJyksIHtcblx0dGV4dDogJ2FiYydcblx0cG9zOiAwXG5cdH1cblxuZXF1YWwgZ2V0TmV3U3RhdGUoJ2FiYycsIDIpLCB7XG5cdHRleHQ6ICdhYmMnXG5cdHBvczogMlxuXHR9XG5cbiMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4jIC0tLSB0ZXN0IFN0cmluZ01hdGNoZXIoKVxuXG4oKCkgPT5cblx0cnVsZSA6PSBTdHJpbmdNYXRjaGVyKCdhYmMnKVxuXHRsaWtlIHJ1bGUoZ2V0TmV3U3RhdGUoJ2FiY2RlZicpKSwge3BvczogM31cblx0ZmFpbHMgKCkgPT4gcnVsZShnZXROZXdTdGF0ZSgnYWJjZGVmJywgMykpXG5cdCkoKVxuXG4oKCkgPT5cblx0cnVsZSA6PSBTdHJpbmdNYXRjaGVyKCdkZWYnKVxuXHRsaWtlIHJ1bGUoZ2V0TmV3U3RhdGUoJ2FiY2RlZicpKSwge3BvczogMH1cblx0bGlrZSBydWxlKGdldE5ld1N0YXRlKCdhYmNkZWYnLCAzKSksIHtwb3M6IDZ9XG5cblx0IyAtLS0gT24gZmFpbHVyZSB0byBtYXRjaCwgc2hvdWxkIHJldHVybiB1bmRlZlxuXHQkIDo9IGdldE5ld1N0YXRlKCdhYmNkZWYnKVxuXHRlcXVhbCBydWxlKCQpLCB1bmRlZlxuXHQpKClcblxuIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiMgLS0tIHRlc3QgUmVnZXhNYXRjaGVyKClcblxuKCgpID0+XG5cdHJ1bGUgOj0gUmVnZXhNYXRjaGVyKC9eW1xcLlxcI11cXHMvKVxuXHRsaWtlIHJ1bGUoZ2V0TmV3U3RhdGUoJy4gYWJjJykpLCB7cG9zOiAyfVxuXHRmYWlscyAoKSA9PiBydWxlKGdldE5ld1N0YXRlKCcuIGFiYycsIDEpKVxuXHQpKClcblxuKCgpID0+XG5cdHJ1bGUgOj0gUmVnZXhNYXRjaGVyKC9eW1xcLlxcI11cXHMvKVxuXHRsaWtlIHJ1bGUoZ2V0TmV3U3RhdGUoJ2FiYyAuIGRlZicpKSwge3BvczogMH1cblx0bGlrZSBydWxlKGdldE5ld1N0YXRlKCdhYmMgLiBkZWYnLCA0KSksIHtwb3M6IDZ9XG5cblx0IyAtLS0gT24gZmFpbHVyZSB0byBtYXRjaCwgc2hvdWxkIHJldHVybiB1bmRlZlxuXHQkIDo9IGdldE5ld1N0YXRlKCdhYmMgLiBhYmMnKVxuXHRlcXVhbCBydWxlKCQpLCB1bmRlZlxuXHQpKClcblxuIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiMgLS0tIHRlc3QgTm9kZTxUPlxuXG4oKCkgPT5cblx0cmVkdWNlciA6PSAoXG5cdFx0XHQkOiBUU3RhdGVcblx0XHRcdCRuZXh0OiBUU3RhdGVcblx0XHRcdCk6IHN0cmluZyA9PlxuXHRcdHJldHVybiAnWCdcblxuXHQjIC0tLSBUaGlzIHJ1bGUgd2lsbCBhdHRlbXB0IHRvIG1hdGNoIHRoZSBzdHJpbmcgJ2FiYydcblx0IyAgICAgd2hlbiBpdCBtYXRjaGVzLCB0aGUgcmVkdWNlciBpcyBjYWxsZWQsIGFuZFxuXHQjICAgICB3aGF0IGl0IHJldHVybnMgaXMgcHV0IG9uIHRoZSBzdGFja1xuXHRydWxlIDo9IE5vZGU8c3RyaW5nPignYWJjJywgcmVkdWNlcilcblxuXHQkIDo9IGdldE5ld1N0YXRlKCdhYmNkZWYnKVxuXHRlcXVhbCBydWxlKCQpLCB7XG5cdCAgIFwidGV4dFwiOiBcImFiY2RlZlwiLFxuXHQgICBcInN0YWNrXCI6IFsnWCddLFxuXHRcdFwicG9zXCI6IDNcblx0XHR9XG5cdCkoKVxuXG4jIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuIyBCdWlsZCBhbmQgdGVzdCBzb21lIHZlcnkgc2ltcGxlIHJ1bGVzXG5cbnJlSWRlbnQgOj0gLy8vXiggW2EtekEtWl8kXSBbYS16QS1aMC05XyRdKiApIC8vL1xucmVJZGVudC50b1N0cmluZyA9ICgpID0+ICdyZUlkZW50J1xuXG5yZU51bWJlciA6PSAvLy9eXG5cdChcblx0XHQoPzpcblx0XHRcdFswLTldKyBcXC4/IFswLTldKiB8IFxcLiBbMC05XStcblx0XHRcdClcblx0XHQoPzpcblx0XHRcdFtlRV0gWy0rXT8gWzAtOV0rXG5cdFx0XHQpP1xuXHRcdClcXGJcblx0Ly8vXG5yZU51bWJlci50b1N0cmluZyA9ICgpID0+ICdyZU51bWJlcidcblxucmVPcCA6PSAvWytcXC0qXFwvXS9cbnJlT3AudG9TdHJpbmcgPSAoKSA9PiAncmVPcCdcblxuIyAtLS0gRGVmaW5lIHRoZSBncmFtbWVyIHByb2R1Y3Rpb25zXG5cbnZhbHVlIDo9IEFueSBbcmVJZGVudCwgcmVOdW1iZXJdXG52YWx1ZS50b1N0cmluZyA9ICgpID0+ICd2YWx1ZSdcblxuc3RtdCA6PSBBbnkgW1xuXHRBbGwgW3JlSWRlbnQsICc9JywgdmFsdWVdXG5cdEFsbCBbdmFsdWUsIHJlT3AsIHZhbHVlXVxuXHRdXG5zdG10LnRvU3RyaW5nID0gKCkgPT4gJ3N0bXQnXG5cbnByb2dyYW0gOj0gQWxsIFtcblx0c3RtdFxuXHRbJzsnLCBzdG10XSB8PiBBbGwgfD4gU3RhclxuXHRdXG5wcm9ncmFtLnRvU3RyaW5nID0gKCkgPT4gJ3Byb2dyYW0nXG5cbigoKSA9PlxuXHRwYXJzZSA6PSBnZXRQYXJzZXI8c3RyaW5nPihyZUlkZW50KVxuXHRzdWNjZWVkcyAoKSA9PiBwYXJzZSAnYWJjJ1xuXHRzdWNjZWVkcyAoKSA9PiBwYXJzZSAnIGFiYyAgJyAgIyAtLS0gd2hpdGVzcGFjZSBza2lwcGVkXG5cdGZhaWxzICAgICgpID0+IHBhcnNlICcxYWJjJ1xuXHRmYWlscyAgICAoKSA9PiBwYXJzZSAnYWJjIGRlZidcblx0c3VjY2VlZHMgKCkgPT4gZ2V0UGFyc2VyPHN0cmluZz4ocmVJZGVudCwgbydwYXJ0aWFsJykgJ2FiYyBkZWYnXG5cdCkoKVxuXG4oKCkgPT5cblx0cGFyc2UgOj0gZ2V0UGFyc2VyPHN0cmluZz4ocmVPcClcblx0c3VjY2VlZHMgKCkgPT4gcGFyc2UgJysnXG5cdHN1Y2NlZWRzICgpID0+IHBhcnNlICcgIC0gICdcblx0c3VjY2VlZHMgKCkgPT4gcGFyc2UgJyonXG5cdHN1Y2NlZWRzICgpID0+IHBhcnNlICcgIC8gICdcblx0ZmFpbHMgICAgKCkgPT4gcGFyc2UgJyEnXG5cdCkoKVxuXG4oKCkgPT5cblx0cGFyc2UgOj0gZ2V0UGFyc2VyPHN0cmluZz4odmFsdWUpXG5cdHN1Y2NlZWRzICgpID0+IHBhcnNlICduJ1xuXHRzdWNjZWVkcyAoKSA9PiBwYXJzZSAnICBuICAnXG5cdHN1Y2NlZWRzICgpID0+IHBhcnNlICc0Midcblx0c3VjY2VlZHMgKCkgPT4gcGFyc2UgJyAgNDIgICdcblx0ZmFpbHMgICAgKCkgPT4gcGFyc2UgJyEnXG5cdCkoKVxuXG4oKCkgPT5cblx0cGFyc2UgOj0gZ2V0UGFyc2VyPHN0cmluZz4oc3RtdClcblx0c3VjY2VlZHMgKCkgPT4gcGFyc2UgJ24gPSA0Midcblx0c3VjY2VlZHMgKCkgPT4gcGFyc2UgJyAgbj00MiAgJ1xuXHRzdWNjZWVkcyAoKSA9PiBwYXJzZSAnYT1iJ1xuXHRzdWNjZWVkcyAoKSA9PiBwYXJzZSAnICBhID0gYiAgJ1xuXHRmYWlscyAgICAoKSA9PiBwYXJzZSAnISdcblx0KSgpXG5cbigoKSA9PlxuXHRwYXJzZSA6PSBnZXRQYXJzZXI8c3RyaW5nPihyZU51bWJlcilcblx0c3VjY2VlZHMgKCkgPT4gcGFyc2UgJzQyJ1xuXHRzdWNjZWVkcyAoKSA9PiBwYXJzZSAnICA0MiAgJ1xuXHRzdWNjZWVkcyAoKSA9PiBwYXJzZSAnMy4xNCdcblx0c3VjY2VlZHMgKCkgPT4gcGFyc2UgJyAgMy4xNCAgJ1xuXHRzdWNjZWVkcyAoKSA9PiBwYXJzZSAnMy4xNGU1J1xuXHRzdWNjZWVkcyAoKSA9PiBwYXJzZSAnICAzLjE0RTUgICdcblx0ZmFpbHMgICAgKCkgPT4gcGFyc2UgJyEnXG5cdCkoKVxuXG4oKCkgPT5cblx0cGFyc2UgOj0gZ2V0UGFyc2VyPHN0cmluZz4ocHJvZ3JhbSlcblx0c3VjY2VlZHMgKCkgPT4gcGFyc2UgJ3ggPSA0MjsgeSA9IDMzOyB4KnknXG5cdHN1Y2NlZWRzICgpID0+IHBhcnNlIFwiXCJcIlxuXHRcdHggPSA0Mjtcblx0XHR5ID0gMzM7XG5cdFx0eCAqIHlcblx0XHRcIlwiXCJcblx0KSgpXG5cbiJdfQ==