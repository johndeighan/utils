"use strict";
// parser.lib.test.civet

import {
	undef, hash, getCmdArgs, DBG, o,
	} from '../src/lib/utils.lib.ts'
// import {
// 	KeppelGrammar,
// 	} from './parser/keppel.grammar.ts'
import {
	State, StringMatcher, RegexMatcher,
	All, Any, Plus, Optional, Star,
	getParser, getLineAndColumn, Node,
	} from '../src/lib/parser.lib.ts'
import {
	equal, same, like, succeeds, fails, truthy, falsy,
	matches, isType, notType, objListLike,
	} from '../src/lib/unit-test.lib.ts'

getCmdArgs()
//  htmlParse := getParser<hash>(KeppelGrammar)

// ---------------------------------------------------------------------------
// --- test getLineAndColumn()

equal(getLineAndColumn('abc\ndef\nghi', 5), [2, 2])
equal(getLineAndColumn('abcd\nefgh\nijkl', 5), [2, 1])

// ---------------------------------------------------------------------------
// --- test class State

like(new State('abc'), {
	text: 'abc',
	pos: 0
	})

like(new State('abc', 2), {
	text: 'abc',
	pos: 2
	});

// ---------------------------------------------------------------------------
// --- test StringMatcher()

(() => {
	const rule = StringMatcher('abc')
	like(rule(new State('abcdef')), {pos: 3})
	fails(() => rule(new State('abcdef', 3)))
}
	)();

(() => {
	const rule = StringMatcher('def')
	like(rule(new State('abcdef')), {pos: 0})
	like(rule(new State('abcdef', 3)), {pos: 6})

	// --- On failure to match, should return undef
	const $ = new State('abcdef')
	equal(rule($), undef)
}
	)();

// ---------------------------------------------------------------------------
// --- test RegexMatcher()

(() => {
	const rule = RegexMatcher(/^[\.\#]\s/)
	like(rule(new State('. abc')), {pos: 2})
	fails(() => rule(new State('. abc', 1)))
}
	)();

(() => {
	const rule = RegexMatcher(/^[\.\#]\s/)
	like(rule(new State('abc . def')), {pos: 0})
	like(rule(new State('abc . def', 4)), {pos: 6})

	// --- On failure to match, should return undef
	const $ = new State('abc . abc')
	equal(rule($), undef)
}
	)();

// ---------------------------------------------------------------------------
// --- test Node<T>

(() => {
	const reducer = (
			$: State,
			$next: State
			): string => {
		return 'X'
	}

	// --- This rule will attempt to match the string 'abc'
	//     when it matches, the reducer is called, and
	//     what it returns is put on the stack
	const rule = Node<string>('abc', reducer)

	const $ = new State('abcdef')
	like(rule($), {
	   "text": "abcdef",
	   "stack": ['X'],
		"pos": 3
		})
}
	)()

// ---------------------------------------------------------------------------
// Build and test some very simple rules

const reIdent = /^([a-zA-Z_$][a-zA-Z0-9_$]*)/
reIdent.toString = () => 'reIdent'

const reNumber = /^((?:[0-9]+\.?[0-9]*|\.[0-9]+)(?:[eE][-+]?[0-9]+)?)\b/
reNumber.toString = () => 'reNumber'

const reOp = /[+\-*\/]/
reOp.toString = () => 'reOp'

// --- Define the grammer productions

const value = Any([reIdent, reNumber])
value.toString = () => 'value'

const stmt = Any([
	All([reIdent, '=', value]),
	All([value, reOp, value])
	])
stmt.toString = () => 'stmt'

const program = All([
	stmt,
	Star(All([';', stmt]))
	])
program.toString = () => 'program';

(() => {
	const parse = getParser<string>(reIdent)
	succeeds(() => parse('abc'))
	succeeds(() => parse(' abc  '))  // --- whitespace skipped
	fails(   () => parse('1abc'))
	fails(   () => parse('abc def'))
	succeeds(() => getParser<string>(reIdent, o`partial`)('abc def'))
}
	)();

(() => {
	const parse = getParser<string>(reOp)
	succeeds(() => parse('+'))
	succeeds(() => parse('  -  '))
	succeeds(() => parse('*'))
	succeeds(() => parse('  /  '))
	fails(   () => parse('!'))
}
	)();

(() => {
	const parse = getParser<string>(value)
	succeeds(() => parse('n'))
	succeeds(() => parse('  n  '))
	succeeds(() => parse('42'))
	succeeds(() => parse('  42  '))
	fails(   () => parse('!'))
}
	)();

(() => {
	const parse = getParser<string>(stmt)
	succeeds(() => parse('n = 42'))
	succeeds(() => parse('  n=42  '))
	succeeds(() => parse('a=b'))
	succeeds(() => parse('  a = b  '))
	fails(   () => parse('!'))
}
	)();

(() => {
	const parse = getParser<string>(reNumber)
	succeeds(() => parse('42'))
	succeeds(() => parse('  42  '))
	succeeds(() => parse('3.14'))
	succeeds(() => parse('  3.14  '))
	succeeds(() => parse('3.14e5'))
	succeeds(() => parse('  3.14E5  '))
	fails(   () => parse('!'))
}
	)();

(() => {
	const parse = getParser<string>(program)
	succeeds(() => parse('x = 42; y = 33; x*y'))
	succeeds(() => parse(`x = 42;
y = 33;
x * y`))
}
	)()


//# sourceMappingURL=data:application/json;charset=utf-8;base64,