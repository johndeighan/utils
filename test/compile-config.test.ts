"use strict";
// compile-config.test.civet

import {
	undef, defined, notdefined,
	isArray, relpath, getCmdArgs, DBG,
	} from '../src/lib/utils.ts'
import {
	isConfigHash, installDenoExe, isStub, isDirSpec,
	findSourceFile,
	isFileSpec, getSrcInfo, getCompiler, compileFile,
	hDefaultConfig, userConfigPath, hCompilerConfig,
	configHash, foundSource, srcInfo, compileResult,
	} from '../src/lib/compile-config.ts'
import {
	equal, like, succeeds, fails, truthy, falsy,
	} from '../src/lib/unit-test.ts'

const hArgs = getCmdArgs()

// ---------------------------------------------------------------------------

DBG("isConfigHash()")

truthy(isConfigHash({
	hCompilers: {
		'.dot': {
			outExt: '.js',
			tester: () => true,
			compiler: () => 'result'
			},
		'.cielo': {
			outExt: '.js',
			tester: () => true,
			compiler: () => 'result'
			},
		'.civet': {
			outExt: '.js',
			tester: () => true,
			compiler: () => 'result'
			}
		},
	hPostProcessors: {
		'testDir': {},
		'libDir': {},
		'binDir': {}
		}
	}))

truthy(isConfigHash(hCompilerConfig))
truthy(isConfigHash(hDefaultConfig))

DBG("installDenoExe()")

//     No unit test yet

DBG("isStub()")

truthy(isStub('abc'))
falsy( isStub('.js'))
falsy( isStub('abc/deno'))
falsy( isStub('abc\\deno'))

DBG("isDirSpec()")

truthy(isDirSpec('testDir'))
truthy(isDirSpec('libDir'))
truthy(isDirSpec('binDir'))
falsy( isDirSpec('abc'))

DBG("findSourceFile()")

const hInfo = findSourceFile('libDir', 'llutils')
truthy(defined(hInfo))
if (hInfo !== undef) {
	equal(relpath(hInfo.path), 'src/lib/llutils.civet')
}

DBG("isFileSpec()")

truthy(isFileSpec(['abc', 'stub']))
falsy( isFileSpec(undef))
falsy( isFileSpec(42))
falsy( isFileSpec('abc'))
falsy( isFileSpec(['abc']))
falsy( isFileSpec(['abc', 'def', 'ghi']))

DBG("getSrcInfo()")

like(getSrcInfo(['libDir', 'llutils']), {
	relPath: 'src/lib/llutils.civet',
	dirspec: 'libDir',
	stub: 'llutils',
	purpose: undef,
	ext: '.civet'
	})

like(getSrcInfo('src/lib/llutils.civet'), {
	relPath: 'src/lib/llutils.civet',
	dirspec: 'libDir',
	stub: 'llutils',
	purpose: undef,
	ext: '.civet'
	})

DBG("getCompiler()");

(() => {
	const lInfo = getCompiler('.civet')
	truthy(defined(lInfo))
	truthy(isArray(lInfo))
	equal(lInfo.length, 2)
}
	)()

DBG("compileFile()")

//     no unit tests yet

DBG("userConfigPath()");

(() => {
	const dir = Deno.cwd().replaceAll('\\','/')
	equal(userConfigPath, `${dir}/compile.config.ts`)
}
	)()

//# sourceMappingURL=data:application/json;charset=utf-8;base64,