# llutils.test.civet

import {undef} from '@jdeighan/utils/datatypes'
import {
	croak, assert, pass, OL, ML, strToHash, addDefaults, getOptions,
	removeEmptyKeys, keys, hasKey, hasKeys, merge,
	} from '@jdeighan/utils/llutils'
import {
	equal, truthy, falsy, succeeds, fails,
	} from '@jdeighan/utils/unit-test'

# ---------------------------------------------------------------------------

# --- croak()
fails () => croak("Bad")

# --- assert()
succeeds () => assert (2+2 == 4), "Bad"
fails () => assert (2+2 == 5), "Bad"

# --- pass()
succeeds () => pass()

# --- OL()
equal OL({a:1, b:2}), '{"a":1,"b":2}'
equal OL('abc'), '"abc"'
equal OL([1, 2, 3]), '[1,2,3]'
equal OL(undefined), 'undef'
equal OL(null), 'null'

# --- ML()
equal ML(undefined), 'undef'
equal ML(null), 'null'
equal ML('abc'), '"abc"'
equal ML({a:1, b:2}), """
	{
	   "a": 1,
	   "b": 2
	}
	"""
equal ML([1,'abc']), """
	[
	   1,
	   "abc"
	]
	"""

# --- strToHash()
equal strToHash('debug'), {debug: true}
equal strToHash('debug force'), {
	debug: true
	force: true
	}
equal strToHash('debug !force'), {
	debug: true
	force: false
	}
equal strToHash('debug !force  size=3'), {
	debug: true
	force: false
	size: 3
	}

# --- addDefaults()
equal addDefaults({debug: true}, {force: true}), {
	debug: true
	force: true
	}

# --- getOptions()
equal getOptions({debug: true}), {debug: true}
equal getOptions({debug: true}, {force: false}), {
	debug: true
	force: false
	}
equal getOptions('debug'), {debug: true}
equal getOptions('!debug'), {debug: false}
equal getOptions('debug', {force: false}), {
	debug: true
	force: false
	}

# --- removeEmptyKeys()
equal removeEmptyKeys({a: 1, b: undef}), {a: 1}

# --- keys()
equal keys({a:1, b:2, c:3}), ['a','b','c']
equal keys({a:1, b:2, c:3}, {except: 'b'}), ['a','c']
equal keys({a:1, b:2, c:3}, 'except=b'), ['a','c']

# --- hasKey()
truthy hasKey({a:1, b:2}, 'b')
truthy hasKey({a:1, b:2}, 'a', 'b')
falsy  hasKey({a:1, b:2}, 'c')
falsy  hasKey({a:1, b:2}, 'a', 'c')

# --- hasKeys() - a synonym for hasKey()
truthy hasKeys({a:1, b:2}, 'b')
truthy hasKeys({a:1, b:2}, 'a', 'b')
falsy  hasKeys({a:1, b:2}, 'c')
falsy  hasKeys({a:1, b:2}, 'a', 'c')

# --- merge()
equal merge({a:1}, {b:2}), {a:1, b:2}
equal merge({a:1, b:2}, {b:3, c:4}), {a:1, b:3, c:4}

