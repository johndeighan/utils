// fs.test.civet

import {undef} from '../src/lib/llutils.js'
import * as lib from '../src/lib/fs.js'
Object.assign(globalThis, lib)
import * as lib2 from '../src/lib/unit-test.js'
Object.assign(globalThis, lib2)

// ---------------------------------------------------------------------------

equal( fileExt("C:/temp/file.txt"), ".txt")
equal( fileExt("c:\\temp/to/file.txt"), ".txt")
equal( fileExt("c:\\temp/to/file.flag.txt"), ".txt")

equal( withExt("C:/temp/file.txt", ".js"), "C:/temp/file.js")
equal( withExt("c:\\temp/to/file.txt", ".js"), "c:\\temp/to/file.js")
equal( withExt("c:\\temp/to/file.flag.txt", ".js"), "c:\\temp/to/file.flag.js")

equal( normalizePath("C:/temp/file.txt"), "c:/temp/file.txt")
equal( normalizePath("C:\\temp/to/file.txt"), "c:/temp/to/file.txt")
equal( normalizePath("C:\\temp/to/file.flag.txt"), "c:/temp/to/file.flag.txt")

equal( mkpath("C:/temp/file.txt"), "c:/temp/file.txt")
equal( mkpath("C:/temp", "file.txt"), "c:/temp/file.txt")
equal( mkpath("C:\\temp/to/file.txt"), "c:/temp/to/file.txt")
equal( mkpath("C:\\temp/to/file.flag.txt"), "c:/temp/to/file.flag.txt")

equal( mkpath("C:/temp", "file.txt"), "c:/temp/file.txt")
equal( mkpath("C:\\temp/to", "file.txt"), "c:/temp/to/file.txt")
equal( mkpath("C:\\temp", "to/file.flag.txt"), "c:/temp/to/file.flag.txt")

like( parsePath("c:/temp/file.txt"), {
	path: "c:/temp/file.txt",
	type: 'missing',
	root: 'c:/',
	dir: 'c:/temp',
	fileName: 'file.txt',
	stub: 'file',
	purpose: undef,
	ext: '.txt',
	relPath: "../../../temp/file.txt",
	relDir: "../../../temp"
	})

truthy(isFile("./test/fs/dummy.txt"))
falsy( isFile("./test/fs"))

truthy(isDir("./test/fs"))
falsy( isDir("./test/fs/dummy.txt"))

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVzdC9mcy50ZXN0LmNpdmV0LnRzeCIsInNvdXJjZXMiOlsidGVzdC9mcy50ZXN0LmNpdmV0Il0sIm1hcHBpbmdzIjoiQUFBQSxnQkFBZTtBQUNmLEFBQUE7QUFDQSxBQUFBLE1BQU0sQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLElBQUksQ0FBQyx1QkFBdUI7QUFDM0MsQUFBQSxBQUFBLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsa0JBQWtCO0FBQ3ZDLEFBQUEsQUFBQSxNQUFNLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFDLEdBQUcsQ0FBQztBQUM5QixBQUFBLEFBQUEsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyx5QkFBeUI7QUFDL0MsQUFBQSxBQUFBLE1BQU0sQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUMsSUFBSSxDQUFDO0FBQy9CLEFBQUE7QUFDQSxBQUFBLDhFQUE2RTtBQUM3RSxBQUFBO0FBQ0EsQUFBQSxBQUFBLEtBQUssQ0FBQSxDQUFFLE9BQU8sQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFBO0FBQzFDLEFBQUEsQUFBQSxLQUFLLENBQUEsQ0FBRSxPQUFPLENBQUMsc0JBQXNCLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQTtBQUM5QyxBQUFBLEFBQUEsS0FBSyxDQUFBLENBQUUsT0FBTyxDQUFDLDJCQUEyQixDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUE7QUFDbkQsQUFBQTtBQUNBLEFBQUEsQUFBQSxLQUFLLENBQUEsQ0FBRSxPQUFPLENBQUMsa0JBQWtCLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLGlCQUFpQixDQUFBO0FBQzVELEFBQUEsQUFBQSxLQUFLLENBQUEsQ0FBRSxPQUFPLENBQUMsc0JBQXNCLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLHFCQUFxQixDQUFBO0FBQ3BFLEFBQUEsQUFBQSxLQUFLLENBQUEsQ0FBRSxPQUFPLENBQUMsMkJBQTJCLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLDBCQUEwQixDQUFBO0FBQzlFLEFBQUE7QUFDQSxBQUFBLEFBQUEsS0FBSyxDQUFBLENBQUUsYUFBYSxDQUFDLGtCQUFrQixDQUFDLENBQUMsQ0FBQyxrQkFBa0IsQ0FBQTtBQUM1RCxBQUFBLEFBQUEsS0FBSyxDQUFBLENBQUUsYUFBYSxDQUFDLHNCQUFzQixDQUFDLENBQUMsQ0FBQyxxQkFBcUIsQ0FBQTtBQUNuRSxBQUFBLEFBQUEsS0FBSyxDQUFBLENBQUUsYUFBYSxDQUFDLDJCQUEyQixDQUFDLENBQUMsQ0FBQywwQkFBMEIsQ0FBQTtBQUM3RSxBQUFBO0FBQ0EsQUFBQSxBQUFBLEtBQUssQ0FBQSxDQUFFLE1BQU0sQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDLENBQUMsa0JBQWtCLENBQUE7QUFDckQsQUFBQSxBQUFBLEtBQUssQ0FBQSxDQUFFLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLGtCQUFrQixDQUFBO0FBQ3hELEFBQUEsQUFBQSxLQUFLLENBQUEsQ0FBRSxNQUFNLENBQUMsc0JBQXNCLENBQUMsQ0FBQyxDQUFDLHFCQUFxQixDQUFBO0FBQzVELEFBQUEsQUFBQSxLQUFLLENBQUEsQ0FBRSxNQUFNLENBQUMsMkJBQTJCLENBQUMsQ0FBQyxDQUFDLDBCQUEwQixDQUFBO0FBQ3RFLEFBQUE7QUFDQSxBQUFBLEFBQUEsS0FBSyxDQUFBLENBQUUsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsa0JBQWtCLENBQUE7QUFDeEQsQUFBQSxBQUFBLEtBQUssQ0FBQSxDQUFFLE1BQU0sQ0FBQyxhQUFhLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLHFCQUFxQixDQUFBO0FBQy9ELEFBQUEsQUFBQSxLQUFLLENBQUEsQ0FBRSxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUMsa0JBQWtCLENBQUMsQ0FBQyxDQUFDLDBCQUEwQixDQUFBO0FBQ3pFLEFBQUE7QUFDQSxBQUFBLEFBQUEsSUFBSSxDQUFBLENBQUUsU0FBUyxDQUFDLGtCQUFrQixDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ3RDLEFBQUEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxrQkFBa0IsQ0FBQTtBQUN6QixBQUFBLENBQUMsSUFBSSxDQUFDLENBQUMsU0FBUyxDQUFBO0FBQ2hCLEFBQUEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxLQUFLLENBQUE7QUFDWixBQUFBLENBQUMsR0FBRyxDQUFDLENBQUMsU0FBUyxDQUFBO0FBQ2YsQUFBQSxDQUFDLFFBQVEsQ0FBQyxDQUFDLFVBQVUsQ0FBQTtBQUNyQixBQUFBLENBQUMsSUFBSSxDQUFDLENBQUMsTUFBTSxDQUFBO0FBQ2IsQUFBQSxDQUFDLE9BQU8sQ0FBQyxDQUFDLEtBQUssQ0FBQTtBQUNmLEFBQUEsQ0FBQyxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUE7QUFDWixBQUFBLENBQUMsT0FBTyxDQUFDLENBQUMsd0JBQXdCLENBQUE7QUFDbEMsQUFBQSxDQUFDLE1BQU0sQ0FBQyxDQUFDLGVBQWU7QUFDeEIsQ0FBQyxDQUFDLENBQUE7QUFDRixBQUFBO0FBQ0EsQUFBQSxBQUFBLE1BQU0sQ0FBQSxBQUFDLE1BQU0sQ0FBQyxxQkFBcUIsQ0FBQyxDQUFBO0FBQ3BDLEFBQUEsQUFBQSxLQUFLLENBQUEsQ0FBRSxNQUFNLENBQUMsV0FBVyxDQUFDLENBQUE7QUFDMUIsQUFBQTtBQUNBLEFBQUEsQUFBQSxNQUFNLENBQUEsQUFBQyxLQUFLLENBQUMsV0FBVyxDQUFDLENBQUE7QUFDekIsQUFBQSxBQUFBLEtBQUssQ0FBQSxDQUFFLEtBQUssQ0FBQyxxQkFBcUIsQ0FBQyxDQUFBO0FBQ25DIiwibmFtZXMiOltdLCJzb3VyY2VzQ29udGVudCI6WyIjIGZzLnRlc3QuY2l2ZXRcblxuaW1wb3J0IHt1bmRlZn0gZnJvbSAnLi4vc3JjL2xpYi9sbHV0aWxzLmpzJ1xuaW1wb3J0ICogYXMgbGliIGZyb20gJy4uL3NyYy9saWIvZnMuanMnXG5PYmplY3QuYXNzaWduKGdsb2JhbFRoaXMsIGxpYilcbmltcG9ydCAqIGFzIGxpYjIgZnJvbSAnLi4vc3JjL2xpYi91bml0LXRlc3QuanMnXG5PYmplY3QuYXNzaWduKGdsb2JhbFRoaXMsIGxpYjIpXG5cbiMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbmVxdWFsICBmaWxlRXh0KFwiQzovdGVtcC9maWxlLnR4dFwiKSwgXCIudHh0XCJcbmVxdWFsICBmaWxlRXh0KFwiYzpcXFxcdGVtcC90by9maWxlLnR4dFwiKSwgXCIudHh0XCJcbmVxdWFsICBmaWxlRXh0KFwiYzpcXFxcdGVtcC90by9maWxlLmZsYWcudHh0XCIpLCBcIi50eHRcIlxuXG5lcXVhbCAgd2l0aEV4dChcIkM6L3RlbXAvZmlsZS50eHRcIiwgXCIuanNcIiksIFwiQzovdGVtcC9maWxlLmpzXCJcbmVxdWFsICB3aXRoRXh0KFwiYzpcXFxcdGVtcC90by9maWxlLnR4dFwiLCBcIi5qc1wiKSwgXCJjOlxcXFx0ZW1wL3RvL2ZpbGUuanNcIlxuZXF1YWwgIHdpdGhFeHQoXCJjOlxcXFx0ZW1wL3RvL2ZpbGUuZmxhZy50eHRcIiwgXCIuanNcIiksIFwiYzpcXFxcdGVtcC90by9maWxlLmZsYWcuanNcIlxuXG5lcXVhbCAgbm9ybWFsaXplUGF0aChcIkM6L3RlbXAvZmlsZS50eHRcIiksIFwiYzovdGVtcC9maWxlLnR4dFwiXG5lcXVhbCAgbm9ybWFsaXplUGF0aChcIkM6XFxcXHRlbXAvdG8vZmlsZS50eHRcIiksIFwiYzovdGVtcC90by9maWxlLnR4dFwiXG5lcXVhbCAgbm9ybWFsaXplUGF0aChcIkM6XFxcXHRlbXAvdG8vZmlsZS5mbGFnLnR4dFwiKSwgXCJjOi90ZW1wL3RvL2ZpbGUuZmxhZy50eHRcIlxuXG5lcXVhbCAgbWtwYXRoKFwiQzovdGVtcC9maWxlLnR4dFwiKSwgXCJjOi90ZW1wL2ZpbGUudHh0XCJcbmVxdWFsICBta3BhdGgoXCJDOi90ZW1wXCIsIFwiZmlsZS50eHRcIiksIFwiYzovdGVtcC9maWxlLnR4dFwiXG5lcXVhbCAgbWtwYXRoKFwiQzpcXFxcdGVtcC90by9maWxlLnR4dFwiKSwgXCJjOi90ZW1wL3RvL2ZpbGUudHh0XCJcbmVxdWFsICBta3BhdGgoXCJDOlxcXFx0ZW1wL3RvL2ZpbGUuZmxhZy50eHRcIiksIFwiYzovdGVtcC90by9maWxlLmZsYWcudHh0XCJcblxuZXF1YWwgIG1rcGF0aChcIkM6L3RlbXBcIiwgXCJmaWxlLnR4dFwiKSwgXCJjOi90ZW1wL2ZpbGUudHh0XCJcbmVxdWFsICBta3BhdGgoXCJDOlxcXFx0ZW1wL3RvXCIsIFwiZmlsZS50eHRcIiksIFwiYzovdGVtcC90by9maWxlLnR4dFwiXG5lcXVhbCAgbWtwYXRoKFwiQzpcXFxcdGVtcFwiLCBcInRvL2ZpbGUuZmxhZy50eHRcIiksIFwiYzovdGVtcC90by9maWxlLmZsYWcudHh0XCJcblxubGlrZSAgcGFyc2VQYXRoKFwiYzovdGVtcC9maWxlLnR4dFwiKSwge1xuXHRwYXRoOiBcImM6L3RlbXAvZmlsZS50eHRcIlxuXHR0eXBlOiAnbWlzc2luZydcblx0cm9vdDogJ2M6Lydcblx0ZGlyOiAnYzovdGVtcCdcblx0ZmlsZU5hbWU6ICdmaWxlLnR4dCdcblx0c3R1YjogJ2ZpbGUnXG5cdHB1cnBvc2U6IHVuZGVmXG5cdGV4dDogJy50eHQnXG5cdHJlbFBhdGg6IFwiLi4vLi4vLi4vdGVtcC9maWxlLnR4dFwiXG5cdHJlbERpcjogXCIuLi8uLi8uLi90ZW1wXCJcblx0fVxuXG50cnV0aHkgaXNGaWxlKFwiLi90ZXN0L2ZzL2R1bW15LnR4dFwiKVxuZmFsc3kgIGlzRmlsZShcIi4vdGVzdC9mc1wiKVxuXG50cnV0aHkgaXNEaXIoXCIuL3Rlc3QvZnNcIilcbmZhbHN5ICBpc0RpcihcIi4vdGVzdC9mcy9kdW1teS50eHRcIilcbiJdfQ==