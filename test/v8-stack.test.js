// v8-stack.test.civet

import {
	undef, defined, notdefined, assert, croak,
	compileAllFiles, relpath,
	} from '../src/lib/llutils.js'
import * as lib from '../src/lib/v8-stack.js'
Object.assign(globalThis, lib)
import * as lib2 from '../src/lib/unit-test.js'
Object.assign(globalThis, lib2)

import {getBoth} from './v8-stack/v8-module.js';

// ---------------------------------------------------------------------------

(function() {
	let stack1 = undef
	let stack2 = undef

	const main = function() {
		func1()
		func2()
	}

	const func1 = function() {
		stack1 = getV8Stack()
	}

	const func2 = function() {
		stack2 = getV8Stack()
		return
	}

	main()
	like(stack1, [
		{
			type: 'function',
			name: 'func1',
			source: 'test/v8-stack.test.civet',
			line: 25
			},
		{
			type: 'function',
			name: 'main',
			source: 'test/v8-stack.test.civet',
			line: 21
			},
		{
			type: 'function',
			name: '<anonymous>',
			source: 'test/v8-stack.test.civet',
			line: 31
			},
		{
			type: 'script',
			source: 'test/v8-stack.test.civet',
			line: 82
			}
		])
	like(stack2, [
		{
			type: 'function',
			name: 'func2',
			source: 'test/v8-stack.test.civet',
			line: 28
			},
		{
			type: 'function',
			name: 'main',
			source: 'test/v8-stack.test.civet',
			line: 22
			},
		{
			type: 'function',
			name: '<anonymous>',
			source: 'test/v8-stack.test.civet',
			line: 31
			},
		{
			type: 'script',
			source: 'test/v8-stack.test.civet',
			line: 82
			}
		])
}
	)();

// ---------------------------------------------------------------------------

(function() {
	let caller1 = undef
	let caller2 = undef

	const main = function() {
		func1()
		func2()
	}

	const func1 = function() {
		caller1 = getMyCaller()
	}

	const func2 = function() {
		caller2 = getMyCaller()
		return
	}

	main()
	like(caller1, {
		type: 'function',
		name: 'main',
		source: 'test/v8-stack.test.civet'
		})
	like(caller2, {
		type: 'function',
		name: 'main',
		source: 'test/v8-stack.test.civet'
		})
}
	)();

// ---------------------------------------------------------------------------

(function() {
	let hCaller = undef

	const main = function() {
		func1()
		func2()
	}

	const func1 = function() {
		return
	}

	const func2 = function() {
		hCaller = getMyCaller()
		return
	}

	// ------------------------------------------------------------------------

	main()

	like(hCaller, {
		type: 'function',
		name: 'main',
		source: 'test/v8-stack.test.civet'
		})
}

	)();

// ---------------------------------------------------------------------------

(function() {
	let lCallers1 = undef
	let lCallers2 = undef

	const main = function() {
		func1()
		func2()
	}

	const func1 = function() {
		lCallers1 = getBoth()
	}

	const func2 = function() {
		lCallers2 = getBoth()
		return
	}

	main()
	like(lCallers1[0], {
		type: 'function',
		name: 'secondFunc',
		source: 'test/v8-stack/v8-module.civet'
		})
	like(lCallers1[1], {
		type: 'function',
		name: 'secondFunc',
		source: 'test/v8-stack/v8-module.civet'
		})
	like(lCallers2[0], {
		type: 'function',
		name: 'secondFunc',
		source: 'test/v8-stack/v8-module.civet'
		})
	like(lCallers2[1], {
		type: 'function',
		name: 'secondFunc',
		source: 'test/v8-stack/v8-module.civet'
		})
}

	)();

// ---------------------------------------------------------------------------

(async () => {
	const func1 = async () => {
		return await func2()
	}

	const func2 = async () => {
		return await getV8StackStr()
	}

	equal(await func1(), `[function   ] test/v8-stack.test.civet:190:15
[function   ] test/v8-stack.test.civet:187:15
[function   ] test/v8-stack.test.civet:192:13
[script     ] test/v8-stack.test.civet:199:3`)
}

	)();

// ---------------------------------------------------------------------------

(async () => {
	const func1 = async () => {
		func2()
		return await getV8StackStr()
	}

	const func2 = () => {
		return 2 * 2
	}

	equal(await func1(), `[function   ] test/v8-stack.test.civet:206:15
[function   ] test/v8-stack.test.civet:211:13
[script     ] test/v8-stack.test.civet:216:3`)
}
	)();

// ---------------------------------------------------------------------------

(function() {
	let caller1 = undef
	let caller2 = undef

	const main = function() {
		func1()
		func2()
	}

	const func1 = function() {
		caller1 = getMyCaller()
	}

	const func2 = function() {
		caller2 = getMyCaller()
		return
	}

	main()
	like(caller1, {
		type: 'function',
		name: 'main',
		source: 'test/v8-stack.test.civet'
		})
	like(caller2, {
		type: 'function',
		name: 'main',
		source: 'test/v8-stack.test.civet'
		})
}
	)()

//# sourceMappingURL=data:application/json;charset=utf-8;base64,