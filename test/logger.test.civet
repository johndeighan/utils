# logger.test.civet

import {
	assert, throwsError,
	DBG, LOG, WARN, ERR,
	getLog, getFullLog, setLogLevel, clearLog,
	curLogLevel, pushLogLevel, popLogLevel,
	INDENT, UNDENT, getCmdArgs, logger, LoggerEx,
	} from '../src/lib/utils.ts'
import {
	equal, truthy, falsy, succeeds, fails, matches,
	} from '../src/lib/unit-test.ts'

hArgs := getCmdArgs()

# ---------------------------------------------------------------------------

DBG "DBG, LOG, WARN, ERR"

logAll := (): void =>
	DBG "debug"
	LOG "info"
	WARN "warning"
	ERR "error"
	return

DBG "clearLog"

getTestLog := (level: string='info'): string =>
	clearLog(level)
	logAll()
	return getLog()

# ---------------------------------------------------------------------------

DBG "class LoggerEx"
DBG "const logger"

truthy (logger instanceof LoggerEx)

DBG "getLog()"

(() =>
	equal getTestLog(), """
		I info
		W warning
		ERROR: error
		"""
	)()

(() =>
	equal getTestLog('debug'), """
		D debug
		I info
		W warning
		ERROR: error
		"""
	)()

(() =>
	equal getTestLog('error'), """
		ERROR: error
		"""
	)()

DBG "const INDENT, UNDENT, CLEAR"

succeeds () =>
	clearLog('info')
	LOG "info", INDENT, "stuff", UNDENT
	LOG "done"
	equal getLog(), """
		I info
		I    stuff
		I done
		"""

succeeds () =>
	clearLog('info')
	LOG "info", INDENT, "stuff", UNDENT
	LOG "finished"
	equal getLog(), """
		I info
		I    stuff
		I finished
		"""

succeeds () =>
	clearLog('profile')
	LOG "info", INDENT, "stuff", UNDENT
	LOG "done"

	matches getLog(), ///^
		ms \n
		-{5} \n
		\s* \d+ \s I \s info \n
		\s* \d+ \s I \s{4} stuff
		\s* \d+ \s I \s done
		$///

DBG "curLogLevel(), setLogLevel()"
DBG "pushLogLevel(), popLogLevel()"
DBG "getLog(), getFullLog()"

succeeds () =>
	clearLog('warn')
	logAll()
	assert (curLogLevel() == 'warn')

	setLogLevel('info')
	logAll()
	assert (curLogLevel() == 'info')

	pushLogLevel('error')
	logAll()
	assert (curLogLevel() == 'error')

	popLogLevel()
	logAll()
	assert (curLogLevel() == 'info')

	assert (getLog() == """
		W warning
		ERROR: error
		I info
		W warning
		ERROR: error
		ERROR: error
		I info
		W warning
		ERROR: error
		""")

	assert (getFullLog() == """
		W warning
		ERROR: error
		I info
		W warning
		ERROR: error
		ERROR: error
		I info
		W warning
		ERROR: error
		""")
