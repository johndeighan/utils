"use strict";
// log-levels.lib.test.civet

import {
	DBG,
	} from '../src/lib/utils.lib.ts'
import {
	TLogLevel, getLogLevel, isLogLevel, isInactiveLevel,
	setLogLevel, pushLogLevel, popLogLevel, resetLogLevel,
	} from '../src/lib/log-levels.lib.ts'
import {
	equal, truthy, falsy, succeeds, fails, matches,
	isType, notType,
	} from '../src/lib/unit-test.lib.ts'

// ---------------------------------------------------------------------------
// --- Possible log levels:
//        profile
//        debug
//        info
//        warn
//        error
//        silent
//        none
// --- All levels above the current level are inactive

// ---------------------------------------------------------------------------

DBG("type TLogLevel")

isType('TLogLevel', 'debug')
isType('TLogLevel', 'warn')
notType('TLogLevel', 'dummy')

DBG("getLogLevel()")

equal(getLogLevel(), 'info')

DBG("isLogLevel()")

truthy(isLogLevel('info'))
truthy(isLogLevel('debug'))
falsy( isLogLevel('dummy'))

DBG("isInactiveLevel()")

truthy(isInactiveLevel('debug'))
falsy( isInactiveLevel('error'))

DBG("setLogLevel()")

setLogLevel('debug')
equal(getLogLevel(), 'debug')
falsy(isInactiveLevel('debug'))
setLogLevel('info')
equal(getLogLevel(), 'info')
truthy(isInactiveLevel('debug'))

DBG("pushLogLevel()")

pushLogLevel('error')
equal(getLogLevel(), 'error')
truthy(isInactiveLevel('info'))
truthy(isInactiveLevel('warn'))
falsy( isInactiveLevel('error'))

DBG("popLogLevel()")

popLogLevel()
equal(getLogLevel(), 'info')

DBG("resetLogLevel()")

setLogLevel('debug')
resetLogLevel()
equal(getLogLevel(), 'info')

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVzdC9sb2ctbGV2ZWxzLmxpYi50ZXN0LmNpdmV0LnRzeCIsInNvdXJjZXMiOlsidGVzdC9sb2ctbGV2ZWxzLmxpYi50ZXN0LmNpdmV0Il0sIm1hcHBpbmdzIjoiO0FBQUEsNEJBQTJCO0FBQzNCLEFBQUE7QUFDQSxBQUFBLE1BQU0sQ0FBQyxDQUFDO0FBQ1IsQ0FBQyxHQUFHLENBQUM7QUFDTCxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMseUJBQXlCO0FBQ2pDLEFBQUEsQUFBQSxNQUFNLENBQUMsQ0FBQztBQUNSLENBQUMsU0FBUyxDQUFDLENBQUMsV0FBVyxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsZUFBZSxDQUFDO0FBQ3JELENBQUMsV0FBVyxDQUFDLENBQUMsWUFBWSxDQUFDLENBQUMsV0FBVyxDQUFDLENBQUMsYUFBYSxDQUFDO0FBQ3ZELENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyw4QkFBOEI7QUFDdEMsQUFBQSxBQUFBLE1BQU0sQ0FBQyxDQUFDO0FBQ1IsQ0FBQyxLQUFLLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxPQUFPLENBQUM7QUFDaEQsQ0FBQyxNQUFNLENBQUMsQ0FBQyxPQUFPLENBQUM7QUFDakIsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLDZCQUE2QjtBQUNyQyxBQUFBO0FBQ0EsQUFBQSw4RUFBNkU7QUFDN0UsQUFBQSwyQkFBMEI7QUFDMUIsQUFBQSxpQkFBZ0I7QUFDaEIsQUFBQSxlQUFjO0FBQ2QsQUFBQSxjQUFhO0FBQ2IsQUFBQSxjQUFhO0FBQ2IsQUFBQSxlQUFjO0FBQ2QsQUFBQSxnQkFBZTtBQUNmLEFBQUEsY0FBYTtBQUNiLEFBQUEsc0RBQXFEO0FBQ3JELEFBQUE7QUFDQSxBQUFBLDhFQUE2RTtBQUM3RSxBQUFBO0FBQ0EsQUFBQSxBQUFBLEdBQUcsQ0FBQSxBQUFDLGdCQUFnQixDQUFBO0FBQ3BCLEFBQUE7QUFDQSxBQUFBLEFBQUEs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b2ctbGV2ZWxzLmxpYi50ZXN0LmNpdmV0XG5cbmltcG9ydCB7XG5cdERCRyxcblx0fSBmcm9tICcuLi9zcmMvbGliL3V0aWxzLmxpYi50cydcbmltcG9ydCB7XG5cdFRMb2dMZXZlbCwgZ2V0TG9nTGV2ZWwsIGlzTG9nTGV2ZWwsIGlzSW5hY3RpdmVMZXZlbCxcblx0c2V0TG9nTGV2ZWwsIHB1c2hMb2dMZXZlbCwgcG9wTG9nTGV2ZWwsIHJlc2V0TG9nTGV2ZWwsXG5cdH0gZnJvbSAnLi4vc3JjL2xpYi9sb2ctbGV2ZWxzLmxpYi50cydcbmltcG9ydCB7XG5cdGVxdWFsLCB0cnV0aHksIGZhbHN5LCBzdWNjZWVkcywgZmFpbHMsIG1hdGNoZXMsXG5cdGlzVHlwZSwgbm90VHlwZSxcblx0fSBmcm9tICcuLi9zcmMvbGliL3VuaXQtdGVzdC5saWIudHMnXG5cbiMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4jIC0tLSBQb3NzaWJsZSBsb2cgbGV2ZWxzOlxuIyAgICAgICAgcHJvZmlsZVxuIyAgICAgICAgZGVidWdcbiMgICAgICAgIGluZm9cbiMgICAgICAgIHdhcm5cbiMgICAgICAgIGVycm9yXG4jICAgICAgICBzaWxlbnRcbiMgICAgICAgIG5vbmVcbiMgLS0tIEFsbCBsZXZlbHMgYWJvdmUgdGhlIGN1cnJlbnQgbGV2ZWwgYXJlIGluYWN0aXZlXG5cbiMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbkRCRyBcInR5cGUgVExvZ0xldmVsXCJcblxuaXNUeXBlICdUTG9nTGV2ZWwnLCAnZGVidWcnXG5pc1R5cGUgJ1RMb2dMZXZlbCcsICd3YXJuJ1xubm90VHlwZSAnVExvZ0xldmVsJywgJ2R1bW15J1xuXG5EQkcgXCJnZXRMb2dMZXZlbCgpXCJcblxuZXF1YWwgZ2V0TG9nTGV2ZWwoKSwgJ2luZm8nXG5cbkRCRyBcImlzTG9nTGV2ZWwoKVwiXG5cbnRydXRoeSBpc0xvZ0xldmVsKCdpbmZvJylcbnRydXRoeSBpc0xvZ0xldmVsKCdkZWJ1ZycpXG5mYWxzeSAgaXNMb2dMZXZlbCgnZHVtbXknKVxuXG5EQkcgXCJpc0luYWN0aXZlTGV2ZWwoKVwiXG5cbnRydXRoeSBpc0luYWN0aXZlTGV2ZWwoJ2RlYnVnJylcbmZhbHN5ICBpc0luYWN0aXZlTGV2ZWwoJ2Vycm9yJylcblxuREJHIFwic2V0TG9nTGV2ZWwoKVwiXG5cbnNldExvZ0xldmVsICdkZWJ1ZydcbmVxdWFsIGdldExvZ0xldmVsKCksICdkZWJ1ZydcbmZhbHN5IGlzSW5hY3RpdmVMZXZlbCgnZGVidWcnKVxuc2V0TG9nTGV2ZWwgJ2luZm8nXG5lcXVhbCBnZXRMb2dMZXZlbCgpLCAnaW5mbydcbnRydXRoeSBpc0luYWN0aXZlTGV2ZWwoJ2RlYnVnJylcblxuREJHIFwicHVzaExvZ0xldmVsKClcIlxuXG5wdXNoTG9nTGV2ZWwoJ2Vycm9yJylcbmVxdWFsIGdldExvZ0xldmVsKCksICdlcnJvcidcbnRydXRoeSBpc0luYWN0aXZlTGV2ZWwoJ2luZm8nKVxudHJ1dGh5IGlzSW5hY3RpdmVMZXZlbCgnd2FybicpXG5mYWxzeSAgaXNJbmFjdGl2ZUxldmVsKCdlcnJvcicpXG5cbkRCRyBcInBvcExvZ0xldmVsKClcIlxuXG5wb3BMb2dMZXZlbCgpXG5lcXVhbCBnZXRMb2dMZXZlbCgpLCAnaW5mbydcblxuREJHIFwicmVzZXRMb2dMZXZlbCgpXCJcblxuc2V0TG9nTGV2ZWwgJ2RlYnVnJ1xucmVzZXRMb2dMZXZlbCgpXG5lcXVhbCBnZXRMb2dMZXZlbCgpLCAnaW5mbydcbiJdfQ==