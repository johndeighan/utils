"use strict";
// datatypes.test.civet

import {
	hash, array,
	undef, defined, notdefined,
	isString, isNonEmptyString, isBoolean, isNumber, isInteger,
	isArray, isArrayOfStrings, isHash, isObject, isRegExp,
	isEmpty, nonEmpty,
	} from '../src/lib/datatypes.ts'
import {getCmdArgs, DBG} from '../src/lib/utils.ts'
import {
	truthy, falsy,
	} from '../src/lib/unit-test.ts'

const hArgs = getCmdArgs()

// ---------------------------------------------------------------------------

DBG("type hash")

const h: hash = {
	a: 1,
	b: 2
	}
truthy(isHash(h))

DBG("const undef")

truthy((undef === undefined))
falsy( defined(undef))
truthy(notdefined(undef))

DBG("defined(x)")

truthy(defined(42))
truthy(defined('abc'))
truthy(defined([1,2]))
truthy(defined({a: 13}))
truthy(!defined(undefined))

DBG("notdefined(x)")

truthy(notdefined(null))
truthy(notdefined(undef))
falsy( notdefined(42))
falsy( notdefined('abc'))

DBG("isString(x)")

truthy(isString('abc'))
truthy(isString(''))
falsy(isString(42))
falsy(isString(undef))
falsy(isString([1,2]))
falsy(isString({a:1, b:2}))
falsy(isString(/\s/))

DBG("isNonEmptyString(x)")

truthy(isNonEmptyString('a'))
falsy( isNonEmptyString(''))
falsy( isNonEmptyString(undef))
falsy( isNonEmptyString(42))

DBG("isBoolean(x)")

truthy(isBoolean(true))
falsy( isBoolean(42))

DBG("isNumber(x)")

truthy(isNumber(42))
truthy(isNumber(new Number(42)))
falsy(isNumber('abc'))
truthy(isNumber(3.14159))

DBG("isInteger(x)")

truthy(isInteger(42))
falsy( isInteger(3.14159))
falsy( isInteger('42'))

DBG("isArray(x)")

truthy(isArray([1,2]))
falsy( isArray('abc'))
falsy( isArray(42))

DBG("isArrayOfStrings(x)")

truthy(isArrayOfStrings(['abc','def']))
falsy( isArrayOfStrings(42))
falsy( isArrayOfStrings([1,2]))
falsy( isArrayOfStrings(['abc',2]))

DBG("isHash(x)")

truthy(isHash({a:1, b:2}))
falsy( isHash(42))
falsy( isHash([1, 2]))

DBG("isObject(x)")

truthy(isObject({}))
falsy( isObject(42))
truthy(isObject({a:1, b:2}))
truthy(isObject([1, 2]))

DBG("isRegExp(x)")

truthy(isRegExp(/^abc$/))
falsy( isRegExp('abc'))

DBG("isEmpty(x)")

truthy(isEmpty(undefined))
truthy(isEmpty(null))
truthy(isEmpty(''))
truthy(isEmpty('   '))
truthy(isEmpty('\t\t'))
truthy(isEmpty([]))
truthy(isEmpty({}))
falsy( isEmpty('abc'))
falsy( isEmpty([1,2]))
falsy( isEmpty({a:1}))

DBG("nonEmpty(x)")

falsy( nonEmpty(undefined))
falsy( nonEmpty(null))
falsy( nonEmpty(''))
falsy( nonEmpty('   '))
falsy( nonEmpty('\t\t'))
falsy( nonEmpty([]))
falsy( nonEmpty({}))
truthy(nonEmpty('abc'))
truthy(nonEmpty([1,2]))
truthy(nonEmpty({a:1}))

//# sourceMappingURL=data:application/json;charset=utf-8;base64,