"use strict";
// llutils.lib.test.civet

import {
	undef, sinceLoad, sinceLoadStr,
	croak, assert, throwsError, pass, deepEqual,
	functionDef,
	stringify, OL, ML, o, s, t,
	strToHash, addDefaults, getOptions,
	removeEmptyKeys, keys, hasKey, hasKeys, missingKeys,
	merge, hit, sleep, spaces, tabs,
	rtrim, countChars, wsSplit, words,
	blockToArray, allLinesInBlock, toArray,
	isArray, isHash,
	arrayToBlock, toBlock,
	escapeStr, unescapeStr, escapeBlock,
	LOG, DBG, WARN, ERR, getCmdArgs,
	getNExtra, rpad, lpad, centered, relpath,
	TAlignment, isAlignment, alignString, zpad,
	TBlockSpec, isBlockSpec, allMatches,
	range, Fetcher,
	assertSameStr, interpolate,
	} from '../src/lib/utils.lib.ts'
import {
	equal, truthy, falsy, succeeds, fails, codeLike,
	isType, notType,
	} from '../src/lib/unit-test.lib.ts'

const hArgs = getCmdArgs()

// ---------------------------------------------------------------------------

DBG("sinceLoad()")

succeeds(() => LOG(sinceLoad()))

DBG("sinceLoadStr()")

succeeds(() => LOG(sinceLoadStr()))

DBG("croak()")

fails(() => croak("Bad"))

DBG("throwsError()")

succeeds(() => throwsError(() => { throw new Error("why?") }))
// fails () => throwsError(() => return)

DBG("pass()")

succeeds(() => pass())

DBG("deepEqual()")

truthy(deepEqual(2, 2))
truthy(deepEqual('a', 'a'))
truthy(deepEqual(['a','b'], ['a','b']))
falsy( deepEqual(['a','b'], ['a','b','c']))

DBG("stringify(x)")

equal(stringify(undef), 'undefined')
equal(stringify(undefined), 'undefined')
equal(stringify(null), 'null')
equal(stringify('abc'), '"abc"')
equal(stringify('ab\ncd'), '"ab\\ncd"')
equal(stringify(42), '42')
equal(stringify(3.14), '3.14')
equal(stringify(true), 'true')
equal(stringify(false), 'false')
equal(stringify(100n), '100n')
equal(stringify(Symbol()), 'Symbol()')
equal(stringify(Symbol('abc')), 'Symbol("abc")')

const lFruit = ['apple','peach','pear'] as const
equal(stringify(lFruit), `[
"apple",
"peach",
"pear"
]`)
equal(stringify(lFruit, o`oneLine`),
	'["apple", "peach", "pear"]')

const hInfo = {
	name: 'John',
	age: 72
	} as const
equal(stringify(hInfo, o`oneLine`),
	'{name: "John", age: 72}')
equal(stringify(hInfo, o`!oneLine`), `{
name: "John",
age: 72
}`)

const func = (x: string): string => {
	return x.toUpperCase()
}

codeLike(functionDef(func),
	"x=>{return x.toUpperCase()};")

function double(x: number): number {
	return 2 * x
}

codeLike(functionDef(double),
	"function double(x){return 2*x;}")

equal(stringify({
	a: undef,
	b: null,
	c: 'abc',
	d: 42,
	e: false,
	f:(a: string) => { return }
	}, o`oneLine`), '{a: undefined, b: null, c: "abc", d: 42, e: false, f: a=>{return}}')

equal(stringify({
	a: undef,
	b: null,
	c: 'abc',
	d: 42,
	e: false,
	f:(a: string) => { return }
	}), `{
a: undefined,
b: null,
c: "abc",
d: 42,
e: false,
f: a=>{return}
}`)

DBG("OL()")

equal(OL({a:1, b:2}), '{"a":1,"b":2}')
equal(OL('abc'), '"abc"')
equal(OL([1, 2, 3]), '[1,2,3]')
equal(OL(undefined), 'undef')
equal(OL(null), 'null')

DBG("ML()")

equal(ML(undefined), 'undef')
equal(ML(null), 'null')
equal(ML('abc'), '"abc"')
equal(ML({a:1, b:2}), `{
   "a": 1,
   "b": 2
}`)
equal(ML([1,'abc']), `[
   1,
   "abc"
]`)

DBG("strToHash()")

equal(strToHash('debug'), {debug: true})
equal(strToHash('debug force'), {
	debug: true,
	force: true
	})
equal(strToHash('debug !force'), {
	debug: true,
	force: false
	})
equal(strToHash('debug !force  size=3'), {
	debug: true,
	force: false,
	size: 3
	})
equal(strToHash('hide=1,2'), {
	hide: '1,2'
	})

DBG("o()")

equal(o`debug`, {debug: true})
equal(o`!debug`, {debug: false})
equal(o`  debug  `, {debug: true})
equal(o`  !debug  `, {debug: false})
equal(o`debug label=abc n=42`, {debug: true, label: 'abc', n: 42})

DBG("s()")

equal(s`\tabc`, "   abc")
equal(s`\t\tabc`, "      abc")

DBG("t()")

equal(t`   abc`, "\tabc")
equal(t`      abc`, "\t\tabc")

DBG("addDefaults()")

equal(addDefaults({debug: true}, {force: true}), {
	debug: true,
	force: true
	})

DBG("getOptions()")

equal(getOptions({debug: true}), {debug: true})
equal(getOptions({debug: true}, {force: false}), {
	debug: true,
	force: false
	})
equal(getOptions(o`debug`), {debug: true})
equal(getOptions(o`!debug`), {debug: false})
equal(getOptions(o`debug`, {force: false}), {
	debug: true,
	force: false
	})

DBG("removeEmptyKeys()")

equal(removeEmptyKeys({a: 1, b: undef}), {a: 1})

DBG("keys()")

equal(keys({a:1, b:2, c:3}), ['a','b','c'])
equal(keys({a:1, b:2, c:3}, {except: 'b'}), ['a','c'])
equal(keys({a:1, b:2, c:3}, o`except=b`), ['a','c'])

DBG("hasKey()")

truthy(hasKey({a:1, b:2}, 'b'))
truthy(hasKey({a:1, b:2}, 'a', 'b'))
falsy( hasKey({a:1, b:2}, 'c'))
falsy( hasKey({a:1, b:2}, 'a', 'c'))

DBG("hasKeys()")   // --- a synonym for hasKey()

truthy(hasKeys({a:1, b:2}, 'b'))
truthy(hasKeys({a:1, b:2}, 'a', 'b'))
falsy( hasKeys({a:1, b:2}, 'c'))
falsy( hasKeys({a:1, b:2}, 'a', 'c'))

DBG("missingKeys()");

(() => {
	const h = {a:1, b:2}
	equal(missingKeys(h, 'a','b','c','d'), ['c','d'])
}
	)()

DBG("merge()")

equal(merge({a:1}, {b:2}), {a:1, b:2})
equal(merge({a:1, b:2}, {b:3, c:4}), {a:1, b:3, c:4})

DBG("hit()")

succeeds(() => hit(25))
truthy(hit(100))
falsy( hit(0))

DBG("sleep()")

const ms0 = Date.now()
await sleep(2)   // 2 seconds
truthy((Date.now()-ms0 > 1000))

DBG("spaces()")

equal(spaces(3), '   ')

DBG("tabs()")

equal(tabs(3), '\t\t\t')

DBG("rtrim(str)")

equal(rtrim('abc   \t\t'), 'abc')

DBG("countChars(str, ch)")

equal(countChars('abcabcabc', 'a'), 3)

DBG("blockToArray(block)")

equal(blockToArray(`abc
def`), ['abc','def'])

DBG("allLinesInBlock(block)")

equal(Array.from(allLinesInBlock(`abc
def`)), ['abc', 'def'])

equal(Array.from(allLinesInBlock(`abc

def`)), ['abc', '', 'def'])

equal(Array.from(allLinesInBlock("a\nb\n")), [
	'a',
	'b'
	])

DBG("type TBlockSpec", "isBlockSpec()")

truthy(isBlockSpec('abc'))
truthy(isBlockSpec(['abc','def']))
falsy( isBlockSpec(42))

DBG("toArray(strOrArray)")

equal(toArray("abc\ndef\nx"), ['abc','def','x'])
equal(toArray(['a','b']), ['a', 'b'])

DBG("arrayToBlock(x)")

equal(arrayToBlock(['a','b']), 'a\nb')

DBG("toBlock(strOrArray)")

equal(toBlock(['a','b']), 'a\nb')
equal(toBlock("abc\ndef"), "abc\ndef")

DBG("escapeStr()")

equal(escapeStr('abc'), 'abc')
equal(escapeStr('   abc'), '˳˳˳abc')
equal(escapeStr('\t\t\tabc'), '→→→abc')
equal(escapeStr('abc\r\ndef'), 'abc←↓def')
equal(escapeStr('abc\n'), 'abc↓')
equal(escapeStr('abc\r\n'), 'abc←↓')
equal(escapeStr('ab cd'), 'ab˳cd')
equal(escapeStr('ab\tcd'), 'ab→cd')
equal(escapeStr('abcd', o`offset=2`), 'ab┊cd');

(() => {
	const hReplace = {
		'\t': '\\t',
		'\n': '\\n'
		}
	equal(escapeStr('ab\tcd', {hReplace}), 'ab\\tcd')
	equal(escapeStr('\r\n', {hReplace}), '\r\\n')
}
	)()

DBG("unescapeStr(str)")

equal('\\r\\n'.length, 4)
equal('\r\n'.length, 2)
equal(unescapeStr('\\r\\n'), '\n')
equal(unescapeStr('ab\\tcd'), 'ab\tcd')

DBG("escapeBlock()")

equal(escapeBlock('abc'), 'abc')
equal(escapeBlock('   abc'), '˳˳˳abc')
equal(escapeBlock('\t\t\tabc'), '→→→abc')
equal(escapeBlock('abc\r\ndef'), "abc\r\ndef")
equal(escapeBlock('abc\ndef'), `abc
def`)
equal(escapeBlock('abc\ndef'), `abc
def`)
equal(escapeBlock('   abc\n\t\t\tdef'), `˳˳˳abc
→→→def`)

DBG("relpath()")

equal(relpath('C:/Users/johnd/utils/deno.jsonc'), 'deno.jsonc')

DBG("wsSplit()")

equal(wsSplit("abc def"), ["abc", "def"])
equal(wsSplit("abc"), ["abc"])
equal(wsSplit(""), [])
equal(wsSplit("  "), [])
equal(wsSplit("\t"), [])
equal(wsSplit("  abc  def\t\t"), ["abc", "def"])

DBG("words()")

equal(words("abc def"), ["abc", "def"])
equal(words("abc"), ["abc"])
equal(words(""), [])
equal(words("  "), [])
equal(words("\t"), [])
equal(words("  abc  def\t\t"), ["abc", "def"])
equal(words(" abc  def", "ghi j "), [
	"abc",
	"def",
	"ghi",
	"j"
	])

DBG("getNExtra()")

equal(getNExtra('abcd', 10), 6)
equal(getNExtra('abcd', 2), 0)

DBG("rpad()")

equal(rpad('abcd', 10, '-'), 'abcd------')

DBG("lpad()")

equal(lpad('abcd', 10, '-'), '------abcd')

DBG("centered()")

equal(centered('abcd', 12, '-'), '--  abcd  --')

DBG("type TAlignment", "isAlignment()")

truthy(isAlignment('l'))
truthy(isAlignment('left'))
falsy( isAlignment('x'))

DBG("alignString()")

equal(alignString('abc', 5, 'left'), 'abc  ')
equal(alignString('abc', 5, 'center'), ' abc ')
equal(alignString('abc', 5, 'right'), '  abc')
equal(alignString('abc', 5, 'l'), 'abc  ')
equal(alignString('abc', 5, 'c'), ' abc ')
equal(alignString('abc', 5, 'r'), '  abc')

DBG("zpad()")

equal(zpad(23, 5), '00023')

DBG("allMatches()");

(() => {
	const str = '"a,b", "c,d"'
	const re = /"([^"]*)"/
	equal(Array.from(allMatches(str, re)).map((x) => x[1]), [
		'a,b',
		'c,d'
		])
}
	)();

(() => {
	const str = 'DBG "type TBlockSpec", "function isBlockSpec"'
	const re = /"\s*(?:(type|const|interface|enum|class|function)\s+)?([A-Za-z0-9_]+)(\(.*\))?\s*"/
	const lMatches = Array.from(allMatches(str, re))
	equal(lMatches.map((x) => x[1]), ['type', 'function'])
	equal(lMatches.map((x) => x[2]), ['TBlockSpec', 'isBlockSpec'])
	equal(lMatches.map((x) => x[3]), [undef, undef])
}
	)();

(() => {
	const str = 'DBG "type TBlockSpec", "function isBlockSpec"'
	const re = /"\s*(?:(type|const|interface|enum|class|function)\s+)?([A-Za-z0-9_]+)(\(.*\))?\s*"/
	const lIdents: string[] = []
	for (const x of allMatches(str, re)) {
		lIdents.push(x[2])
	}
	equal(lIdents, ['TBlockSpec', 'isBlockSpec'])
}
	)()

DBG("range()")

equal(Array.from(range(3)), [0, 1, 2])
equal(Array.from(range(5)), [0, 1, 2, 3, 4])

DBG("class Fetcher");

(() => {
	const fetcher = new Fetcher<number>(range(3), -1)
	equal(fetcher.get(), 0)
	equal(fetcher.get(), 1)
	falsy(fetcher.atEnd())
	equal(fetcher.peek(), 2)
	equal(fetcher.peek(), 2)
	equal(fetcher.get(), 2)
	truthy(fetcher.atEnd())
}
	)()

DBG("interpolate()")

equal(interpolate("time: $time", {'$time': '3pm'}),
	"time: 3pm");

(() => {
	const hReplace = {
		'$time': '3pm',
		'$name': 'John',
		'$age' : '72'
		}
	const result = interpolate(
		'$name is $age years old at $time',
		hReplace
		)
	equal(result, 'John is 72 years old at 3pm')
}
	)()

// --- all keys must begin with '$'
fails(() => interpolate("abc", {'abc': 'def'}))

//# sourceMappingURL=data:application/json;charset=utf-8;base64,