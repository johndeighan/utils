"use strict";
// tokens.lib.test.civet

import {
	undef, DBG, allLinesInBlock,
	} from '../src/lib/utils.lib.ts'
import {
	Token, TTokenGenerator,
	allTokensIn, allTokensInBlock, tokenTable,
	} from '../src/lib/tokens.lib.ts'
import {
	equal, iterEqual, iterLike, listLike, isType,
	} from '../src/lib/unit-test.lib.ts'

// ---------------------------------------------------------------------------

DBG("type Token")

isType('Token', {kind: 'xxx', str: 'yyy'})
isType('Token', {kind: 'xxx', str: 'yyy', value: undef})
isType('Token', {kind: 'xxx', str: 'yyy', value: 42})

DBG("type TTokenGenerator");

(() => {
	const identGen = function*(line: string) {
		yield {kind: 'line', str: line}
		return
	}
	isType('TTokenGenerator', identGen)
}
	)();

(() => {
	const charGen = function*(line: string) {
		for (const ch of line) {
			yield {kind: 'char', str: ch}
		}
		return
	}
	isType('TTokenGenerator', charGen)
}
	)()

DBG("allTokensIn()")

iterLike(allTokensIn(allLinesInBlock("abc\ndef")), [
	{kind: 'line', str: 'abc'},
	{kind: 'line', str: 'def'}
	])

iterEqual(allTokensIn(allLinesInBlock('abc\ndef')), [
	{kind: 'line', str: 'abc'},
	{kind: 'line', str: 'def'}
	])

DBG("allTokensInBlock(str)")

iterEqual(allTokensInBlock('abc\ndef'), [
	{kind: 'line', str: 'abc'},
	{kind: 'line', str: 'def'}
	])

iterLike(allTokensInBlock(`abc
def`), [
	{kind: 'line', str: 'abc'},
	{kind: 'line', str: 'def'}
	])

iterLike(allTokensInBlock("abc\n\tdef"), [
	{kind: 'line', str: 'abc'},
	{kind: 'indent'},
	{kind: 'line', str: 'def'},
	{kind: 'undent'}
	])

iterLike(allTokensInBlock(`abc
	def
	ghi
jkl
	mno
		pqr`), [
	{kind: 'line', str: 'abc'},
	{kind: 'indent'},
	{kind: 'line', str: 'def'},
	{kind: 'line', str: 'ghi'},
	{kind: 'undent'},
	{kind: 'line', str: 'jkl'},
	{kind: 'indent'},
	{kind: 'line', str: 'mno'},
	{kind: 'indent'},
	{kind: 'line', str: 'pqr'},
	{kind: 'undent'},
	{kind: 'undent'}
	])

iterLike(allTokensInBlock(`abc
	def
	ghi
jkl
	mno
		pqr
`), [
	{kind: 'line', str: 'abc'},
	{kind: 'indent'},
	{kind: 'line', str: 'def'},
	{kind: 'line', str: 'ghi'},
	{kind: 'undent'},
	{kind: 'line', str: 'jkl'},
	{kind: 'indent'},
	{kind: 'line', str: 'mno'},
	{kind: 'indent'},
	{kind: 'line', str: 'pqr'},
	{kind: 'undent'},
	{kind: 'undent'}
	])

// --- by default, empty lines return no tokens

iterLike(allTokensInBlock(`abc
	def
	ghi

jkl
	mno
		pqr`), [
	{kind: 'line',  str: 'abc'},
	{kind: 'indent'},
	{kind: 'line',  str: 'def'},
	{kind: 'line',  str: 'ghi'},
	{kind: 'undent'},
	{kind: 'line',  str: 'jkl'},
	{kind: 'indent'},
	{kind: 'line',  str: 'mno'},
	{kind: 'indent'},
	{kind: 'line',  str: 'pqr'},
	{kind: 'undent'},
	{kind: 'undent'}
	]);

// --- Test allTokensInBlock() with a custom token generator

(() => {
	const charGenerator: TTokenGenerator = function*(line: string) {
		for (const ch of line) {
			yield {kind: 'char', str: ch}
		}
		return
	}

	iterLike(allTokensInBlock(`abc
	def`, charGenerator), [
		{ kind: "char", str: "a" },
		{ kind: "char", str: "b" },
		{ kind: "char", str: "c" },
		{ kind: "indent"},
		{ kind: "char", str: "d" },
		{ kind: "char", str: "e" },
		{ kind: "char", str: "f" },
		{ kind: "undent"}
		])
}
	)();

(() => {
	const niceGenerator: TTokenGenerator = function*(line: string) {
		let ref;if ((ref = line.match(/^-\s+(.*)$/))) {let lMatches = ref;
			yield {
				kind: 'list-item',
				str: line,
				value: lMatches[1]
				}
		}
		else {
			yield {
				kind: 'line',
				str: line
				}
		}
		return
	}

	iterLike(allTokensInBlock(`- a
- b`, niceGenerator), [
		{ kind: "list-item", str: "- a", value: "a" },
		{ kind: "list-item", str: "- b", value: "b" }
		])
}
	)()

DBG("tokenTable()")

equal(tokenTable([
	{kind: 'line',   str: 'abc'},
	{kind: 'indent', str: ''},
	{kind: 'line',   str: 'def'},
	{kind: 'undent', str: ''}
	]), `==========
  Tokens
==========
 kind  str
------ ---
line   abc
indent
line   def
undent
==========`)


//# sourceMappingURL=data:application/json;charset=utf-8;base64,