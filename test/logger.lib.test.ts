"use strict";
// logger.lib.test.civet

import {
	clearConsoleLog, getConsoleLog,
	} from '../src/lib/log-formatter.lib.ts'
import {
	TLogLevel, getLogLevel, isLogLevel,
	setLogLevel, pushLogLevel, popLogLevel,

	getLog, clearLog, removeLogFile, INDENT, UNDENT,
	DBG, LOG, WARN, ERR, DBGVALUE, LOGVALUE,
	} from '../src/lib/logger.lib.ts'
import {
	equal, truthy, falsy, succeeds, fails, matches,
	isType, notType,
	} from '../src/lib/unit-test.lib.ts'

// ---------------------------------------------------------------------------

DBG("getLog()")

equal(getLog('console'), "");

(() => {
	DBG("debug this")
	LOG("log this")
	WARN("warn this")
	ERR("error this")
	equal(getConsoleLog(), `log this
warn this
error this`)
}
	)()

DBG("clearLog()")

DBG("const INDENT", "const UNDENT")

DBG("DBG()", "LOG()", "WARN()", "ERR()")

DBG("DBGVALUE()", "LOGVALUE()")

DBG("removeLogFile()")

succeeds(() => removeLogFile())
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVzdC9sb2dnZXIubGliLnRlc3QuY2l2ZXQudHN4Iiwic291cmNlcyI6WyJ0ZXN0L2xvZ2dlci5saWIudGVzdC5jaXZldCJdLCJtYXBwaW5ncyI6IjtBQUFBLHdCQUF1QjtBQUN2QixBQUFBO0FBQ0EsQUFBQSxNQUFNLENBQUMsQ0FBQztBQUNSLENBQUMsZUFBZSxDQUFDLENBQUMsYUFBYSxDQUFDO0FBQ2hDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxpQ0FBaUM7QUFDekMsQUFBQSxBQUFBLE1BQU0sQ0FBQyxDQUFDO0FBQ1IsQ0FBQyxTQUFTLENBQUMsQ0FBQyxXQUFXLENBQUMsQ0FBQyxVQUFVLENBQUM7QUFDcEMsQ0FBQyxXQUFXLENBQUMsQ0FBQyxZQUFZLENBQUMsQ0FBQyxXQUFXLENBQUM7QUFDeEM7QUFDQSxDQUFDLE1BQU0sQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLE1BQU0sQ0FBQztBQUNqRCxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLFFBQVEsQ0FBQztBQUN6QyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsMEJBQTBCO0FBQ2xDLEFBQUEsQUFBQSxNQUFNLENBQUMsQ0FBQztBQUNSLENBQUMsS0FBSyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsT0FBTyxDQUFDO0FBQ2hELENBQUMsTUFBTSxDQUFDLENBQUMsT0FBTyxDQUFDO0FBQ2pCLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyw2QkFBNkI7QUFDckMsQUFBQTtBQUNBLEFBQUEsOEVBQTZFO0FBQzdFLEFBQUE7QUFDQSxBQUFBLEFBQUEsR0FBRyxDQUFBLEFBQUMsVUFBVSxDQUFBO0FBQ2QsQUFBQTtBQUNBLEFBQUEsQUFBQSxLQUFLLENBQUEsQUFBQyxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxFQUFFLEMsQ0FBQTtBQUMzQixBQUFBO0FBQ0EsQUFBQSxBQUFBLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFBLENBQUE7QUFDTixBQUFBLENBQUMsR0FBRyxDQUFBLEFBQUMsWUFBWSxDQUFBO0FBQ2pCLEFBQUEsQ0FBQyxHQUFHLENBQUEsQUFBQyxVQUFVLENBQUE7QUFDZixBQUFBLENBQUMsSUFBSSxDQUFBLEFBQUMsV0FBVyxDQUFBO0FBQ2pCLEFBQUEsQ0FBQyxHQUFHLENBQUEsQUFBQyxZQUFZLENBQUE7QUFDakIsQUFBQSxDQUFDLEtBQUssQ0FBQSxBQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFHO0FBQzNCO0FBQ0EsVUFFRSxDQUFHLEM7QUFBQSxDQUFBO0FBQ0wsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNKLEFBQUE7QUFDQSxBQUFBLEFBQUEsR0FBRyxDQUFBLEFBQUMsWUFBWSxDQUFBO0FBQ2hCLEFBQUE7QUFDQSxBQUFBLEFBQUEsR0FBRyxDQUFBLEFBQUMsY0FBYyxDQUFDLENBQUMsY0FBYyxDQUFBO0FBQ2xDLEFBQUE7QUFDQSxBQUFBLEFBQUEsR0FBRyxDQUFBLEFBQUMsT0FBTyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsT0FBTyxDQUFBO0FBQ3ZDLEFBQUE7QUFDQSxBQUFBLEFBQUEsR0FBRyxDQUFBLEFBQUMsWUFBWSxDQUFDLENBQUMsWUFBWSxDQUFBO0FBQzlCLEFBQUE7QUFDQSxBQUFBLEFBQUEsR0FBRyxDQUFBLEFBQUMsaUJBQWlCLENBQUE7QUFDckIsQUFBQTtBQUNBLEFBQUEsQUFBQSxRQUFRLENBQUEsQUFBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsYUFBYSxDQUFDLENBQzdCIiwibmFtZXMiOltdLCJzb3VyY2VzQ29udGVudCI6WyIjIGxvZ2dlci5saWIudGVzdC5jaXZldFxuXG5pbXBvcnQge1xuXHRjbGVhckNvbnNvbGVMb2csIGdldENvbnNvbGVMb2csXG5cdH0gZnJvbSAnLi4vc3JjL2xpYi9sb2ctZm9ybWF0dGVyLmxpYi50cydcbmltcG9ydCB7XG5cdFRMb2dMZXZlbCwgZ2V0TG9nTGV2ZWwsIGlzTG9nTGV2ZWwsXG5cdHNldExvZ0xldmVsLCBwdXNoTG9nTGV2ZWwsIHBvcExvZ0xldmVsLFxuXG5cdGdldExvZywgY2xlYXJMb2csIHJlbW92ZUxvZ0ZpbGUsIElOREVOVCwgVU5ERU5ULFxuXHREQkcsIExPRywgV0FSTiwgRVJSLCBEQkdWQUxVRSwgTE9HVkFMVUUsXG5cdH0gZnJvbSAnLi4vc3JjL2xpYi9sb2dnZXIubGliLnRzJ1xuaW1wb3J0IHtcblx0ZXF1YWwsIHRydXRoeSwgZmFsc3ksIHN1Y2NlZWRzLCBmYWlscywgbWF0Y2hlcyxcblx0aXNUeXBlLCBub3RUeXBlLFxuXHR9IGZyb20gJy4uL3NyYy9saWIvdW5pdC10ZXN0LmxpYi50cydcblxuIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuREJHIFwiZ2V0TG9nKClcIlxuXG5lcXVhbCBnZXRMb2coJ2NvbnNvbGUnKSwgXCJcIlxuXG4oKCkgPT5cblx0REJHIFwiZGVidWcgdGhpc1wiXG5cdExPRyBcImxvZyB0aGlzXCJcblx0V0FSTiBcIndhcm4gdGhpc1wiXG5cdEVSUiBcImVycm9yIHRoaXNcIlxuXHRlcXVhbCBnZXRDb25zb2xlTG9nKCksIFwiXCJcIlxuXHRcdGxvZyB0aGlzXG5cdFx0d2FybiB0aGlzXG5cdFx0ZXJyb3IgdGhpc1xuXHRcdFwiXCJcIlxuXHQpKClcblxuREJHIFwiY2xlYXJMb2coKVwiXG5cbkRCRyBcImNvbnN0IElOREVOVFwiLCBcImNvbnN0IFVOREVOVFwiXG5cbkRCRyBcIkRCRygpXCIsIFwiTE9HKClcIiwgXCJXQVJOKClcIiwgXCJFUlIoKVwiXG5cbkRCRyBcIkRCR1ZBTFVFKClcIiwgXCJMT0dWQUxVRSgpXCJcblxuREJHIFwicmVtb3ZlTG9nRmlsZSgpXCJcblxuc3VjY2VlZHMgKCkgPT4gcmVtb3ZlTG9nRmlsZSgpIl19