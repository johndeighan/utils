"use strict";
// logger.lib.test.civet

import {
	undef, defined, notdefined,
	} from '../src/lib/datatypes.lib.ts'
import {
	clearConsoleLog, getConsoleLog,
	} from '../src/lib/log-formatter.lib.ts'
import {
	TLogLevel, getLogLevel, isLogLevel,
	setLogLevel, pushLogLevel, popLogLevel,
	TFormatter, TreeLogger,
	getLog, clearLog, removeLogFile, INDENT, UNDENT,
	DBG, LOG, WARN, ERR, DBGVALUE, LOGVALUE,
	} from '../src/lib/logger.lib.ts'
import {
	equal, truthy, falsy, succeeds, fails, matches,
	isType, notType,
	} from '../src/lib/unit-test.lib.ts'

// ---------------------------------------------------------------------------

DBG("getLog()")

equal(getLog('console'), "");

(() => {
	DBG("debug this")
	LOG("log this")
	WARN("warn this")
	ERR("error this")
	equal(getConsoleLog(), `log this
warn this
error this`)
}
	)()

DBG("clearLog()")

DBG("const INDENT", "const UNDENT")

DBG("DBG()", "LOG()", "WARN()", "ERR()")

DBG("DBGVALUE()", "LOGVALUE()")

DBG("removeLogFile()")

succeeds(() => removeLogFile())

DBG("type TreeLogger");

(() => {
	clearConsoleLog()
	pushLogLevel('debug')
	const logr = new TreeLogger<number>()
	logr.log(    'starting')
	logr.start(  'enter A')
	logr.log(    'inside A')
	logr.succeed('OK')
	logr.log(    'continuing')
	logr.start(  'enter B')
	logr.log(    'inside B')
	logr.fail(   'FAIL')
	logr.log(    'Done')
	popLogLevel()
	equal(getConsoleLog(), `starting
enter A
│   inside A
└─> OK
continuing
enter B
│   inside B
└─> FAIL
Done`)
}
	)();

(() => {
	clearConsoleLog()
	pushLogLevel('debug')
	const logr = new TreeLogger<number>()
	logr.log(    'starting')
	logr.start(  'enter A')
	logr.log(    'inside A')
	logr.start(  'enter B')
	logr.log(    'inside B')
	logr.fail(   'FAIL')
	logr.succeed('OK')
	logr.log(    'Done')
	popLogLevel()
	equal(getConsoleLog(), `starting
enter A
│   inside A
│   enter B
│   │   inside B
│   └─> FAIL
└─> OK
Done`)
}
	)();

(() => {
	const formatter = (desc: string, n: (number | undefined)) => {
		if (defined(n)) {
			return `${desc} [Number ${n}]`
		}
		else {
			return desc
		}
	}

	clearConsoleLog()
	pushLogLevel('debug')
	const logr = new TreeLogger<number>(formatter)
	logr.log(    'starting', 42)
	logr.start(  'enter A')
	logr.log(    'inside A', 13)
	logr.start(  'enter B')
	logr.log(    'inside B', 26)
	logr.fail(   'FAIL')
	logr.succeed('OK')
	logr.log(    'Done')
	popLogLevel()
	equal(getConsoleLog(), `starting [Number 42]
enter A
│   inside A [Number 13]
│   enter B
│   │   inside B [Number 26]
│   └─> FAIL
└─> OK
Done`)
}
	)()

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVzdC9sb2dnZXIubGliLnRlc3QuY2l2ZXQudHN4Iiwic291cmNlcyI6WyJ0ZXN0L2xvZ2dlci5saWIudGVzdC5jaXZldCJdLCJtYXBwaW5ncyI6IjtBQUFBLHdCQUF1QjtBQUN2QixBQUFBO0FBQ0EsQUFBQSxNQUFNLENBQUMsQ0FBQztBQUNSLENBQUMsS0FBSyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsVUFBVSxDQUFDO0FBQzVCLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyw2QkFBNkI7QUFDckMsQUFBQSxBQUFBLE1BQU0sQ0FBQyxDQUFDO0FBQ1IsQ0FBQyxlQUFlLENBQUMsQ0FBQyxhQUFhLENBQUM7QUFDaEMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLGlDQUFpQztBQUN6QyxBQUFBLEFBQUEsTUFBTSxDQUFDLENBQUM7QUFDUixDQUFDLFNBQVMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxDQUFDLFVBQVUsQ0FBQztBQUNwQyxDQUFDLFdBQVcsQ0FBQyxDQUFDLFlBQVksQ0FBQyxDQUFDLFdBQVcsQ0FBQztBQUN4QyxDQUFDLFVBQVUsQ0FBQyxDQUFDLFVBQVUsQ0FBQztBQUN4QixDQUFDLE1BQU0sQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLE1BQU0sQ0FBQztBQUNqRCxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLFFBQVEsQ0FBQztBQUN6QyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsMEJBQTBCO0FBQ2xDLEFBQUEsQUFBQSxNQUFNLENBQUMsQ0FBQztBQUNSLENBQUMsS0FBSyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsT0FBTyxDQUFDO0FBQ2hELENBQUMsTUFBTSxDQUFDLENBQUMsT0FBTyxDQUFDO0FBQ2pCLENB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QUFDLE9BQU8sQ0FBQSxBQUFDLElBQUksQ0FBQTtBQUNsQixBQUFBLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQSxJQUFLLE1BQU0sQ0FBQTtBQUNwQixBQUFBLENBQUMsV0FBVyxDQUFDLENBQUM7QUFDZCxBQUFBLENBQUMsS0FBSyxDQUFBLEFBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUc7QUFDM0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFFRSxDQUFHLEM7QUFBQSxDQUFBO0FBQ0wsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNKIiwibmFtZXMiOltdLCJzb3VyY2VzQ29udGVudCI6WyIjIGxvZ2dlci5saWIudGVzdC5jaXZldFxyXG5cclxuaW1wb3J0IHtcclxuXHR1bmRlZiwgZGVmaW5lZCwgbm90ZGVmaW5lZCxcclxuXHR9IGZyb20gJy4uL3NyYy9saWIvZGF0YXR5cGVzLmxpYi50cydcclxuaW1wb3J0IHtcclxuXHRjbGVhckNvbnNvbGVMb2csIGdldENvbnNvbGVMb2csXHJcblx0fSBmcm9tICcuLi9zcmMvbGliL2xvZy1mb3JtYXR0ZXIubGliLnRzJ1xyXG5pbXBvcnQge1xyXG5cdFRMb2dMZXZlbCwgZ2V0TG9nTGV2ZWwsIGlzTG9nTGV2ZWwsXHJcblx0c2V0TG9nTGV2ZWwsIHB1c2hMb2dMZXZlbCwgcG9wTG9nTGV2ZWwsXHJcblx0VEZvcm1hdHRlciwgVHJlZUxvZ2dlcixcclxuXHRnZXRMb2csIGNsZWFyTG9nLCByZW1vdmVMb2dGaWxlLCBJTkRFTlQsIFVOREVOVCxcclxuXHREQkcsIExPRywgV0FSTiwgRVJSLCBEQkdWQUxVRSwgTE9HVkFMVUUsXHJcblx0fSBmcm9tICcuLi9zcmMvbGliL2xvZ2dlci5saWIudHMnXHJcbmltcG9ydCB7XHJcblx0ZXF1YWwsIHRydXRoeSwgZmFsc3ksIHN1Y2NlZWRzLCBmYWlscywgbWF0Y2hlcyxcclxuXHRpc1R5cGUsIG5vdFR5cGUsXHJcblx0fSBmcm9tICcuLi9zcmMvbGliL3VuaXQtdGVzdC5saWIudHMnXHJcblxyXG4jIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cclxuREJHIFwiZ2V0TG9nKClcIlxyXG5cclxuZXF1YWwgZ2V0TG9nKCdjb25zb2xlJyksIFwiXCJcclxuXHJcbigoKSA9PlxyXG5cdERCRyBcImRlYnVnIHRoaXNcIlxyXG5cdExPRyBcImxvZyB0aGlzXCJcclxuXHRXQVJOIFwid2FybiB0aGlzXCJcclxuXHRFUlIgXCJlcnJvciB0aGlzXCJcclxuXHRlcXVhbCBnZXRDb25zb2xlTG9nKCksIFwiXCJcIlxyXG5cdFx0bG9nIHRoaXNcclxuXHRcdHdhcm4gdGhpc1xyXG5cdFx0ZXJyb3IgdGhpc1xyXG5cdFx0XCJcIlwiXHJcblx0KSgpXHJcblxyXG5EQkcgXCJjbGVhckxvZygpXCJcclxuXHJcbkRCRyBcImNvbnN0IElOREVOVFwiLCBcImNvbnN0IFVOREVOVFwiXHJcblxyXG5EQkcgXCJEQkcoKVwiLCBcIkxPRygpXCIsIFwiV0FSTigpXCIsIFwiRVJSKClcIlxyXG5cclxuREJHIFwiREJHVkFMVUUoKVwiLCBcIkxPR1ZBTFVFKClcIlxyXG5cclxuREJHIFwicmVtb3ZlTG9nRmlsZSgpXCJcclxuXHJcbnN1Y2NlZWRzICgpID0+IHJlbW92ZUxvZ0ZpbGUoKVxyXG5cclxuREJHIFwidHlwZSBUcmVlTG9nZ2VyXCJcclxuXHJcbigoKSA9PlxyXG5cdGNsZWFyQ29uc29sZUxvZygpXHJcblx0cHVzaExvZ0xldmVsICdkZWJ1ZydcclxuXHRsb2dyIDo9IG5ldyBUcmVlTG9nZ2VyPG51bWJlcj4oKVxyXG5cdGxvZ3IubG9nICAgICAnc3RhcnRpbmcnXHJcblx0bG9nci5zdGFydCAgICdlbnRlciBBJ1xyXG5cdGxvZ3IubG9nICAgICAnaW5zaWRlIEEnXHJcblx0bG9nci5zdWNjZWVkICdPSydcclxuXHRsb2dyLmxvZyAgICAgJ2NvbnRpbnVpbmcnXHJcblx0bG9nci5zdGFydCAgICdlbnRlciBCJ1xyXG5cdGxvZ3IubG9nICAgICAnaW5zaWRlIEInXHJcblx0bG9nci5mYWlsICAgICdGQUlMJ1xyXG5cdGxvZ3IubG9nICAgICAnRG9uZSdcclxuXHRwb3BMb2dMZXZlbCgpXHJcblx0ZXF1YWwgZ2V0Q29uc29sZUxvZygpLCBcIlwiXCJcclxuXHRcdHN0YXJ0aW5nXHJcblx0XHRlbnRlciBBXHJcblx0XHTilIIgICBpbnNpZGUgQVxyXG5cdFx04pSU4pSAPiBPS1xyXG5cdFx0Y29udGludWluZ1xyXG5cdFx0ZW50ZXIgQlxyXG5cdFx04pSCICAgaW5zaWRlIEJcclxuXHRcdOKUlOKUgD4gRkFJTFxyXG5cdFx0RG9uZVxyXG5cdFx0XCJcIlwiXHJcblx0KSgpXHJcblxyXG4oKCkgPT5cclxuXHRjbGVhckNvbnNvbGVMb2coKVxyXG5cdHB1c2hMb2dMZXZlbCAnZGVidWcnXHJcblx0bG9nciA6PSBuZXcgVHJlZUxvZ2dlcjxudW1iZXI+KClcclxuXHRsb2dyLmxvZyAgICAgJ3N0YXJ0aW5nJ1xyXG5cdGxvZ3Iuc3RhcnQgICAnZW50ZXIgQSdcclxuXHRsb2dyLmxvZyAgICAgJ2luc2lkZSBBJ1xyXG5cdGxvZ3Iuc3RhcnQgICAnZW50ZXIgQidcclxuXHRsb2dyLmxvZyAgICAgJ2luc2lkZSBCJ1xyXG5cdGxvZ3IuZmFpbCAgICAnRkFJTCdcclxuXHRsb2dyLnN1Y2NlZWQgJ09LJ1xyXG5cdGxvZ3IubG9nICAgICAnRG9uZSdcclxuXHRwb3BMb2dMZXZlbCgpXHJcblx0ZXF1YWwgZ2V0Q29uc29sZUxvZygpLCBcIlwiXCJcclxuXHRcdHN0YXJ0aW5nXHJcblx0XHRlbnRlciBBXHJcblx0XHTilIIgICBpbnNpZGUgQVxyXG5cdFx04pSCICAgZW50ZXIgQlxyXG5cdFx04pSCICAg4pSCICAgaW5zaWRlIEJcclxuXHRcdOKUgiAgIOKUlOKUgD4gRkFJTFxyXG5cdFx04pSU4pSAPiBPS1xyXG5cdFx0RG9uZVxyXG5cdFx0XCJcIlwiXHJcblx0KSgpXHJcblxyXG4oKCkgPT5cclxuXHRmb3JtYXR0ZXIgOj0gKGRlc2M6IHN0cmluZywgbjogbnVtYmVyPykgPT5cclxuXHRcdGlmIGRlZmluZWQobilcclxuXHRcdFx0cmV0dXJuIFwiI3tkZXNjfSBbTnVtYmVyICN7bn1dXCJcclxuXHRcdGVsc2VcclxuXHRcdFx0cmV0dXJuIGRlc2NcclxuXHJcblx0Y2xlYXJDb25zb2xlTG9nKClcclxuXHRwdXNoTG9nTGV2ZWwgJ2RlYnVnJ1xyXG5cdGxvZ3IgOj0gbmV3IFRyZWVMb2dnZXI8bnVtYmVyPihmb3JtYXR0ZXIpXHJcblx0bG9nci5sb2cgICAgICdzdGFydGluZycsIDQyXHJcblx0bG9nci5zdGFydCAgICdlbnRlciBBJ1xyXG5cdGxvZ3IubG9nICAgICAnaW5zaWRlIEEnLCAxM1xyXG5cdGxvZ3Iuc3RhcnQgICAnZW50ZXIgQidcclxuXHRsb2dyLmxvZyAgICAgJ2luc2lkZSBCJywgMjZcclxuXHRsb2dyLmZhaWwgICAgJ0ZBSUwnXHJcblx0bG9nci5zdWNjZWVkICdPSydcclxuXHRsb2dyLmxvZyAgICAgJ0RvbmUnXHJcblx0cG9wTG9nTGV2ZWwoKVxyXG5cdGVxdWFsIGdldENvbnNvbGVMb2coKSwgXCJcIlwiXHJcblx0XHRzdGFydGluZyBbTnVtYmVyIDQyXVxyXG5cdFx0ZW50ZXIgQVxyXG5cdFx04pSCICAgaW5zaWRlIEEgW051bWJlciAxM11cclxuXHRcdOKUgiAgIGVudGVyIEJcclxuXHRcdOKUgiAgIOKUgiAgIGluc2lkZSBCIFtOdW1iZXIgMjZdXHJcblx0XHTilIIgICDilJTilIA+IEZBSUxcclxuXHRcdOKUlOKUgD4gT0tcclxuXHRcdERvbmVcclxuXHRcdFwiXCJcIlxyXG5cdCkoKVxyXG4iXX0=