"use strict";
// compile.lib.test.civet

import {
	getCmdArgs, setDirTree, DBG, withExt,
	isHash, execCmd, o, civet2jsFile,
	defined, isFunction, TPathInfo,

	TTesterFunc, TCompileStatus, TCompilerFunc, TPostProcessor,
	TCompilerConfig, isCompilerConfig,
	TCompilerInfo, isCompilerInfo,
	TCompileResult, TUnitTestResult,
	getCompilerConfig, getCompilerInfo, getPostProcessor,
	compileFile, getCompilerGlobPattern, allCompilableFiles,
	runUnitTestsFor, runAllUnitTests, userConfigPath,
	installCmd, uninstallCmd,
	} from '../src/lib/utils.lib.ts'
import {
	equal, like, succeeds, fails, truthy, falsy,
	matches, isType, notType, objListLike, strListLike,
	} from '../src/lib/unit-test.lib.ts'

getCmdArgs()

// ---------------------------------------------------------------------------

const setup = (): void => {

	setDirTree('test/compile', `test1.cielo
	# test1.cielo

	LOG := (str) => console.log str
	LOG "Hello, World!"

test2.civet
	# test2.civet

	LOG := (str) => console.log str
	LOG "Hello, World!"

test3.coffee
	# test3.coffee

	LOG = (str) => console.log str
	LOG "Hello, World!"

graph.dot
	EE -> EO | OE | OO
	EO -> EE
	OE -> EE
	OO -> EE
hello.ts
	console.log("Hello, World!");
comp.config.civet
	import {withExt} from '../../src/lib/fs.lib.ts'
	export default new Object {
		hCompilers: {
			'.test': {
				getOutPaths: (path: string) => [withExt(path, '.out')],
				tester: () => true,
				compiler: (path: string) => undefined
				}
			},
		hPostProcessors: {}
		}`, o`clear`)
	return
}

setup()

// ---------------------------------------------------------------------------

DBG("type TTesterFunc")

isType('TTesterFunc', () => {
	console.log("Hello, World!")
	return true
})

DBG("type TCompileStatus")

isType('TCompileStatus', 'temp')
isType('TCompileStatus', 'exists')
isType('TCompileStatus', 'compiled')
notType('TCompileStatus', 'dummy')

DBG("type TCompilerFunc")

isType('TCompilerFunc', (path: string) => {
	console.log(path)
	return 'compiled'
})

DBG("type TPostProcessor");

(() => {
	const logit = (hInfo: TPathInfo) => {
		console.log("done")
		return
	}
	isType('TPostProcessor', logit)
}
	)()

DBG("type TCompilerInfo")

isType('TCompilerInfo', {
	tester: () => true,
	compiler: (path: string) => { return 'compiled' },
	getOutPaths: (path: string) => { return ['temp.ts'] }
	})

DBG("type TCompilerConfig", "isCompilerConfig()")

isType('TCompilerConfig', {
	hCompilers: {},
	hPostProcessors: {}
	})

DBG("type TCompileResult")

isType('TCompileResult', {
	status: 'compiled',
	path: 'temp.civet'
	})

DBG("type TUnitTestResult")

isType('TUnitTestResult', {
	stub: 'temp',
	success: true
	})

DBG("getCompilerConfig(path)");

(() => {
	const civetPath = 'test/compile/comp.config.civet'
	civet2jsFile(civetPath)
	const jsPath = withExt(civetPath, '.js')
	const hConfig = getCompilerConfig(jsPath)
	isType('TCompilerConfig', hConfig, isCompilerConfig)
}
	)()

DBG("getCompilerInfo()")

isType('TCompilerInfo', getCompilerInfo('.dot'), isCompilerInfo)

DBG("getPostProcessor()");

(() => {
	const pp = getPostProcessor('test')
	truthy(defined(pp))
	truthy(isFunction(pp))
}
	)();

(() => {
	const pp = getPostProcessor('lib')
	truthy(defined(pp))
	truthy(isFunction(pp))
}
	)();

(() => {
	const pp = getPostProcessor('cmd')
	truthy(defined(pp))
	truthy(isFunction(pp))
}
	)()

DBG("compileFile()")

fails(() => compileFile('nosuchfile.civet'));

(() => {
	const hResult = compileFile('test/compile/test1.cielo', o`nopp`)
}
	// truthy isFile('test/compile/test1.civet')
	)()

DBG("getCompilerGlobPattern()")

equal(getCompilerGlobPattern(), "**/*{.svelte,.dot,.cielo,.civet}")

DBG("allCompilableFiles()");

(() => {
	const lInfo = Array.from(allCompilableFiles(o`root=test/compile`))
	const lFiles = lInfo.map((h) => h.fileName)
	strListLike(lFiles, [
		'graph.dot',
		'test1.cielo',
		'test2.civet',
		'comp.config.civet'
		])
}
	)()

DBG("runUnitTestsFor(stub)");

(() => {
	const lResults = Array.from(runUnitTestsFor('llutils.lib'))
	objListLike(lResults, [
		{stub: 'llutils.lib', success: true}
		])
}
	)()

DBG("runAllUnitTests()")

succeeds(() => {
	runAllUnitTests()
	return
})

DBG("const userConfigPath");

(() => {
	matches(userConfigPath, /compiler\.config\.ts/)
	const dir = Deno.cwd().replaceAll('\\','/')
	equal(userConfigPath, `${dir}/compiler.config.ts`)
}
	)()

DBG("installCmd()", "uninstallCmd()")

await installCmd('test/compile/hello.ts', 'hello')
const hResult = await execCmd('hello', [], o`collect`)
const str = hResult.stdout
equal(str, "Hello, World!\n")
await uninstallCmd('hello')

DBG("getCompilerConfig()")

truthy(isHash(getCompilerConfig()))

//# sourceMappingURL=data:application/json;charset=utf-8;base64,