# utils.test.civet

import {
	undef, defined, notdefined,
	curLogLevel, DBG,
	wsSplit, words, range, normalizeStr, spaces, tabs,
	getNExtra, rpad, lpad, centered, alignString, zpad,
	blockToArray, toArray, arrayToBlock, toBlock,
	removeLines, escapeStr, escapeBlock,
	relpath, getPattern,
	getCmdArgs,
	} from '../src/lib/utils.ts'
import {
	equal, like, succeeds, fails, truthy, falsy,
	} from '../src/lib/unit-test.ts'

hArgs := getCmdArgs()

# ---------------------------------------------------------------------------

DBG "wsSplit()"

equal wsSplit("abc def"), ["abc", "def"]
equal wsSplit("abc"), ["abc"]
equal wsSplit(""), []
equal wsSplit("  "), []
equal wsSplit("\t"), []
equal wsSplit("  abc  def\t\t"), ["abc", "def"]

DBG "words()"

equal words("abc def"), ["abc", "def"]
equal words("abc"), ["abc"]
equal words(""), []
equal words("  "), []
equal words("\t"), []
equal words("  abc  def\t\t"), ["abc", "def"]
equal words(" abc  def", "ghi j "), [
	"abc"
	"def"
	"ghi"
	"j"
	]

DBG "range()"

equal Array.from(range(3)), [0, 1, 2]
equal Array.from(range(5)), [0, 1, 2, 3, 4]

DBG "normalizeStr()"

equal normalizeStr("abc\r\ndef\r\n"), "abc\ndef"
equal normalizeStr("  abc\r\ndef  "), "abc\ndef"

DBG "spaces()"

equal spaces(3), '   '

DBG "tabs()"

equal tabs(3), '\t\t\t'

DBG "getNExtra()"

equal getNExtra('abcd', 10), 6
equal getNExtra('abcd', 2), 0

DBG "rpad()"

equal rpad('abcd', 10, '-'), 'abcd------'

DBG "lpad()"

equal lpad('abcd', 10, '-'), '------abcd'

DBG "centered()"

equal centered('abcd', 12, '-'), '--  abcd  --'

DBG "alignString()"

equal alignString('abc', 5, 'left'), 'abc  '
equal alignString('abc', 5, 'center'), ' abc '
equal alignString('abc', 5, 'right'), '  abc'
equal alignString('abc', 5, 'l'), 'abc  '
equal alignString('abc', 5, 'c'), ' abc '
equal alignString('abc', 5, 'r'), '  abc'

DBG "zpad()"

equal zpad(23, 5), '00023'

DBG "blockToArray()"

equal blockToArray('abc\ndef'), ['abc','def']

DBG "toArray()"

equal toArray('abc\ndef'), ['abc','def']
equal toArray(['abc','def']), ['abc','def']

DBG "arrayToBlock()"

equal arrayToBlock(['abc','def']), 'abc\ndef'

DBG "toBlock()"

equal toBlock(['abc','def']), 'abc\ndef'
equal toBlock('abc\ndef'), 'abc\ndef'

DBG "removeLines()"

equal removeLines('abc\ndef', 'def'), 'abc'
equal removeLines('abc\ndef', 'abc'), 'def'

(() =>
	block := """
		D =====  test/temp.txt  =====
		D debug
		I info
		D =====  test/temp2.txt  =====
		D debug
		I info
		"""
	equal removeLines(block, /^[A-Z] =====.*=====$/), """
		D debug
		I info
		D debug
		I info
		"""
	)()

DBG "escapeStr()"

equal escapeStr('abc'), 'abc'
equal escapeStr('   abc'), '˳˳˳abc'
equal escapeStr('\t\t\tabc'), '→→→abc'
equal escapeStr('abc\r\ndef'), 'abc←↓def'

DBG "escapeBlock()"

equal escapeBlock('abc'), 'abc'
equal escapeBlock('   abc'), '˳˳˳abc'
equal escapeBlock('\t\t\tabc'), '→→→abc'
equal escapeBlock('abc\r\ndef'), """
	abc←
	def
	"""
equal escapeBlock('abc\ndef'), """
	abc
	def
	"""
equal escapeBlock('abc\ndef'), """
	abc
	def
	"""
equal escapeBlock('   abc\n\t\t\tdef'), """
	˳˳˳abc
	→→→def
	"""

equal getPattern(), "**/*{.dot,.cielo,.civet}"

# --- getCmdArgs() without hDesc

equal getCmdArgs(undef, ['-abc']), {
	_: []
	a: true
	b: true
	c: true
	}

equal getCmdArgs(undef, ['-abc=xyz']), {
	_: []
	abc: 'xyz'
	}

equal getCmdArgs(undef, ['-abc=xyz', 'table']), {
	_: ['table']
	abc: 'xyz'
	}

equal getCmdArgs(undef, ['-Df']), {
	_: []
	f: true
	D: true
	}

# -------------------------------------------------------------

DBG "getCmdArgs()"

equal getCmdArgs(undef, ['-D']), {
	_: []
	D: true
	}
equal curLogLevel(), 'debug'

equal getCmdArgs(undef, ['-P']), {
	_: []
	P: true
	}
equal curLogLevel(), 'profile'

equal getCmdArgs(undef, ['-I']), {
	_: []
	I: true
	}
equal curLogLevel(), 'info'

# -------------------------------------------------------------
# --- getCmdArgs() with hDesc

(() =>
	# --- commmand 'compile' allows the following options:
	#        -f  - force compilation
	#        -w  - watch for file changes
	#        -n  - suppress post processing
	#        -dirspec=<spec>  - 'binDir' or 'libDir'
	#     plus any number of non-options
	#     (but we pretend it must be 1, 2 or 3)

	hDesc := {
		f: {type: 'boolean'}
		w: {type: 'boolean'}
		n: {type: 'boolean'}
		d: {type: 'boolean'}
		dirspec: {type: ['libDir','binDir']}
		_: {range: [1, 3]}
		}

	# --- There is no flag named 'f'
	fails () => getCmdArgs(hDesc, ['-daf', 'file1'])

	# --- option 'dirspec' must be 'libDir' or 'binDir'
	fails () => getCmdArgs(hDesc, ['-dirspec=42', 'file1'])
	fails () => getCmdArgs(hDesc, ['-dirspec=blib', 'file1'])

	# --- There must be at least one non-option, and no more than 3
	fails  () => getCmdArgs(hDesc, ['-gf'])
	fails  () => getCmdArgs(hDesc, ['-gf', 'a', 'b', 'c', 'd'])
	)()

(() =>
	hDesc := {
		file: {type: 'string'}
		f: {type: 'boolean'}
		n: {type: 'boolean'}
		w: {type: 'boolean'}
		d: {type: 'boolean'}
		}

	equal getCmdArgs(hDesc, ['-wd']), {
		_: []
		d: true
		f: false
		n: false
		w: true
		}
	equal getCmdArgs(hDesc, ['-wd', 'temp.txt']), {
		_: ['temp.txt']
		d: true
		f: false
		n: false
		w: true
		}
	equal getCmdArgs(hDesc, ['-wd', '-file=temp.txt']), {
		_: []
		d: true
		f: false
		n: false
		w: true
		file: 'temp.txt'
		}
	)()

(() =>
	hDesc := {
		file: {type: 'string'}
		f: {type: 'boolean'}
		n: {type: 'boolean'}
		w: {type: 'boolean'}
		}
	lArgs := ['temp.txt', '-fw', 'temp2.txt', '-file=abc.txt']

	{_, file, f: force, n: nopp, w: watch} := getCmdArgs hDesc, lArgs
	equal _, ['temp.txt', 'temp2.txt']
	equal file, 'abc.txt'
	equal force, true
	equal nopp, false
	equal watch, true
	)()

(() =>
	hDesc := {
		file: {type: 'string'}
		f: {}
		n: {}
		w: {}
		}
	lArgs := ['temp.txt', '-fw', 'temp2.txt', '-file=abc.txt']

	{_, file, f: force, n: nopp, w: watch} := getCmdArgs hDesc, lArgs
	equal _, ['temp.txt', 'temp2.txt']
	equal file, 'abc.txt'
	equal force, true
	equal nopp, false
	equal watch, true
	)()

(() =>
	hDesc := {
		file: {type: 'string'}
		f: undef
		n: undef
		w: undef
		}
	lArgs := ['temp.txt', '-fw', 'temp2.txt', '-file=abc.txt']
	{_, file, f: force, n: nopp, w: watch} := getCmdArgs hDesc, lArgs
	equal _, ['temp.txt', 'temp2.txt']
	equal file, 'abc.txt'
	equal force, true
	equal nopp, false
	equal watch, true
	)()
