// logger.test.civet

import * as lib from '../src/lib/logger.js'
Object.assign(globalThis, lib)
import * as lib2 from '../src/lib/unit-test.js'
Object.assign(globalThis, lib2)

// ---------------------------------------------------------------------------

const logAll = () => {
	clearLog()
	DBG("debug")
	LOG("info")
	WARN("warning")
	ERR("error")
	return getLog()
};

// ---------------------------------------------------------------------------

(() => {
	const curLog = logAll()
	equal(curLog, `I info
W warning
ERROR: error`)
}
	)();

(() => {
	setLogLevel('debug')
	const curLog = logAll()
	truthy(curLog.startsWith(`D debug
I info
W warning
ERROR: error`))
}
	)();

(() => {
	setLogLevel('error')
	const curLog = logAll()
	truthy(curLog.startsWith(`ERROR: error`))
}
	)();

(() => {
	clearLog()
	setLogLevel('info')
	LOG("info", INDENT, "stuff", UNDENT)
	LOG("done")
	const curLog = getLog()
	equal(curLog, `I info
I    stuff
I done`)
}
	)();

(() => {
	clearLog()
	setLogLevel('info')
	LOG("info", INDENT, "stuff", UNDENT)
	LOG("finished")
	const curLog = getLog()
	equal(curLog, `I info
I    stuff
I finished`)
}
	)();

(() => {
	clearLog()
	setLogLevel('profile')
	LOG("info", INDENT, "stuff", UNDENT)
	LOG("done")

	const curLog = getLog()
	matches(curLog, /^ms\n-{5}\n\s*\d+\sI\sinfo\n\s*\d+\sI\s{4}stuff\s*\d+\sI\sdone$/)
}
	)()


//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVzdC9sb2dnZXIudGVzdC5jaXZldC50c3giLCJzb3VyY2VzIjpbInRlc3QvbG9nZ2VyLnRlc3QuY2l2ZXQiXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFtQjtBQUNuQixBQUFBO0FBQ0EsQUFBQSxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLHNCQUFzQjtBQUMzQyxBQUFBLEFBQUEsTUFBTSxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQyxHQUFHLENBQUM7QUFDOUIsQUFBQSxBQUFBLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMseUJBQXlCO0FBQy9DLEFBQUEsQUFBQSxNQUFNLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFDLElBQUksQ0FBQztBQUMvQixBQUFBO0FBQ0EsQUFBQSw4RUFBNkU7QUFDN0UsQUFBQTtBQUNBLEFBQUEsQUFBTSxNQUFOLE1BQU0sQ0FBQyxDQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFBLENBQUE7QUFDZixBQUFBLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDWCxBQUFBLENBQUMsR0FBRyxDQUFBLEFBQUMsT0FBTyxDQUFBO0FBQ1osQUFBQSxDQUFDLEdBQUcsQ0FBQSxBQUFDLE1BQU0sQ0FBQTtBQUNYLEFBQUEsQ0FBQyxJQUFJLENBQUEsQUFBQyxTQUFTLENBQUE7QUFDZixBQUFBLENBQUMsR0FBRyxDQUFBLEFBQUMsT0FBTyxDQUFBO0FBQ1osQUFBQSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQztBQUFDLEMsQ0FBQTtBQUNoQixBQUFBO0FBQ0EsQUFBQSw4RUFBNkU7QUFDN0UsQUFBQTtBQUNBLEFBQUEsQUFBQSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQSxDQUFBO0FBQ04sQUFBQSxDQUFPLE1BQU4sTUFBTSxDQUFDLENBQUUsQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUNuQixBQUFBLENBQUMsS0FBSyxDQUFB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QUM7QUFDbkIsQUFBQSxDQUFDLE9BQU8sQ0FBQSxBQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUcsQ0FBQyxBQUNuQixFQUFFLEFBQUMsRUFBRSxBQUNMLElBQUksQUFBQyxFQUFFLEFBQ1AsRUFBRSxDQUFDLEFBQUMsRUFBRSxDQUFDLEFBQUMsRUFBRSxBQUFDLENBQUMsQUFBQyxFQUFFLEFBQUMsSUFBSSxBQUFDLEVBQUUsQUFDdkIsRUFBRSxDQUFDLEFBQUMsRUFBRSxDQUFDLEFBQUMsRUFBRSxBQUFDLENBQUMsQUFBQyxFQUFFLEdBQUcsQUFBQyxLQUFLLEFBQ3hCLEVBQUUsQ0FBQyxBQUFDLEVBQUUsQ0FBQyxBQUFDLEVBQUUsQUFBQyxDQUFDLEFBQUMsRUFBRSxBQUFDLElBQUksQUFDcEIsQ0FBQyxDQUFHLEM7QUFBQSxDQUFBO0FBQ04sQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNKO0FBQ0EiLCJuYW1lcyI6W10sInNvdXJjZXNDb250ZW50IjpbIiMgbG9nZ2VyLnRlc3QuY2l2ZXRcblxuaW1wb3J0ICogYXMgbGliIGZyb20gJy4uL3NyYy9saWIvbG9nZ2VyLmpzJ1xuT2JqZWN0LmFzc2lnbihnbG9iYWxUaGlzLCBsaWIpXG5pbXBvcnQgKiBhcyBsaWIyIGZyb20gJy4uL3NyYy9saWIvdW5pdC10ZXN0LmpzJ1xuT2JqZWN0LmFzc2lnbihnbG9iYWxUaGlzLCBsaWIyKVxuXG4jIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG5sb2dBbGwgOj0gKCkgPT5cblx0Y2xlYXJMb2coKVxuXHREQkcgXCJkZWJ1Z1wiXG5cdExPRyBcImluZm9cIlxuXHRXQVJOIFwid2FybmluZ1wiXG5cdEVSUiBcImVycm9yXCJcblx0cmV0dXJuIGdldExvZygpXG5cbiMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbigoKSA9PlxuXHRjdXJMb2cgOj0gbG9nQWxsKClcblx0ZXF1YWwgY3VyTG9nLCBcIlwiXCJcblx0XHRJIGluZm9cblx0XHRXIHdhcm5pbmdcblx0XHRFUlJPUjogZXJyb3Jcblx0XHRcIlwiXCJcblx0KSgpXG5cbigoKSA9PlxuXHRzZXRMb2dMZXZlbCAnZGVidWcnXG5cdGN1ckxvZyA6PSBsb2dBbGwoKVxuXHR0cnV0aHkgY3VyTG9nLnN0YXJ0c1dpdGgoXCJcIlwiXG5cdFx0RCBkZWJ1Z1xuXHRcdEkgaW5mb1xuXHRcdFcgd2FybmluZ1xuXHRcdEVSUk9SOiBlcnJvclxuXHRcdFwiXCJcIilcblx0KSgpXG5cbigoKSA9PlxuXHRzZXRMb2dMZXZlbCAnZXJyb3InXG5cdGN1ckxvZyA6PSBsb2dBbGwoKVxuXHR0cnV0aHkgY3VyTG9nLnN0YXJ0c1dpdGgoXCJcIlwiXG5cdFx0RVJST1I6IGVycm9yXG5cdFx0XCJcIlwiKVxuXHQpKClcblxuKCgpID0+XG5cdGNsZWFyTG9nKClcblx0c2V0TG9nTGV2ZWwgJ2luZm8nXG5cdExPRyBcImluZm9cIiwgSU5ERU5ULCBcInN0dWZmXCIsIFVOREVOVFxuXHRMT0cgXCJkb25lXCJcblx0Y3VyTG9nIDo9IGdldExvZygpXG5cdGVxdWFsIGN1ckxvZywgXCJcIlwiXG5cdFx0SSBpbmZvXG5cdFx0SSAgICBzdHVmZlxuXHRcdEkgZG9uZVxuXHRcdFwiXCJcIlxuXHQpKClcblxuKCgpID0+XG5cdGNsZWFyTG9nKClcblx0c2V0TG9nTGV2ZWwgJ2luZm8nXG5cdExPRyBcImluZm9cIiwgSU5ERU5ULCBcInN0dWZmXCIsIFVOREVOVFxuXHRMT0cgXCJmaW5pc2hlZFwiXG5cdGN1ckxvZyA6PSBnZXRMb2coKVxuXHRlcXVhbCBjdXJMb2csIFwiXCJcIlxuXHRcdEkgaW5mb1xuXHRcdEkgICAgc3R1ZmZcblx0XHRJIGZpbmlzaGVkXG5cdFx0XCJcIlwiXG5cdCkoKVxuXG4oKCkgPT5cblx0Y2xlYXJMb2coKVxuXHRzZXRMb2dMZXZlbCAncHJvZmlsZSdcblx0TE9HIFwiaW5mb1wiLCBJTkRFTlQsIFwic3R1ZmZcIiwgVU5ERU5UXG5cdExPRyBcImRvbmVcIlxuXG5cdGN1ckxvZyA6PSBnZXRMb2coKVxuXHRtYXRjaGVzIGN1ckxvZywgLy8vXlxuXHRcdG1zIFxcblxuXHRcdC17NX0gXFxuXG5cdFx0XFxzKiBcXGQrIFxccyBJIFxccyBpbmZvIFxcblxuXHRcdFxccyogXFxkKyBcXHMgSSBcXHN7NH0gc3R1ZmZcblx0XHRcXHMqIFxcZCsgXFxzIEkgXFxzIGRvbmVcblx0XHQkLy8vXG5cdCkoKVxuXG4iXX0=