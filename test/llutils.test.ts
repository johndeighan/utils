"use strict";
// llutils.test.civet

import {undef} from '../src/lib/datatypes.ts'
import {
	croak, assert, throwsError, pass, OL, ML,
	strToHash, addDefaults, getOptions,
	removeEmptyKeys, keys, hasKey, hasKeys, merge,
	} from '../src/lib/llutils.ts'
import {getCmdArgs, DBG} from '../src/lib/utils.ts'
import {
	equal, truthy, falsy, succeeds, fails,
	} from '../src/lib/unit-test.ts'

const hArgs = getCmdArgs()

// ---------------------------------------------------------------------------

DBG("croak()")

fails(() => croak("Bad"))

DBG("assert()")

succeeds(() => assert((2+2 === 4), "Bad"))
fails(() => assert((2+2 === 5), "Bad"))

DBG("throwsError()")

succeeds(() => throwsError(() => { throw new Error("why?") }))
// fails () => throwsError(() => return)

DBG("pass()")

succeeds(() => pass())

DBG("OL()")

equal(OL({a:1, b:2}), '{"a":1,"b":2}')
equal(OL('abc'), '"abc"')
equal(OL([1, 2, 3]), '[1,2,3]')
equal(OL(undefined), 'undef')
equal(OL(null), 'null')

DBG("ML()")

equal(ML(undefined), 'undef')
equal(ML(null), 'null')
equal(ML('abc'), '"abc"')
equal(ML({a:1, b:2}), `{
   "a": 1,
   "b": 2
}`)
equal(ML([1,'abc']), `[
   1,
   "abc"
]`)

DBG("strToHash()")

equal(strToHash('debug'), {debug: true})
equal(strToHash('debug force'), {
	debug: true,
	force: true
	})
equal(strToHash('debug !force'), {
	debug: true,
	force: false
	})
equal(strToHash('debug !force  size=3'), {
	debug: true,
	force: false,
	size: 3
	})

DBG("addDefaults()")

equal(addDefaults({debug: true}, {force: true}), {
	debug: true,
	force: true
	})

DBG("getOptions()")

equal(getOptions({debug: true}), {debug: true})
equal(getOptions({debug: true}, {force: false}), {
	debug: true,
	force: false
	})
equal(getOptions('debug'), {debug: true})
equal(getOptions('!debug'), {debug: false})
equal(getOptions('debug', {force: false}), {
	debug: true,
	force: false
	})

DBG("removeEmptyKeys()")

equal(removeEmptyKeys({a: 1, b: undef}), {a: 1})

DBG("keys()")

equal(keys({a:1, b:2, c:3}), ['a','b','c'])
equal(keys({a:1, b:2, c:3}, {except: 'b'}), ['a','c'])
equal(keys({a:1, b:2, c:3}, 'except=b'), ['a','c'])

DBG("hasKey()")

truthy(hasKey({a:1, b:2}, 'b'))
truthy(hasKey({a:1, b:2}, 'a', 'b'))
falsy( hasKey({a:1, b:2}, 'c'))
falsy( hasKey({a:1, b:2}, 'a', 'c'))

DBG("hasKeys()")   // --- a synonym for hasKey()

truthy(hasKeys({a:1, b:2}, 'b'))
truthy(hasKeys({a:1, b:2}, 'a', 'b'))
falsy( hasKeys({a:1, b:2}, 'c'))
falsy( hasKeys({a:1, b:2}, 'a', 'c'))

DBG("merge()")

equal(merge({a:1}, {b:2}), {a:1, b:2})
equal(merge({a:1, b:2}, {b:3, c:4}), {a:1, b:3, c:4})

//# sourceMappingURL=data:application/json;charset=utf-8;base64,