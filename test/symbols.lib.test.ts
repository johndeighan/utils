"use strict";
// symbols.lib.test.civet

import {
	undef, LOG, DBG, loadSymbols,
	sourceLib, libsAndSymbols, getNeededImportStmts,
	} from '../src/lib/utils.lib.ts'
import {
	equal, succeeds,
	} from '../src/lib/unit-test.lib.ts'

const hSymbols = loadSymbols(`datatypes.lib.ts
	undef defined
indent.lib.ts
	splitLine`)

// ---------------------------------------------------------------------------

DBG("loadSymbols()")

equal(hSymbols, {
	undef: 'datatypes.lib.ts',
	defined: 'datatypes.lib.ts',
	splitLine: 'indent.lib.ts'
	})

DBG("sourceLib()")

equal(sourceLib('x', {x: 'temp.ts', y: 'dummy.ts'}), 'temp.ts')
equal(sourceLib('defined'), 'src/lib/datatypes.lib.ts')
equal(sourceLib('defined', hSymbols), 'datatypes.lib.ts')
equal(sourceLib('isArray'), 'src/lib/datatypes.lib.ts')
equal(sourceLib('isArray', hSymbols), undef)

equal(sourceLib('array'), 'src/lib/datatypes.lib.ts')
equal(sourceLib('hash'), 'src/lib/datatypes.lib.ts')

DBG("libsAndSymbols()")

equal(libsAndSymbols(['defined','array']), {
	'src/lib/datatypes.lib.ts': ['defined','array']
	})
equal(libsAndSymbols(['defined','splitLine']), {
	'src/lib/datatypes.lib.ts': ['defined'],
	'src/lib/indent.lib.ts': ['splitLine']
	})

DBG("getNeededImportStmts()")

equal(getNeededImportStmts(['defined','array']), [
	"import {defined, array} from './src/lib/datatypes.lib.ts';"
	])
equal(getNeededImportStmts(['arrayof','integer']), [
	"import {arrayof, integer} from './src/lib/datatypes.lib.ts';"
	])

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVzdC9zeW1ib2xzLmxpYi50ZXN0LmNpdmV0LnRzeCIsInNvdXJjZXMiOlsidGVzdC9zeW1ib2xzLmxpYi50ZXN0LmNpdmV0Il0sIm1hcHBpbmdzIjoiO0FBQUEseUJBQXdCO0FBQ3hCLEFBQUE7QUFDQSxBQUFBLE1BQU0sQ0FBQyxDQUFDO0FBQ1IsQ0FBQyxLQUFLLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxXQUFXLENBQUM7QUFDOUIsQ0FBQyxTQUFTLENBQUMsQ0FBQyxjQUFjLENBQUMsQ0FBQyxvQkFBb0IsQ0FBQztBQUNqRCxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMseUJBQXlCO0FBQ2pDLEFBQUEsQUFBQSxNQUFNLENBQUMsQ0FBQztBQUNSLENBQUMsS0FBSyxDQUFDLENBQUMsUUFBUSxDQUFDO0FBQ2pCLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyw2QkFBNkI7QUFDckMsQUFBQTtBQUNBLEFBQUEsQUFBUSxNQUFSLFFBQVEsQ0FBQyxDQUFFLENBQUMsV0FBVyxDQUFDLENBQUc7QUFDM0I7QUFDQTtBQUNBLFVBRUMsQ0FBRyxDQUFDO0FBQ0wsQUFBQTtBQUNBLEFBQUEsOEVBQTZFO0FBQzdFLEFBQUE7QUFDQSxBQUFBLEFBQUEsR0FBRyxDQUFBLEFBQUMsZUFBZSxDQUFBO0FBQ25CLEFBQUE7QUFDQSxBQUFBLEFBQUEsS0FBSyxDQUFBLEFBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztBQUNqQixBQUFBLENBQUMsS0FBSyxDQUFDLENBQUMsa0JBQWtCLENBQUE7QUFDMUIsQUFBQSxDQUFDLE9BQU8sQ0FBQyxDQUFDLGtCQUFrQixDQUFBO0FBQzVCLEFBQUEsQ0FBQyxTQUFTLENBQUMsQ0FBQyxlQUFlO0FBQzNCLENBQUMsQ0FBQyxDQUFBO0FBQ0YsQUFBQTtBQUNBLEFBQUEsQUFBQSxHQUFHLENBQUEsQUFBQyxhQUFhLENBQUE7QUFDakIsQUFBQTtBQUNBLEFBQUEsQUFBQSxLQUFLLENBQUEsQUFBQyxTQUFTLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFBO0FBQzlELEFBQUEsQUFBQSxLQUFLLENBQUEsQUFBQyxTQUFTLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQywwQkFBMEIsQ0FBQTtBQUN0RCxBQUFBLEFBQUEsS0FBSyxDQUFBLEFBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsa0JBQWtCLENBQUE7QUFDeEQsQUFBQSxBQUFBLEtBQUssQ0FBQSxBQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLDBCQUEwQixDQUFBO0FBQ3RELEFBQUEsQUFBQSxLQUFLLENBQUEsQUFBQyxTQUFTLENBQUMsU0FBUyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUE7QUFDM0MsQUFBQTtBQUNBLEFBQUEsQUFBQSxLQUFLLENBQUEsQUFBQyxTQUFTLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQywwQkFBMEIsQ0FBQTtBQUNwRCxBQUFBLEFBQUEsS0FBSyxDQUFBLEFBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsMEJBQTBCLENBQUE7QUFDbkQsQUFBQTtBQUNBLEFBQUEsQUFBQSxHQUFHLENBQUEsQUFBQyxrQkFBa0IsQ0FBQTtBQUN0QixBQUFBO0FBQ0EsQUFBQSxBQUFBLEtBQUssQ0FBQSxBQUFDLGNBQWMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUM1QyxBQUFBLENBQUMsMEJBQTBCLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUM7QUFDaEQsQ0FBQyxDQUFDLENBQUE7QUFDRixBQUFBLEFBQUEsS0FBSyxDQUFBLEFBQUMsY0FBYyxDQUFDLENBQUMsU0FBUyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ2hELEFBQUEsQ0FBQywwQkFBMEIsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUE7QUFDeEMsQUFBQSxDQUFDLHVCQUF1QixDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUM7QUFDdkMsQ0FBQyxDQUFDLENBQUE7QUFDRixBQUFBO0FBQ0EsQUFBQSxBQUFBLEdBQUcsQ0FBQSxBQUFDLHdCQUF3QixDQUFBO0FBQzVCLEFBQUE7QUFDQSxBQUFBLEFBQUEsS0FBSyxDQUFBLEFBQUMsb0JBQW9CLENBQUMsQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDbEQsQUFBQSxDQUFDLDREQUE0RDtBQUM3RCxBQUFBLENBQUMsQ0FBQyxDQUFBO0FBQ0YsQUFBQSxBQUFBLEtBQUssQ0FBQSxBQUFDLG9CQUFvQixDQUFDLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ3BELEFBQUEsQ0FBQyw4REFBOEQ7QUFDL0QsQUFBQSxDQUFDLENBQUMsQ0FBQTtBQUNGIiwibmFtZXMiOltdLCJzb3VyY2VzQ29udGVudCI6WyIjIHN5bWJvbHMubGliLnRlc3QuY2l2ZXRcblxuaW1wb3J0IHtcblx0dW5kZWYsIExPRywgREJHLCBsb2FkU3ltYm9scyxcblx0c291cmNlTGliLCBsaWJzQW5kU3ltYm9scywgZ2V0TmVlZGVkSW1wb3J0U3RtdHMsXG5cdH0gZnJvbSAnLi4vc3JjL2xpYi91dGlscy5saWIudHMnXG5pbXBvcnQge1xuXHRlcXVhbCwgc3VjY2VlZHMsXG5cdH0gZnJvbSAnLi4vc3JjL2xpYi91bml0LXRlc3QubGliLnRzJ1xuXG5oU3ltYm9scyA6PSBsb2FkU3ltYm9scyhcIlwiXCJcblx0ZGF0YXR5cGVzLmxpYi50c1xuXHRcdHVuZGVmIGRlZmluZWRcblx0aW5kZW50LmxpYi50c1xuXHRcdHNwbGl0TGluZVxuXHRcIlwiXCIpXG5cbiMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbkRCRyBcImxvYWRTeW1ib2xzKClcIlxuXG5lcXVhbCBoU3ltYm9scywge1xuXHR1bmRlZjogJ2RhdGF0eXBlcy5saWIudHMnXG5cdGRlZmluZWQ6ICdkYXRhdHlwZXMubGliLnRzJ1xuXHRzcGxpdExpbmU6ICdpbmRlbnQubGliLnRzJ1xuXHR9XG5cbkRCRyBcInNvdXJjZUxpYigpXCJcblxuZXF1YWwgc291cmNlTGliKCd4Jywge3g6ICd0ZW1wLnRzJywgeTogJ2R1bW15LnRzJ30pLCAndGVtcC50cydcbmVxdWFsIHNvdXJjZUxpYignZGVmaW5lZCcpLCAnc3JjL2xpYi9kYXRhdHlwZXMubGliLnRzJ1xuZXF1YWwgc291cmNlTGliKCdkZWZpbmVkJywgaFN5bWJvbHMpLCAnZGF0YXR5cGVzLmxpYi50cydcbmVxdWFsIHNvdXJjZUxpYignaXNBcnJheScpLCAnc3JjL2xpYi9kYXRhdHlwZXMubGliLnRzJ1xuZXF1YWwgc291cmNlTGliKCdpc0FycmF5JywgaFN5bWJvbHMpLCB1bmRlZlxuXG5lcXVhbCBzb3VyY2VMaWIoJ2FycmF5JyksICdzcmMvbGliL2RhdGF0eXBlcy5saWIudHMnXG5lcXVhbCBzb3VyY2VMaWIoJ2hhc2gnKSwgJ3NyYy9saWIvZGF0YXR5cGVzLmxpYi50cydcblxuREJHIFwibGlic0FuZFN5bWJvbHMoKVwiXG5cbmVxdWFsIGxpYnNBbmRTeW1ib2xzKFsnZGVmaW5lZCcsJ2FycmF5J10pLCB7XG5cdCdzcmMvbGliL2RhdGF0eXBlcy5saWIudHMnOiBbJ2RlZmluZWQnLCdhcnJheSddXG5cdH1cbmVxdWFsIGxpYnNBbmRTeW1ib2xzKFsnZGVmaW5lZCcsJ3NwbGl0TGluZSddKSwge1xuXHQnc3JjL2xpYi9kYXRhdHlwZXMubGliLnRzJzogWydkZWZpbmVkJ11cblx0J3NyYy9saWIvaW5kZW50LmxpYi50cyc6IFsnc3BsaXRMaW5lJ11cblx0fVxuXG5EQkcgXCJnZXROZWVkZWRJbXBvcnRTdG10cygpXCJcblxuZXF1YWwgZ2V0TmVlZGVkSW1wb3J0U3RtdHMoWydkZWZpbmVkJywnYXJyYXknXSksIFtcblx0XCJpbXBvcnQge2RlZmluZWQsIGFycmF5fSBmcm9tICcuL3NyYy9saWIvZGF0YXR5cGVzLmxpYi50cyc7XCJcblx0XVxuZXF1YWwgZ2V0TmVlZGVkSW1wb3J0U3RtdHMoWydhcnJheW9mJywnaW50ZWdlciddKSwgW1xuXHRcImltcG9ydCB7YXJyYXlvZiwgaW50ZWdlcn0gZnJvbSAnLi9zcmMvbGliL2RhdGF0eXBlcy5saWIudHMnO1wiXG5cdF1cbiJdfQ==