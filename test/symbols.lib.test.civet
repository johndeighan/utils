# symbols.lib.test.civet

import {
	undef, LOG, DBG, loadSymbols,
	sourceLib, libsAndSymbols, getNeededImportStmts,
	} from '../src/lib/utils.lib.ts'
import {
	equal, succeeds,
	} from '../src/lib/unit-test.lib.ts'


# ---------------------------------------------------------------------------

DBG "loadSymbols()"

(() =>
	myMap := loadSymbols("""
		datatypes.lib.ts
			undef defined
		indent.lib.ts
			splitLine
		""")

	equal sourceLib('undef', myMap), 'datatypes.lib.ts'
	equal sourceLib('defined', myMap), 'datatypes.lib.ts'
	equal sourceLib('splitLine', myMap), 'indent.lib.ts'
	equal sourceLib('dummy', myMap), undef
	)()

DBG "sourceLib()"

(() =>
	myMap := new Map([['x', 'temp.ts'],['y', 'dummy.ts']])
	equal sourceLib('x', myMap), 'temp.ts'
	equal sourceLib('y', myMap), 'dummy.ts'
	)()

equal sourceLib('defined'), 'src/lib/datatypes.lib.ts'
equal sourceLib('isArray'), 'src/lib/datatypes.lib.ts'

equal sourceLib('array'), 'src/lib/datatypes.lib.ts'
equal sourceLib('hash'), 'src/lib/datatypes.lib.ts'

DBG "libsAndSymbols()"

equal libsAndSymbols(['defined','array']), {
	'src/lib/datatypes.lib.ts': ['defined','array']
	}
equal libsAndSymbols(['defined','splitLine']), {
	'src/lib/datatypes.lib.ts': ['defined']
	'src/lib/indent.lib.ts': ['splitLine']
	}

DBG "getNeededImportStmts()"

equal getNeededImportStmts(['defined','array']), [
	"import {defined, array} from './src/lib/datatypes.lib.ts';"
	]
equal getNeededImportStmts(['arrayof','integer']), [
	"import {arrayof, integer} from './src/lib/datatypes.lib.ts';"
	]
