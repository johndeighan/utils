"use strict";
// node-generator.lib.test.civet

import {
	isArray, isHash,
	} from '../src/lib/datatypes.lib.ts'
import {
	TNodeInfo, NodeGenerator,
	} from '../src/lib/node-generator.lib.ts'
import {DBG, DBGVALUE} from '../src/lib/logger.lib.ts'
import {getCmdArgs} from '../src/lib/utils.lib.ts'
import {
	equal, truthy, falsy, isType, notType,
	} from '../src/lib/unit-test.lib.ts'

getCmdArgs()

// ---------------------------------------------------------------------------

DBG("type TNodeInfo")

isType( 'TNodeInfo', {node: 42, level: 1})
notType('TNodeInfo', {node: 42, level: 'abc'})

DBG("class NodeGenerator");

(() => {
	const hStudents = {
		name: 'John',
		gender: 'male',
		address: {
			street: '1749 Main St.',
			city: 'Blacksburg',
			state: 'VA'
			},
		friends: ['John', 'Julie']
		}
	const gen = new NodeGenerator()
	const lParts = Array.from(gen.allNodes(hStudents))

	truthy(isHash(lParts[0].node))
	equal(lParts[0].level, 0)

	truthy(isHash(lParts[1].node))
	equal(lParts[1].level, 1)

	truthy(isArray(lParts[2].node))
	equal(lParts[2].level, 1)
}

	)();

(() => {
	const hAST = {
		type: 'Block',
		expressions: [
			'abc',
			{
				type: 'Declaration',
				parent: null
				},
			]
		}
	// @ts-ignore
	hAST.expressions[1].parent = hAST

	const gen = new NodeGenerator()
	const lParts = Array.from(gen.allNodes(hAST))

	truthy(isHash(lParts[0].node))
	equal(lParts[0].level, 0)

	truthy(isArray(lParts[1].node))
	equal(lParts[1].level, 1)

	truthy(isHash(lParts[2].node))
	equal(lParts[2].level, 2)
}
	)()

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVzdC9ub2RlLWdlbmVyYXRvci5saWIudGVzdC5jaXZldC50c3giLCJzb3VyY2VzIjpbInRlc3Qvbm9kZS1nZW5lcmF0b3IubGliLnRlc3QuY2l2ZXQiXSwibWFwcGluZ3MiOiI7QUFBQSxnQ0FBK0I7QUFDL0IsQUFBQTtBQUNBLEFBQUEsTUFBTSxDQUFDLENBQUM7QUFDUixDQUFDLE9BQU8sQ0FBQyxDQUFDLE1BQU0sQ0FBQztBQUNqQixDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsNkJBQTZCO0FBQ3JDLEFBQUEsQUFBQSxNQUFNLENBQUMsQ0FBQztBQUNSLENBQUMsU0FBUyxDQUFDLENBQUMsYUFBYSxDQUFDO0FBQzFCLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxrQ0FBa0M7QUFDMUMsQUFBQSxBQUFBLE1BQU0sQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLElBQUksQ0FBQywwQkFBMEI7QUFDdEQsQUFBQSxBQUFBLE1BQU0sQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLElBQUksQ0FBQyx5QkFBeUI7QUFDbEQsQUFBQSxBQUFBLE1BQU0sQ0FBQyxDQUFDO0FBQ1IsQ0FBQyxLQUFLLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxPQUFPLENBQUM7QUFDdkMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLDZCQUE2QjtBQUNyQyxBQUFBO0FBQ0EsQUFBQSxBQUFBLFVBQVUsQ0FBQyxDQUFDO0FBQ1osQUFBQTtBQUNBLEFBQUEsOEVBQTZFO0FBQzdFLEFBQUE7QUFDQSxBQUFBLEFBQUEsR0FBRyxDQUFBLEFBQUMsZ0JBQWdCLENBQUE7QUFDcEIsQUFBQTtBQUNBLEFBQUEsQUFBQSxNQUFNLENBQUEsQ0FBRSxXQUFXLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBO0FBQ3pDLEFBQUEsQUFBQSxPQUFP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QUFHLENBQUMsYUFBYSxDQUFDLENBQUM7QUFDM0IsQUFBQSxDQUFPLE1BQU4sTUFBTSxDQUFDLENBQUUsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDekMsQUFBQTtBQUNBLEFBQUEsQ0FBQyxNQUFNLENBQUEsQUFBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFBO0FBQzlCLEFBQUEsQ0FBQyxLQUFLLENBQUEsQUFBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFBO0FBQ3pCLEFBQUE7QUFDQSxBQUFBLENBQUMsTUFBTSxDQUFBLEFBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUMvQixBQUFBLENBQUMsS0FBSyxDQUFBLEFBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQTtBQUN6QixBQUFBO0FBQ0EsQUFBQSxDQUFDLE1BQU0sQ0FBQSxBQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUE7QUFDOUIsQUFBQSxDQUFDLEtBQUssQ0FBQSxBQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEM7QUFBQSxDQUFBO0FBQ3pCLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDSiIsIm5hbWVzIjpbXSwic291cmNlc0NvbnRlbnQiOlsiIyBub2RlLWdlbmVyYXRvci5saWIudGVzdC5jaXZldFxuXG5pbXBvcnQge1xuXHRpc0FycmF5LCBpc0hhc2gsXG5cdH0gZnJvbSAnLi4vc3JjL2xpYi9kYXRhdHlwZXMubGliLnRzJ1xuaW1wb3J0IHtcblx0VE5vZGVJbmZvLCBOb2RlR2VuZXJhdG9yLFxuXHR9IGZyb20gJy4uL3NyYy9saWIvbm9kZS1nZW5lcmF0b3IubGliLnRzJ1xuaW1wb3J0IHtEQkcsIERCR1ZBTFVFfSBmcm9tICcuLi9zcmMvbGliL2xvZ2dlci5saWIudHMnXG5pbXBvcnQge2dldENtZEFyZ3N9IGZyb20gJy4uL3NyYy9saWIvdXRpbHMubGliLnRzJ1xuaW1wb3J0IHtcblx0ZXF1YWwsIHRydXRoeSwgZmFsc3ksIGlzVHlwZSwgbm90VHlwZSxcblx0fSBmcm9tICcuLi9zcmMvbGliL3VuaXQtdGVzdC5saWIudHMnXG5cbmdldENtZEFyZ3MoKVxuXG4jIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG5EQkcgXCJ0eXBlIFROb2RlSW5mb1wiXG5cbmlzVHlwZSAgJ1ROb2RlSW5mbycsIHtub2RlOiA0MiwgbGV2ZWw6IDF9XG5ub3RUeXBlICdUTm9kZUluZm8nLCB7bm9kZTogNDIsIGxldmVsOiAnYWJjJ31cblxuREJHIFwiY2xhc3MgTm9kZUdlbmVyYXRvclwiXG5cbigoKSA9PlxuXHRoU3R1ZGVudHMgOj0ge1xuXHRcdG5hbWU6ICdKb2huJ1xuXHRcdGdlbmRlcjogJ21hbGUnXG5cdFx0YWRkcmVzczoge1xuXHRcdFx0c3RyZWV0OiAnMTc0OSBNYWluIFN0Lidcblx0XHRcdGNpdHk6ICdCbGFja3NidXJnJ1xuXHRcdFx0c3RhdGU6ICdWQSdcblx0XHRcdH1cblx0XHRmcmllbmRzOiBbJ0pvaG4nLCAnSnVsaWUnXVxuXHRcdH1cblx0Z2VuIDo9IG5ldyBOb2RlR2VuZXJhdG9yKClcblx0bFBhcnRzIDo9IEFycmF5LmZyb20oZ2VuLmFsbE5vZGVzKGhTdHVkZW50cykpXG5cblx0dHJ1dGh5IGlzSGFzaChsUGFydHNbMF0ubm9kZSlcblx0ZXF1YWwgbFBhcnRzWzBdLmxldmVsLCAwXG5cblx0dHJ1dGh5IGlzSGFzaChsUGFydHNbMV0ubm9kZSlcblx0ZXF1YWwgbFBhcnRzWzFdLmxldmVsLCAxXG5cblx0dHJ1dGh5IGlzQXJyYXkobFBhcnRzWzJdLm5vZGUpXG5cdGVxdWFsIGxQYXJ0c1syXS5sZXZlbCwgMVxuXG5cdCkoKVxuXG4oKCkgPT5cblx0aEFTVCA6PSB7XG5cdFx0dHlwZTogJ0Jsb2NrJ1xuXHRcdGV4cHJlc3Npb25zOiBbXG5cdFx0XHQnYWJjJyxcblx0XHRcdHtcblx0XHRcdFx0dHlwZTogJ0RlY2xhcmF0aW9uJyxcblx0XHRcdFx0cGFyZW50OiBudWxsXG5cdFx0XHRcdH0sXG5cdFx0XHRdXG5cdFx0fVxuXHQjIEB0cy1pZ25vcmVcblx0aEFTVC5leHByZXNzaW9uc1sxXS5wYXJlbnQgPSBoQVNUXG5cblx0Z2VuIDo9IG5ldyBOb2RlR2VuZXJhdG9yKClcblx0bFBhcnRzIDo9IEFycmF5LmZyb20oZ2VuLmFsbE5vZGVzKGhBU1QpKVxuXG5cdHRydXRoeSBpc0hhc2gobFBhcnRzWzBdLm5vZGUpXG5cdGVxdWFsIGxQYXJ0c1swXS5sZXZlbCwgMFxuXG5cdHRydXRoeSBpc0FycmF5KGxQYXJ0c1sxXS5ub2RlKVxuXHRlcXVhbCBsUGFydHNbMV0ubGV2ZWwsIDFcblxuXHR0cnV0aHkgaXNIYXNoKGxQYXJ0c1syXS5ub2RlKVxuXHRlcXVhbCBsUGFydHNbMl0ubGV2ZWwsIDJcblx0KSgpXG4iXX0=