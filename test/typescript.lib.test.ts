"use strict";
// typescript.lib.test.civet

import {SourceFile} from 'typescript'
import {
	addFunctionNames, removeFunctionNames,
	} from '../src/lib/typescript.lib.ts'
import {
	getCmdArgs, DBG, isHash, setDirTree, pass,
	slurp, withExt, o, s, t,

	ts2ast, ts2js, ast2ts, ast2js, typeCheckFiles, pprintAST,
	getCode, normalizeCode, truncStr,
	} from '../src/lib/utils.lib.ts'
import {
	equal, like, succeeds, fails, truthy, falsy, isType,
	} from '../src/lib/unit-test.lib.ts'

const hArgs = getCmdArgs()

// ---------------------------------------------------------------------------

const setup = (): void => {

	DBG("setDirTree()")

	setDirTree('test/typescript', `test.ts
	const str: string = 'abc'
test2.ts
	const func1 = (str: string): boolean =>
		return true`)
}

setup()

// ---------------------------------------------------------------------------

DBG("getCode(str)")

equal(getCode('let x = 42;'), 'let x = 42;')
equal(getCode('test/typescript/test.ts'), `const str: string = 'abc'`)

DBG("addFunctionNames(code)");

(() => {
	const str1 = `function*(line) {
	yield {
		kind: 'line',
		str: line
		};
	return;
}`

	const str2 = `function(line) {
  return 42;
}`
	const str3 = `${str1}\n${str2}`

	equal(addFunctionNames(str1), `function* __dummy99(line) {
	yield {
		kind: 'line',
		str: line
		};
	return;
}`)
	equal(addFunctionNames(str2), `function __dummy99(line) {
  return 42;
}`)
	equal(addFunctionNames(str3), `function* __dummy99(line) {
	yield {
		kind: 'line',
		str: line
		};
	return;
}
function __dummy100(line) {
  return 42;
}`)
}
	)()

DBG("removeFunctionNames(code)")

equal(removeFunctionNames("function __dummy9999("),
	"function (")
equal(removeFunctionNames("function* __dummy9999("),
	"function* (")

DBG("normalizeCode(code)")

equal(normalizeCode('  let x  =  42;'), 'let x=42;')
equal(normalizeCode('a  b  c', '.txt'), 'a b c');

(() => {
	const func = (str: string): boolean => {
		// --- just return a true value
		const s: string = 'abcde'
		return true
	}

	equal(normalizeCode(func.toString()),
		"str=>{const s=\"abcde\";return true};")
}
	)()

DBG("truncStr(str, len)")

equal(truncStr('abc', 12), 'abc')
equal(truncStr('abcdefg', 5), 'ab...')

// ---------------------------------------------------------------------------

DBG("ts2js(tsCode)")

equal(ts2js('const s: string = "abc";'),
		'var s = "abc";')

DBG("ts2ast(tsCode)", "pprintAST(ast)")

equal(pprintAST(ts2ast('test/typescript/test2.ts')), s`SourceFile - 'const func1 = (str: string): ...'
	FirstStatement - 'const func1 = (str: string): ...'
		VariableDeclarationList - 'const func1 = (str: string): ...'
			VariableDeclaration - 'func1 = (str: string): boolea...'
				Identifier - 'func1'
				ArrowFunction - '(str: string): boolean =>\\n\tr...'
					Parameter - 'str: string'
						Identifier - 'str'
						StringKeyword - 'string'
					BooleanKeyword - 'boolean'
					EqualsGreaterThanToken - '=>'
					Block - 'return true'
						ReturnStatement - 'return true'
							TrueKeyword - 'true'
	EndOfFileToken - ''`)


//# sourceMappingURL=data:application/json;charset=utf-8;base64,