"use strict";
// typescript.lib.test.civet

import {SourceFile} from 'typescript'
import {
	getCmdArgs, DBG, isHash, setDirTree, slurp, withExt, o,
	ts2ast, civet2tsFile, civet2ts, civet2ast, pprintAST,
	} from '../src/lib/utils.lib.ts'
import {
	equal, like, succeeds, fails, truthy, falsy, isType,
	} from '../src/lib/unit-test.lib.ts'

const hArgs = getCmdArgs()

// ---------------------------------------------------------------------------

const setup = (): void => {

	DBG("setDirTree()")

	setDirTree('test/typescript', `test.civet
	x := 42
`)
}

setup()

// ---------------------------------------------------------------------------

const testPath = './test/typescript/test.civet'
const civetCode = slurp(testPath)

const tsCode = civet2ts(civetCode)
const ast1 = ts2ast(tsCode)
const ast2 = civet2ast(civetCode)
equal(ast1, ast2)

DBG("ts2ast(code)")

succeeds(() => ts2ast('x := 42'))

DBG("civet2ts(code)")

equal(civet2ts('x := 42'), `"use strict";
const x = 42`)

DBG("civet2tsFile(path)");

(() => {
	civet2tsFile(testPath, o`!inlineMap`)
	const code = slurp(withExt(testPath, '.ts'))
	equal(code, `"use strict";
const x = 42`)
}
	)()

DBG("civet2ast(code)")

// isType 'SourceFile', ast1
// isType 'SourceFile', ast2

DBG("pprintAST(hAST)")

equal(pprintAST(ts2ast('x := 42')), `SourceFile - 'x := 42'
	LabeledStatement - 'x := 42'
		Identifier - 'x'
		ExpressionStatement - '= 42'
			BinaryExpression - '= 42'
				Identifier - ''
				FirstAssignment - '='
				FirstLiteralToken - '42'
	EndOfFileToken - ''`.replaceAll('\t', '   '))

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVzdC90eXBlc2NyaXB0LmxpYi50ZXN0LmNpdmV0LnRzeCIsInNvdXJjZXMiOlsidGVzdC90eXBlc2NyaXB0LmxpYi50ZXN0LmNpdmV0Il0sIm1hcHBpbmdzIjoiO0FBQUEsNEJBQTJCO0FBQzNCLEFBQUE7QUFDQSxBQUFBLE1BQU0sQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLElBQUksQ0FBQyxZQUFZO0FBQ3JDLEFBQUEsQUFBQSxNQUFNLENBQUMsQ0FBQztBQUNSLENBQUMsVUFBVSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ3hELENBQUMsTUFBTSxDQUFDLENBQUMsWUFBWSxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsU0FBUyxDQUFDO0FBQ3RELENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyx5QkFBeUI7QUFDakMsQUFBQSxBQUFBLE1BQU0sQ0FBQyxDQUFDO0FBQ1IsQ0FBQyxLQUFLLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxNQUFNLENBQUM7QUFDckQsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLDZCQUE2QjtBQUNyQyxBQUFBO0FBQ0EsQUFBQSxBQUFLLE1BQUwsS0FBSyxDQUFDLENBQUUsQ0FBQyxVQUFVLENBQUMsQ0FBQztBQUNyQixBQUFBO0FBQ0EsQUFBQSw4RUFBNkU7QUFDN0UsQUFBQTtBQUNBLEFBQUEsQUFBSyxNQUFMLEtBQUssQ0FBQyxDQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFBLENBQUE7QUFDcEIsQUFBQTtBQUNBLEFBQUEsQ0FBQyxHQUFHLENBQUEsQUFBQyxjQUFjLENBQUE7QUFDbkIsQUFBQTtBQUNBLEFBQUEsQ0FBQyxVQUFVLENBQUEsQUFBQyxpQkFBaUIsQ0FBQyxDQUFDLENBQUc7QUFDbEM7QUFDQSxBQUVFLENBQUcsQztBQUFBLENBQUE7QUFDTCxBQUFBO0FBQ0EsQUFBQSxBQUFBLEtBQUssQ0FBQyxDQUFDO0FBQ1AsQUFBQTtBQUNBLEFBQUEsOEVBQTZFO0FBQzdFLEFBQUE7QUFDQSxBQUFBLEFBQVEsTUFBUixRQUFRLENBQUMsQ0FBRSxDQUFDLDhCQUE4QjtBQUMxQyxBQUFBLEFBQVMsTUFBVCxTQUFTLENBQUMsQ0FBRSxDQUFDLEtBQUssQ0FBQSxBQUFDLFFBQVEsQ0FBQTtBQUMzQixBQUFBO0FBQ0EsQUFBQSxBQUFNLE1BQU4sTUFBTSxDQUFDLENBQUUsQ0FBQyxRQUFRLENBQUEsQUFBQyxTQUFTLENBQUE7QUFDNUIsQUFBQSxBQUFJLE1BQUosSUFBSSxDQUFDLENBQUUsQ0FBQyxNQUFNLENBQUEsQUFBQyxNQUFNLENBQUE7QUFDckIsQUFBQSxBQUFJLE1BQUosSUFBSSxDQUFDLENBQUUsQ0FBQyxTQUFTLENBQUEsQUFBQyxTQUFTLENBQUE7QUFDM0IsQUFBQSxBQUFBLEtBQUssQ0FBQSxBQUFDLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQTtBQUNoQixBQUFBO0FBQ0EsQUFBQSxBQUFBLEdBQUcsQ0FBQSxBQUFDLGNBQWMsQ0FBQTtBQUNsQixBQUFBO0FBQ0EsQUFBQSxBQUFBLFFBQVEsQ0FBQSxBQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUE7QUFDaEMsQUFBQTtBQUNBLEFBQUEsQUFBQSxHQUFHLENBQUEsQUFBQyxnQkFBZ0IsQ0FBQTtBQUNwQixBQUFBO0FBQ0EsQUFBQSxBQUFBLEtBQUssQ0FBQSxBQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUc7QUFDOUIsWUFFQyxDQUFHLENBQUE7QUFDSixBQUFBO0FBQ0EsQUFBQSxBQUFBLEdBQUcsQ0FBQSxBQUFDLG9CQUFvQixDLENBQUE7QUFDeEIsQUFBQTtBQUNBLEFBQUEsQUFBQSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQSxDQUFBO0FBQ04sQUFBQSxDQUFDLFlBQVksQ0FBQSxBQUFDLFFBQVEsQ0FBQyxDQUFDLEMsWUFBYSxDQUFBO0FBQ3JDLEFBQUEsQ0FBSyxNQUFKLElBQUksQ0FBQyxDQUFFLENBQUMsS0FBSyxDQUFBLEFBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFBO0FBQ3ZDLEFBQUEsQ0FBQyxLQUFLLENBQUEsQUFBQyxJQUFJLENBQUMsQ0FBQyxDQUFHO0FBQ2hCLFlBRUUsQ0FBRyxDO0FBQUEsQ0FBQTtBQUNMLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDSixBQUFBO0FBQ0EsQUFBQSxBQUFBLEdBQUcsQ0FBQSxBQUFDLGlCQUFpQixDQUFBO0FBQ3JCLEFBQUE7QUFDQSxBQUFBLDRCQUEyQjtBQUMzQixBQUFBLDRCQUEyQjtBQUMzQixBQUFBO0FBQ0EsQUFBQSxBQUFBLEdBQUcsQ0FBQSxBQUFDLGlCQUFpQixDQUFBO0FBQ3JCLEFBQUE7QUFDQSxBQUFBLEFBQUEsS0FBSyxDQUFBLEFBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBRztBQUN2QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUVDLENBQUcsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUE7QUFDNUIiLCJuYW1lcyI6W10sInNvdXJjZXNDb250ZW50IjpbIiMgdHlwZXNjcmlwdC5saWIudGVzdC5jaXZldFxuXG5pbXBvcnQge1NvdXJjZUZpbGV9IGZyb20gJ3R5cGVzY3JpcHQnXG5pbXBvcnQge1xuXHRnZXRDbWRBcmdzLCBEQkcsIGlzSGFzaCwgc2V0RGlyVHJlZSwgc2x1cnAsIHdpdGhFeHQsIG8sXG5cdHRzMmFzdCwgY2l2ZXQydHNGaWxlLCBjaXZldDJ0cywgY2l2ZXQyYXN0LCBwcHJpbnRBU1QsXG5cdH0gZnJvbSAnLi4vc3JjL2xpYi91dGlscy5saWIudHMnXG5pbXBvcnQge1xuXHRlcXVhbCwgbGlrZSwgc3VjY2VlZHMsIGZhaWxzLCB0cnV0aHksIGZhbHN5LCBpc1R5cGUsXG5cdH0gZnJvbSAnLi4vc3JjL2xpYi91bml0LXRlc3QubGliLnRzJ1xuXG5oQXJncyA6PSBnZXRDbWRBcmdzKClcblxuIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuc2V0dXAgOj0gKCk6IHZvaWQgPT5cblxuXHREQkcgXCJzZXREaXJUcmVlKClcIlxuXG5cdHNldERpclRyZWUgJ3Rlc3QvdHlwZXNjcmlwdCcsIFwiXCJcIlxuXHRcdHRlc3QuY2l2ZXRcblx0XHRcdHggOj0gNDJcblxuXHRcdFwiXCJcIlxuXG5zZXR1cCgpXG5cbiMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbnRlc3RQYXRoIDo9ICcuL3Rlc3QvdHlwZXNjcmlwdC90ZXN0LmNpdmV0J1xuY2l2ZXRDb2RlIDo9IHNsdXJwIHRlc3RQYXRoXG5cbnRzQ29kZSA6PSBjaXZldDJ0cyBjaXZldENvZGVcbmFzdDEgOj0gdHMyYXN0IHRzQ29kZVxuYXN0MiA6PSBjaXZldDJhc3QgY2l2ZXRDb2RlXG5lcXVhbCBhc3QxLCBhc3QyXG5cbkRCRyBcInRzMmFzdChjb2RlKVwiXG5cbnN1Y2NlZWRzICgpID0+IHRzMmFzdCgneCA6PSA0MicpXG5cbkRCRyBcImNpdmV0MnRzKGNvZGUpXCJcblxuZXF1YWwgY2l2ZXQydHMoJ3ggOj0gNDInKSwgXCJcIlwiXG5cdFwidXNlIHN0cmljdFwiO1xuXHRjb25zdCB4ID0gNDJcblx0XCJcIlwiXG5cbkRCRyBcImNpdmV0MnRzRmlsZShwYXRoKVwiXG5cbigoKSA9PlxuXHRjaXZldDJ0c0ZpbGUgdGVzdFBhdGgsIG8nIWlubGluZU1hcCdcblx0Y29kZSA6PSBzbHVycCB3aXRoRXh0KHRlc3RQYXRoLCAnLnRzJylcblx0ZXF1YWwgY29kZSwgXCJcIlwiXG5cdFx0XCJ1c2Ugc3RyaWN0XCI7XG5cdFx0Y29uc3QgeCA9IDQyXG5cdFx0XCJcIlwiXG5cdCkoKVxuXG5EQkcgXCJjaXZldDJhc3QoY29kZSlcIlxuXG4jIGlzVHlwZSAnU291cmNlRmlsZScsIGFzdDFcbiMgaXNUeXBlICdTb3VyY2VGaWxlJywgYXN0MlxuXG5EQkcgXCJwcHJpbnRBU1QoaEFTVClcIlxuXG5lcXVhbCBwcHJpbnRBU1QodHMyYXN0KCd4IDo9IDQyJykpLCBcIlwiXCJcblx0U291cmNlRmlsZSAtICd4IDo9IDQyJ1xuXHRcdExhYmVsZWRTdGF0ZW1lbnQgLSAneCA6PSA0Midcblx0XHRcdElkZW50aWZpZXIgLSAneCdcblx0XHRcdEV4cHJlc3Npb25TdGF0ZW1lbnQgLSAnPSA0Midcblx0XHRcdFx0QmluYXJ5RXhwcmVzc2lvbiAtICc9IDQyJ1xuXHRcdFx0XHRcdElkZW50aWZpZXIgLSAnJ1xuXHRcdFx0XHRcdEZpcnN0QXNzaWdubWVudCAtICc9J1xuXHRcdFx0XHRcdEZpcnN0TGl0ZXJhbFRva2VuIC0gJzQyJ1xuXHRcdEVuZE9mRmlsZVRva2VuIC0gJydcblx0XCJcIlwiLnJlcGxhY2VBbGwoJ1xcdCcsICcgICAnKVxuIl19