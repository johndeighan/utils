"use strict";
// fs.test.civet

import {sprintf} from "jsr:@std/fmt/printf"

import {
	undef, defined,
	hash, optionspec, voidFunc,
	} from '../src/lib/datatypes.ts'
import {
	DBG,
	} from '../src/lib/logger.ts'
import {
	sinceLoad, sinceLoadStr, hasKey, sleep, deeplyEquals,
	} from '../src/lib/llutils.ts'

import {
	isFile, isDir, getPathType, fileExt, withExt,
	lStatFields, getStats, parsePath,
	allFilesMatching, allLinesIn,
	normalizePath, mkpath, relpath, pathSubDirs, myself,
	rmFile, rmDir, newerDestFileExists,
	clearDir, mkDir, mkDirsForFile, slurp, barf,
	removeFilesMatching, removeFilesExcept, removeDirsExcept,
	watchFile, FileEventHandler, watcherCallbackFunc,
	fsChangeType, fsCallbackFunc,
	} from '../src/lib/fs.ts'

import {
	getCmdArgs,
	} from '../src/lib/utils.ts'
import {
	equal, truthy, falsy, like, listLike, succeeds, fails,
	} from '../src/lib/unit-test.ts'

const hArgs = getCmdArgs()

// ---------------------------------------------------------------------------

const cleanup = (): void => {

	DBG("cleaning up")
	const lKeepFiles: string[] = [
		'dummy.txt',
		'file1.txt',
		'file2.txt',
		'file3.flags.txt',
		'subdir/new.txt'
		].map((path) => `test/fs/${path}`)

	const lKeepDirs: string[] = [
		'test/fs',
		'test/fs/subdir'
		]

	removeFilesExcept('test/fs/**', lKeepFiles, 'echo')
	removeDirsExcept( 'test/fs/**', lKeepDirs, 'echo')
	return
}

cleanup()

// ---------------------------------------------------------------------------

DBG("isFile()")

truthy(isFile('./deno.jsonc'))
truthy(isFile('deno.jsonc'))
falsy(isFile('./src/lib/notafile.txt'))
truthy(isFile("./test/fs/dummy.txt"))
falsy( isFile("./test/fs"))

DBG("isDir()")

truthy(isDir('test'))
falsy(isDir('nosuchdir'))
truthy(isDir("./test/fs"))
falsy( isDir("./test/fs/dummy.txt"))

DBG("getPathType()")

equal(getPathType('./deno.jsonc'), 'file')
equal(getPathType("./test/fs"), 'dir')
equal(getPathType('./src/lib/notafile.txt'), 'missing')
equal(getPathType("./test"), 'dir')
equal(getPathType("./test/fs.test.civet"), 'file')
equal(getPathType("C:/temp/file.txt"), 'missing')

DBG("fileExt()")

equal(fileExt('C:/Users/johnd/utils/deno.jsonc'), '.jsonc')
equal(fileExt("C:/temp/file.txt"), ".txt")
equal(fileExt("c:\\temp/to/file.txt"), ".txt")
equal(fileExt("c:\\temp/to/file.flag.txt"), ".txt")

DBG("withExt()")

equal(withExt('deno.jsonc', '.txt'), 'deno.txt')
equal(withExt("C:/temp/file.txt", ".js"), "C:/temp/file.js")
equal(withExt("c:\\temp/to/file.txt", ".js"), "c:\\temp/to/file.js")
equal(withExt("c:\\temp/to/file.flag.txt", ".js"), "c:\\temp/to/file.flag.js")

DBG("getStats(path)")

truthy(hasKey(getStats('deno.jsonc'), 'mtimeMs'))
equal(getStats('test/fs/file1.txt').size, 18)

DBG("parsePath()")

like( parsePath("C:/temp/file.txt"), {
	type: 'missing',
	path: "C:/temp/file.txt",
	root: 'C:/',
	dir: 'C:/temp',
	fileName: 'file.txt',
	stub: 'file',
	purpose: undefined,
	ext: '.txt',
	relPath: "../../../temp/file.txt",
	relDir: "../../../temp"
	})

like(parsePath(import.meta.url), {
	type: 'file',
	fileName: 'fs.test.ts',
	stub: 'fs',
	purpose: 'test',
	ext: '.ts',
	relPath: 'test/fs.test.ts',
	relDir: 'test'
	})

DBG("allFilesMatching()")

listLike(Array.from(allFilesMatching('**/test/fs/file*.txt')), [
	{
		type: 'file',
		root: 'C:/',
		fileName: 'file1.txt',
		stub: 'file1',
		ext: '.txt',
		relPath: 'test/fs/file1.txt'
		},
	{
		type: 'file',
		root: 'C:/',
		fileName: 'file2.txt',
		stub: 'file2',
		ext: '.txt',
		relPath: 'test/fs/file2.txt'
		},
	{
		type: 'file',
		root: 'C:/',
		fileName: 'file3.flags.txt',
		stub: 'file3',
		purpose: 'flags',
		ext: '.txt',
		relPath: 'test/fs/file3.flags.txt'
		}
	])

listLike(Array.from(allFilesMatching('**/test/fs/**', 'includeDirs')), [
	{
		type: 'dir',
		fileName: 'fs',
		},
	{
		type: 'file',
		fileName: 'dummy.txt',
		},
	{
		type: 'file',
		fileName: 'file1.txt',
		},
	{
		type: 'file',
		fileName: 'file2.txt',
		},
	{
		type: 'file',
		fileName: 'file3.flags.txt',
		},
	{
		type: 'dir',
		fileName: 'subdir',
		},
	{
		type: 'file',
		fileName: 'new.txt',
		}
	]);

(() => {
	const hOptions = {
		includeDirs: true,
		filter: (hFile: hash) => {
			if (hFile.type === 'dir') {
				return hFile.fileName !== 'fs'
			}
			else if (hFile.type === 'file') {
				return defined(hFile.fileName.match(/^[a-z0-9]+\.txt$/))
			}
			else {
				return false
			}
		}
		}

	listLike(Array.from(allFilesMatching('**/test/fs/**', hOptions)), [
		{
			type: 'file',
			fileName: 'dummy.txt',
			},
		{
			type: 'file',
			fileName: 'file1.txt',
			},
		{
			type: 'file',
			fileName: 'file2.txt',
			},
		{
			type: 'dir',
			fileName: 'subdir',
			},
		{
			type: 'file',
			fileName: 'new.txt',
			}
		])
}
	)()

DBG("allLinesIn()")

const lLines = []
for await (const line of allLinesIn('./test/fs/file1.txt')) {
	lLines.push(line)
}

equal(lLines, [
	'line1',
	'line2',
	'line3'
	])

DBG("normalizePath()")

equal(normalizePath("C:/temp/file.txt"), "C:/temp/file.txt")
equal(normalizePath("C:\\temp/to/file.txt"), "C:/temp/to/file.txt")
equal(normalizePath("C:\\temp/to/file.flag.txt"), "C:/temp/to/file.flag.txt")
equal(normalizePath('C:\\Users\\johnd'), 'C:/Users/johnd')

DBG("mkpath()")

equal(mkpath("C:/temp/file.txt"), "C:/temp/file.txt")
equal(mkpath("C:/temp", "file.txt"), "C:/temp/file.txt")
equal(mkpath("C:\\temp/to/file.txt"), "C:/temp/to/file.txt")
equal(mkpath("C:\\temp/to/file.flag.txt"), "C:/temp/to/file.flag.txt")
equal(mkpath("C:/temp", "file.txt"), "C:/temp/file.txt")
equal(mkpath("C:\\temp/to", "file.txt"), "C:/temp/to/file.txt")
equal(mkpath("C:\\temp", "to/file.flag.txt"), "C:/temp/to/file.flag.txt")
equal(mkpath('c:\\', 'Users', 'johnd'), 'C:/Users/johnd')

DBG("relPath()")

equal(relpath('C:/Users/johnd/utils/deno.jsonc'), 'deno.jsonc')

DBG("pathSubDirs()");

(() => {
	const fullPath = "C:/Users/johnd/utils/test/fs/deno.jsonc"
	const relPath  = "test/fs/deno.jsonc"

	// --- non-relative, try both full and relative paths
	equal(pathSubDirs(fullPath, '!relative'), {
		dir: 'C:/Users/johnd/utils/test/fs',
		root: "C:/",
		lParts: ['Users', 'johnd', 'utils', 'test', 'fs']
		})
	equal(pathSubDirs(relPath, '!relative'), {
		dir: 'C:/Users/johnd/utils/test/fs',
		root: "C:/",
		lParts: ['Users', 'johnd', 'utils', 'test', 'fs']
		})

	// --- relative, try both full and relative paths
	equal(pathSubDirs(fullPath, 'relative'), {
		dir: "test/fs",
		root: "",
		lParts: ['test', 'fs']
		})
	equal(pathSubDirs(relPath, 'relative'), {
		dir: "test/fs",
		root: "",
		lParts: ['test', 'fs']
		})

	// --- Default is not relative
	equal(pathSubDirs(fullPath), {
		dir: 'C:/Users/johnd/utils/test/fs',
		root: "C:/",
		lParts: ['Users', 'johnd', 'utils', 'test', 'fs']
		})
	equal(pathSubDirs(relPath), {
		dir: 'C:/Users/johnd/utils/test/fs',
		root: "C:/",
		lParts: ['Users', 'johnd', 'utils', 'test', 'fs']
		})
}
	)()

DBG("myself()")

equal(myself(import.meta.url), 'test/fs.test.ts')

// ---------------------------------------------------------------------------
// ---------------------------------------------------------------------------
// ---------------------------------------------------------------------------

DBG("slurp(path)")

equal(slurp('./test/fs/file1.txt'), `line1
line2
line3\n`)

const barfPath = 'test/fs/barfed.txt'

DBG("barf(contents, path)");

(() => {
	const contents = `abc

xyz`

	barf(contents, barfPath)
	equal(slurp(barfPath), `abc

xyz`)
}
	)()

DBG("newerDestFileExists(srcPath, destPath)")

truthy(newerDestFileExists('test/fs/file1.txt', barfPath))
falsy( newerDestFileExists(barfPath, 'test/fs/file1.txt'))

DBG("mkDir()")

falsy( isDir('test/fs/tempdir'))
falsy( isFile('test/fs/tempdir/file42.txt'))
mkDir('test/fs/tempdir')
barf('abc', 'test/fs/tempdir/file42.txt')
truthy(isDir('test/fs/tempdir'))
truthy(isFile('test/fs/tempdir/file42.txt'))

DBG("rmFile()")

truthy(isFile(barfPath))
rmFile(barfPath)
falsy( isFile(barfPath))

DBG("rmDir()")

truthy(isDir('test/fs/tempdir'))
rmDir('test/fs/tempdir', 'clear')
falsy( isDir('test/fs/tempdir'))

const path = 'test/fs/aaa/bbb/newfile.txt'

DBG("mkDirsForFile(path)");

(() => {
	mkDirsForFile(path)
	truthy(isDir('test/fs'))
	truthy(isDir('test/fs/aaa'))
	truthy(isDir('test/fs/aaa/bbb'))
	falsy( isDir('test/fs/aaa/bbb/ccc'))
	falsy( isFile(path))
	barf('abc', path)
	truthy(isFile(path))
}
	)()

const setup = (): void => {
	cleanup()
	barf('abc', 'test/fs/aaa/newfile.txt')
	barf('abc', 'test/fs/aaa/bbb/newfile.txt')
	barf('abc', 'test/fs/aaa/bbb/oldfile.txt')
	barf('abc', 'test/fs/aaa/bbb/temp.txt')
}

DBG("clearDir(dir)");

(() => {
	setup()
	clearDir('test/fs/aaa')

	truthy(isDir('test/fs/aaa'))
	falsy( isDir('test/fs/aaa/bbb'))
	falsy( isFile(path))
}
	)()

DBG("removeFilesMatching()");

(() => {
	setup()
	removeFilesMatching('**/*file.txt')

	falsy( isFile('test/fs/aaa/newfile.txt'))
	falsy( isFile('test/fs/aaa/bbb/newfile.txt'))
	falsy( isFile('test/fs/aaa/bbb/oldfile.txt'))
	truthy(isFile('test/fs/aaa/bbb/temp.txt'))
}
	)()

DBG("removeFilesExcept()");

(() => {
	setup()
	const lKeep = [
		'test/fs/aaa/bbb/newfile.txt',
		'test/fs/aaa/bbb/oldfile.txt'
		]
	removeFilesExcept('**/*file.txt', lKeep)

	falsy( isFile('test/fs/aaa/newfile.txt'))
	truthy(isFile('test/fs/aaa/bbb/newfile.txt'))
	truthy(isFile('test/fs/aaa/bbb/oldfile.txt'))
	truthy(isFile('test/fs/aaa/bbb/temp.txt'))
}
	)()

DBG("removeDirsExcept()")

//     no unit tests yet

DBG("class FileEventHandler");

(async () => {
	const lChanges: fsChangeType[] = []
	const fileChangeFunc: fsCallbackFunc = (change) => {
		lChanges.push(change)
		return
	}

	const handler = new FileEventHandler(fileChangeFunc)
	handler.handle({
		kind: 'modify',
		path: '/usr/lib/temp.txt'
		})
	handler.handle({
		kind: 'modify',
		path: '/usr/lib/temp.txt'
		})
	handler.handle({
		kind: 'modify',
		path: '/usr/lib/temp2.txt'
		})
	handler.handle({
		kind: 'modify',
		path: '/usr/lib/temp.txt'
		})

	await sleep(2)

	handler.handle({
		kind: 'modify',
		path: '/usr/lib/temp.txt'
		})
	handler.handle({
		kind: 'modify',
		path: '/usr/lib/temp.txt'
		})

	await sleep(2)

	const expected = [
		{kind: 'modify', path: '/usr/lib/temp2.txt'},
		{kind: 'modify', path: '/usr/lib/temp.txt'},
		{kind: 'modify', path: '/usr/lib/temp.txt'}
		]

	equal(lChanges, expected)
}
	)()

DBG("class FileEventHandler 2");

// --- get the final change list via getChangeList() method
(async () => {
	const handler = new FileEventHandler()
	handler.handle({
		kind: 'modify',
		path: '/usr/lib/temp.txt'
		})
	handler.handle({
		kind: 'modify',
		path: '/usr/lib/temp.txt'
		})
	handler.handle({
		kind: 'modify',
		path: '/usr/lib/temp2.txt'
		})
	handler.handle({
		kind: 'modify',
		path: '/usr/lib/temp.txt'
		})

	await sleep(2)

	handler.handle({
		kind: 'modify',
		path: '/usr/lib/temp.txt'
		})
	handler.handle({
		kind: 'modify',
		path: '/usr/lib/temp.txt'
		})

	const lChanges = await handler.getChangeList()

	const expected = [
		{kind: 'modify', path: '/usr/lib/temp2.txt'},
		{kind: 'modify', path: '/usr/lib/temp.txt'},
		{kind: 'modify', path: '/usr/lib/temp.txt'}
		]

	equal(lChanges, expected)
}
	)()

DBG("watchFile()")

await (async () => {
	// --- Set contents of dummy.txt to standard contents
	const path = mkpath('test/fs/dummy.txt')
	barf('dummy\n', path)

	let doStop: boolean = false
	const lEvents: fsChangeType[] = []
	const add = (str: string, stop: boolean=false): void => {
		if (stop) {
			doStop = true
		}
		barf(str, path, 'append')
		return
	}

	const callback: watcherCallbackFunc = ({kind, path}) => {
		lEvents.push({kind, path: mkpath(path), ms: sinceLoad()})
		return doStop
	}

	const promise = watchFile(path, callback)

	add('A')
	add('B')
	add('C')
	await sleep(0.3)
	add('D')
	add('E', true)

	await Promise.allSettled([promise])

	equal(slurp(path), 'dummy\nABCDE')

	listLike(lEvents, [
		{kind: 'modify', path},
		{kind: 'modify', path}
		])
}
	)()

//# sourceMappingURL=data:application/json;charset=utf-8;base64,