"use strict";
// log-formatter.lib.test.civet

import {LogRecord} from "@std/log/logger"
import {LogLevels} from "@std/log/levels"

import {
	getConsoleLog, clearConsoleLog,
	getFormatter, indentLog, undentLog,
	} from '../src/lib/log-formatter.lib.ts'
import {
	equal, truthy, falsy, succeeds, fails, matches,
	} from '../src/lib/unit-test.lib.ts'

// ---------------------------------------------------------------------------
// --- Create 3 log records for use in testing

const rec1 = new LogRecord({
	msg: "Hello",
	args: [],
	level: LogLevels.INFO,
	loggerName: "example",
	})

const rec2 = new LogRecord({
	msg: "something went wrong",
	args: [],
	level: LogLevels.WARN,
	loggerName: "example",
	})

const rec3 = new LogRecord({
	msg: "h not a hash",
	args: [],
	level: LogLevels.ERROR,
	loggerName: "example",
	});

// ---------------------------------------------------------------------------
// --- possible interpolation strings:
//        $ts - milliseconds since process start
//        $tt - milliseconds since last log
//        $ll - log level as a single char
//        $msg - the message

(() => {
	const format = getFormatter('$msg', 'console')
	equal(format(rec1), "Hello")
	equal(format(rec2), "something went wrong")
	equal(format(rec3), "h not a hash")
	equal(getConsoleLog(), `Hello
something went wrong
h not a hash`)
}
	)();

(() => {
	const format = getFormatter('NOTICE: <$msg>', 'console')
	equal(format(rec1), "NOTICE: <Hello>")
	equal(format(rec2), "NOTICE: <something went wrong>")
	equal(format(rec3), "NOTICE: <h not a hash>")
	equal(getConsoleLog(), `Hello
something went wrong
h not a hash
NOTICE: <Hello>
NOTICE: <something went wrong>
NOTICE: <h not a hash>`)
}
	)();

(() => {
	const format = getFormatter('$ll $msg', 'console')
	clearConsoleLog()
	equal(format(rec1), "I Hello")
	equal(format(rec2), "W something went wrong")
	equal(format(rec3), "E h not a hash")
	equal(getConsoleLog(), `I Hello
W something went wrong
E h not a hash`)
}
	)();

(() => {
	const format = getFormatter('[$tt] $ll $msg', 'console')
	matches(format(rec1), /^\[\s*\d+\]\s+I\s+Hello$/)
}
	)()
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVzdC9sb2ctZm9ybWF0dGVyLmxpYi50ZXN0LmNpdmV0LnRzeCIsInNvdXJjZXMiOlsidGVzdC9sb2ctZm9ybWF0dGVyLmxpYi50ZXN0LmNpdmV0Il0sIm1hcHBpbmdzIjoiO0FBQUEsK0JBQThCO0FBQzlCLEFBQUE7QUFDQSxBQUFBLE1BQU0sQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLElBQUksQ0FBQyxpQkFBaUI7QUFDekMsQUFBQSxBQUFBLE1BQU0sQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLElBQUksQ0FBQyxpQkFBaUI7QUFDekMsQUFBQTtBQUNBLEFBQUEsQUFBQSxNQUFNLENBQUMsQ0FBQztBQUNSLENBQUMsYUFBYSxDQUFDLENBQUMsZUFBZSxDQUFDO0FBQ2hDLENBQUMsWUFBWSxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsU0FBUyxDQUFDO0FBQ3BDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxpQ0FBaUM7QUFDekMsQUFBQSxBQUFBLE1BQU0sQ0FBQyxDQUFDO0FBQ1IsQ0FBQyxLQUFLLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxPQUFPLENBQUM7QUFDaEQsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLDZCQUE2QjtBQUNyQyxBQUFBO0FBQ0EsQUFBQSw4RUFBNkU7QUFDN0UsQUFBQSw4Q0FBNkM7QUFDN0MsQUFBQTtBQUNBLEFBQUEsQUFBSSxNQUFKLElBQUksQ0FBQyxDQUFFLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxDQUFDO0FBQ3ZCLEFBQUEsQ0FBQyxHQUFHLENBQUMsQ0FBQyxPQUFPLENBQUM7QUFDZCxBQUFBLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDVixBQUFBLENBQUMsS0FBSyxDQUFDLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQztBQUN2QixBQUFBLENBQUMsVUFBVSxDQUFDLENBQUMsU0FBUyxDQUFDO0FBQ3ZCLENB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QWUsQ0FBQyxDQUFDO0FBQ2xCLEFBQUEsQ0FBQyxLQUFLLENBQUEsQUFBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUE7QUFDOUIsQUFBQSxDQUFDLEtBQUssQ0FBQSxBQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLHdCQUF3QixDQUFBO0FBQzdDLEFBQUEsQ0FBQyxLQUFLLENBQUEsQUFBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxnQkFBZ0IsQ0FBQTtBQUNyQyxBQUFBLENBQUMsS0FBSyxDQUFBLEFBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUc7QUFDM0I7QUFDQSxjQUVFLENBQUcsQztBQUFBLENBQUE7QUFDTCxDQUFDLENBQUMsQ0FBQyxDLENBQUM7QUFDSixBQUFBO0FBQ0EsQUFBQSxBQUFBLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFBLENBQUE7QUFDTixBQUFBLENBQU8sTUFBTixNQUFNLENBQUMsQ0FBRSxDQUFDLFlBQVksQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLFNBQVMsQ0FBQztBQUNwRCxBQUFBLENBQUMsT0FBTyxDQUFBLEFBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBRyxDQUFDLEFBQ3pCLEVBQUUsQUFDRixFQUFFLENBQUMsQUFDSCxFQUFFLENBQUMsQUFDSCxFQUFFLEFBQ0YsRUFBRSxDQUFDLEFBQ0gsQ0FBQyxBQUNELEVBQUUsQ0FBQyxBQUNILEtBQUssQUFDTCxDQUFDLENBQUcsQztBQUFBLENBQUE7QUFDTixDQUFDLENBQUMsQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlc0NvbnRlbnQiOlsiIyBsb2ctZm9ybWF0dGVyLmxpYi50ZXN0LmNpdmV0XG5cbmltcG9ydCB7TG9nUmVjb3JkfSBmcm9tIFwiQHN0ZC9sb2cvbG9nZ2VyXCJcbmltcG9ydCB7TG9nTGV2ZWxzfSBmcm9tIFwiQHN0ZC9sb2cvbGV2ZWxzXCJcblxuaW1wb3J0IHtcblx0Z2V0Q29uc29sZUxvZywgY2xlYXJDb25zb2xlTG9nLFxuXHRnZXRGb3JtYXR0ZXIsIGluZGVudExvZywgdW5kZW50TG9nLFxuXHR9IGZyb20gJy4uL3NyYy9saWIvbG9nLWZvcm1hdHRlci5saWIudHMnXG5pbXBvcnQge1xuXHRlcXVhbCwgdHJ1dGh5LCBmYWxzeSwgc3VjY2VlZHMsIGZhaWxzLCBtYXRjaGVzLFxuXHR9IGZyb20gJy4uL3NyYy9saWIvdW5pdC10ZXN0LmxpYi50cydcblxuIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiMgLS0tIENyZWF0ZSAzIGxvZyByZWNvcmRzIGZvciB1c2UgaW4gdGVzdGluZ1xuXG5yZWMxIDo9IG5ldyBMb2dSZWNvcmQoe1xuXHRtc2c6IFwiSGVsbG9cIixcblx0YXJnczogW10sXG5cdGxldmVsOiBMb2dMZXZlbHMuSU5GTyxcblx0bG9nZ2VyTmFtZTogXCJleGFtcGxlXCIsXG5cdH0pXG5cbnJlYzIgOj0gbmV3IExvZ1JlY29yZCh7XG5cdG1zZzogXCJzb21ldGhpbmcgd2VudCB3cm9uZ1wiLFxuXHRhcmdzOiBbXSxcblx0bGV2ZWw6IExvZ0xldmVscy5XQVJOLFxuXHRsb2dnZXJOYW1lOiBcImV4YW1wbGVcIixcblx0fSlcblxucmVjMyA6PSBuZXcgTG9nUmVjb3JkKHtcblx0bXNnOiBcImggbm90IGEgaGFzaFwiLFxuXHRhcmdzOiBbXSxcblx0bGV2ZWw6IExvZ0xldmVscy5FUlJPUixcblx0bG9nZ2VyTmFtZTogXCJleGFtcGxlXCIsXG5cdH0pXG5cbiMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4jIC0tLSBwb3NzaWJsZSBpbnRlcnBvbGF0aW9uIHN0cmluZ3M6XG4jICAgICAgICAkdHMgLSBtaWxsaXNlY29uZHMgc2luY2UgcHJvY2VzcyBzdGFydFxuIyAgICAgICAgJHR0IC0gbWlsbGlzZWNvbmRzIHNpbmNlIGxhc3QgbG9nXG4jICAgICAgICAkbGwgLSBsb2cgbGV2ZWwgYXMgYSBzaW5nbGUgY2hhclxuIyAgICAgICAgJG1zZyAtIHRoZSBtZXNzYWdlXG5cbigoKSA9PlxuXHRmb3JtYXQgOj0gZ2V0Rm9ybWF0dGVyKCckbXNnJywgJ2NvbnNvbGUnKVxuXHRlcXVhbCBmb3JtYXQocmVjMSksIFwiSGVsbG9cIlxuXHRlcXVhbCBmb3JtYXQocmVjMiksIFwic29tZXRoaW5nIHdlbnQgd3JvbmdcIlxuXHRlcXVhbCBmb3JtYXQocmVjMyksIFwiaCBub3QgYSBoYXNoXCJcblx0ZXF1YWwgZ2V0Q29uc29sZUxvZygpLCBcIlwiXCJcblx0XHRIZWxsb1xuXHRcdHNvbWV0aGluZyB3ZW50IHdyb25nXG5cdFx0aCBub3QgYSBoYXNoXG5cdFx0XCJcIlwiXG5cdCkoKVxuXG4oKCkgPT5cblx0Zm9ybWF0IDo9IGdldEZvcm1hdHRlcignTk9USUNFOiA8JG1zZz4nLCAnY29uc29sZScpXG5cdGVxdWFsIGZvcm1hdChyZWMxKSwgXCJOT1RJQ0U6IDxIZWxsbz5cIlxuXHRlcXVhbCBmb3JtYXQocmVjMiksIFwiTk9USUNFOiA8c29tZXRoaW5nIHdlbnQgd3Jvbmc+XCJcblx0ZXF1YWwgZm9ybWF0KHJlYzMpLCBcIk5PVElDRTogPGggbm90IGEgaGFzaD5cIlxuXHRlcXVhbCBnZXRDb25zb2xlTG9nKCksIFwiXCJcIlxuXHRcdEhlbGxvXG5cdFx0c29tZXRoaW5nIHdlbnQgd3Jvbmdcblx0XHRoIG5vdCBhIGhhc2hcblx0XHROT1RJQ0U6IDxIZWxsbz5cblx0XHROT1RJQ0U6IDxzb21ldGhpbmcgd2VudCB3cm9uZz5cblx0XHROT1RJQ0U6IDxoIG5vdCBhIGhhc2g+XG5cdFx0XCJcIlwiXG5cdCkoKVxuXG4oKCkgPT5cblx0Zm9ybWF0IDo9IGdldEZvcm1hdHRlcignJGxsICRtc2cnLCAnY29uc29sZScpXG5cdGNsZWFyQ29uc29sZUxvZygpXG5cdGVxdWFsIGZvcm1hdChyZWMxKSwgXCJJIEhlbGxvXCJcblx0ZXF1YWwgZm9ybWF0KHJlYzIpLCBcIlcgc29tZXRoaW5nIHdlbnQgd3JvbmdcIlxuXHRlcXVhbCBmb3JtYXQocmVjMyksIFwiRSBoIG5vdCBhIGhhc2hcIlxuXHRlcXVhbCBnZXRDb25zb2xlTG9nKCksIFwiXCJcIlxuXHRcdEkgSGVsbG9cblx0XHRXIHNvbWV0aGluZyB3ZW50IHdyb25nXG5cdFx0RSBoIG5vdCBhIGhhc2hcblx0XHRcIlwiXCJcblx0KSgpXG5cbigoKSA9PlxuXHRmb3JtYXQgOj0gZ2V0Rm9ybWF0dGVyKCdbJHR0XSAkbGwgJG1zZycsICdjb25zb2xlJylcblx0bWF0Y2hlcyBmb3JtYXQocmVjMSksIC8vL15cblx0XHRcXFtcblx0XHRcXHMqXG5cdFx0XFxkK1xuXHRcdFxcXVxuXHRcdFxccytcblx0XHRJXG5cdFx0XFxzK1xuXHRcdEhlbGxvXG5cdFx0JC8vL1xuXHQpKCkiXX0=