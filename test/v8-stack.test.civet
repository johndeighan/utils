# v8-stack.test.civet

import {
	undef, defined, notdefined, assert, croak,
	DBG,
	compileAllFiles, relpath, getCmdArgs,
	} from '../src/lib/utils.ts'
import {
	getV8Stack, getMyCaller,
	getMyOutsideCaller, getV8StackStr,
	stackFrame,
	} from '../src/lib/v8-stack.ts'
import {
	equal, like,
	} from '../src/lib/unit-test.ts'

import {getBoth} from './v8-stack/v8-module.ts'

hArgs := getCmdArgs()

# ---------------------------------------------------------------------------

DBG "type stackFrame"
DBG "getV8Stack()"

(() ->
	let stack1: stackFrame[] = []
	let stack2: stackFrame[] = []

	main := () =>
		func1()
		func2()

	func1 := () ->
		stack1 = getV8Stack()
		return

	func2 := () ->
		stack2 = getV8Stack()
		return

	main()
	like stack1, [
		{
			type: 'function'
			name: 'func1'
			source: 'test/v8-stack.test.civet'
			line: 35
			}
		{
			type: 'function'
			name: 'main'
			source: 'test/v8-stack.test.civet'
			line: 31
			}
		{
			type: 'function'
			name: '<anon>'
			source: 'test/v8-stack.test.civet'
			line: 42
			}
		{
			type: 'script'
			source: 'test/v8-stack.test.civet'
			line: 94
			}
		]

	like stack2, [
		{
			type: 'function'
			name: 'func2'
			source: 'test/v8-stack.test.civet'
			line: 39
			}
		{
			type: 'function'
			name: 'main'
			source: 'test/v8-stack.test.civet'
			line: 32
			}
		{
			type: 'function'
			name: '<anon>'
			source: 'test/v8-stack.test.civet'
			line: 42
			}
		{
			type: 'script'
			source: 'test/v8-stack.test.civet'
			line: 94
			}
		]
	)()

# ---------------------------------------------------------------------------

DBG "getV8StackStr()"

(() ->
	let stack1: string = ''
	let stack2: string = ''

	main := () ->
		func1()
		func2()

	func1 := () ->
		stack1 = getV8StackStr()
		return

	func2 := () ->
		stack2 = getV8StackStr()
		return

	main()
	equal stack1, """
		[function func1    ] test/v8-stack.test.civet:109:11
		[function main     ] test/v8-stack.test.civet:105:2
		[function <anon>   ] test/v8-stack.test.civet:116:1
		[script            ] test/v8-stack.test.civet:130:2
		"""

	equal stack2, """
		[function func2    ] test/v8-stack.test.civet:113:11
		[function main     ] test/v8-stack.test.civet:106:2
		[function <anon>   ] test/v8-stack.test.civet:116:1
		[script            ] test/v8-stack.test.civet:130:2
		"""
	)()

# ---------------------------------------------------------------------------

DBG "getMyCaller()"

(() ->
	let caller1: stackFrame? = undef
	let caller2: stackFrame? = undef

	main := () ->
		func1()
		func2()

	func1 := () ->
		caller1 = getMyCaller()

	func2 := () ->
		caller2 = getMyCaller()
		return

	main()
	like caller1, {
		type: 'function'
		name: 'main'
		source: 'test/v8-stack.test.civet'
		}
	like caller2, {
		type: 'function'
		name: 'main'
		source: 'test/v8-stack.test.civet'
		}
	)()

# ---------------------------------------------------------------------------

(() ->
	let hCaller: stackFrame? = undef

	main := () ->
		func1()
		func2()

	func1 := () ->
		return

	func2 := () ->
		hCaller = getMyCaller()
		return

	# ------------------------------------------------------------------------

	main()

	like hCaller, {
		type: 'function'
		name: 'main'
		source: 'test/v8-stack.test.civet'
		}

	)()

# ---------------------------------------------------------------------------

(() ->
	let lCallers1: (stackFrame?)[] = []
	let lCallers2: (stackFrame?)[] = []

	main := () ->
		func1()
		func2()

	func1 := () ->
		lCallers1 = getBoth()

	func2 := () ->
		lCallers2 = getBoth()
		return

	main()
	like lCallers1[0], {
		type: 'function'
		name: 'secondFunc'
		source: 'test/v8-stack/v8-module.civet'
		}
	like lCallers1[1], {
		type: 'function'
		name: 'secondFunc'
		source: 'test/v8-stack/v8-module.civet'
		}
	like lCallers2[0], {
		type: 'function'
		name: 'secondFunc'
		source: 'test/v8-stack/v8-module.civet'
		}
	like lCallers2[1], {
		type: 'function'
		name: 'secondFunc'
		source: 'test/v8-stack/v8-module.civet'
		}

	)()

# ---------------------------------------------------------------------------

(() =>
	func1 := () =>
		return await func2()

	func2 := () =>
		return await getV8StackStr()

	equal await func1(), """
		[function func2    ] test/v8-stack.test.civet:240:15
		[function func1    ] test/v8-stack.test.civet:237:15
		[function <anon>   ] test/v8-stack.test.civet:242:13
		[script            ] test/v8-stack.test.civet:249:2
		"""

	)()

# ---------------------------------------------------------------------------

(() =>
	func1 := () =>
		func2()
		return await getV8StackStr()

	func2 := () =>
		return 2 * 2

	equal await func1(), """
		[function func1    ] test/v8-stack.test.civet:256:15
		[function <anon>   ] test/v8-stack.test.civet:261:13
		[script            ] test/v8-stack.test.civet:266:2
		"""
	)()

# ---------------------------------------------------------------------------

(() ->
	let caller1: stackFrame? = undef
	let caller2: stackFrame? = undef

	main := () ->
		func1()
		func2()

	func1 := () ->
		caller1 = getMyCaller()

	func2 := () ->
		caller2 = getMyCaller()
		return

	main()
	like caller1, {
		type: 'function'
		name: 'main'
		source: 'test/v8-stack.test.civet'
		}
	like caller2, {
		type: 'function'
		name: 'main'
		source: 'test/v8-stack.test.civet'
		}
	)()

# ---------------------------------------------------------------------------

DBG "getMyOutsideCaller()"

(() ->
	let caller1: stackFrame? = undef
	let caller2: stackFrame? = undef

	main := () ->
		func1()
		func2()

	func1 := () ->
		caller1 = getMyOutsideCaller()

	func2 := () ->
		caller2 = getMyOutsideCaller()
		return

	main()
	like caller1, {
		type: 'function'
		name: 'main'
		source: 'test/v8-stack.test.civet'
		}
	like caller2, {
		type: 'function'
		name: 'main'
		source: 'test/v8-stack.test.civet'
		}
	)()

