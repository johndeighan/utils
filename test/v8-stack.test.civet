# v8-stack.test.civet

import {
	undef, defined, notdefined, assert, croak,
	compileAllFiles, relpath,
	} from '@jdeighan/utils'
import {
	getV8Stack, getMyCaller,
	getMyOutsideCaller, getV8StackStr,
	stackFrame,
	} from '@jdeighan/utils/v8-stack'
import {
	equal, like,
	} from '@jdeighan/utils/unit-test'

import {getBoth} from './v8-stack/v8-module.ts'

# ---------------------------------------------------------------------------

(() ->
	let stack1: stackFrame[] = []
	let stack2: stackFrame[] = []

	main := () ->
		func1()
		func2()

	func1 := () ->
		stack1 = getV8Stack()
		return

	func2 := () ->
		stack2 = getV8Stack()
		return

	main()
	like stack1, [
		{
			type: 'function'
			name: 'func1'
			source: 'test/v8-stack.test.civet'
			line: 29
			}
		{
			type: 'function'
			name: 'main'
			source: 'test/v8-stack.test.civet'
			line: 25
			}
		{
			type: 'function'
			name: '<anonymous>'
			source: 'test/v8-stack.test.civet'
			line: 36
			}
		{
			type: 'script'
			source: 'test/v8-stack.test.civet'
			line: 87
			}
		]
	like stack2, [
		{
			type: 'function'
			name: 'func2'
			source: 'test/v8-stack.test.civet'
			line: 33
			}
		{
			type: 'function'
			name: 'main'
			source: 'test/v8-stack.test.civet'
			line: 26
			}
		{
			type: 'function'
			name: '<anonymous>'
			source: 'test/v8-stack.test.civet'
			line: 36
			}
		{
			type: 'script'
			source: 'test/v8-stack.test.civet'
			line: 87
			}
		]
	)()

# ---------------------------------------------------------------------------

(() ->
	let caller1: stackFrame? = undef
	let caller2: stackFrame? = undef

	main := () ->
		func1()
		func2()

	func1 := () ->
		caller1 = getMyCaller()

	func2 := () ->
		caller2 = getMyCaller()
		return

	main()
	like caller1, {
		type: 'function'
		name: 'main'
		source: 'test/v8-stack.test.civet'
		}
	like caller2, {
		type: 'function'
		name: 'main'
		source: 'test/v8-stack.test.civet'
		}
	)()

# ---------------------------------------------------------------------------

(() ->
	let hCaller: stackFrame? = undef

	main := () ->
		func1()
		func2()

	func1 := () ->
		return

	func2 := () ->
		hCaller = getMyCaller()
		return

	# ------------------------------------------------------------------------

	main()

	like hCaller, {
		type: 'function'
		name: 'main'
		source: 'test/v8-stack.test.civet'
		}

	)()

# ---------------------------------------------------------------------------

(() ->
	let lCallers1: stackFrame?[] = []
	let lCallers2: stackFrame?[] = []

	main := () ->
		func1()
		func2()

	func1 := () ->
		lCallers1 = getBoth()

	func2 := () ->
		lCallers2 = getBoth()
		return

	main()
	like lCallers1[0], {
		type: 'function'
		name: 'secondFunc'
		source: 'test/v8-stack/v8-module.civet'
		}
	like lCallers1[1], {
		type: 'function'
		name: 'secondFunc'
		source: 'test/v8-stack/v8-module.civet'
		}
	like lCallers2[0], {
		type: 'function'
		name: 'secondFunc'
		source: 'test/v8-stack/v8-module.civet'
		}
	like lCallers2[1], {
		type: 'function'
		name: 'secondFunc'
		source: 'test/v8-stack/v8-module.civet'
		}

	)()

# ---------------------------------------------------------------------------

(() =>
	func1 := () =>
		return await func2()

	func2 := () =>
		return await getV8StackStr()

	equal await func1(), """
		[function   ] test/v8-stack.test.civet:195:15
		[function   ] test/v8-stack.test.civet:192:15
		[function   ] test/v8-stack.test.civet:197:13
		[script     ] test/v8-stack.test.civet:204:2
		"""

	)()

# ---------------------------------------------------------------------------

(() =>
	func1 := () =>
		func2()
		return await getV8StackStr()

	func2 := () =>
		return 2 * 2

	equal await func1(), """
		[function   ] test/v8-stack.test.civet:211:15
		[function   ] test/v8-stack.test.civet:216:13
		[script     ] test/v8-stack.test.civet:221:2
		"""
	)()

# ---------------------------------------------------------------------------

(() ->
	let caller1: stackFrame? = undef
	let caller2: stackFrame? = undef

	main := () ->
		func1()
		func2()

	func1 := () ->
		caller1 = getMyCaller()

	func2 := () ->
		caller2 = getMyCaller()
		return

	main()
	like caller1, {
		type: 'function'
		name: 'main'
		source: 'test/v8-stack.test.civet'
		}
	like caller2, {
		type: 'function'
		name: 'main'
		source: 'test/v8-stack.test.civet'
		}
	)()
