# v8-stack.lib.test.civet

import {
	undef, defined, notdefined, o, assert, croak, sleep,
	DBG, relpath, getCmdArgs, execCmd, execCmdSync, setDirTree,
	} from '../src/lib/utils.lib.ts'
import {
	stackFrame, getV8Stack, getMyCaller,
	getMyOutsideCaller, getV8StackStr,
	} from '../src/lib/v8-stack.lib.ts'
import {
	equal, like, succeeds, isType, notType,
	} from '../src/lib/unit-test.lib.ts'

hArgs := getCmdArgs()

# ---------------------------------------------------------------------------

setup := (): void =>

	DBG "setDirTree()"

	setDirTree 'test/v8-stack', """
			v8-module.ts
				"use strict";
				// v8-module.civet

				import {getMyCaller, stackFrame} from '../../src/lib/v8-stack.lib.ts'

				// ---------------------------------------------------------------------------

				type bothFrames = ((stackFrame | undefined))[]

				const isBothFrames = (x: any): x is bothFrames => {
					return Array.isArray(x) && (x.length === 2)
				}

				// ---------------------------------------------------------------------------

				export const getBoth = function(): bothFrames {

					const result = secondFunc('both')
					if (Array.isArray(result)) {
						return result
					}
					else {
						throw new Error("Expected array, got stackFrame")
					}
				}

				// ---------------------------------------------------------------------------

				export const getDirect = function(): (stackFrame | undefined) {

					const result = secondFunc('direct')
					if (Array.isArray(result)) {
						throw new Error("Got unexpected array")
					}
					return result
				}

				// ---------------------------------------------------------------------------

				export const getOutside = function(): (stackFrame | undefined) {

					const result = secondFunc('outside')
					if (Array.isArray(result)) {
						throw new Error("Got unexpected array")
					}
					return result
				}

				// ---------------------------------------------------------------------------

				const secondFunc = function(type: string): bothFrames | (stackFrame | undefined) {

					return thirdFunc(type)
				}

				// ---------------------------------------------------------------------------

				const thirdFunc = function(type: string): bothFrames | (stackFrame | undefined) {

					// --- direct caller should be 'secondFunc'
					//     outside caller should be the function
					//        that called getCaller()
					switch(type) {
						case 'both': {
							return [getMyCaller(), getMyCaller()]
						}
						case 'direct': {
							return getMyCaller()
						}
						case 'outside': {
							return getMyCaller()
						}
						default: {
							throw new Error(`Unknown type: ${type}`)
						}
					}
				}
		""", o'clear'

	return

setup()

# ---------------------------------------------------------------------------

DBG "type stackFrame"

isType 'stackFrame', {
	type: 'function'
	source: 'temp.civet'
	line: 5
	column: 5
	name: 'func'
	isConstructor: false
	isAsync: false
	objType: undefined
	}

DBG "getV8Stack()"

(() ->
	let stack1: stackFrame[] = []
	let stack2: stackFrame[] = []

	main := () =>
		func1()
		func2()

	func1 := () ->
		stack1 = getV8Stack()
		return

	func2 := () ->
		stack2 = getV8Stack()
		return

	main()
	like stack1, [
		{
			type: 'function'
			name: 'func1'
			source: 'test/v8-stack.lib.test.civet'
			line: 134
			}
		{
			type: 'function'
			name: 'main'
			source: 'test/v8-stack.lib.test.civet'
			line: 130
			}
		{
			type: 'function'
			name: '<anon>'
			source: 'test/v8-stack.lib.test.civet'
			line: 141
			}
		{
			type: 'script'
			source: 'test/v8-stack.lib.test.civet'
			line: 193
			}
		]

	like stack2, [
		{
			type: 'function'
			name: 'func2'
			source: 'test/v8-stack.lib.test.civet'
			line: 138
			}
		{
			type: 'function'
			name: 'main'
			source: 'test/v8-stack.lib.test.civet'
			line: 131
			}
		{
			type: 'function'
			name: '<anon>'
			source: 'test/v8-stack.lib.test.civet'
			line: 141
			}
		{
			type: 'script'
			source: 'test/v8-stack.lib.test.civet'
			line: 193
			}
		]
	)()

# ---------------------------------------------------------------------------

DBG "getV8StackStr()"

(() ->
	let stack1: string = ''
	let stack2: string = ''

	main := () ->
		func1()
		func2()

	func1 := () ->
		stack1 = getV8StackStr()
		return

	func2 := () ->
		stack2 = getV8StackStr()
		return

	main()
	equal stack1, """
		[function func1    ] test/v8-stack.lib.test.civet:208:11
		[function main     ] test/v8-stack.lib.test.civet:204:2
		[function <anon>   ] test/v8-stack.lib.test.civet:215:1
		[script            ] test/v8-stack.lib.test.civet:229:2
		"""

	equal stack2, """
		[function func2    ] test/v8-stack.lib.test.civet:212:11
		[function main     ] test/v8-stack.lib.test.civet:205:2
		[function <anon>   ] test/v8-stack.lib.test.civet:215:1
		[script            ] test/v8-stack.lib.test.civet:229:2
		"""
	)()

# ---------------------------------------------------------------------------

DBG "getMyCaller()"

(() ->
	let caller1: stackFrame? = undef
	let caller2: stackFrame? = undef

	main := () ->
		func1()
		func2()

	func1 := () ->
		caller1 = getMyCaller()

	func2 := () ->
		caller2 = getMyCaller()
		return

	main()
	like caller1, {
		type: 'function'
		name: 'main'
		source: 'test/v8-stack.lib.test.civet'
		}
	like caller2, {
		type: 'function'
		name: 'main'
		source: 'test/v8-stack.lib.test.civet'
		}
	)()

# ---------------------------------------------------------------------------

(() ->
	let hCaller: stackFrame? = undef

	main := () ->
		func1()
		func2()

	func1 := () ->
		return

	func2 := () ->
		hCaller = getMyCaller()
		return

	# ------------------------------------------------------------------------

	main()

	like hCaller, {
		type: 'function'
		name: 'main'
		source: 'test/v8-stack.lib.test.civet'
		}

	)()

# ---------------------------------------------------------------------------

(() ->
	await execCmd 'civet', [
		'--inline-map'
		'-o'
		'.ts'
		'-c'
		'test/v8-stack/v8-module.civet'
		]
	{getBoth} := await import('./v8-stack/v8-module.ts')
	let lCallers1: (stackFrame?)[] = []
	let lCallers2: (stackFrame?)[] = []

	main := () ->
		func1()
		func2()

	func1 := () ->
		lCallers1 = getBoth()

	func2 := () ->
		lCallers2 = getBoth()
		return

	main()
	like lCallers1[0], {
		type: 'function'
		name: 'secondFunc'
		source: 'test/v8-stack/v8-module.civet'
		}
	like lCallers1[1], {
		type: 'function'
		name: 'secondFunc'
		source: 'test/v8-stack/v8-module.civet'
		}
	like lCallers2[0], {
		type: 'function'
		name: 'secondFunc'
		source: 'test/v8-stack/v8-module.civet'
		}
	like lCallers2[1], {
		type: 'function'
		name: 'secondFunc'
		source: 'test/v8-stack/v8-module.civet'
		}
	)()

# ---------------------------------------------------------------------------

(() =>
	func1 := () =>
		return await func2()

	func2 := () =>
		return await getV8StackStr()

	equal await func1(), """
		[function func2    ] test/v8-stack.lib.test.civet:346:15
		[function func1    ] test/v8-stack.lib.test.civet:343:15
		[function <anon>   ] test/v8-stack.lib.test.civet:348:13
		[script            ] test/v8-stack.lib.test.civet:355:2
		"""

	)()

# ---------------------------------------------------------------------------

(() =>
	func1 := () =>
		func2()
		return await getV8StackStr()

	func2 := () =>
		return 2 * 2

	equal await func1(), """
		[function func1    ] test/v8-stack.lib.test.civet:362:15
		[function <anon>   ] test/v8-stack.lib.test.civet:367:13
		[script            ] test/v8-stack.lib.test.civet:372:2
		"""
	)()

# ---------------------------------------------------------------------------

(() ->
	let caller1: stackFrame? = undef
	let caller2: stackFrame? = undef

	main := () ->
		func1()
		func2()

	func1 := () ->
		caller1 = getMyCaller()

	func2 := () ->
		caller2 = getMyCaller()
		return

	main()
	like caller1, {
		type: 'function'
		name: 'main'
		source: 'test/v8-stack.lib.test.civet'
		}
	like caller2, {
		type: 'function'
		name: 'main'
		source: 'test/v8-stack.lib.test.civet'
		}
	)()

# ---------------------------------------------------------------------------

DBG "getMyOutsideCaller()"

(() ->
	let caller1: stackFrame? = undef
	let caller2: stackFrame? = undef

	main := () ->
		func1()
		func2()

	func1 := () ->
		caller1 = getMyOutsideCaller()

	func2 := () ->
		caller2 = getMyOutsideCaller()
		return

	main()
	like caller1, {
		type: 'function'
		name: 'main'
		source: 'test/v8-stack.lib.test.civet'
		}
	like caller2, {
		type: 'function'
		name: 'main'
		source: 'test/v8-stack.lib.test.civet'
		}
	)()
