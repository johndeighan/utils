"use strict";
// indent.test.civet

import {
	undef, defined, notdefined, spaces, tabs, DBG,
	assert, throwsError, getCmdArgs, deeplyEquals,
	oneIndent, resetOneIndent, indentLevel, splitLine,
	indented, undented,
	} from '../src/lib/utils.ts'
import {
	equal, truthy, falsy, like, listLike, succeeds, fails,
	} from '../src/lib/unit-test.ts'

const hArgs = getCmdArgs()

// ---------------------------------------------------------------------------

// --- TEST using TABs ---

// ---------------------------------------------------------------------------
DBG("indentLevel()")

succeeds(() => {
	resetOneIndent()
	assert(notdefined(oneIndent))

	assert((indentLevel('abc') === 0))
	assert((indentLevel('\tabc') === 1))
	assert((indentLevel('\t\tabc') === 2))
	throwsError(() => indentLevel('\t abc'))
	throwsError(() => indentLevel(' \tabc'))
	assert(indentLevel('abc') === 0)

	assert(indentLevel('abc') === 0)
	assert(indentLevel('\tabc') === 1)
	assert(indentLevel('\t\tabc') === 2)
})

// ---------------------------------------------------------------------------
DBG("splitLine()")

succeeds(() => {
	resetOneIndent()
	assert(deeplyEquals(splitLine('abc'), [0, 'abc']))
	assert(deeplyEquals(splitLine('\t\tabc'), [2, 'abc']))

	assert(deeplyEquals(splitLine('\tabc'), [1, 'abc']))

	// --- fails since we're now expecting TABs
	throwsError(() =>  splitLine('      abc'))
})

// ---------------------------------------------------------------------------
DBG("indented()")

succeeds(() => {
	resetOneIndent()
	assert(indented('abc') === '\tabc')
	assert(indented('abc', 2) === '\t\tabc')

	assert(indentLevel('\tabc') === 1)
	assert(indented('abc', 2) === (tabs(2) + 'abc'))
	assert(indented('abc', 2) === `${tabs(2)}abc`)
})

// --- Test with blocks

succeeds(() => {
	resetOneIndent()
	assert(indented(`first line
\tsecond line
\t\tthird line`) === `\tfirst line
\t\tsecond line
\t\t\tthird line`)

	assert(indented(`first line
\tsecond line
\t\tthird line`, 2) === `\t\tfirst line
\t\t\tsecond line
\t\t\t\tthird line`)
})

// --- Test with arrays

succeeds(() => {
	resetOneIndent()
	assert(deeplyEquals(indented([
		'first line',
		'\tsecond line',
		'\t\tthird line'
		]), [
		'\tfirst line',
		'\t\tsecond line',
		'\t\t\tthird line'
		]))

	assert(deeplyEquals(indented([
		'first line',
		'\tsecond line',
		'\t\tthird line'
		], 2), [
		'\t\tfirst line',
		'\t\t\tsecond line',
		'\t\t\t\tthird line'
		]))
})

// ---------------------------------------------------------------------------
DBG("undented()")

succeeds(() => {
	resetOneIndent()
	equal(undented(`\tabc
\t\tdef
\t\t\tghi`), `abc
\tdef
\t\tghi`)
})

// ---------------------------------------------------------------------------

// TEST using 3 spaces

// ---------------------------------------------------------------------------
DBG("resetOneIndent()")

succeeds(() => {
	resetOneIndent()
	assert(notdefined(oneIndent))
	assert((indentLevel('\t\tabc') === 2))
	assert((oneIndent === '\t'))
})

succeeds(() => {
	resetOneIndent()
	assert(notdefined(oneIndent))
	assert((indentLevel('   abc') === 1))
	assert((indentLevel('      abc') === 2))
	assert((oneIndent === '   '))
})

// ---------------------------------------------------------------------------
DBG("indentLevel()")

succeeds(() => {
	resetOneIndent()
	assert(indentLevel('abc') === 0)
	assert(indentLevel('   abc') === 1)
	assert(indentLevel('      abc') === 2)
	throwsError(() => indentLevel('\t abc'))
	throwsError(() => indentLevel(' \tabc'))
	assert((indentLevel('abc') === 0))

	assert(indentLevel('abc') === 0)
	assert(indentLevel('   abc') === 1)
	assert(indentLevel('      abc') === 2)
})

// ---------------------------------------------------------------------------
DBG("splitLine()")

succeeds(() => {
	resetOneIndent()
	assert(notdefined(oneIndent))

	assert(deeplyEquals(splitLine('abc'), [0, 'abc']))
	assert(notdefined(oneIndent))
	assert(deeplyEquals(splitLine('   abc'), [1, 'abc']))
	assert(defined(oneIndent))
	assert(deeplyEquals(splitLine('      abc'), [2, 'abc']))
	assert((oneIndent === '   '))

	assert(deeplyEquals(splitLine('   abc'), [1, 'abc']))

	// ---fails since we're now expecting spaces
	throwsError(() => splitLine('\t\tabc'))
})

// ---------------------------------------------------------------------------
DBG("indented()")

succeeds(() => {
	resetOneIndent('   ')
	assert((indented('abc', 2) === '      abc'))
	assert((indented('abc') === '   abc'))

	assert((indentLevel('   abc') === 1))
	assert((indented('abc', 2) === spaces(6) + 'abc'))
})

// --- Test with blocks

succeeds(() => {
	resetOneIndent(spaces(3))
	assert(indented(`first line
${spaces(3)}second line
${spaces(6)}third line`) === `${spaces(3)}first line
${spaces(6)}second line
${spaces(9)}third line`)

	assert(indented(`first line
${spaces(3)}second line
${spaces(6)}third line`, 2) === `${spaces(6)}first line
${spaces(9)}second line
${spaces(12)}third line`)
})

// --- Test with arrays

succeeds(() => {
	resetOneIndent('   ')
	assert(deeplyEquals(indented([
		'first line',
		'   second line',
		'      third line'
		]), [
		'   first line',
		'      second line',
		'         third line'
		]))

	assert(deeplyEquals(indented([
		'first line',
		'   second line',
		'      third line'
		], 2), [
		'      first line',
		'         second line',
		'            third line'
		]))
})

// ---------------------------------------------------------------------------
DBG("undented()")

equal(undented(`${spaces(6)}abc
${spaces(9)}def
${spaces(12)}ghi`), `abc
${spaces(3)}def
${spaces(6)}ghi`)

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVzdC9pbmRlbnQudGVzdC5jaXZldC50c3giLCJzb3VyY2VzIjpbInRlc3QvaW5kZW50LnRlc3QuY2l2ZXQiXSwibWFwcGluZ3MiOiI7QUFBQSxvQkFBbUI7QUFDbkIsQUFBQTtBQUNBLEFBQUEsTUFBTSxDQUFDLENBQUM7QUFDUixDQUFDLEtBQUssQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQztBQUMvQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLFdBQVcsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLFlBQVksQ0FBQztBQUMvQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLGNBQWMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxDQUFDLFNBQVMsQ0FBQztBQUNuRCxDQUFDLFFBQVEsQ0FBQyxDQUFDLFFBQVEsQ0FBQztBQUNwQixDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMscUJBQXFCO0FBQzdCLEFBQUEsQUFBQSxNQUFNLENBQUMsQ0FBQztBQUNSLENBQUMsS0FBSyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsS0FBSyxDQUFDO0FBQ3ZELENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyx5QkFBeUI7QUFDakMsQUFBQTtBQUNBLEFBQUEsQUFBSyxNQUFMLEtBQUssQ0FBQyxDQUFFLENBQUMsVUFBVSxDQUFDLENBQUM7QUFDckIsQUFBQTtBQUNBLEFBQUEsOEVBQTZFO0FBQzdFLEFBQUE7QUFDQSxBQUFBLDBCQUF5QjtBQUN6QixBQUFBO0FBQ0EsQUFBQSw4RUFBNkU7QUFDN0UsQUFBQSxBQUFBLEdBQUcsQ0FBQSxBQUFDLGVBQWUsQ0FBQTtBQUNuQixBQUFBO0FBQ0EsQUFBQSxBQUFBLFFBQVEsQ0FBQSxBQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQSxDQUFBO0FBQ2QsQUFBQSxDQUFDLGNBQWMsQ0FBQyxDQUFDO0FBQ2pCLEFBQUEsQ0FBQyxNQUFNLENBQUEsQUFBQyxVQUFVLENBQUMsU0FBUyxDQUFDLENBQUE7QUFDN0IsQUFBQTtBQUNBLEFBQUEsQ0FBQyxNQUFNLENBQUEsQUFBQyxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxHQUFFLENBQUMsQ0FBQyxDQUFDLENBQUE7QUFDakMsQUFBQSxDQUFDLE1BQU0sQ0FBQSxBQUFDLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxDQUFDLEdBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQTtBQUNuQyxBQUFBLENBQUMsTUFBTSxDQUFBLEFBQUMsQ0FBQyxXQUFXLENBQUMsU0FBUyxDQUFDLENBQUMsR0FBRSxDQUFDLENBQUMsQ0FBQyxDQUFBO0FBQ3JDLEFBQUEsQ0FBQyxXQUFXLENBQUEsQUFBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxDQUFBO0FBQ3hDLEFBQUEsQ0FBQyxXQUFXLENBQUEsQUFBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxDQUFBO0FBQ3hDLEFBQUEsQ0FBQyxNQUFNLENBQUEsQUFBQyxXQUFXLENBQUMsS0FBSyxDQUFDLENBQUMsR0FBRSxDQUFDLENBQUMsQ0FBQTtBQUMvQixBQUFBO0FBQ0EsQUFBQSxDQUFDLE1BQU0sQ0FBQSxBQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxHQUFFLENBQUMsQ0FBQyxDQUFBO0FBQy9CLEFBQUEsQ0FBQyxNQUFNLENBQUEsQUFBQyxXQUFXLENBQUMsT0FBTyxDQUFDLENBQUMsR0FBRSxDQUFDLENBQUMsQ0FBQTtBQUNqQyxBQUFBLENBQUMsTUFBTSxDQUFBLEFBQUMsV0FBVyxDQUFDLFNBQVMsQ0FBQyxDQUFDLEdBQUUsQ0FBQyxDQUFDLEM7QUFBQSxDQUFBLENBQUE7QUFDbkMsQUFBQTtBQUNBLEFBQUEsOEVBQTZFO0FBQzdFLEFBQUEsQUFBQSxHQUFHLENBQUEsQUFBQyxhQUFhLENBQUE7QUFDakIsQUFBQTtBQUNBLEFBQUEsQUFBQSxRQUFRLENBQUEsQUFBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUEsQ0FBQTtBQUNkLEFBQUEsQ0FBQyxjQUFjLENBQUMsQ0FBQztBQUNqQixBQUFBLENBQUMsTUFBTSxDQUFBLEFBQUMsWUFBWSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQTtBQUNsRCxBQUFBLENBQUMsTUFBTSxDQUFBLEFBQUMsWUFBWSxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQTtBQUN0RCxBQUFBO0FBQ0EsQUFBQSxDQUFDLE1BQU0sQ0FBQSxBQUFDLFlBQVksQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUE7QUFDcEQsQUFBQTtBQUNBLEFBQUEsQ0FBQywyQ0FBMEM7QUFDM0MsQUFBQSxDQUFDLFdBQVcsQ0FBQSxBQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxTQUFTLENBQUMsV0FBVyxDQUFDLEM7QUFBQSxDQUFBLENBQUE7QUFDMUMsQUFBQTtBQUNBLEFBQUEsOEVBQTZFO0FBQzdFLEFBQUEsQUFBQSxHQUFHLENBQUEsQUFBQyxZQUFZLENBQUE7QUFDaEIsQUFBQTtBQUNBLEFBQUEsQUFBQSxRQUFRLENBQUEsQUFBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUEsQ0FBQTtBQUNkLEFBQUEsQ0FBQyxjQUFjLENBQUMsQ0FBQztBQUNqQixBQUFBLENBQUMsTUFBTSxDQUFBLEFBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDLEdBQUUsQ0FBQyxPQUFPLENBQUE7QUFDbEMsQUFBQSxDQUFDLE1BQU0sQ0FBQSxBQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFFLENBQUMsU0FB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RyxDQUFBLEFBQUMsZUFBZSxDQUFBO0FBQ25CLEFBQUE7QUFDQSxBQUFBLEFBQUEsUUFBUSxDQUFBLEFBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFBLENBQUE7QUFDZCxBQUFBLENBQUMsY0FBYyxDQUFDLENBQUM7QUFDakIsQUFBQSxDQUFDLE1BQU0sQ0FBQSxBQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxHQUFFLENBQUMsQ0FBQyxDQUFBO0FBQy9CLEFBQUEsQ0FBQyxNQUFNLENBQUEsQUFBQyxXQUFXLENBQUMsUUFBUSxDQUFDLENBQUMsR0FBRSxDQUFDLENBQUMsQ0FBQTtBQUNsQyxBQUFBLENBQUMsTUFBTSxDQUFBLEFBQUMsV0FBVyxDQUFDLFdBQVcsQ0FBQyxDQUFDLEdBQUUsQ0FBQyxDQUFDLENBQUE7QUFDckMsQUFBQSxDQUFDLFdBQVcsQ0FBQSxBQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLENBQUE7QUFDeEMsQUFBQSxDQUFDLFdBQVcsQ0FBQSxBQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLENBQUE7QUFDeEMsQUFBQSxDQUFDLE1BQU0sQ0FBQSxBQUFDLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxDQUFDLEdBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQTtBQUNqQyxBQUFBO0FBQ0EsQUFBQSxDQUFDLE1BQU0sQ0FBQSxBQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxHQUFFLENBQUMsQ0FBQyxDQUFBO0FBQy9CLEFBQUEsQ0FBQyxNQUFNLENBQUEsQUFBQyxXQUFXLENBQUMsUUFBUSxDQUFDLENBQUMsR0FBRSxDQUFDLENBQUMsQ0FBQTtBQUNsQyxBQUFBLENBQUMsTUFBTSxDQUFBLEFBQUMsV0FBVyxDQUFDLFdBQVcsQ0FBQyxDQUFDLEdBQUUsQ0FBQyxDQUFDLEM7QUFBQSxDQUFBLENBQUE7QUFDckMsQUFBQTtBQUNBLEFBQUEsOEVBQTZFO0FBQzdFLEFBQUEsQUFBQSxHQUFHLENBQUEsQUFBQyxhQUFhLENBQUE7QUFDakIsQUFBQTtBQUNBLEFBQUEsQUFBQSxRQUFRLENBQUEsQUFBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUEsQ0FBQTtBQUNkLEFBQUEsQ0FBQyxjQUFjLENBQUMsQ0FBQztBQUNqQixBQUFBLENBQUMsTUFBTSxDQUFBLEFBQUMsVUFBVSxDQUFDLFNBQVMsQ0FBQyxDQUFBO0FBQzdCLEFBQUE7QUFDQSxBQUFBLENBQUMsTUFBTSxDQUFBLEFBQUMsWUFBWSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQTtBQUNsRCxBQUFBLENBQUMsTUFBTSxDQUFBLEFBQUMsVUFBVSxDQUFDLFNBQVMsQ0FBQyxDQUFBO0FBQzdCLEFBQUEsQ0FBQyxNQUFNLENBQUEsQUFBQyxZQUFZLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFBO0FBQ3JELEFBQUEsQ0FBQyxNQUFNLENBQUEsQUFBQyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUE7QUFDMUIsQUFBQSxDQUFDLE1BQU0sQ0FBQSxBQUFDLFlBQVksQ0FBQyxTQUFTLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUE7QUFDeEQsQUFBQSxDQUFDLE1BQU0sQ0FBQSxBQUFDLENBQUMsU0FBUyxDQUFDLEdBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQTtBQUM1QixBQUFBO0FBQ0EsQUFBQSxDQUFDLE1BQU0sQ0FBQSxBQUFDLFlBQVksQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUE7QUFDckQsQUFBQTtBQUNBLEFBQUEsQ0FBQyw0Q0FBMkM7QUFDNUMsQUFBQSxDQUFDLFdBQVcsQ0FBQSxBQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLEM7QUFBQSxDQUFBLENBQUE7QUFDdkMsQUFBQTtBQUNBLEFBQUEsOEVBQTZFO0FBQzdFLEFBQUEsQUFBQSxHQUFHLENBQUEsQUFBQyxZQUFZLENBQUE7QUFDaEIsQUFBQTtBQUNBLEFBQUEsQUFBQSxRQUFRLENBQUEsQUFBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUEsQ0FBQTtBQUNkLEFBQUEsQ0FBQyxjQUFjLENBQUMsS0FBSyxDQUFDO0FBQ3RCLEFBQUEsQ0FBQyxNQUFNLENBQUEsQUFBQyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFFLENBQUMsV0FBVyxDQUFDLENBQUE7QUFDM0MsQUFBQSxDQUFDLE1BQU0sQ0FBQSxBQUFDLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDLEdBQUUsQ0FBQyxRQUFRLENBQUMsQ0FBQTtBQUNyQyxBQUFBO0FBQ0EsQUFBQSxDQUFDLE1BQU0sQ0FBQSxBQUFDLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxDQUFDLEdBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQTtBQUNwQyxBQUFBLENBQUMsTUFBTSxDQUFBLEFBQUMsQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEM7QUFBQSxDQUFBLENBQUE7QUFDakQsQUFBQTtBQUNBLEFBQUEsdUJBQXNCO0FBQ3RCLEFBQUE7QUFDQSxBQUFBLEFBQUEsUUFBUSxDQUFBLEFBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFBLENBQUE7QUFDZCxBQUFBLENBQUMsY0FBYyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUMxQixBQUFBLENBQUMsTUFBTSxDQUFBLEFBQUMsUUFBUSxDQUFDLENBQUc7QUFDcEIsQUFDRSxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNkLEFBQUUsRUFBRSxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsVUFDWixDQUFHLENBQUMsQ0FBQyxHQUFFLENBQUMsQ0FBRyxBQUNYLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ2QsQUFBRSxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNkLEFBQUUsRUFBRSxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsVUFDWixDQUFHLENBQUE7QUFDTCxBQUFBO0FBQ0EsQUFBQSxDQUFDLE1BQU0sQ0FBQSxBQUFDLFFBQVEsQ0FBQyxDQUFHO0FBQ3BCLEFBQ0UsRUFBRSxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDZCxBQUFFLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLFVBQ1osQ0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRSxDQUFDLENBQUcsQUFDZCxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNkLEFBQUUsRUFBRSxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDZCxBQUFFLEVBQUUsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDLFVBQ2IsQ0FBRyxDO0FBQUEsQ0FBQSxDQUFBO0FBQ0wsQUFBQTtBQUNBLEFBQUEsdUJBQXNCO0FBQ3RCLEFBQUE7QUFDQSxBQUFBLEFBQUEsUUFBUSxDQUFBLEFBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFBLENBQUE7QUFDZCxBQUFBLENBQUMsY0FBYyxDQUFDLEtBQUssQ0FBQztBQUN0QixBQUFBLENBQUMsTUFBTSxDQUFBLEFBQUMsWUFBWSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBQy9CLEFBQUEsRUFBRSxZQUFZLENBQUE7QUFDZCxBQUFBLEVBQUUsZ0JBQWdCLENBQUE7QUFDbEIsQUFBQSxFQUFFLGtCQUFrQjtBQUNwQixBQUFBLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ1AsQUFBQSxFQUFFLGVBQWUsQ0FBQTtBQUNqQixBQUFBLEVBQUUsbUJBQW1CLENBQUE7QUFDckIsQUFBQSxFQUFFLHFCQUFxQjtBQUN2QixBQUFBLEVBQUUsQ0FBQyxDQUFDLENBQUE7QUFDSixBQUFBO0FBQ0EsQUFBQSxDQUFDLE1BQU0sQ0FBQSxBQUFDLFlBQVksQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUMvQixBQUFBLEVBQUUsWUFBWSxDQUFBO0FBQ2QsQUFBQSxFQUFFLGdCQUFnQixDQUFBO0FBQ2xCLEFBQUEsRUFBRSxrQkFBa0I7QUFDcEIsQUFBQSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNWLEFBQUEsRUFBRSxrQkFBa0IsQ0FBQTtBQUNwQixBQUFBLEVBQUUsc0JBQXNCLENBQUE7QUFDeEIsQUFBQSxFQUFFLHdCQUF3QjtBQUMxQixBQUFBLEVBQUUsQ0FBQyxDQUFDLEM7QUFBQSxDQUFBLENBQUE7QUFDSixBQUFBO0FBQ0EsQUFBQSw4RUFBNkU7QUFDN0UsQUFBQSxBQUFBLEdBQUcsQ0FBQSxBQUFDLFlBQVksQ0FBQTtBQUNoQixBQUFBO0FBQ0EsQUFBQSxBQUFBLEtBQUssQ0FBQSxBQUFDLFFBQVEsQ0FBQyxDQUFHLEFBQ2pCLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ2IsQUFBQyxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNiLEFBQUMsRUFBRSxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUMsR0FDYixDQUFHLENBQUMsQ0FBQyxDQUFDLENBQUc7QUFDVixBQUNDLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ2IsQUFBQyxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUNaLENBQUcsQ0FBQTtBQUNKIiwibmFtZXMiOltdLCJzb3VyY2VzQ29udGVudCI6WyIjIGluZGVudC50ZXN0LmNpdmV0XG5cbmltcG9ydCB7XG5cdHVuZGVmLCBkZWZpbmVkLCBub3RkZWZpbmVkLCBzcGFjZXMsIHRhYnMsIERCRyxcblx0YXNzZXJ0LCB0aHJvd3NFcnJvciwgZ2V0Q21kQXJncywgZGVlcGx5RXF1YWxzLFxuXHRvbmVJbmRlbnQsIHJlc2V0T25lSW5kZW50LCBpbmRlbnRMZXZlbCwgc3BsaXRMaW5lLFxuXHRpbmRlbnRlZCwgdW5kZW50ZWQsXG5cdH0gZnJvbSAnLi4vc3JjL2xpYi91dGlscy50cydcbmltcG9ydCB7XG5cdGVxdWFsLCB0cnV0aHksIGZhbHN5LCBsaWtlLCBsaXN0TGlrZSwgc3VjY2VlZHMsIGZhaWxzLFxuXHR9IGZyb20gJy4uL3NyYy9saWIvdW5pdC10ZXN0LnRzJ1xuXG5oQXJncyA6PSBnZXRDbWRBcmdzKClcblxuIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuIyAtLS0gVEVTVCB1c2luZyBUQUJzIC0tLVxuXG4jIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuREJHIFwiaW5kZW50TGV2ZWwoKVwiXG5cbnN1Y2NlZWRzICgpID0+XG5cdHJlc2V0T25lSW5kZW50KClcblx0YXNzZXJ0IG5vdGRlZmluZWQob25lSW5kZW50KVxuXG5cdGFzc2VydCAoaW5kZW50TGV2ZWwoJ2FiYycpID09IDApXG5cdGFzc2VydCAoaW5kZW50TGV2ZWwoJ1xcdGFiYycpID09IDEpXG5cdGFzc2VydCAoaW5kZW50TGV2ZWwoJ1xcdFxcdGFiYycpID09IDIpXG5cdHRocm93c0Vycm9yICgpID0+IGluZGVudExldmVsKCdcXHQgYWJjJylcblx0dGhyb3dzRXJyb3IgKCkgPT4gaW5kZW50TGV2ZWwoJyBcXHRhYmMnKVxuXHRhc3NlcnQgaW5kZW50TGV2ZWwoJ2FiYycpID09IDBcblxuXHRhc3NlcnQgaW5kZW50TGV2ZWwoJ2FiYycpID09IDBcblx0YXNzZXJ0IGluZGVudExldmVsKCdcXHRhYmMnKSA9PSAxXG5cdGFzc2VydCBpbmRlbnRMZXZlbCgnXFx0XFx0YWJjJykgPT0gMlxuXG4jIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuREJHIFwic3BsaXRMaW5lKClcIlxuXG5zdWNjZWVkcyAoKSA9PlxuXHRyZXNldE9uZUluZGVudCgpXG5cdGFzc2VydCBkZWVwbHlFcXVhbHMoc3BsaXRMaW5lKCdhYmMnKSwgWzAsICdhYmMnXSlcblx0YXNzZXJ0IGRlZXBseUVxdWFscyhzcGxpdExpbmUoJ1xcdFxcdGFiYycpLCBbMiwgJ2FiYyddKVxuXG5cdGFzc2VydCBkZWVwbHlFcXVhbHMoc3BsaXRMaW5lKCdcXHRhYmMnKSwgWzEsICdhYmMnXSlcblxuXHQjIC0tLSBmYWlscyBzaW5jZSB3ZSdyZSBub3cgZXhwZWN0aW5nIFRBQnNcblx0dGhyb3dzRXJyb3IgKCkgPT4gIHNwbGl0TGluZSgnICAgICAgYWJjJylcblxuIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbkRCRyBcImluZGVudGVkKClcIlxuXG5zdWNjZWVkcyAoKSA9PlxuXHRyZXNldE9uZUluZGVudCgpXG5cdGFzc2VydCBpbmRlbnRlZCgnYWJjJykgPT0gJ1xcdGFiYydcblx0YXNzZXJ0IGluZGVudGVkKCdhYmMnLCAyKSA9PSAnXFx0XFx0YWJjJ1xuXG5cdGFzc2VydCBpbmRlbnRMZXZlbCgnXFx0YWJjJykgPT0gMVxuXHRhc3NlcnQgaW5kZW50ZWQoJ2FiYycsIDIpID09ICh0YWJzKDIpICsgJ2FiYycpXG5cdGFzc2VydCBpbmRlbnRlZCgnYWJjJywgMikgPT0gXCIje3RhYnMoMil9YWJjXCJcblxuIyAtLS0gVGVzdCB3aXRoIGJsb2Nrc1xuXG5zdWNjZWVkcyAoKSA9PlxuXHRyZXNldE9uZUluZGVudCgpXG5cdGFzc2VydCBpbmRlbnRlZChcIlwiXCJcblx0XHRmaXJzdCBsaW5lXG5cdFx0XFx0c2Vjb25kIGxpbmVcblx0XHRcXHRcXHR0aGlyZCBsaW5lXG5cdFx0XCJcIlwiKSA9PSBcIlwiXCJcblx0XHRcXHRmaXJzdCBsaW5lXG5cdFx0XFx0XFx0c2Vjb25kIGxpbmVcblx0XHRcXHRcXHRcXHR0aGlyZCBsaW5lXG5cdFx0XCJcIlwiXG5cblx0YXNzZXJ0IGluZGVudGVkKFwiXCJcIlxuXHRcdGZpcnN0IGxpbmVcblx0XHRcXHRzZWNvbmQgbGluZVxuXHRcdFxcdFxcdHRoaXJkIGxpbmVcblx0XHRcIlwiXCIsIDIpID09IFwiXCJcIlxuXHRcdFxcdFxcdGZpcnN0IGxpbmVcblx0XHRcXHRcXHRcXHRzZWNvbmQgbGluZVxuXHRcdFxcdFxcdFxcdFxcdHRoaXJkIGxpbmVcblx0XHRcIlwiXCJcblxuIyAtLS0gVGVzdCB3aXRoIGFycmF5c1xuXG5zdWNjZWVkcyAoKSA9PlxuXHRyZXNldE9uZUluZGVudCgpXG5cdGFzc2VydCBkZWVwbHlFcXVhbHMoaW5kZW50ZWQoW1xuXHRcdCdmaXJzdCBsaW5lJ1xuXHRcdCdcXHRzZWNvbmQgbGluZSdcblx0XHQnXFx0XFx0dGhpcmQgbGluZSdcblx0XHRdKSwgW1xuXHRcdCdcXHRmaXJzdCBsaW5lJ1xuXHRcdCdcXHRcXHRzZWNvbmQgbGluZSdcblx0XHQnXFx0XFx0XFx0dGhpcmQgbGluZSdcblx0XHRdKVxuXG5cdGFzc2VydCBkZWVwbHlFcXVhbHMoaW5kZW50ZWQoW1xuXHRcdCdmaXJzdCBsaW5lJ1xuXHRcdCdcXHRzZWNvbmQgbGluZSdcblx0XHQnXFx0XFx0dGhpcmQgbGluZSdcblx0XHRdLCAyKSwgW1xuXHRcdCdcXHRcXHRmaXJzdCBsaW5lJ1xuXHRcdCdcXHRcXHRcXHRzZWNvbmQgbGluZSdcblx0XHQnXFx0XFx0XFx0XFx0dGhpcmQgbGluZSdcblx0XHRdKVxuXG4jIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuREJHIFwidW5kZW50ZWQoKVwiXG5cbnN1Y2NlZWRzICgpID0+XG5cdHJlc2V0T25lSW5kZW50KClcblx0ZXF1YWwgdW5kZW50ZWQoXCJcIlwiXG5cdFx0XFx0YWJjXG5cdFx0XFx0XFx0ZGVmXG5cdFx0XFx0XFx0XFx0Z2hpXG5cdFx0XCJcIlwiKSwgXCJcIlwiXG5cdFx0YWJjXG5cdFx0XFx0ZGVmXG5cdFx0XFx0XFx0Z2hpXG5cdFx0XCJcIlwiXG5cbiMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiMgVEVTVCB1c2luZyAzIHNwYWNlc1xuXG4jIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuREJHIFwicmVzZXRPbmVJbmRlbnQoKVwiXG5cbnN1Y2NlZWRzICgpID0+XG5cdHJlc2V0T25lSW5kZW50KClcblx0YXNzZXJ0IG5vdGRlZmluZWQob25lSW5kZW50KVxuXHRhc3NlcnQgKGluZGVudExldmVsKCdcXHRcXHRhYmMnKSA9PSAyKVxuXHRhc3NlcnQgKG9uZUluZGVudCA9PSAnXFx0Jylcblxuc3VjY2VlZHMgKCkgPT5cblx0cmVzZXRPbmVJbmRlbnQoKVxuXHRhc3NlcnQgbm90ZGVmaW5lZChvbmVJbmRlbnQpXG5cdGFzc2VydCAoaW5kZW50TGV2ZWwoJyAgIGFiYycpID09IDEpXG5cdGFzc2VydCAoaW5kZW50TGV2ZWwoJyAgICAgIGFiYycpID09IDIpXG5cdGFzc2VydCAob25lSW5kZW50ID09ICcgICAnKVxuXG4jIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuREJHIFwiaW5kZW50TGV2ZWwoKVwiXG5cbnN1Y2NlZWRzICgpID0+XG5cdHJlc2V0T25lSW5kZW50KClcblx0YXNzZXJ0IGluZGVudExldmVsKCdhYmMnKSA9PSAwXG5cdGFzc2VydCBpbmRlbnRMZXZlbCgnICAgYWJjJykgPT0gMVxuXHRhc3NlcnQgaW5kZW50TGV2ZWwoJyAgICAgIGFiYycpID09IDJcblx0dGhyb3dzRXJyb3IgKCkgPT4gaW5kZW50TGV2ZWwoJ1xcdCBhYmMnKVxuXHR0aHJvd3NFcnJvciAoKSA9PiBpbmRlbnRMZXZlbCgnIFxcdGFiYycpXG5cdGFzc2VydCAoaW5kZW50TGV2ZWwoJ2FiYycpID09IDApXG5cblx0YXNzZXJ0IGluZGVudExldmVsKCdhYmMnKSA9PSAwXG5cdGFzc2VydCBpbmRlbnRMZXZlbCgnICAgYWJjJykgPT0gMVxuXHRhc3NlcnQgaW5kZW50TGV2ZWwoJyAgICAgIGFiYycpID09IDJcblxuIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbkRCRyBcInNwbGl0TGluZSgpXCJcblxuc3VjY2VlZHMgKCkgPT5cblx0cmVzZXRPbmVJbmRlbnQoKVxuXHRhc3NlcnQgbm90ZGVmaW5lZChvbmVJbmRlbnQpXG5cblx0YXNzZXJ0IGRlZXBseUVxdWFscyhzcGxpdExpbmUoJ2FiYycpLCBbMCwgJ2FiYyddKVxuXHRhc3NlcnQgbm90ZGVmaW5lZChvbmVJbmRlbnQpXG5cdGFzc2VydCBkZWVwbHlFcXVhbHMoc3BsaXRMaW5lKCcgICBhYmMnKSwgWzEsICdhYmMnXSlcblx0YXNzZXJ0IGRlZmluZWQob25lSW5kZW50KVxuXHRhc3NlcnQgZGVlcGx5RXF1YWxzKHNwbGl0TGluZSgnICAgICAgYWJjJyksIFsyLCAnYWJjJ10pXG5cdGFzc2VydCAob25lSW5kZW50ID09ICcgICAnKVxuXG5cdGFzc2VydCBkZWVwbHlFcXVhbHMoc3BsaXRMaW5lKCcgICBhYmMnKSwgWzEsICdhYmMnXSlcblxuXHQjIC0tLWZhaWxzIHNpbmNlIHdlJ3JlIG5vdyBleHBlY3Rpbmcgc3BhY2VzXG5cdHRocm93c0Vycm9yICgpID0+IHNwbGl0TGluZSgnXFx0XFx0YWJjJylcblxuIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbkRCRyBcImluZGVudGVkKClcIlxuXG5zdWNjZWVkcyAoKSA9PlxuXHRyZXNldE9uZUluZGVudCgnICAgJylcblx0YXNzZXJ0IChpbmRlbnRlZCgnYWJjJywgMikgPT0gJyAgICAgIGFiYycpXG5cdGFzc2VydCAoaW5kZW50ZWQoJ2FiYycpID09ICcgICBhYmMnKVxuXG5cdGFzc2VydCAoaW5kZW50TGV2ZWwoJyAgIGFiYycpID09IDEpXG5cdGFzc2VydCAoaW5kZW50ZWQoJ2FiYycsIDIpID09IHNwYWNlcyg2KSArICdhYmMnKVxuXG4jIC0tLSBUZXN0IHdpdGggYmxvY2tzXG5cbnN1Y2NlZWRzICgpID0+XG5cdHJlc2V0T25lSW5kZW50KHNwYWNlcygzKSlcblx0YXNzZXJ0IGluZGVudGVkKFwiXCJcIlxuXHRcdGZpcnN0IGxpbmVcblx0XHQje3NwYWNlcygzKX1zZWNvbmQgbGluZVxuXHRcdCN7c3BhY2VzKDYpfXRoaXJkIGxpbmVcblx0XHRcIlwiXCIpID09IFwiXCJcIlxuXHRcdCN7c3BhY2VzKDMpfWZpcnN0IGxpbmVcblx0XHQje3NwYWNlcyg2KX1zZWNvbmQgbGluZVxuXHRcdCN7c3BhY2VzKDkpfXRoaXJkIGxpbmVcblx0XHRcIlwiXCJcblxuXHRhc3NlcnQgaW5kZW50ZWQoXCJcIlwiXG5cdFx0Zmlyc3QgbGluZVxuXHRcdCN7c3BhY2VzKDMpfXNlY29uZCBsaW5lXG5cdFx0I3tzcGFjZXMoNil9dGhpcmQgbGluZVxuXHRcdFwiXCJcIiwgMikgPT0gXCJcIlwiXG5cdFx0I3tzcGFjZXMoNil9Zmlyc3QgbGluZVxuXHRcdCN7c3BhY2VzKDkpfXNlY29uZCBsaW5lXG5cdFx0I3tzcGFjZXMoMTIpfXRoaXJkIGxpbmVcblx0XHRcIlwiXCJcblxuIyAtLS0gVGVzdCB3aXRoIGFycmF5c1xuXG5zdWNjZWVkcyAoKSA9PlxuXHRyZXNldE9uZUluZGVudCgnICAgJylcblx0YXNzZXJ0IGRlZXBseUVxdWFscyhpbmRlbnRlZChbXG5cdFx0J2ZpcnN0IGxpbmUnXG5cdFx0JyAgIHNlY29uZCBsaW5lJ1xuXHRcdCcgICAgICB0aGlyZCBsaW5lJ1xuXHRcdF0pLCBbXG5cdFx0JyAgIGZpcnN0IGxpbmUnXG5cdFx0JyAgICAgIHNlY29uZCBsaW5lJ1xuXHRcdCcgICAgICAgICB0aGlyZCBsaW5lJ1xuXHRcdF0pXG5cblx0YXNzZXJ0IGRlZXBseUVxdWFscyhpbmRlbnRlZChbXG5cdFx0J2ZpcnN0IGxpbmUnXG5cdFx0JyAgIHNlY29uZCBsaW5lJ1xuXHRcdCcgICAgICB0aGlyZCBsaW5lJ1xuXHRcdF0sIDIpLCBbXG5cdFx0JyAgICAgIGZpcnN0IGxpbmUnXG5cdFx0JyAgICAgICAgIHNlY29uZCBsaW5lJ1xuXHRcdCcgICAgICAgICAgICB0aGlyZCBsaW5lJ1xuXHRcdF0pXG5cbiMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5EQkcgXCJ1bmRlbnRlZCgpXCJcblxuZXF1YWwgdW5kZW50ZWQoXCJcIlwiXG5cdCN7c3BhY2VzKDYpfWFiY1xuXHQje3NwYWNlcyg5KX1kZWZcblx0I3tzcGFjZXMoMTIpfWdoaVxuXHRcIlwiXCIpLCBcIlwiXCJcblx0YWJjXG5cdCN7c3BhY2VzKDMpfWRlZlxuXHQje3NwYWNlcyg2KX1naGlcblx0XCJcIlwiXG4iXX0=