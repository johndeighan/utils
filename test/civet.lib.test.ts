"use strict";
// civet.lib.test.civet

import {SourceFile} from 'typescript'
import {
	getCmdArgs, DBG, isHash, setDirTree, slurp, withExt, o,
	civet2tsFile, civet2ts, civet2ast, ts2ast, pprintAST,
	} from '../src/lib/utils.lib.ts'
import {
	equal, like, succeeds, fails, truthy, falsy, isType,
	} from '../src/lib/unit-test.lib.ts'

const hArgs = getCmdArgs()

// ---------------------------------------------------------------------------

const setup = (): void => {

	DBG("setDirTree()")

	setDirTree('test/civet', `test.civet
	x := 42
`)
}

setup()

// ---------------------------------------------------------------------------

const testPath = './test/civet/test.civet'
const civetCode = slurp(testPath)

const tsCode = civet2ts(civetCode)
const ast1 = ts2ast(tsCode)
const ast2 = civet2ast(civetCode)
equal(ast1, ast2)

DBG("civet2ts(code)")

equal(civet2ts('x := 42'), `"use strict";
const x = 42`)

DBG("civet2tsFile(path)");

(() => {
	civet2tsFile(testPath, withExt(testPath, '.ts'), o`!inlineMap`)
	const code = slurp(withExt(testPath, '.ts'))
	equal(code, `"use strict";
const x = 42`)
}
	)()

DBG("civet2ast(code)")

// isType 'SourceFile', ast1
// isType 'SourceFile', ast2

DBG("pprintAST(hAST)")

equal(pprintAST(ts2ast('x := 42')), `SourceFile - 'x := 42'
	LabeledStatement - 'x := 42'
		Identifier - 'x'
		ExpressionStatement - '= 42'
			BinaryExpression - '= 42'
				Identifier - ''
				FirstAssignment - '='
				FirstLiteralToken - '42'
	EndOfFileToken - ''`.replaceAll('\t', '   '))

succeeds(() => civet2ast('x := 42'))


//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVzdC9jaXZldC5saWIudGVzdC5jaXZldC50c3giLCJzb3VyY2VzIjpbInRlc3QvY2l2ZXQubGliLnRlc3QuY2l2ZXQiXSwibWFwcGluZ3MiOiI7QUFBQSx1QkFBc0I7QUFDdEIsQUFBQTtBQUNBLEFBQUEsTUFBTSxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsSUFBSSxDQUFDLFlBQVk7QUFDckMsQUFBQSxBQUFBLE1BQU0sQ0FBQyxDQUFDO0FBQ1IsQ0FBQyxVQUFVLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDeEQsQ0FBQyxZQUFZLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxTQUFTLENBQUM7QUFDdEQsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLHlCQUF5QjtBQUNqQyxBQUFBLEFBQUEsTUFBTSxDQUFDLENBQUM7QUFDUixDQUFDLEtBQUssQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLE1BQU0sQ0FBQztBQUNyRCxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsNkJBQTZCO0FBQ3JDLEFBQUE7QUFDQSxBQUFBLEFBQUssTUFBTCxLQUFLLENBQUMsQ0FBRSxDQUFDLFVBQVUsQ0FBQyxDQUFDO0FBQ3JCLEFBQUE7QUFDQSxBQUFBLDhFQUE2RTtBQUM3RSxBQUFBO0FBQ0EsQUFBQSxBQUFLLE1BQUwsS0FBSyxDQUFDLENBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUEsQ0FBQTtBQUNwQixBQUFBO0FBQ0EsQUFBQSxDQUFDLEdBQUcsQ0FBQSxBQUFDLGNBQWMsQ0FBQTtBQUNuQixBQUFBO0FBQ0EsQUFBQSxDQUFDLFVBQVUsQ0FBQSxBQUFDLFlBQVksQ0FBQyxDQUFDLENBQUc7QUFDN0I7QUFDQSxBQUVFLENBQUcsQztBQUFBLENBQUE7QUFDTCxBQUFBO0FBQ0EsQUFBQSxBQUFBLEtBQUssQ0FBQyxDQUFDO0FBQ1AsQUFBQTtBQUNBLEFBQUEsOEVBQTZFO0FBQzdFLEFBQUE7QUFDQSxBQUFBLEFBQVEsTUFBUixRQUFRLENBQUMsQ0FBRSxDQUFDLHlCQUF5QjtBQUNyQyxBQUFBLEFBQVMsTUFBVCxTQUFTLENBQUMsQ0FBRSxDQUFDLEtBQUssQ0FBQSxBQUFDLFFBQVEsQ0FBQTtBQUMzQixBQUFBO0FBQ0EsQUFBQSxBQUFNLE1BQU4sTUFBTSxDQUFDLENBQUUsQ0FBQyxRQUFRLENBQUEsQUFBQyxTQUFTLENBQUE7QUFDNUIsQUFBQSxBQUFJLE1BQUosSUFBSSxDQUFDLENBQUUsQ0FBQyxNQUFNLENBQUEsQUFBQyxNQUFNLENBQUE7QUFDckIsQUFBQSxBQUFJLE1BQUosSUFBSSxDQUFDLENBQUUsQ0FBQyxTQUFTLENBQUEsQUFBQyxTQUFTLENBQUE7QUFDM0IsQUFBQSxBQUFBLEtBQUssQ0FBQSxBQUFDLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQTtBQUNoQixBQUFBO0FBQ0EsQUFBQSxBQUFBLEdBQUcsQ0FBQSxBQUFDLGdCQUFnQixDQUFBO0FBQ3BCLEFBQUE7QUFDQSxBQUFBLEFBQUEsS0FBSyxDQUFBLEFBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBRztBQUM5QixZQUVDLENBQUcsQ0FBQTtBQUNKLEFBQUE7QUFDQSxBQUFBLEFBQUEsR0FBRyxDQUFBLEFBQUMsb0JBQW9CLEMsQ0FBQTtBQUN4QixBQUFBO0FBQ0EsQUFBQSxBQUFBLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFBLENBQUE7QUFDTixBQUFBLENBQUMsWUFBWSxDQUFBLEFBQUMsUUFBUSxDQUFDLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQyxZQUFhLENBQUE7QUFDL0QsQUFBQSxDQUFLLE1BQUosSUFBSSxDQUFDLENBQUUsQ0FBQyxLQUFLLENBQUEsQUFBQyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUE7QUFDdkMsQUFBQSxDQUFDLEtBQUssQ0FBQSxBQUFDLElBQUksQ0FBQyxDQUFDLENBQUc7QUFDaEIsWUFFRSxDQUFHLEM7QUFBQSxDQUFBO0FBQ0wsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNKLEFBQUE7QUFDQSxBQUFBLEFBQUEsR0FBRyxDQUFBLEFBQUMsaUJBQWlCLENBQUE7QUFDckIsQUFBQTtBQUNBLEFBQUEsNEJBQTJCO0FBQzNCLEFBQUEsNEJBQTJCO0FBQzNCLEFBQUE7QUFDQSxBQUFBLEFBQUEsR0FBRyxDQUFBLEFBQUMsaUJBQWlCLENBQUE7QUFDckIsQUFBQTtBQUNBLEFBQUEsQUFBQSxLQUFLLENBQUEsQUFBQyxTQUFTLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFHO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBRUMsQ0FBRyxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQTtBQUM1QixBQUFBO0FBQ0EsQUFBQSxBQUFBLFFBQVEsQ0FBQSxBQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLENBQUE7QUFDbkM7QUFDQSIsIm5hbWVzIjpbXSwic291cmNlc0NvbnRlbnQiOlsiIyBjaXZldC5saWIudGVzdC5jaXZldFxuXG5pbXBvcnQge1NvdXJjZUZpbGV9IGZyb20gJ3R5cGVzY3JpcHQnXG5pbXBvcnQge1xuXHRnZXRDbWRBcmdzLCBEQkcsIGlzSGFzaCwgc2V0RGlyVHJlZSwgc2x1cnAsIHdpdGhFeHQsIG8sXG5cdGNpdmV0MnRzRmlsZSwgY2l2ZXQydHMsIGNpdmV0MmFzdCwgdHMyYXN0LCBwcHJpbnRBU1QsXG5cdH0gZnJvbSAnLi4vc3JjL2xpYi91dGlscy5saWIudHMnXG5pbXBvcnQge1xuXHRlcXVhbCwgbGlrZSwgc3VjY2VlZHMsIGZhaWxzLCB0cnV0aHksIGZhbHN5LCBpc1R5cGUsXG5cdH0gZnJvbSAnLi4vc3JjL2xpYi91bml0LXRlc3QubGliLnRzJ1xuXG5oQXJncyA6PSBnZXRDbWRBcmdzKClcblxuIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuc2V0dXAgOj0gKCk6IHZvaWQgPT5cblxuXHREQkcgXCJzZXREaXJUcmVlKClcIlxuXG5cdHNldERpclRyZWUgJ3Rlc3QvY2l2ZXQnLCBcIlwiXCJcblx0XHR0ZXN0LmNpdmV0XG5cdFx0XHR4IDo9IDQyXG5cblx0XHRcIlwiXCJcblxuc2V0dXAoKVxuXG4jIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG50ZXN0UGF0aCA6PSAnLi90ZXN0L2NpdmV0L3Rlc3QuY2l2ZXQnXG5jaXZldENvZGUgOj0gc2x1cnAgdGVzdFBhdGhcblxudHNDb2RlIDo9IGNpdmV0MnRzIGNpdmV0Q29kZVxuYXN0MSA6PSB0czJhc3QgdHNDb2RlXG5hc3QyIDo9IGNpdmV0MmFzdCBjaXZldENvZGVcbmVxdWFsIGFzdDEsIGFzdDJcblxuREJHIFwiY2l2ZXQydHMoY29kZSlcIlxuXG5lcXVhbCBjaXZldDJ0cygneCA6PSA0MicpLCBcIlwiXCJcblx0XCJ1c2Ugc3RyaWN0XCI7XG5cdGNvbnN0IHggPSA0MlxuXHRcIlwiXCJcblxuREJHIFwiY2l2ZXQydHNGaWxlKHBhdGgpXCJcblxuKCgpID0+XG5cdGNpdmV0MnRzRmlsZSB0ZXN0UGF0aCwgd2l0aEV4dCh0ZXN0UGF0aCwgJy50cycpLCBvJyFpbmxpbmVNYXAnXG5cdGNvZGUgOj0gc2x1cnAgd2l0aEV4dCh0ZXN0UGF0aCwgJy50cycpXG5cdGVxdWFsIGNvZGUsIFwiXCJcIlxuXHRcdFwidXNlIHN0cmljdFwiO1xuXHRcdGNvbnN0IHggPSA0MlxuXHRcdFwiXCJcIlxuXHQpKClcblxuREJHIFwiY2l2ZXQyYXN0KGNvZGUpXCJcblxuIyBpc1R5cGUgJ1NvdXJjZUZpbGUnLCBhc3QxXG4jIGlzVHlwZSAnU291cmNlRmlsZScsIGFzdDJcblxuREJHIFwicHByaW50QVNUKGhBU1QpXCJcblxuZXF1YWwgcHByaW50QVNUKHRzMmFzdCgneCA6PSA0MicpKSwgXCJcIlwiXG5cdFNvdXJjZUZpbGUgLSAneCA6PSA0Midcblx0XHRMYWJlbGVkU3RhdGVtZW50IC0gJ3ggOj0gNDInXG5cdFx0XHRJZGVudGlmaWVyIC0gJ3gnXG5cdFx0XHRFeHByZXNzaW9uU3RhdGVtZW50IC0gJz0gNDInXG5cdFx0XHRcdEJpbmFyeUV4cHJlc3Npb24gLSAnPSA0Midcblx0XHRcdFx0XHRJZGVudGlmaWVyIC0gJydcblx0XHRcdFx0XHRGaXJzdEFzc2lnbm1lbnQgLSAnPSdcblx0XHRcdFx0XHRGaXJzdExpdGVyYWxUb2tlbiAtICc0Midcblx0XHRFbmRPZkZpbGVUb2tlbiAtICcnXG5cdFwiXCJcIi5yZXBsYWNlQWxsKCdcXHQnLCAnICAgJylcblxuc3VjY2VlZHMgKCkgPT4gY2l2ZXQyYXN0KCd4IDo9IDQyJylcblxuIl19