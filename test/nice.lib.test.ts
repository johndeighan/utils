"use strict";
// nice.lib.test.civet

import {
	undef, getCmdArgs, DBG, toNice, fromNice,
	getPrimitive, isSymbol, symbolName,
	setDirTree, allTokensInBlock,
	} from '../src/lib/utils.lib.ts'
import {
	niceSplitter, needsPreEsc, allNiceTokens,
	} from '../src/lib/nice.lib.ts'
import {
	equal, iterEqual, iterLike, like,
	succeeds, fails, truthy, falsy,
	} from '../src/lib/unit-test.lib.ts'

getCmdArgs()

// ---------------------------------------------------------------------------

const setup = (): void => {

	DBG("setDirTree()")

	setDirTree('test/nice', `test.nice
	- a
	- b
`)
}

setup()

// ---------------------------------------------------------------------------

DBG("toNice()")

equal(toNice(undef),      '.undef.')
equal(toNice(null),       '.null.')
equal(toNice(true),       '.true.')
equal(toNice(false),      '.false.')
equal(toNice('abc'),      'abc')
equal(toNice('say "hi"'), 'say "hi"')
equal(toNice('a\tb'),     'a\\tb')
equal(toNice('a\nb'),     'a\\nb')
equal(toNice('.true.'),   '\\.true.')
equal(toNice('.abc'),     '\\.abc')
equal(toNice('- abc'),    '\\- abc')
equal(toNice('-abc'),     '\\-abc')
equal(toNice('flag: 3'),  '\\flag: 3')
equal(toNice('123'),      '\\123')
equal(toNice(NaN),        '.NaN.')
equal(toNice(Infinity),   '.infinity.')
equal(toNice(-Infinity),  '.neginfinity.')
equal(toNice(42),         '42')
equal(toNice(3.14),       '3.14')
equal(toNice(12345678n),  '12345678')

class TempClass {
	var: string = ''

	constructor(str: string) {
		this.var = str
	}
}
const inst = new TempClass('xyz')

const func = (x: string): string => {
	return 'abc'
}

equal(toNice(TempClass),  '.class TempClass.')
equal(toNice(func),       '.function func.')
equal(toNice(Symbol()),   '.symbol.')
equal(toNice(Symbol('abc')), '.symbol abc.')
equal(toNice(/^abc$/),    '.regexp ^abc$.')
equal(toNice([1,2]), `- 1
- 2`)
equal(toNice({a:1, b:2}), `a: 1
b: 2`)
equal(toNice(inst), `var: xyz`)

DBG("niceSplitter()")

iterLike(niceSplitter('a'), [
	{kind: 'primitive', value: 'a'}
	])
iterLike(niceSplitter('42'), [
	{kind: 'primitive', value: 42}
	])
iterLike(niceSplitter('.undef.'), [
	{kind: 'primitive', value: undef}
	])
iterLike(niceSplitter('\\.undef.'), [
	{kind: 'primitive', value: '.undef.'}
	])
iterLike(niceSplitter('\\\\abc'), [
	{kind: 'primitive', value: '\\abc'}
	])
iterLike(niceSplitter('- a'), [
	{kind: 'list-item', value: 'a'}
	])
iterLike(niceSplitter('-'), [
	{kind: 'list-head'}
	])
iterLike(niceSplitter('tag: abc'), [
	{kind: 'hash-item', value: 'abc'}
	])
iterLike(niceSplitter('tag:'), [
	{kind: 'hash-head', name: 'tag'}
	])

// --- Add checks to be sure that extra whitespace is OK

iterLike(niceSplitter('a  '), [
	{kind: 'primitive', value: 'a'}
	])
iterLike(niceSplitter('42   '), [
	{kind: 'primitive', value: 42}
	])
iterLike(niceSplitter('.undef.  '), [
	{kind: 'primitive', value: undef}
	])
iterLike(niceSplitter('.  undef  .  '), [
	{kind: 'primitive', value: undef}
	])
iterLike(niceSplitter('-   a  '), [
	{kind: 'list-item', value: 'a'}
	])
iterLike(niceSplitter('-  '), [
	{kind: 'list-head'}
	])
iterLike(niceSplitter('tag:   abc  '), [
	{kind: 'hash-item', value: 'abc'}
	])
iterLike(niceSplitter('tag:  '), [
	{kind: 'hash-head', name: 'tag'}
	])

// --- Test breaking NICE string into tokens

iterLike(allTokensInBlock(`a
42`, niceSplitter), [
	{kind: 'primitive', value: 'a'},
	{kind: 'primitive', value: 42}
	])

iterLike(allTokensInBlock(`- a
- b`, niceSplitter), [
	{kind: 'list-item', value: 'a'},
	{kind: 'list-item', value: 'b'}
	])

iterLike(allTokensInBlock(`a: 1
b: c`, niceSplitter), [
	{kind: 'hash-item', value: 1},
	{kind: 'hash-item', value: 'c'}
	])

iterLike(allTokensInBlock(`-
	b
	42`, niceSplitter), [
	{kind: 'list-head'},
	{kind: 'indent'},
	{kind: 'primitive', value: 'b'},
	{kind: 'primitive', value: 42},
	{kind: 'undent'}
	])

iterLike(allTokensInBlock(`lItems:
	b
	42`, niceSplitter), [
	{kind: 'hash-head', name: 'lItems'},
	{kind: 'indent'},
	{kind: 'primitive', value: 'b'},
	{kind: 'primitive', value: 42},
	{kind: 'undent'}
	])

iterLike(allTokensInBlock(`lNames:
	John
	Alice
-
	.undef.
	-
		a
		b`, niceSplitter), [
	{kind: 'hash-head', name: 'lNames'},
	{kind: 'indent'},
	{kind: 'primitive', value: 'John'},
	{kind: 'primitive', value: 'Alice'},
	{kind: 'undent'},
	{kind: 'list-head'},
	{kind: 'indent'},
	{kind: 'primitive', value: undef},
	{kind: 'list-head'},
	{kind: 'indent'},
	{kind: 'primitive', value: 'a'},
	{kind: 'primitive', value: 'b'},
	{kind: 'undent'},
	{kind: 'undent'}
	])

DBG("fromNice(str)")

equal(fromNice('abc'),      'abc')
equal(fromNice('say "hi"'), 'say "hi"')
equal(fromNice('a\\nb'),    'a\nb')
equal(fromNice('a\\tb'),    'a\tb')
equal(fromNice('.undef.'),  undef)
equal(fromNice('.null.'),   null)
equal(fromNice('.true.'),   true)
equal(fromNice('.false.'),  false)
equal(fromNice('.NaN.'),    NaN)
equal(fromNice('.infinity.'), Infinity)
equal(fromNice('.neginfinity.'), -Infinity)
equal(fromNice('42'),       42)
equal(fromNice('3.14'),     3.14)
truthy(isSymbol(fromNice('.symbol.')));

(() => {
	const result = fromNice('.symbol dummy.')
	isSymbol(result)
	equal(symbolName(result), 'dummy')
}
	)()

equal(fromNice('.regexp ^abc$.'), /^abc$/)
equal(fromNice('.[].'), [])
equal(fromNice('.{}.'), {})

DBG("allNiceTokens(block)")

iterLike(allNiceTokens(`- a
- b`), [
	{kind: 'list-item', value: 'a'},
	{kind: 'list-item', value: 'b'}
	])

iterLike(allNiceTokens(`-
	a
	b`), [
	{kind: 'list-head'},
	{kind: 'indent'},
	{kind: 'primitive', value: 'a'},
	{kind: 'primitive', value: 'b'},
	{kind: 'undent'}
	])

iterLike(allNiceTokens(`- a
-
	a
	b`), [
	{kind: 'list-item', value: 'a'},
	{kind: 'list-head'},
	{kind: 'indent'},
	{kind: 'primitive', value: 'a'},
	{kind: 'primitive', value: 'b'},
	{kind: 'undent'}
	])

iterLike(allNiceTokens(`-
	a
	b
- a`), [
	{kind: 'list-head'},
	{kind: 'indent'},
	{kind: 'primitive', value: 'a'},
	{kind: 'primitive', value: 'b'},
	{kind: 'undent'},
	{kind: 'list-item', value: 'a'}
	])

iterLike(allNiceTokens(`-
	-
		a
		b
	- c
- a`), [
	{kind: 'list-head'},
	{kind: 'indent'},
	{kind: 'list-head'},
	{kind: 'indent'},
	{kind: 'primitive', value: 'a'},
	{kind: 'primitive', value: 'b'},
	{kind: 'undent'},
	{kind: 'list-item', value: 'c'},
	{kind: 'undent'},
	{kind: 'list-item', value: 'a'}
	])

iterLike(allNiceTokens(`-
	- a
	- b`), [
	{kind: 'list-head'},
	{kind: 'indent'},
	{kind: 'list-item', value: 'a'},
	{kind: 'list-item', value: 'b'},
	{kind: 'undent'}
	])

iterLike(allNiceTokens(`a: 1
b: 2`), [
	{kind: 'hash-item', name: 'a', value: 1},
	{kind: 'hash-item', name: 'b', value: 2}
	])

iterLike(allNiceTokens(`lItems:
	a: 1
	b: 2`), [
	{kind: 'hash-head', name: 'lItems'},
	{kind: 'indent'},
	{kind: 'hash-item', name: 'a', value: 1},
	{kind: 'hash-item', name: 'b', value: 2},
	{kind: 'undent'}
	])

iterLike(allNiceTokens(`lItems:
	a: 1
	b: 2
a: 1
b: 2`), [
	{kind: 'hash-head', name: 'lItems'},
	{kind: 'indent'},
	{kind: 'hash-item', name: 'a', value: 1},
	{kind: 'hash-item', name: 'b', value: 2},
	{kind: 'undent'},
	{kind: 'hash-item', name: 'a', value: 1},
	{kind: 'hash-item', name: 'b', value: 2}
	])

iterLike(allNiceTokens(`a: 1
b: 2
lItems:
	a: 1
	b: 2`), [
	{kind: 'hash-item', name: 'a', value: 1},
	{kind: 'hash-item', name: 'b', value: 2},
	{kind: 'hash-head', name: 'lItems'},
	{kind: 'indent'},
	{kind: 'hash-item', name: 'a', value: 1},
	{kind: 'hash-item', name: 'b', value: 2},
	{kind: 'undent'}
	])

iterLike(allNiceTokens(`a: 1
b: 2
lItems:
	lMoreItems:
		a: 1
		b: 2
	x: abc`), [
	{kind: 'hash-item', name: 'a', value: 1},
	{kind: 'hash-item', name: 'b', value: 2},
	{kind: 'hash-head', name: 'lItems'},
	{kind: 'indent'},
	{kind: 'hash-head', name: 'lMoreItems'},
	{kind: 'indent'},
	{kind: 'hash-item', name: 'a', value: 1},
	{kind: 'hash-item', name: 'b', value: 2},
	{kind: 'undent'},
	{kind: 'hash-item', name: 'x', value: 'abc'},
	{kind: 'undent'}
	])

equal(fromNice(`- 1`), [1])

equal(fromNice(`a: 1`), {a: 1})

// equal fromNice("""
// 	a: 1
// 	b: 3
// 	c:
// 		- 1
// 		- 2
// 	"""), {
// 		a: 1
// 		b: 3
// 		c: [1,2]
// 		}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,