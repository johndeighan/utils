# cleanup.cmd.civet

import {expandGlobSync} from '@std/fs/expand-glob'
import pathLib from 'node:path'
import {existsSync} from '@std/fs'

# ---------------------------------------------------------------------------

relpath := (path: string) =>

	return pathLib.relative('', path).replaceAll('\\', '/')

# ---------------------------------------------------------------------------

rootDir: string? := Deno.env.get('PROJECT_ROOT_DIR')
if (rootDir == undefined)
	console.log "Please set env var PROJECT_ROOT_DIR"
	Deno.exit()

listOnly := (Deno.args[0] != undefined)

lFiles: string[] := []
for pattern of [
		'**/*.js'
		'compile.config.ts'
		'src/**/*.ts'
		'src/**/*.temp.*'
		'test/**/*.ts'
		'test/**/*.temp.*'
		'logs/logs.txt'
		]
	hGlobOptions := {
		exclude: [
			'node_modules/**'
			'.git/**'
			'src/cmd/cleanup.cmd.ts'
			'test/temp.ts'
			]
		includeDirs: false
		}

	for {path} of expandGlobSync(pattern, hGlobOptions)
		lFiles.push path

if (lFiles.length == 0)
	console.log "No files to remove"
else
	for path of lFiles
		if listOnly || path.match(/cleanup\.cmd\.ts/)
			console.log "WOULD REMOVE: '#{path}'"
		else if existsSync(path)
			console.log "REMOVE: '#{path}'"
			Deno.removeSync path
	console.log "#{lFiles.length} files removed"
