"use strict";
// runtemp.cmd.civet

import {
	undef, getCmdArgs, assert, DBG, LOG, isFile,
	compileFile, execCmd, getLogLevel,
	} from "../lib/utils.lib.ts"

const hArgs = getCmdArgs()
const lStubs = (hArgs._.length === 0) ? ['temp'] : hArgs._

// ---------------------------------------------------------------------------

DBG("in cmd runtemp")
for (const stub of lStubs) {
	compileFile(`test/${stub}.test.civet`)

	assert(isFile('test/temp.ts'), "Compile of test/temp.civet failed")
	let ref;if (getLogLevel() === 'debug') {
		ref = await execCmd('deno', [
			'run',
			'-A',
			'--inspect-brk',
			'test/temp.ts',
			...Deno.args
			])
	}
	else {
		ref = await execCmd('deno', [
			'run',
			'-A',
			'test/temp.ts',
			...Deno.args
			])
	};const {code} =ref
	DBG(`Final result code from temp file: ${code}`)
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3JjL2NtZC9ydW50ZW1wLmNtZC5jaXZldC50c3giLCJzb3VyY2VzIjpbInNyYy9jbWQvcnVudGVtcC5jbWQuY2l2ZXQiXSwibWFwcGluZ3MiOiI7QUFBQSxvQkFBbUI7QUFDbkIsQUFBQTtBQUNBLEFBQUEsTUFBTSxDQUFDLENBQUM7QUFDUixDQUFDLEtBQUssQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQztBQUM3QyxDQUFDLFdBQVcsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLFdBQVcsQ0FBQztBQUNuQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMscUJBQXFCO0FBQzdCLEFBQUE7QUFDQSxBQUFBLEFBQUssTUFBTCxLQUFLLENBQUMsQ0FBRSxDQUFDLFVBQVUsQ0FBQyxDQUFDO0FBQ3JCLEFBQUEsQUFBTSxNQUFOLE1BQU0sQ0FBQyxDQUFFLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxHQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQ3BELEFBQUE7QUFDQSxBQUFBLDhFQUE2RTtBQUM3RSxBQUFBO0FBQ0EsQUFBQSxBQUFBLEdBQUcsQ0FBQSxBQUFDLGdCQUFnQixDQUFBO0FBQ3BCLEFBQUEsQUFBQSxHQUFHLENBQUMsQ0FBQSxNQUFBLElBQUksQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFBLENBQUEsQ0FBQTtBQUNsQixBQUFBLENBQUMsV0FBVyxDQUFBLEFBQUMsQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFBO0FBQ3RDLEFBQUE7QUFDQSxBQUFBLENBQUMsTUFBTSxDQUFBLEFBQUMsTUFBTSxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUMsbUNBQW1DLENBQUE7QUFDbkUsQUFBQSxDLEksRyxDQUFXLEdBQUcsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLEdBQUUsQ0FBQyxPQUFPLENBQUMsQ0FBQSxDQUFBO0FBQ3hDLEFBQUEsRSxHLEdBQUUsS0FBSyxDQUFDLE9BQU8sQ0FBQSxBQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7QUFDekIsQUFBQSxHQUFHLEtBQUssQ0FBQztBQUNULEFBQUEsR0FBRyxJQUFJLENBQUM7QUFDUixBQUFBLEdBQUcsZUFBZSxDQUFBO0FBQ2xCLEFBQUEsR0FBRyxjQUFjLENBQUE7QUFDakIsQUFBQSxHQUFZLEdBQVQsSUFBSSxDQUFDLElBQU87QUFDZixBQUFBLEdBQUcsQ0FBQyxDO0NBQUEsQ0FBQTtBQUNKLEFBQUEsQ0FBQyxJQUFJLENBQUEsQ0FBQTtBQUNMLEFBQUEsRSxHLEdBQUUsS0FBSyxDQUFDLE9BQU8sQ0FBQSxBQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7QUFDekIsQUFBQSxHQUFHLEtBQUssQ0FBQztBQUNULEFBQUEsR0FBRyxJQUFJLENBQUM7QUFDUixBQUFBLEdBQUcsY0FBYyxDQUFBO0FBQ2pCLEFBQUEsR0FBWSxHQUFULElBQUksQ0FBQyxJQUFPO0FBQ2YsQUFBQSxHQUFHLENBQUMsQztDQUFBLEMsQ0FkRyxNQUFOLENBQUMsSUFBSSxDQUFDLENBQUMsQyxHQWNKO0FBQ0osQUFBQSxDQUFDLEdBQUcsQ0FBQSxBQUFDLENBQUMsa0NBQWtDLEVBQUUsSUFBSSxDQUFDLENBQUMsQztBQUFBLENBQUE7QUFDaEQiLCJuYW1lcyI6W10sInNvdXJjZXNDb250ZW50IjpbIiMgcnVudGVtcC5jbWQuY2l2ZXRcclxuXHJcbmltcG9ydCB7XHJcblx0dW5kZWYsIGdldENtZEFyZ3MsIGFzc2VydCwgREJHLCBMT0csIGlzRmlsZSxcclxuXHRjb21waWxlRmlsZSwgZXhlY0NtZCwgZ2V0TG9nTGV2ZWwsXHJcblx0fSBmcm9tIFwiLi4vbGliL3V0aWxzLmxpYi50c1wiXHJcblxyXG5oQXJncyA6PSBnZXRDbWRBcmdzKClcclxubFN0dWJzIDo9IChoQXJncy5fLmxlbmd0aCA9PSAwKSA/IFsndGVtcCddIDogaEFyZ3MuX1xyXG5cclxuIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuXHJcbkRCRyBcImluIGNtZCBydW50ZW1wXCJcclxuZm9yIHN0dWIgb2YgbFN0dWJzXHJcblx0Y29tcGlsZUZpbGUgXCJ0ZXN0LyN7c3R1Yn0udGVzdC5jaXZldFwiXHJcblxyXG5cdGFzc2VydCBpc0ZpbGUoJ3Rlc3QvdGVtcC50cycpLCBcIkNvbXBpbGUgb2YgdGVzdC90ZW1wLmNpdmV0IGZhaWxlZFwiXHJcblx0e2NvZGV9IDo9IGlmIChnZXRMb2dMZXZlbCgpID09ICdkZWJ1ZycpXHJcblx0XHRhd2FpdCBleGVjQ21kICdkZW5vJywgW1xyXG5cdFx0XHQncnVuJyxcclxuXHRcdFx0Jy1BJyxcclxuXHRcdFx0Jy0taW5zcGVjdC1icmsnXHJcblx0XHRcdCd0ZXN0L3RlbXAudHMnXHJcblx0XHRcdERlbm8uYXJncy4uLlxyXG5cdFx0XHRdXHJcblx0ZWxzZVxyXG5cdFx0YXdhaXQgZXhlY0NtZCAnZGVubycsIFtcclxuXHRcdFx0J3J1bicsXHJcblx0XHRcdCctQScsXHJcblx0XHRcdCd0ZXN0L3RlbXAudHMnXHJcblx0XHRcdERlbm8uYXJncy4uLlxyXG5cdFx0XHRdXHJcblx0REJHIFwiRmluYWwgcmVzdWx0IGNvZGUgZnJvbSB0ZW1wIGZpbGU6ICN7Y29kZX1cIlxyXG4iXX0=