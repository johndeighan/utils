"use strict";
// runtemp.cmd.civet

import {
	undef, defined, SUCCEED, FAIL, flag, LOG,
	buildFileName, stdChecks,
	findFile, tryCmd, civet2tsFile, doUnitTest, doRun,
	} from 'base-utils'

if (flag('h')) {
	// ---  -d invokes Chrome debugger
	//      -D causes debugging output
	SUCCEED("USAGE: runtemp [-d] [-D] { <stub> }")
}

stdChecks()

// ---------------------------------------------------------------------------

const lFlags: string[] = []

let stub = 'temp'
for (const arg of Deno.args) {
	if (arg.startsWith('-')) {
		lFlags.push(arg)
	}
	else if (arg.match(/^\d+$/)) {
		stub = `temp${arg}`
	}
	else if (arg !== '!') {
		await tryCmd(civet2tsFile, arg, 'lib')
		await tryCmd(doUnitTest, arg, 'lib')
	}
}

await tryCmd(civet2tsFile, stub, undef)
await tryCmd(doRun, stub, undef, lFlags, {debug: flag('d')})

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQzpcXFVzZXJzXFxqb2huZFxcdXRpbHNcXHNyY1xcY21kXFxydW50ZW1wLmNtZC5jaXZldC50c3giLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcam9obmRcXHV0aWxzXFxzcmNcXGNtZFxccnVudGVtcC5jbWQuY2l2ZXQiXSwibWFwcGluZ3MiOiI7QUFBQSxvQkFBbUI7QUFDbkIsQUFBQTtBQUNBLEFBQUEsTUFBTSxDQUFDLENBQUM7QUFDUixDQUFDLEtBQUssQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQztBQUMxQyxDQUFDLGFBQWEsQ0FBQyxDQUFDLFNBQVMsQ0FBQztBQUMxQixDQUFDLFFBQVEsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLFlBQVksQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLEtBQUssQ0FBQztBQUNuRCxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsWUFBWTtBQUNwQixBQUFBO0FBQ0EsQUFBQSxBQUFBLEdBQUcsQ0FBQSxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUEsQ0FBQSxDQUFBO0FBQ1osQUFBQSxDQUFDLGtDQUFpQztBQUNsQyxBQUFBLENBQUMsa0NBQWlDO0FBQ2xDLEFBQUEsQ0FBQyxPQUFPLENBQUEsQUFBQyxxQ0FBcUMsQztBQUFBLENBQUE7QUFDOUMsQUFBQTtBQUNBLEFBQUEsQUFBQSxTQUFTLENBQUMsQ0FBQztBQUNYLEFBQUE7QUFDQSxBQUFBLDhFQUE2RTtBQUM3RSxBQUFBO0FBQ0EsQUFBQSxBQUFnQixNQUFoQixNQUFNLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUUsQ0FBQyxDQUFDLENBQUM7QUFDdEIsQUFBQTtBQUNBLEFBQUEsQUFBQSxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxNQUFNO0FBQ2pCLEFBQUEsQUFBQSxHQUFHLENBQUMsQ0FBQSxNQUFBLEdBQUcsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQSxDQUFBLENBQUE7QUFDcEIsQUFBQSxDQUFDLEdBQUcsQ0FBQSxHQUFHLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxDQUFBLENBQUEsQ0FBQTtBQUN2QixBQUFBLEVBQUUsTUFBTSxDQUFDLElBQUksQ0FBQSxBQUFDLEdBQUcsQztDQUFBLENBQUE7QUFDakIsQUFBQSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUEsR0FBRyxDQUFDLEtBQUssQ0FBQSxBQUFDLE9BQU8sQ0FBQSxDQUFBLENBQUEsQ0FBQTtBQUMxQixBQUFBLEVBQUUsSUFBSSxDLENBQUUsQ0FBQyxDQUFDLElBQUksRUFBRSxHQUFHLENBQUMsQztDQUFDLENBQUE7QUFDckIsQUFBQSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQSxDQUFBO0FBQ3JCLEFBQUEsRUFBRSxLQUFLLENBQUMsTUFBTSxDQUFBLEFBQUMsWUFBWSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsS0FBSyxDQUFBO0FBQ3ZDLEFBQUEsRUFBRSxLQUFLLENBQUMsTUFBTSxDQUFBLEFBQUMsVUFBVSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsS0FBSyxDO0NBQUEsQztBQUFBLENBQUE7QUFDckMsQUFBQTtBQUNBLEFBQUEsQUFBQSxLQUFLLENBQUMsTUFBTSxDQUFBLEFBQUMsWUFBWSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsS0FBSyxDQUFBO0FBQ3RDLEFBQUEsQUFBQSxLQUFLLENBQUMsTUFBTSxDQUFBLEFBQUMsS0FBSyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQTtBQUMzRCIsIm5hbWVzIjpbXSwic291cmNlc0NvbnRlbnQiOlsiIyBydW50ZW1wLmNtZC5jaXZldFxyXG5cclxuaW1wb3J0IHtcclxuXHR1bmRlZiwgZGVmaW5lZCwgU1VDQ0VFRCwgRkFJTCwgZmxhZywgTE9HLFxyXG5cdGJ1aWxkRmlsZU5hbWUsIHN0ZENoZWNrcyxcclxuXHRmaW5kRmlsZSwgdHJ5Q21kLCBjaXZldDJ0c0ZpbGUsIGRvVW5pdFRlc3QsIGRvUnVuLFxyXG5cdH0gZnJvbSAnYmFzZS11dGlscydcclxuXHJcbmlmIGZsYWcoJ2gnKVxyXG5cdCMgLS0tICAtZCBpbnZva2VzIENocm9tZSBkZWJ1Z2dlclxyXG5cdCMgICAgICAtRCBjYXVzZXMgZGVidWdnaW5nIG91dHB1dFxyXG5cdFNVQ0NFRUQgXCJVU0FHRTogcnVudGVtcCBbLWRdIFstRF0geyA8c3R1Yj4gfVwiXHJcblxyXG5zdGRDaGVja3MoKVxyXG5cclxuIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuXHJcbmxGbGFnczogc3RyaW5nW10gOj0gW11cclxuXHJcbmxldCBzdHViID0gJ3RlbXAnXHJcbmZvciBhcmcgb2YgRGVuby5hcmdzXHJcblx0aWYgYXJnLnN0YXJ0c1dpdGgoJy0nKVxyXG5cdFx0bEZsYWdzLnB1c2ggYXJnXHJcblx0ZWxzZSBpZiBhcmcubWF0Y2ggL15cXGQrJC9cclxuXHRcdHN0dWIgPSBcInRlbXAje2FyZ31cIlxyXG5cdGVsc2UgaWYgKGFyZyAhPSAnIScpXHJcblx0XHRhd2FpdCB0cnlDbWQgY2l2ZXQydHNGaWxlLCBhcmcsICdsaWInXHJcblx0XHRhd2FpdCB0cnlDbWQgZG9Vbml0VGVzdCwgYXJnLCAnbGliJ1xyXG5cclxuYXdhaXQgdHJ5Q21kIGNpdmV0MnRzRmlsZSwgc3R1YiwgdW5kZWZcclxuYXdhaXQgdHJ5Q21kIGRvUnVuLCBzdHViLCB1bmRlZiwgbEZsYWdzLCB7ZGVidWc6IGZsYWcoJ2QnKX1cclxuIl19