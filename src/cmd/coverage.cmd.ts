"use strict";
// coverage.cmd.civet

type AutoPromise<T> = Promise<Awaited<T>>;
import {
	undef, strToHash, getCmdArgs, words, LOG, LOGVALUE, DBG,
	} from '../lib/utils.lib.ts'
import {
	allExportsIn, allUnitTestsIn, mergeAnalyses, dumpSymbols,
	} from '../lib/analyze.lib.ts'

const lValidStubs: string[] = words(
	'datatypes llutils logger text-table indent tokens fs',
	'symbols exec cielo compile utils analyze v8-stack unit-test'
	)

// ---------------------------------------------------------------------------
// ASYNC !

const analyze = async (stub: string): AutoPromise<void> => {

	DBG(`stub = ${stub}`)

	const libPath = `src/lib/${stub}.lib.civet`
	const lExports = await Array.fromAsync(allExportsIn(libPath))

	const testPath = `test/${stub}.lib.test.civet`
	const lTestLabels = await Array.fromAsync(allUnitTestsIn(testPath))

	const lFinal = mergeAnalyses(lExports, lTestLabels)
	LOG('')
	const numMissing = dumpSymbols(`Symbols in ${stub}`, lFinal)
	if (numMissing === 0) {
		LOG("OK")
	}
	else {
		LOG(`${numMissing} missing`)
	}
	LOG('')
	return
}

// ---------------------------------------------------------------------------

const hArgs = getCmdArgs()

const lStubs = hArgs._
if (lStubs.length === 0) {
	for (const stub of lValidStubs) {
		await analyze(stub)
	}
}
else {
	for (const stub of lStubs) {
		await analyze(stub)
	}
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3JjL2NtZC9jb3ZlcmFnZS5jbWQuY2l2ZXQudHN4Iiwic291cmNlcyI6WyJzcmMvY21kL2NvdmVyYWdlLmNtZC5jaXZldCJdLCJtYXBwaW5ncyI6IjtBQUFBLHFCQUFvQjtBQUNwQixBQUFBO0FBQ0EsSyxXLHlCO0FBQUEsTUFBTSxDQUFDLENBQUM7QUFDUixDQUFDLEtBQUssQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLEdBQUcsQ0FBQztBQUN6RCxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMscUJBQXFCO0FBQzdCLEFBQUEsQUFBQSxNQUFNLENBQUMsQ0FBQztBQUNSLENBQUMsWUFBWSxDQUFDLENBQUMsY0FBYyxDQUFDLENBQUMsYUFBYSxDQUFDLENBQUMsV0FBVyxDQUFDO0FBQzFELENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyx1QkFBdUI7QUFDL0IsQUFBQTtBQUNBLEFBQUEsQUFBcUIsTUFBckIsV0FBVyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFFLENBQUMsS0FBSyxDQUFDO0FBQy9CLEFBQUEsQ0FBQyxzREFBc0QsQ0FBQztBQUN4RCxBQUFBLENBQUMsNkRBQTZEO0FBQzlELENBQUMsQ0FBQztBQUNGLEFBQUE7QUFDQSxBQUFBLDhFQUE2RTtBQUM3RSxBQUFBLFVBQVM7QUFDVCxBQUFBO0FBQ0EsQUFBQSxBQUFPLE1BQVAsT0FBTyxDQUFDLENBQUUsQyxNQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsTUFBTSxDQUFDLEMsQyxXLENBQUMsQUFBQyxJLENBQUksQ0FBQyxFQUFFLENBQUEsQ0FBQTtBQUNsQyxBQUFBO0FBQ0EsQUFBQSxDQUFDLEdBQUcsQ0FBQSxBQUFDLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUE7QUFDckIsQUFBQTtBQUNBLEFBQUEsQ0FBUSxNQUFQLE9BQU8sQ0FBQyxDQUFFLENBQUMsQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDLFVBQVUsQ0FBQztBQUN2QyxBQUFBLENBQVMsTUFBUixRQUFRLENBQUMsQ0FBRSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUMsQ0FBQztBQUN6RCxBQUFBO0FBQ0EsQUFBQSxDQUFTLE1BQVIsUUFBUSxDQUFDLENBQUUsQ0FBQyxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsZUFBZSxDQUFDO0FBQzFDLEFBQUEsQ0FBWSxNQUFYLFdBQVcsQ0FBQyxDQUFFLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsY0FBYyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBQy9ELEFBQUE7QUFDQSxBQUFBLENBQU8sTUFBTixNQUFNLENBQUMsQ0FBRSxDQUFDLGFBQWEsQ0FBQSxBQUFDLFFBQVEsQ0FBQyxDQUFDLFdBQVcsQ0FBQTtBQUM5QyxBQUFBLENBQUMsR0FBRyxDQUFBLEFBQUMsRUFBRSxDQUFBO0FBQ1AsQUFBQSxDQUFXLE1BQVYsVUFBVSxDQUFDLENBQUUsQ0FBQyxXQUFXLENBQUEsQUFBQyxDQUFDLFdBQVcsRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFBO0FBQ3ZELEFBQUEsQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLEdBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQSxDQUFBO0FBQ3JCLEFBQUEsRUFBRSxHQUFHLENBQUEsQUFBQyxJQUFJLEM7Q0FBQSxDQUFBO0FBQ1YsQUFBQSxDQUFDLElBQUksQ0FBQSxDQUFBO0FBQ0wsQUFBQSxFQUFFLEdBQUcsQ0FBQSxBQUFDLENBQUMsRUFBRSxVQUFVLENBQUMsUUFBUSxDQUFDLEM7Q0FBQSxDQUFBO0FBQzdCLEFBQUEsQ0FBQyxHQUFHLENBQUEsQUFBQyxFQUFFLENBQUE7QUFDUCxBQUFBLENBQUMsTTtBQUFNLENBQUE7QUFDUCxBQUFBO0FBQ0EsQUFBQSw4RUFBNkU7QUFDN0UsQUFBQTtBQUNBLEFBQUEsQUFBSyxNQUFMLEtBQUssQ0FBQyxDQUFFLENBQUMsVUFBVSxDQUFDLENBQUM7QUFDckIsQUFBQTtBQUNBLEFBQUEsQUFBTSxNQUFOLE1BQU0sQ0FBQyxDQUFFLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDakIsQUFBQSxBQUFBLEdBQUcsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLEdBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQSxDQUFBO0FBQ3ZCLEFBQUEsQ0FBQyxHQUFHLENBQUMsQ0FBQSxNQUFBLElBQUksQ0FBQyxFQUFFLENBQUMsV0FBVyxDQUFBLENBQUEsQ0FBQTtBQUN4QixBQUFBLEVBQUUsS0FBSyxDQUFDLE9BQU8sQ0FBQyxJQUFJLEM7Q0FBQyxDO0FBQUEsQ0FBQTtBQUNyQixBQUFBLEFBQUEsSUFBSSxDQUFBLENBQUE7QUFDSixBQUFBLENBQUMsR0FBRyxDQUFDLENBQUEsTUFBQSxJQUFJLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQSxDQUFBLENBQUE7QUFDbkIsQUFBQSxFQUFFLEtBQUssQ0FBQyxPQUFPLENBQUMsSUFBSSxDO0NBQUMsQztBQUFBLENBQUE7QUFDckIiLCJuYW1lcyI6W10sInNvdXJjZXNDb250ZW50IjpbIiMgY292ZXJhZ2UuY21kLmNpdmV0XHJcblxyXG5pbXBvcnQge1xyXG5cdHVuZGVmLCBzdHJUb0hhc2gsIGdldENtZEFyZ3MsIHdvcmRzLCBMT0csIExPR1ZBTFVFLCBEQkcsXHJcblx0fSBmcm9tICcuLi9saWIvdXRpbHMubGliLnRzJ1xyXG5pbXBvcnQge1xyXG5cdGFsbEV4cG9ydHNJbiwgYWxsVW5pdFRlc3RzSW4sIG1lcmdlQW5hbHlzZXMsIGR1bXBTeW1ib2xzLFxyXG5cdH0gZnJvbSAnLi4vbGliL2FuYWx5emUubGliLnRzJ1xyXG5cclxubFZhbGlkU3R1YnM6IHN0cmluZ1tdIDo9IHdvcmRzKFxyXG5cdCdkYXRhdHlwZXMgbGx1dGlscyBsb2dnZXIgdGV4dC10YWJsZSBpbmRlbnQgdG9rZW5zIGZzJyxcclxuXHQnc3ltYm9scyBleGVjIGNpZWxvIGNvbXBpbGUgdXRpbHMgYW5hbHl6ZSB2OC1zdGFjayB1bml0LXRlc3QnXHJcblx0KVxyXG5cclxuIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuIyBBU1lOQyAhXHJcblxyXG5hbmFseXplIDo9IChzdHViOiBzdHJpbmcpOiB2b2lkID0+XHJcblxyXG5cdERCRyBcInN0dWIgPSAje3N0dWJ9XCJcclxuXHJcblx0bGliUGF0aCA6PSBcInNyYy9saWIvI3tzdHVifS5saWIuY2l2ZXRcIlxyXG5cdGxFeHBvcnRzIDo9IGF3YWl0IEFycmF5LmZyb21Bc3luYyhhbGxFeHBvcnRzSW4obGliUGF0aCkpXHJcblxyXG5cdHRlc3RQYXRoIDo9IFwidGVzdC8je3N0dWJ9LmxpYi50ZXN0LmNpdmV0XCJcclxuXHRsVGVzdExhYmVscyA6PSBhd2FpdCBBcnJheS5mcm9tQXN5bmMoYWxsVW5pdFRlc3RzSW4odGVzdFBhdGgpKVxyXG5cclxuXHRsRmluYWwgOj0gbWVyZ2VBbmFseXNlcyBsRXhwb3J0cywgbFRlc3RMYWJlbHNcclxuXHRMT0cgJydcclxuXHRudW1NaXNzaW5nIDo9IGR1bXBTeW1ib2xzIFwiU3ltYm9scyBpbiAje3N0dWJ9XCIsIGxGaW5hbFxyXG5cdGlmIChudW1NaXNzaW5nID09IDApXHJcblx0XHRMT0cgXCJPS1wiXHJcblx0ZWxzZVxyXG5cdFx0TE9HIFwiI3tudW1NaXNzaW5nfSBtaXNzaW5nXCJcclxuXHRMT0cgJydcclxuXHRyZXR1cm5cclxuXHJcbiMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblxyXG5oQXJncyA6PSBnZXRDbWRBcmdzKClcclxuXHJcbmxTdHVicyA6PSBoQXJncy5fXHJcbmlmIChsU3R1YnMubGVuZ3RoID09IDApXHJcblx0Zm9yIHN0dWIgb2YgbFZhbGlkU3R1YnNcclxuXHRcdGF3YWl0IGFuYWx5emUoc3R1YilcclxuZWxzZVxyXG5cdGZvciBzdHViIG9mIGxTdHVic1xyXG5cdFx0YXdhaXQgYW5hbHl6ZShzdHViKVxyXG4iXX0=