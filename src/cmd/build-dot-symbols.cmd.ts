"use strict";
// build-dot-symbols.cmd.civet

import {
	undef, assert, hash, isEmpty, nonEmpty,
	} from 'datatypes'
import {getOptions, CStringSetMap, keys} from 'llutils'
import {OL} from 'to-nice'
import {LOG, DBG, WARN, LOGVALUE, DBGVALUE} from 'logger'
import {barf, allFilesMatching} from 'fsys'
import {analyze} from 'typescript'

// ---------------------------------------------------------------------------
// --- ASYNC GENERATOR

export const getDotSymbolsLines = function*(
		path: string,
		hOptions: hash={}
		): Generator<string, void, void> {

	type opt = {
		oneIndent: string
		maxLineLen: number
		}
	const {oneIndent, maxLineLen} = getOptions<opt>(hOptions, {
		oneIndent: '\t',
		maxLineLen: 75
		})
	const lSymbols: string[] = []
	let lineLen = 0     // --- always <= maxLineLen
	let pathYielded = false

	const analysis = analyze(path)

	for (const name of keys(analysis.hExports)) {
		const pos = name.indexOf('<')
		const sym = (pos === -1) ? name : name.substring(0, pos)
		if (lineLen + sym.length + 1 > maxLineLen) {
			if (!pathYielded) {
				yield path.replace('.civet', '.ts')
				pathYielded = true
			}
			yield `${oneIndent}${lSymbols.join(' ')}`
			lSymbols.length = 0
			lineLen = 0
		}
		else {
			lSymbols.push(sym)
			lineLen += sym.length + 1
		}
	}
	if (lSymbols.length > 0) {
		if (!pathYielded) {
			yield path.replace('.civet', '.ts')
			pathYielded = true
		}
		yield `${oneIndent}${lSymbols.join(' ')}`
	}
	return
}

// ---------------------------------------------------------------------------

export const getDotSymbols = async function*(
	hOptions: hash={}
	): AsyncGenerator<string, void, void> {

	for (const {type, relPath} of allFilesMatching('**/*.lib.civet')) {
		assert((type === 'file'), `Not a file: ${relPath}`)
		DBG(`GET symbols from: ${relPath}`)
		for await (const line of getDotSymbolsLines(relPath)) {
			yield line
		}
	}
	return
}

// ---------------------------------------------------------------------------

const lLines = await Array.fromAsync(getDotSymbols())
const contents = lLines.join('\n')
DBGVALUE('contents', contents)
barf('src/.symbols', contents)

//# sourceMappingURL=data:application/json;base64,