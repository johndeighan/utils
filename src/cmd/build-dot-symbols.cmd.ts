"use strict";
// build-dot-symbols.cmd.civet

import {
	undef, defined, notdefined, assert, hash, getOptions,
	isEmpty, nonEmpty, OL,
	LOG, DBG, WARN, LOGVALUE, DBGVALUE,
	allFilesMatching, barf,
	} from '../lib/utils.lib.ts'
import {
	allExportsIn,
	} from '../lib/analyze.lib.ts'

// ---------------------------------------------------------------------------
// --- ASYNC GENERATOR

export const getDotSymbolsLines = async function*(
		path: string,
		hOptions: hash={}
		): AsyncGenerator<string, void, void> {

	const {oneIndent, maxLineLen} = getOptions(hOptions, {
		oneIndent: '\t',
		maxLineLen: 75
		})
	const lSymbols: string[] = []
	let lineLen = 0     // --- always <= maxLineLen
	let pathYielded = false

	for await (const {name, kind} of allExportsIn(path)) {
		const pos = name.indexOf('<')
		const sym = (pos === -1) ? name : name.substring(0, pos)
		if (lineLen + sym.length + 1 > maxLineLen) {
			if (!pathYielded) {
				yield path.replace('.civet', '.ts')
				pathYielded = true
			}
			yield `${oneIndent}${lSymbols.join(' ')}`
			lSymbols.length = 0
			lineLen = 0
		}
		else {
			lSymbols.push(sym)
			lineLen += sym.length + 1
		}
	}
	if (lSymbols.length > 0) {
		if (!pathYielded) {
			yield path.replace('.civet', '.ts')
			pathYielded = true
		}
		yield `${oneIndent}${lSymbols.join(' ')}`
	}
	return
}

// ---------------------------------------------------------------------------

export const getDotSymbols = async function*(
	hOptions: hash={}
	): AsyncGenerator<string, void, void> {

	for (const {type, relPath} of allFilesMatching('**/*.lib.civet')) {
		assert((type === 'file'), `Not a file: ${relPath}`)
		DBG(`GET symbols from: ${relPath}`)
		for await (const line of getDotSymbolsLines(relPath)) {
			yield line
		}
	}
	return
}

// ---------------------------------------------------------------------------

const lLines = await Array.fromAsync(getDotSymbols())
const contents = lLines.join('\n')
DBGVALUE('contents', contents)
barf('src/.symbols', contents)

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3JjL2NtZC9idWlsZC1kb3Qtc3ltYm9scy5jbWQuY2l2ZXQudHN4Iiwic291cmNlcyI6WyJzcmMvY21kL2J1aWxkLWRvdC1zeW1ib2xzLmNtZC5jaXZldCJdLCJtYXBwaW5ncyI6IjtBQUFBLDhCQUE2QjtBQUM3QixBQUFBO0FBQ0EsQUFBQSxNQUFNLENBQUMsQ0FBQztBQUNSLENBQUMsS0FBSyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsVUFBVSxDQUFDO0FBQ3RELENBQUMsT0FBTyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsRUFBRSxDQUFDO0FBQ3ZCLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsUUFBUSxDQUFDO0FBQ3BDLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxJQUFJLENBQUM7QUFDeEIsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLHFCQUFxQjtBQUM3QixBQUFBLEFBQUEsTUFBTSxDQUFDLENBQUM7QUFDUixDQUFDLFlBQVksQ0FBQztBQUNkLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyx1QkFBdUI7QUFDL0IsQUFBQTtBQUNBLEFBQUEsOEVBQTZFO0FBQzdFLEFBQUEsc0JBQXFCO0FBQ3JCLEFBQUE7QUFDQSxBQUFBLEFBQUEsTUFBTSxDQUFtQixNQUFsQixrQkFBa0IsQ0FBQyxDQUFFLEMsTUFHWSxRLENBSFgsQ0FBQztBQUM5QixBQUFBLEVBQUUsSUFBSSxDQUFDLENBQUMsTUFBTSxDQUFDO0FBQ2YsQUFBQSxFQUFFLFFBQVEsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7QUFDbkIsRUFBRSxDQUFDLENBQUMsQ0FBQyxjQUFjLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFJLENBQUEsQ0FBQTtBQUMxQyxBQUFBO0FBQ0EsQUFBQSxDQUF3QixNQUF2QixD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QUMsUUFBUSxDQUFBO0FBQzdCLEFBQUEsQUFBQSxJQUFJLENBQUEsQUFBQyxjQUFjLENBQUMsQ0FBQyxRQUFRLENBQUE7QUFDN0IiLCJuYW1lcyI6W10sInNvdXJjZXNDb250ZW50IjpbIiMgYnVpbGQtZG90LXN5bWJvbHMuY21kLmNpdmV0XHJcblxyXG5pbXBvcnQge1xyXG5cdHVuZGVmLCBkZWZpbmVkLCBub3RkZWZpbmVkLCBhc3NlcnQsIGhhc2gsIGdldE9wdGlvbnMsXHJcblx0aXNFbXB0eSwgbm9uRW1wdHksIE9MLFxyXG5cdExPRywgREJHLCBXQVJOLCBMT0dWQUxVRSwgREJHVkFMVUUsXHJcblx0YWxsRmlsZXNNYXRjaGluZywgYmFyZixcclxuXHR9IGZyb20gJy4uL2xpYi91dGlscy5saWIudHMnXHJcbmltcG9ydCB7XHJcblx0YWxsRXhwb3J0c0luLFxyXG5cdH0gZnJvbSAnLi4vbGliL2FuYWx5emUubGliLnRzJ1xyXG5cclxuIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuIyAtLS0gQVNZTkMgR0VORVJBVE9SXHJcblxyXG5leHBvcnQgZ2V0RG90U3ltYm9sc0xpbmVzIDo9IChcclxuXHRcdHBhdGg6IHN0cmluZyxcclxuXHRcdGhPcHRpb25zOiBoYXNoPXt9XHJcblx0XHQpOiBBc3luY0dlbmVyYXRvcjxzdHJpbmcsIHZvaWQsIHZvaWQ+IC0+XHJcblxyXG5cdHtvbmVJbmRlbnQsIG1heExpbmVMZW59IDo9IGdldE9wdGlvbnMgaE9wdGlvbnMsIHtcclxuXHRcdG9uZUluZGVudDogJ1xcdCdcclxuXHRcdG1heExpbmVMZW46IDc1XHJcblx0XHR9XHJcblx0bFN5bWJvbHM6IHN0cmluZ1tdIDo9IFtdXHJcblx0bGV0IGxpbmVMZW4gPSAwICAgICAjIC0tLSBhbHdheXMgPD0gbWF4TGluZUxlblxyXG5cdGxldCBwYXRoWWllbGRlZCA9IGZhbHNlXHJcblxyXG5cdGZvciBhd2FpdCB7bmFtZSwga2luZH0gb2YgYWxsRXhwb3J0c0luKHBhdGgpXHJcblx0XHRwb3MgOj0gbmFtZS5pbmRleE9mKCc8JylcclxuXHRcdHN5bSA6PSAocG9zID09IC0xKSA/IG5hbWUgOiBuYW1lLnN1YnN0cmluZygwLCBwb3MpXHJcblx0XHRpZiAobGluZUxlbiArIHN5bS5sZW5ndGggKyAxID4gbWF4TGluZUxlbilcclxuXHRcdFx0aWYgbm90IHBhdGhZaWVsZGVkXHJcblx0XHRcdFx0eWllbGQgcGF0aC5yZXBsYWNlKCcuY2l2ZXQnLCAnLnRzJylcclxuXHRcdFx0XHRwYXRoWWllbGRlZCA9IHRydWVcclxuXHRcdFx0eWllbGQgXCIje29uZUluZGVudH0je2xTeW1ib2xzLmpvaW4oJyAnKX1cIlxyXG5cdFx0XHRsU3ltYm9scy5sZW5ndGggPSAwXHJcblx0XHRcdGxpbmVMZW4gPSAwXHJcblx0XHRlbHNlXHJcblx0XHRcdGxTeW1ib2xzLnB1c2ggc3ltXHJcblx0XHRcdGxpbmVMZW4gKz0gc3ltLmxlbmd0aCArIDFcclxuXHRpZiAobFN5bWJvbHMubGVuZ3RoID4gMClcclxuXHRcdGlmIG5vdCBwYXRoWWllbGRlZFxyXG5cdFx0XHR5aWVsZCBwYXRoLnJlcGxhY2UoJy5jaXZldCcsICcudHMnKVxyXG5cdFx0XHRwYXRoWWllbGRlZCA9IHRydWVcclxuXHRcdHlpZWxkIFwiI3tvbmVJbmRlbnR9I3tsU3ltYm9scy5qb2luKCcgJyl9XCJcclxuXHRyZXR1cm5cclxuXHJcbiMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblxyXG5leHBvcnQgZ2V0RG90U3ltYm9scyA6PSAoXHJcblx0aE9wdGlvbnM6IGhhc2g9e31cclxuXHQpOiBBc3luY0dlbmVyYXRvcjxzdHJpbmcsIHZvaWQsIHZvaWQ+IC0+XHJcblxyXG5cdGZvciB7dHlwZSwgcmVsUGF0aH0gb2YgYWxsRmlsZXNNYXRjaGluZygnKiovKi5saWIuY2l2ZXQnKVxyXG5cdFx0YXNzZXJ0ICh0eXBlID09ICdmaWxlJyksIFwiTm90IGEgZmlsZTogI3tyZWxQYXRofVwiXHJcblx0XHREQkcgXCJHRVQgc3ltYm9scyBmcm9tOiAje3JlbFBhdGh9XCJcclxuXHRcdGZvciBhd2FpdCBsaW5lIG9mIGdldERvdFN5bWJvbHNMaW5lcyhyZWxQYXRoKVxyXG5cdFx0XHR5aWVsZCBsaW5lXHJcblx0cmV0dXJuXHJcblxyXG4jIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cclxubExpbmVzIDo9IGF3YWl0IEFycmF5LmZyb21Bc3luYyhnZXREb3RTeW1ib2xzKCkpXHJcbmNvbnRlbnRzIDo9IGxMaW5lcy5qb2luKCdcXG4nKVxyXG5EQkdWQUxVRSAnY29udGVudHMnLCBjb250ZW50c1xyXG5iYXJmICdzcmMvLnN5bWJvbHMnLCBjb250ZW50c1xyXG4iXX0=