"use strict";
// dumpast.cmd.civet

import {
	undef, defined, notdefined, slurp,
	LOG, DBG, flag, nonOption, assert, croak, findFile, fileExt,
	} from 'base-utils'
import {assertIsDefined} from 'datatypes'
import {getCmdArgs} from 'cmd-args'
import {DUMP} from 'to-nice'
import {ts2ast, astAsString} from 'typescript'
import {civet2ast} from 'civet'

const [hArgs, lNonOptions] = getCmdArgs()

// ---------------------------------------------------------------------------

const fileName = lNonOptions[0] || 'ast.civet'
DBG(`fileName = ${fileName}`)

const path = findFile(fileName)
DBG(`path = ${path}`)
assertIsDefined(path)

const ext = fileExt(path)
let ref;switch(ext) {
	case '.ts': {
		ref = ts2ast(slurp(path));break;
	}
	case '.civet': {
		ref = civet2ast(slurp(path));break;
	}
	default: {
		ref = croak(`Bad path: ${path}`)
	}
};const hAst =ref
if (flag('g')) {
	console.dir(hAst, {depth: null})
}
else if (flag('f')) {
	DUMP(hAst, 'hAst')
}
else {
	console.log(astAsString(hAst))
}


//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQzpcXFVzZXJzXFxqb2huZFxcdXRpbHNcXHNyY1xcY21kXFxkdW1wYXN0LmNtZC5jaXZldC50c3giLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcam9obmRcXHV0aWxzXFxzcmNcXGNtZFxcZHVtcGFzdC5jbWQuY2l2ZXQiXSwibWFwcGluZ3MiOiI7QUFBQSxvQkFBbUI7QUFDbkIsQUFBQTtBQUNBLEFBQUEsTUFBTSxDQUFDLENBQUM7QUFDUixDQUFDLEtBQUssQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLEtBQUssQ0FBQztBQUNuQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLE9BQU8sQ0FBQztBQUM3RCxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsWUFBWTtBQUNwQixBQUFBLEFBQUEsTUFBTSxDQUFDLENBQUMsZUFBZSxDQUFDLENBQUMsSUFBSSxDQUFDLFdBQVc7QUFDekMsQUFBQSxBQUFBLE1BQU0sQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFVO0FBQ25DLEFBQUEsQUFBQSxNQUFNLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsU0FBUztBQUM1QixBQUFBLEFBQUEsTUFBTSxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsV0FBVyxDQUFDLENBQUMsSUFBSSxDQUFDLFlBQVk7QUFDOUMsQUFBQSxBQUFBLE1BQU0sQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPO0FBQy9CLEFBQUE7QUFDQSxBQUFBLEFBQW9CLE1BQXBCLENBQUMsS0FBSyxDQUFDLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBRSxDQUFDLFVBQVUsQ0FBQyxDQUFDO0FBQ3BDLEFBQUE7QUFDQSxBQUFBLDhFQUE2RTtBQUM3RSxBQUFBO0FBQ0EsQUFBQSxBQUFRLE1BQVIsUUFBUSxDQUFDLENBQUUsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLFdBQVc7QUFDekMsQUFBQSxBQUFBLEdBQUcsQ0FBQSxBQUFDLENBQUMsV0FBVyxFQUFFLFFBQVEsQ0FBQyxDQUFDLENBQUE7QUFDNUIsQUFBQTtBQUNBLEFBQUEsQUFBSSxNQUFKLElBQUksQ0FBQyxDQUFFLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQztBQUMxQixBQUFBLEFBQUEsR0FBRyxDQUFBLEFBQUMsQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQTtBQUNwQixBQUFBLEFBQUEsZUFBZSxDQUFBLEFBQUMsSUFBSSxDQUFBO0FBQ3BCLEFBQUE7QUFDQSxBQUFBLEFBQUcsTUFBSCxHQUFHLENBQUMsQ0FBRSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUM7QUFDcEIsQUFBQSxJLEcsQ0FBUSxNQUFNLENBQUEsQUFBQyxHQUFHLENBQUEsQ0FBQSxDQUFBO0FBQ2xCLEFBQUEsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFBLENBQUEsQ0FBQTtBQUNYLEFBQUEsRSxHLEdBQUUsTUFBTSxDQUFBLEFBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFBLE87Q0FBQSxDQUFBO0FBQ3BCLEFBQUEsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFBLENBQUEsQ0FBQTtBQUNkLEFBQUEsRSxHLEdBQUUsU0FBUyxDQUFBLEFBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFBLE87Q0FBQSxDQUFBO0FBQ3ZCLEFBQUEsQ0FBQyxPQUFJLENBQUEsQ0FBQSxDQUFBO0FBQ0wsQUFBQSxFLEcsR0FBRSxLQUFLLENBQUEsQUFBQyxDQUFDLFVBQVUsRUFBRSxJQUFJLENBQUMsQ0FBQyxDO0NBQUEsQztBQUFBLEMsQ0FOdkIsTUFBSixJQUFJLENBQUMsQyxHQU1zQjtBQUMzQixBQUFBLEFBQUEsR0FBRyxDQUFBLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQSxDQUFBLENBQUE7QUFDWixBQUFBLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQSxBQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsSUFBSSxDQUFDLEM7QUFBQSxDQUFBO0FBQ2hDLEFBQUEsQUFBQSxJQUFJLENBQUMsR0FBRyxDQUFBLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQSxDQUFBLENBQUE7QUFDakIsQUFBQSxDQUFDLElBQUksQ0FBQSxBQUFDLElBQUksQ0FBQyxDQUFDLE1BQU0sQztBQUFBLENBQUE7QUFDbEIsQUFBQSxBQUFBLElBQUksQ0FBQSxDQUFBO0FBQ0osQUFBQSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUEsQUFBQyxXQUFXLENBQUMsSUFBSSxDQUFDLEM7QUFBQSxDQUFBO0FBQzlCO0FBQ0EiLCJuYW1lcyI6W10sInNvdXJjZXNDb250ZW50IjpbIiMgZHVtcGFzdC5jbWQuY2l2ZXRcclxuXHJcbmltcG9ydCB7XHJcblx0dW5kZWYsIGRlZmluZWQsIG5vdGRlZmluZWQsIHNsdXJwLFxyXG5cdExPRywgREJHLCBmbGFnLCBub25PcHRpb24sIGFzc2VydCwgY3JvYWssIGZpbmRGaWxlLCBmaWxlRXh0LFxyXG5cdH0gZnJvbSAnYmFzZS11dGlscydcclxuaW1wb3J0IHthc3NlcnRJc0RlZmluZWR9IGZyb20gJ2RhdGF0eXBlcydcclxuaW1wb3J0IHtnZXRDbWRBcmdzfSBmcm9tICdjbWQtYXJncydcclxuaW1wb3J0IHtEVU1QfSBmcm9tICd0by1uaWNlJ1xyXG5pbXBvcnQge3RzMmFzdCwgYXN0QXNTdHJpbmd9IGZyb20gJ3R5cGVzY3JpcHQnXHJcbmltcG9ydCB7Y2l2ZXQyYXN0fSBmcm9tICdjaXZldCdcclxuXHJcbltoQXJncywgbE5vbk9wdGlvbnNdIDo9IGdldENtZEFyZ3MoKVxyXG5cclxuIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuXHJcbmZpbGVOYW1lIDo9IGxOb25PcHRpb25zWzBdIHx8ICdhc3QuY2l2ZXQnXHJcbkRCRyBcImZpbGVOYW1lID0gI3tmaWxlTmFtZX1cIlxyXG5cclxucGF0aCA6PSBmaW5kRmlsZShmaWxlTmFtZSlcclxuREJHIFwicGF0aCA9ICN7cGF0aH1cIlxyXG5hc3NlcnRJc0RlZmluZWQgcGF0aFxyXG5cclxuZXh0IDo9IGZpbGVFeHQocGF0aClcclxuaEFzdCA6PSBzd2l0Y2ggZXh0XHJcblx0d2hlbiAnLnRzJ1xyXG5cdFx0dHMyYXN0IHNsdXJwKHBhdGgpXHJcblx0d2hlbiAnLmNpdmV0J1xyXG5cdFx0Y2l2ZXQyYXN0IHNsdXJwKHBhdGgpXHJcblx0ZWxzZVxyXG5cdFx0Y3JvYWsgXCJCYWQgcGF0aDogI3twYXRofVwiXHJcbmlmIGZsYWcoJ2cnKVxyXG5cdGNvbnNvbGUuZGlyIGhBc3QsIHtkZXB0aDogbnVsbH1cclxuZWxzZSBpZiBmbGFnKCdmJylcclxuXHREVU1QIGhBc3QsICdoQXN0J1xyXG5lbHNlXHJcblx0Y29uc29sZS5sb2cgYXN0QXNTdHJpbmcoaEFzdClcclxuXHJcbiJdfQ==