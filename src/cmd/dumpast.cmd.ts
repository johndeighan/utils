"use strict";
// dumpast.cmd.civet

import {
	undef, defined, notdefined, slurp, stdChecks,
	LOG, DBG, flag, nonOption, assert, croak, findFile, fileExt,
	} from 'base-utils'
import {assertIsDefined, isString} from 'datatypes'
import {hasKey} from 'llutils'
import {getCmdArgs} from 'cmd-args'
import {DUMP} from 'to-nice'
import {ts2ast, astAsString} from 'typescript'
import {civet2ast} from 'civet'

stdChecks()
const [hArgs, lNonOptions] = getCmdArgs()

// ---------------------------------------------------------------------------

const fileName = nonOption(0) || 'ast.civet'
const path = findFile(fileName) || croak(`No such file: ${fileName}`)
assertIsDefined(path)

LOG(`-----  AST for ${path}  -----`)

let ref;switch(fileExt(path)) {
	case '.ts': {
		ref = ts2ast(slurp(path));break;
	}
	case '.civet': {
		ref = civet2ast(slurp(path));break;
	}
	default: {
		ref = croak(`Bad path: ${path}`)
	}
};const hAst =ref

const lInclude = (
	(hasKey(hArgs, 'lInclude')?
		(isString(hArgs.lInclude) ? hArgs.lInclude.split(',') : undef)
	:
		undef)
	)

if (flag('g')) {
	console.dir(hAst, {depth: null})
}
else if (flag('f')) {
	DUMP(hAst, 'hAst')
}
else {
	console.log(astAsString(hAst, {lInclude}))
}


//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQzpcXFVzZXJzXFxqb2huZFxcdXRpbHNcXHNyY1xcY21kXFxkdW1wYXN0LmNtZC5jaXZldC50c3giLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcam9obmRcXHV0aWxzXFxzcmNcXGNtZFxcZHVtcGFzdC5jbWQuY2l2ZXQiXSwibWFwcGluZ3MiOiI7QUFBQSxvQkFBbUI7QUFDbkIsQUFBQTtBQUNBLEFBQUEsTUFBTSxDQUFDLENBQUM7QUFDUixDQUFDLEtBQUssQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLFNBQVMsQ0FBQztBQUM5QyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLE9BQU8sQ0FBQztBQUM3RCxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsWUFBWTtBQUNwQixBQUFBLEFBQUEsTUFBTSxDQUFDLENBQUMsZUFBZSxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsSUFBSSxDQUFDLFdBQVc7QUFDbkQsQUFBQSxBQUFBLE1BQU0sQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxTQUFTO0FBQzlCLEFBQUEsQUFBQSxNQUFNLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBVTtBQUNuQyxBQUFBLEFBQUEsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVM7QUFDNUIsQUFBQSxBQUFBLE1BQU0sQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLFdBQVcsQ0FBQyxDQUFDLElBQUksQ0FBQyxZQUFZO0FBQzlDLEFBQUEsQUFBQSxNQUFNLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTztBQUMvQixBQUFBO0FBQ0EsQUFBQSxBQUFBLFNBQVMsQ0FBQyxDQUFDO0FBQ1gsQUFBQSxBQUFvQixNQUFwQixDQUFDLEtBQUssQ0FBQyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUUsQ0FBQyxVQUFVLENBQUMsQ0FBQztBQUNwQyxBQUFBO0FBQ0EsQUFBQSw4RUFBNkU7QUFDN0UsQUFBQTtBQUNBLEFBQUEsQUFBUSxNQUFSLFFBQVEsQ0FBQyxDQUFFLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxXQUFXO0FBQ3ZDLEFBQUEsQUFBSSxNQUFKLElBQUksQ0FBQyxDQUFFLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxjQUFjLEVBQUUsUUFBUSxDQUFDLENBQUMsQ0FBQztBQUNoRSxBQUFBLEFBQUEsZUFBZSxDQUFBLEFBQUMsSUFBSSxDQUFBO0FBQ3BCLEFBQUE7QUFDQSxBQUFBLEFBQUEsR0FBRyxDQUFBLEFBQUMsQ0FBQyxlQUFlLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFBO0FBQ25DLEFBQUE7QUFDQSxBQUFBLEksRyxDQUFRLE1BQU0sQ0FBQSxBQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQSxDQUFBLENBQUE7QUFDNUIsQUFBQSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUEsQ0FBQSxDQUFBO0FBQ1gsQUFBQSxFLEcsR0FBRSxNQUFNLENBQUEsQUFBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUEsTztDQUFBLENBQUE7QUFDcEIsQUFBQSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUEsQ0FBQSxDQUFBO0FBQ2QsQUFBQSxFLEcsR0FBRSxTQUFTLENBQUEsQUFBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUEsTztDQUFBLENBQUE7QUFDdkIsQUFBQSxDQUFDLE9BQUksQ0FBQSxDQUFBLENBQUE7QUFDTCxBQUFBLEUsRyxHQUFFLEtBQUssQ0FBQSxBQUFDLENBQUMsVUFBVSxFQUFFLElBQUksQ0FBQyxDQUFDLEM7Q0FBQSxDO0FBQUEsQyxDQU52QixNQUFKLElBQUksQ0FBQyxDLEdBTXNCO0FBQzNCLEFBQUE7QUFDQSxBQUFBLEFBQVEsTUFBUixRQUFRLENBQUMsQ0FBRSxDQUFDLENBQUM7QUFDYixBQUFBLENBQUksQ0FBQSxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsVUFBVSxDLENBQUM7QUFDN0IsQUFBQSxFLENBQUUsUUFBUSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEssQ0FBSztBQUM5RCxBQUFBLEMsQ0FBSztBQUNMLEFBQUEsRUFBRSxLQUgyQixDQUd0QjtBQUNQLENBQUMsQ0FBQztBQUNGLEFBQUE7QUFDQSxBQUFBLEFBQUEsR0FBRyxDQUFBLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQSxDQUFBLENBQUE7QUFDWixBQUFBLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQSxBQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsSUFBSSxDQUFDLEM7QUFBQSxDQUFBO0FBQ2hDLEFBQUEsQUFBQSxJQUFJLENBQUMsR0FBRyxDQUFBLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQSxDQUFBLENBQUE7QUFDakIsQUFBQSxDQUFDLElBQUksQ0FBQSxBQUFDLElBQUksQ0FBQyxDQUFDLE1BQU0sQztBQUFBLENBQUE7QUFDbEIsQUFBQSxBQUFBLElBQUksQ0FBQSxDQUFBO0FBQ0osQUFBQSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUEsQUFBQyxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDO0FBQUEsQ0FBQTtBQUMxQztBQUNBIiwibmFtZXMiOltdLCJzb3VyY2VzQ29udGVudCI6WyIjIGR1bXBhc3QuY21kLmNpdmV0XHJcblxyXG5pbXBvcnQge1xyXG5cdHVuZGVmLCBkZWZpbmVkLCBub3RkZWZpbmVkLCBzbHVycCwgc3RkQ2hlY2tzLFxyXG5cdExPRywgREJHLCBmbGFnLCBub25PcHRpb24sIGFzc2VydCwgY3JvYWssIGZpbmRGaWxlLCBmaWxlRXh0LFxyXG5cdH0gZnJvbSAnYmFzZS11dGlscydcclxuaW1wb3J0IHthc3NlcnRJc0RlZmluZWQsIGlzU3RyaW5nfSBmcm9tICdkYXRhdHlwZXMnXHJcbmltcG9ydCB7aGFzS2V5fSBmcm9tICdsbHV0aWxzJ1xyXG5pbXBvcnQge2dldENtZEFyZ3N9IGZyb20gJ2NtZC1hcmdzJ1xyXG5pbXBvcnQge0RVTVB9IGZyb20gJ3RvLW5pY2UnXHJcbmltcG9ydCB7dHMyYXN0LCBhc3RBc1N0cmluZ30gZnJvbSAndHlwZXNjcmlwdCdcclxuaW1wb3J0IHtjaXZldDJhc3R9IGZyb20gJ2NpdmV0J1xyXG5cclxuc3RkQ2hlY2tzKClcclxuW2hBcmdzLCBsTm9uT3B0aW9uc10gOj0gZ2V0Q21kQXJncygpXHJcblxyXG4jIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cclxuZmlsZU5hbWUgOj0gbm9uT3B0aW9uKDApIHx8ICdhc3QuY2l2ZXQnXHJcbnBhdGggOj0gZmluZEZpbGUoZmlsZU5hbWUpIHx8IGNyb2FrKFwiTm8gc3VjaCBmaWxlOiAje2ZpbGVOYW1lfVwiKVxyXG5hc3NlcnRJc0RlZmluZWQgcGF0aFxyXG5cclxuTE9HIFwiLS0tLS0gIEFTVCBmb3IgI3twYXRofSAgLS0tLS1cIlxyXG5cclxuaEFzdCA6PSBzd2l0Y2ggZmlsZUV4dChwYXRoKVxyXG5cdHdoZW4gJy50cydcclxuXHRcdHRzMmFzdCBzbHVycChwYXRoKVxyXG5cdHdoZW4gJy5jaXZldCdcclxuXHRcdGNpdmV0MmFzdCBzbHVycChwYXRoKVxyXG5cdGVsc2VcclxuXHRcdGNyb2FrIFwiQmFkIHBhdGg6ICN7cGF0aH1cIlxyXG5cclxubEluY2x1ZGUgOj0gKFxyXG5cdGlmIGhhc0tleShoQXJncywgJ2xJbmNsdWRlJylcclxuXHRcdGlzU3RyaW5nKGhBcmdzLmxJbmNsdWRlKSA/IGhBcmdzLmxJbmNsdWRlLnNwbGl0KCcsJykgOiB1bmRlZlxyXG5cdGVsc2VcclxuXHRcdHVuZGVmXHJcblx0KVxyXG5cclxuaWYgZmxhZygnZycpXHJcblx0Y29uc29sZS5kaXIgaEFzdCwge2RlcHRoOiBudWxsfVxyXG5lbHNlIGlmIGZsYWcoJ2YnKVxyXG5cdERVTVAgaEFzdCwgJ2hBc3QnXHJcbmVsc2VcclxuXHRjb25zb2xlLmxvZyBhc3RBc1N0cmluZyhoQXN0LCB7bEluY2x1ZGV9KVxyXG5cclxuIl19