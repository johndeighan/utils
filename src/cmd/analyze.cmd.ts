"use strict";
// analyze.cmd.civet

import {
	undef, defined, notdefined, slurp, stdChecks,
	DIR, flag, nonOption,
	assert, croak, findFile, fileExt,
	} from 'base-utils'
import {assertIsDefined} from 'datatypes'
import {pushLogLevel, popLogLevel} from 'log-levels'
import {LOG, DBG, DBGVALUE} from 'logger'
import {getCmdArgs} from 'cmd-args'
import {toNice, DUMP} from 'to-nice'
import {ts2ast, astAsString, analyze} from 'typescript'
import {civet2ast, civet2ts} from 'civet'

stdChecks()
const [hArgs, lNonOptions] = getCmdArgs({
	_: {
		desc: "name of file to analyze",
		range: [0,1]
		},
	t: 'debug walk of AST',
	d: 'dump AST',
	v: 'dump verbose analysis'
	})

// ---------------------------------------------------------------------------

pushLogLevel('info')    // --- temp disable debugging

const fileName = (lNonOptions.length === 1) ? lNonOptions[0] : 'ast.civet'
const path = (
	(fileName.match(/[\\\/]/)?
		fileName
	:
		findFile(fileName))
	)
assertIsDefined(path)

LOG(`-----  ANALYZE ${path}  -----`)

popLogLevel()

let ref;switch(fileExt(path)) {
	case 'ts': {
		ref = slurp(path);break;
	}
	case '.civet': {
		ref = civet2ts(slurp(path));break;
	}
	default: {
		ref = croak(`Bad path: ${path}`)
	}
};const tsCode =ref

const hOptions = {
	dump: hArgs.d,
	trace: hArgs.t
	}

DBGVALUE('tsCode', tsCode)
const analysis = analyze(tsCode, hOptions)

if (flag('v')) {
	DUMP(toNice(analysis), 'ANALYSIS')
}
else {
	DUMP(analysis.asString(), 'ANALYSIS')
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQzpcXFVzZXJzXFxqb2huZFxcdXRpbHNcXHNyY1xcY21kXFxhbmFseXplLmNtZC5jaXZldC50c3giLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcam9obmRcXHV0aWxzXFxzcmNcXGNtZFxcYW5hbHl6ZS5jbWQuY2l2ZXQiXSwibWFwcGluZ3MiOiI7QUFBQSxvQkFBbUI7QUFDbkIsQUFBQTtBQUNBLEFBQUEsTUFBTSxDQUFDLENBQUM7QUFDUixDQUFDLEtBQUssQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLFNBQVMsQ0FBQztBQUM5QyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLFNBQVMsQ0FBQztBQUN0QixDQUFDLE1BQU0sQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLE9BQU8sQ0FBQztBQUNsQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsWUFBWTtBQUNwQixBQUFBLEFBQUEsTUFBTSxDQUFDLENBQUMsZUFBZSxDQUFDLENBQUMsSUFBSSxDQUFDLFdBQVc7QUFDekMsQUFBQSxBQUFBLE1BQU0sQ0FBQyxDQUFDLFlBQVksQ0FBQyxDQUFDLFdBQVcsQ0FBQyxDQUFDLElBQUksQ0FBQyxZQUFZO0FBQ3BELEFBQUEsQUFBQSxNQUFNLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUTtBQUN6QyxBQUFBLEFBQUEsTUFBTSxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQVU7QUFDbkMsQUFBQSxBQUFBLE1BQU0sQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxTQUFTO0FBQ3BDLEFBQUEsQUFBQSxNQUFNLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxXQUFXLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxJQUFJLENBQUMsWUFBWTtBQUN2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QUFBLEFBQUMsTUFBTSxDQUFDLENBQUMsUUFBUSxDQUFBO0FBQ3BDLEFBQUE7QUFDQSxBQUFBLEFBQUEsR0FBRyxDQUFBLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQSxDQUFBLENBQUE7QUFDWixBQUFBLENBQUMsSUFBSSxDQUFBLEFBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsVUFBVSxDO0FBQUEsQ0FBQTtBQUNsQyxBQUFBLEFBQUEsSUFBSSxDQUFBLENBQUE7QUFDSixBQUFBLENBQUMsSUFBSSxDQUFBLEFBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxVQUFVLEM7QUFBQSxDQUFBO0FBQ3JDIiwibmFtZXMiOltdLCJzb3VyY2VzQ29udGVudCI6WyIjIGFuYWx5emUuY21kLmNpdmV0XHJcblxyXG5pbXBvcnQge1xyXG5cdHVuZGVmLCBkZWZpbmVkLCBub3RkZWZpbmVkLCBzbHVycCwgc3RkQ2hlY2tzLFxyXG5cdERJUiwgZmxhZywgbm9uT3B0aW9uLFxyXG5cdGFzc2VydCwgY3JvYWssIGZpbmRGaWxlLCBmaWxlRXh0LFxyXG5cdH0gZnJvbSAnYmFzZS11dGlscydcclxuaW1wb3J0IHthc3NlcnRJc0RlZmluZWR9IGZyb20gJ2RhdGF0eXBlcydcclxuaW1wb3J0IHtwdXNoTG9nTGV2ZWwsIHBvcExvZ0xldmVsfSBmcm9tICdsb2ctbGV2ZWxzJ1xyXG5pbXBvcnQge0xPRywgREJHLCBEQkdWQUxVRX0gZnJvbSAnbG9nZ2VyJ1xyXG5pbXBvcnQge2dldENtZEFyZ3N9IGZyb20gJ2NtZC1hcmdzJ1xyXG5pbXBvcnQge3RvTmljZSwgRFVNUH0gZnJvbSAndG8tbmljZSdcclxuaW1wb3J0IHt0czJhc3QsIGFzdEFzU3RyaW5nLCBhbmFseXplfSBmcm9tICd0eXBlc2NyaXB0J1xyXG5pbXBvcnQge2NpdmV0MmFzdCwgY2l2ZXQydHN9IGZyb20gJ2NpdmV0J1xyXG5cclxuc3RkQ2hlY2tzKClcclxuW2hBcmdzLCBsTm9uT3B0aW9uc10gOj0gZ2V0Q21kQXJncyB7XHJcblx0Xzoge1xyXG5cdFx0ZGVzYzogXCJuYW1lIG9mIGZpbGUgdG8gYW5hbHl6ZVwiXHJcblx0XHRyYW5nZTogWzAsMV1cclxuXHRcdH1cclxuXHR0OiAnZGVidWcgd2FsayBvZiBBU1QnXHJcblx0ZDogJ2R1bXAgQVNUJ1xyXG5cdHY6ICdkdW1wIHZlcmJvc2UgYW5hbHlzaXMnXHJcblx0fVxyXG5cclxuIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuXHJcbnB1c2hMb2dMZXZlbCAnaW5mbycgICAgIyAtLS0gdGVtcCBkaXNhYmxlIGRlYnVnZ2luZ1xyXG5cclxuZmlsZU5hbWUgOj0gKGxOb25PcHRpb25zLmxlbmd0aCA9PSAxKSA/IGxOb25PcHRpb25zWzBdIDogJ2FzdC5jaXZldCdcclxucGF0aCA6PSAoXHJcblx0aWYgZmlsZU5hbWUubWF0Y2goL1tcXFxcXFwvXS8pXHJcblx0XHRmaWxlTmFtZVxyXG5cdGVsc2VcclxuXHRcdGZpbmRGaWxlKGZpbGVOYW1lKVxyXG5cdClcclxuYXNzZXJ0SXNEZWZpbmVkIHBhdGhcclxuXHJcbkxPRyBcIi0tLS0tICBBTkFMWVpFICN7cGF0aH0gIC0tLS0tXCJcclxuXHJcbnBvcExvZ0xldmVsKClcclxuXHJcbnRzQ29kZSA6PSBzd2l0Y2ggZmlsZUV4dChwYXRoKVxyXG5cdHdoZW4gJ3RzJ1xyXG5cdFx0c2x1cnAocGF0aClcclxuXHR3aGVuICcuY2l2ZXQnXHJcblx0XHRjaXZldDJ0cyhzbHVycChwYXRoKSlcclxuXHRlbHNlXHJcblx0XHRjcm9hayBcIkJhZCBwYXRoOiAje3BhdGh9XCJcclxuXHJcbmhPcHRpb25zIDo9IHtcclxuXHRkdW1wOiBoQXJncy5kXHJcblx0dHJhY2U6IGhBcmdzLnRcclxuXHR9XHJcblxyXG5EQkdWQUxVRSAndHNDb2RlJywgdHNDb2RlXHJcbmFuYWx5c2lzIDo9IGFuYWx5emUgdHNDb2RlLCBoT3B0aW9uc1xyXG5cclxuaWYgZmxhZygndicpXHJcblx0RFVNUCB0b05pY2UoYW5hbHlzaXMpLCAnQU5BTFlTSVMnXHJcbmVsc2VcclxuXHREVU1QIGFuYWx5c2lzLmFzU3RyaW5nKCksICdBTkFMWVNJUydcclxuIl19