# coverage.cmd.civet

import {words, strToHash} from 'llutils'
import {getCmdArgs} from 'utils'
import {LOG, LOGVALUE, DBG} from 'logger'
import {
	allExportsIn, allUnitTestsIn, mergeAnalyses, dumpSymbols,
	} from 'analyze'

lValidStubs: string[] := words(
	'datatypes llutils logger text-table indent pll fs',
	'symbols exec cielo compile utils analyze v8-stack unit-test'
	)

# ---------------------------------------------------------------------------
# ASYNC !

analyze := (stub: string): void =>

	DBG "stub = #{stub}"

	libPath := "src/lib/#{stub}.lib.civet"
	lExports := await Array.fromAsync(allExportsIn(libPath))

	testPath := "test/#{stub}.lib.test.civet"
	lTestLabels := await Array.fromAsync(allUnitTestsIn(testPath))

	lFinal := mergeAnalyses lExports, lTestLabels
	LOG ''
	numMissing := dumpSymbols "Symbols in #{stub}", lFinal
	if (numMissing == 0)
		LOG "OK"
	else
		LOG "#{numMissing} missing"
	LOG ''
	return

# ---------------------------------------------------------------------------

hArgs := getCmdArgs()

lStubs := hArgs._
if (lStubs.length == 0)
	for stub of lValidStubs
		await analyze(stub)
else
	for stub of lStubs
		await analyze(stub)
