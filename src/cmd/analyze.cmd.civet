# analyze.cmd.civet

import {
	undef, defined, notdefined, slurp, stdChecks,
	DIR, flag, nonOption,
	assert, croak, findFile, fileExt,
	} from 'base-utils'
import {assertIsDefined} from 'datatypes'
import {pushLogLevel, popLogLevel} from 'log-levels'
import {LOG, DBG, DBGVALUE} from 'logger'
import {getCmdArgs} from 'cmd-args'
import {toNice, DUMP} from 'to-nice'
import {ts2ast, astAsString, analyze} from 'typescript'
import {civet2ast, civet2ts} from 'civet'

stdChecks()
[hArgs, lNonOptions] := getCmdArgs {
	_: {
		desc: "name of file to analyze"
		range: [0,1]
		}
	t: 'debug walk of AST'
	d: 'dump AST'
	v: 'dump verbose analysis'
	}

# ---------------------------------------------------------------------------

pushLogLevel 'info'    # --- temp disable debugging

fileName := (lNonOptions.length == 1) ? lNonOptions[0] : 'ast.civet'
path := (
	if fileName.match(/[\\\/]/)
		fileName
	else
		findFile(fileName)
	)
assertIsDefined path

LOG "-----  ANALYZE #{path}  -----"

popLogLevel()

tsCode := switch fileExt(path)
	when 'ts'
		slurp(path)
	when '.civet'
		civet2ts(slurp(path))
	else
		croak "Bad path: #{path}"

hOptions := {
	dump: hArgs.d
	trace: hArgs.t
	}

analysis := analyze tsCode, hOptions

if flag('v')
	DUMP toNice(analysis), 'ANALYSIS'
else
	DUMP analysis.asString(), 'ANALYSIS'
