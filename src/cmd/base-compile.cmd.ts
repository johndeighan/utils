"use strict";
// base-compile.cmd.civet

type AutoPromise<T> = Promise<Awaited<T>>;
import {relative, parse} from 'node:path'
import {existsSync} from 'jsr:@std/fs'
import {statSync} from 'node:fs'

import {
	croak, assert, flag, checkSetup,
	parsePath, relpath, LOG, LLOG,
	undef, defined, notdefined, procFiles,
	cmdSucceeds, newerDestFileExists, execCmd,
	} from 'base-utils'

checkSetup()

// ---------------------------------------------------------------------------

const verbose = flag('v')
if (verbose) {
	LOG(`verbose = ${verbose}`)
}

const clearFirst = flag('c')
if (verbose) {
	LOG(`clearFirst = ${clearFirst}`)
}

// ---------------------------------------------------------------------------
//     CONFIGURATION
// ---------------------------------------------------------------------------

type TCmdDesc = [string, string[]]
type TConfig = {[ext: string]: TCmdDesc}
const hConfig: TConfig = {}

if (cmdSucceeds('civet', ['--version'])) {
	hConfig['.civet'] = [
		'deno',
		[
			'run',
			'-A',
			'npm:@danielx/civet',
			'--inline-map',
			'-o', '.ts',
			'-c', '%PATH'
			]
		]
}

if (cmdSucceeds('coffee', ['--version'])) {
	hConfig['.coffee'] = [
		'deno',
		[
			'run',
			'-A',
			'npm:@danielx/civet',
			'--inline-map',
			'-c', '%PATH'
			]
		]
}

const lExt = Object.keys(hConfig)
if (lExt.length === 0) {
	croak("No TypeScript generating functions installed")
}

LOG(`Handling ${lExt.length} TypeScript generating functions`)
const extPat = '{' + (lExt.map((x) => x.substring(1)).join(',')) + '}'
LOG(`extPat is '${extPat}'`)

// ---------------------------------------------------------------------------

const getHandler = (
		ext: string
		): TCmdDesc => {

	if (!hConfig.hasOwnProperty(ext)) {
		croak(`Can't handle ${ext}`)
	}
	return hConfig[ext]
}

// ---------------------------------------------------------------------------
// ---------------------------------------------------------------------------
//
// 1. If the '-c' flag is used, remove all:
//    - *.ts files except:
//         base-utils.lib.ts
//         base-compile.cmd.ts
//    - *.temp.* files
//    - log files
// 2. compile all *.civet or *.coffee files
//      unless a newer *.ts file exists
// 3. run all unit tests, i.e. *.test.ts files

// ---------------------------------------------------------------------------
// ASYNC
//
// --- Throws exception if compile fails
//     returns path if file actually compiled, else undef

const compileOneFile = async (
		path: string
		): Promise<(string | undefined)> => {

	const {ext} = parsePath(path)
	if ((ext === '.ts') || newerDestFileExists(path, '.ts')) {
		return Promise.resolve(undef)
	}  // --- compile not needed

	const [cmdName, lArgs] = getHandler(ext)
	LLOG('COMPILE', relpath(path))
	const {success} = await execCmd(cmdName, lArgs, {'%PATH': path})
	if (!success) {
		croak(`Compile of ${path} failed`)
	}
	return Promise.resolve(path)
}

// ---------------------------------------------------------------------------
// ASYNC

const compileFiles = async (
		lPatterns: string | string[]
		): AutoPromise<string[]> => {

	const [hCompiled, hFailed] = await procFiles(lPatterns, compileOneFile)
	if (defined(hFailed)) {
		// --- check if any compilations failed
		const lBadPaths = Object.keys(hFailed)
		if (lBadPaths.length > 0) {
			LOG("FAILED TO COMPILE:")
			for (const path of lBadPaths) {
				LOG(`   ${path}`)
			}
			Deno.exit(99)
		}
	}
	return Object.keys(hCompiled).filter((x) => defined(x))
}

// ---------------------------------------------------------------------------
// ASYNC
//
// --- Throws exception if test fails

const runOneTest = async (
		testPath: string       // --- always *.test.ts
		): Promise<void> => {

	// --- deno test -qA src/test/base-utils.lib.test.ts
	const {success} = await execCmd('deno', ['test', '-qA', '%PATH'],
			{'%PATH': testPath})
	assert(success, `Test of ${testPath} failed`)
	return
}

// ---------------------------------------------------------------------------
//               MAIN CODE
// ---------------------------------------------------------------------------

if (clearFirst) {
	LOG('=====  removing TypeScript/temp/log files  =====')

	const removeOneFile = async (path: string): Promise<(string | undefined)> => {
		try {
			await Deno.remove(path)
			return Promise.resolve(path)
		}
		catch (err) {
			if (!(err instanceof Deno.errors.NotFound)) {
				// --- Re-throw other types of errors
				throw err
			}
		}
	}

	const [hSucceeded, hFailed] = await procFiles([
		'**/*.ts',
		'**/*.temp.*',
		'../logs/**/*',
		'! **/base-compile.cmd.ts',
		'! **/base-utils.lib.ts'
		], removeOneFile)

	if (hFailed) {
		const lFailed = Object.keys(hFailed)
		if (verbose) {
			for (const path of lFailed) {
				LLOG("FAILED", path)
			}
		}
		else {
			LOG(`   ${lFailed.length} compile fails`)
		}
		Deno.exit(99)
	}

	const lRemoved = Object.keys(hSucceeded)
	if (verbose) {
		for (const path of lRemoved) {
			LLOG("REMOVE", relpath(path))
		}
	}
	else {
		LOG(`   ${lRemoved.length} files removed`)
	}
}

// --- Compile libs, tests and cmds
const lPaths: string[] = await compileFiles(['**/*.#{extPat}'])

// --- Show compiled files
if (verbose) {
	for (const path of lPaths) {
		LLOG('COMPILE', path)
	}
}
else {
	LOG(`COMPILE ${lPaths.length} files`)
}

await procFiles("**/*.test.ts", runOneTest)

//# sourceMappingURL=data:application/json;base64,