# build-dot-symbols.cmd.civet

import {
	undef, assert, hash, isEmpty, nonEmpty,
	} from 'datatypes'
import {getOptions, OL} from 'llutils'
import {LOG, DBG, WARN, LOGVALUE, DBGVALUE} from 'logger'
import {barf, allFilesMatching} from 'fsys'
import {allExportsInFile} from 'typescript'

# ---------------------------------------------------------------------------
# --- ASYNC GENERATOR

export getDotSymbolsLines := (
		path: string,
		hOptions: hash={}
		): AsyncGenerator<string, void, void> ->

	type opt = {
		oneIndent: string
		maxLineLen: number
		}
	{oneIndent, maxLineLen} := getOptions<opt> hOptions, {
		oneIndent: '\t'
		maxLineLen: 75
		}
	lSymbols: string[] := []
	let lineLen = 0     # --- always <= maxLineLen
	let pathYielded = false

	for await {name, kind} of allExportsInFile(path)
		pos := name.indexOf('<')
		sym := (pos == -1) ? name : name.substring(0, pos)
		if (lineLen + sym.length + 1 > maxLineLen)
			if not pathYielded
				yield path.replace('.civet', '.ts')
				pathYielded = true
			yield "#{oneIndent}#{lSymbols.join(' ')}"
			lSymbols.length = 0
			lineLen = 0
		else
			lSymbols.push sym
			lineLen += sym.length + 1
	if (lSymbols.length > 0)
		if not pathYielded
			yield path.replace('.civet', '.ts')
			pathYielded = true
		yield "#{oneIndent}#{lSymbols.join(' ')}"
	return

# ---------------------------------------------------------------------------

export getDotSymbols := (
	hOptions: hash={}
	): AsyncGenerator<string, void, void> ->

	for {type, relPath} of allFilesMatching('**/*.lib.civet')
		assert (type == 'file'), "Not a file: #{relPath}"
		DBG "GET symbols from: #{relPath}"
		for await line of getDotSymbolsLines(relPath)
			yield line
	return

# ---------------------------------------------------------------------------

lLines := await Array.fromAsync(getDotSymbols())
contents := lLines.join('\n')
DBGVALUE 'contents', contents
barf 'src/.symbols', contents
