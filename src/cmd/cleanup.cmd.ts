"use strict";
// cleanup.cmd.civet

import {expandGlobSync} from '@std/fs/expand-glob'
import pathLib from 'node:path'
import {existsSync} from '@std/fs'

// ---------------------------------------------------------------------------

const relpath = (path: string) => {

	return pathLib.relative('', path).replaceAll('\\', '/')
}

// ---------------------------------------------------------------------------

const rootDir: (string | undefined) = Deno.env.get('PROJECT_ROOT_DIR')
if (rootDir === undefined) {
	console.log("Please set env var PROJECT_ROOT_DIR")
	Deno.exit()
}

const listOnly = (Deno.args[0] !== undefined)

const lFiles: string[] = []
for (const pattern of [
		'**/*.js',
		'compile.config.ts',
		'src/**/*.ts',
		'src/**/*.temp.*',
		'test/**/*.ts',
		'test/**/*.temp.*',
		'logs/logs.txt'
		]) {
	const hGlobOptions = {
		exclude: [
			'node_modules/**',
			'.git/**',
			'src/cmd/cleanup.cmd.ts',
			'test/temp.ts'
			],
		includeDirs: false
		}

	for (const {path} of expandGlobSync(pattern, hGlobOptions)) {
		lFiles.push(path)
	}
}

if (lFiles.length === 0) {
	console.log("No files to remove")
}
else {
	for (const path of lFiles) {
		if (listOnly || path.match(/cleanup\.cmd\.ts/)) {
			console.log(`WOULD REMOVE: '${path}'`)
		}
		else if (existsSync(path)) {
			console.log(`REMOVE: '${path}'`)
			Deno.removeSync(path)
		}
	}
	console.log(`${lFiles.length} files removed`)
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3JjL2NtZC9jbGVhbnVwLmNtZC5jaXZldC50c3giLCJzb3VyY2VzIjpbInNyYy9jbWQvY2xlYW51cC5jbWQuY2l2ZXQiXSwibWFwcGluZ3MiOiI7QUFBQSxvQkFBbUI7QUFDbkIsQUFBQTtBQUNBLEFBQUEsTUFBTSxDQUFDLENBQUMsY0FBYyxDQUFDLENBQUMsSUFBSSxDQUFDLHFCQUFxQjtBQUNsRCxBQUFBLEFBQUEsTUFBTSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsV0FBVztBQUMvQixBQUFBLEFBQUEsTUFBTSxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVM7QUFDbEMsQUFBQTtBQUNBLEFBQUEsOEVBQTZFO0FBQzdFLEFBQUE7QUFDQSxBQUFBLEFBQU8sTUFBUCxPQUFPLENBQUMsQ0FBRSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFBLENBQUE7QUFDNUIsQUFBQTtBQUNBLEFBQUEsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUMsR0FBRyxDO0FBQUMsQ0FBQTtBQUN4RCxBQUFBO0FBQ0EsQUFBQSw4RUFBNkU7QUFDN0UsQUFBQTtBQUNBLEFBQUEsQUFBZ0IsTUFBaEIsT0FBTyxDLEMsQ0FBQyxBQUFDLE0sWSxDQUFPLENBQUMsQ0FBRSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLGtCQUFrQixDQUFDO0FBQ3BELEFBQUEsQUFBQSxHQUFHLENBQUMsT0FBTyxDQUFDLEdBQUUsQ0FBQyxTQUFTLENBQUMsQ0FBQSxDQUFBO0FBQ3pCLEFBQUEsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFBLEFBQUMscUNBQXFDLENBQUE7QUFDbEQsQUFBQSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQztBQUFDLENBQUE7QUFDWixBQUFBO0FBQ0EsQUFBQSxBQUFRLE1BQVIsUUFBUSxDQUFDLENBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRSxDQUFDLFNBQVMsQ0FBQztBQUN2QyxBQUFBO0FBQ0EsQUFBQSxBQUFnQixNQUFoQixNQUFNLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUUsQ0FBQyxDQUFDLENBQUM7QUFDdEIsQUFBQSxBQUFBLEdBQUcsQ0FBQyxDQUFBLE1BQUEsT0FBTyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQ2hCLEFBQUEsRUFBRSxTQUFTLENBQUE7QUFDWCxBQUFBLEVBQUUsbUJBQW1CLENBQUE7QUFDckIsQUFBQSxFQUFFLGFBQWEsQ0FBQTtBQUNmLEFBQUEsRUFBRSxpQkFBaUIsQ0FBQTtBQUNuQixBQUFBLEVBQUUsY0FBYyxDQUFBO0FBQ2hCLEFBQUEsRUFBRSxrQkFBa0IsQ0FBQTtBQUNwQixBQUFBLEVBQUUsZUFBZTtBQUNqQixBQUFBLEVBQUUsQ0FBQyxDQUFBLENBQUEsQ0FBQTtBQUNILEFBQUEsQ0FBYSxNQUFaLFlBQVksQ0FBQyxDQUFFLENBQUMsQ0FBQztBQUNsQixBQUFBLEVBQUUsT0FBTyxDQUFDLENBQUMsQ0FBQztBQUNaLEFBQUEsR0FBRyxpQkFBaUIsQ0FBQTtBQUNwQixBQUFBLEdBQUcsU0FBUyxDQUFBO0FBQ1osQUFBQSxHQUFHLHdCQUF3QixDQUFBO0FBQzNCLEFBQUEsR0FBRyxjQUFjO0FBQ2pCLEFBQUEsR0FBRyxDQUFDLENBQUE7QUFDSixBQUFBLEVBQUUsV0FBVyxDQUFDLENBQUMsS0FBSztBQUNwQixFQUFFLENBQUM7QUFDSCxBQUFBO0FBQ0EsQUFBQSxDQUFDLEdBQUcsQ0FBQyxDQUFBLE1BQUEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsY0FBYyxDQUFDLE9BQU8sQ0FBQyxDQUFDLFlBQVksQ0FBQyxDQUFBLENBQUEsQ0FBQTtBQUNwRCxBQUFBLEVBQUUsTUFBTSxDQUFDLElBQUksQ0FBQSxBQUFDLElBQUksQztDQUFBLEM7QUFBQSxDQUFBO0FBQ2xCLEFBQUE7QUFDQSxBQUFBLEFBQUEsR0FBRyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsR0FBRSxDQUFDLENBQUMsQ0FBQyxDQUFBLENBQUE7QUFDdkIsQUFBQSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUEsQUFBQyxvQkFBb0IsQztBQUFBLENBQUE7QUFDakMsQUFBQSxBQUFBLElBQUksQ0FBQSxDQUFBO0FBQ0osQUFBQSxDQUFDLEdBQUcsQ0FBQyxDQUFBLE1BQUEsSUFBSSxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUEsQ0FBQSxDQUFBO0FBQ25CLEFBQUEsRUFBRSxHQUFHLENBQUEsUUFBUSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLGtCQUFrQixDQUFDLENBQUEsQ0FBQSxDQUFBO0FBQy9DLEFBQUEsR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFBLEFBQUMsQ0FBQyxlQUFlLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxDO0VBQUEsQ0FBQTtBQUN4QyxBQUFBLEVBQUUsSUFBSSxDQUFDLEdBQUcsQ0FBQSxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUEsQ0FBQSxDQUFBO0FBQzFCLEFBQUEsR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFBLEFBQUMsQ0FBQyxTQUFTLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFBO0FBQ2xDLEFBQUEsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFBLEFBQUMsSUFBSSxDO0VBQUEsQztDQUFBLENBQUE7QUFDdkIsQUFBQSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUEsQUFBQyxDQUFDLEVBQUUsTUFBTSxDQUFDLE1BQU0sQ0FBQyxjQUFjLENBQUMsQztBQUFBLENBQUE7QUFDN0MiLCJuYW1lcyI6W10sInNvdXJjZXNDb250ZW50IjpbIiMgY2xlYW51cC5jbWQuY2l2ZXRcblxuaW1wb3J0IHtleHBhbmRHbG9iU3luY30gZnJvbSAnQHN0ZC9mcy9leHBhbmQtZ2xvYidcbmltcG9ydCBwYXRoTGliIGZyb20gJ25vZGU6cGF0aCdcbmltcG9ydCB7ZXhpc3RzU3luY30gZnJvbSAnQHN0ZC9mcydcblxuIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxucmVscGF0aCA6PSAocGF0aDogc3RyaW5nKSA9PlxuXG5cdHJldHVybiBwYXRoTGliLnJlbGF0aXZlKCcnLCBwYXRoKS5yZXBsYWNlQWxsKCdcXFxcJywgJy8nKVxuXG4jIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG5yb290RGlyOiBzdHJpbmc/IDo9IERlbm8uZW52LmdldCgnUFJPSkVDVF9ST09UX0RJUicpXG5pZiAocm9vdERpciA9PSB1bmRlZmluZWQpXG5cdGNvbnNvbGUubG9nIFwiUGxlYXNlIHNldCBlbnYgdmFyIFBST0pFQ1RfUk9PVF9ESVJcIlxuXHREZW5vLmV4aXQoKVxuXG5saXN0T25seSA6PSAoRGVuby5hcmdzWzBdICE9IHVuZGVmaW5lZClcblxubEZpbGVzOiBzdHJpbmdbXSA6PSBbXVxuZm9yIHBhdHRlcm4gb2YgW1xuXHRcdCcqKi8qLmpzJ1xuXHRcdCdjb21waWxlLmNvbmZpZy50cydcblx0XHQnc3JjLyoqLyoudHMnXG5cdFx0J3NyYy8qKi8qLnRlbXAuKidcblx0XHQndGVzdC8qKi8qLnRzJ1xuXHRcdCd0ZXN0LyoqLyoudGVtcC4qJ1xuXHRcdCdsb2dzL2xvZ3MudHh0J1xuXHRcdF1cblx0aEdsb2JPcHRpb25zIDo9IHtcblx0XHRleGNsdWRlOiBbXG5cdFx0XHQnbm9kZV9tb2R1bGVzLyoqJ1xuXHRcdFx0Jy5naXQvKionXG5cdFx0XHQnc3JjL2NtZC9jbGVhbnVwLmNtZC50cydcblx0XHRcdCd0ZXN0L3RlbXAudHMnXG5cdFx0XHRdXG5cdFx0aW5jbHVkZURpcnM6IGZhbHNlXG5cdFx0fVxuXG5cdGZvciB7cGF0aH0gb2YgZXhwYW5kR2xvYlN5bmMocGF0dGVybiwgaEdsb2JPcHRpb25zKVxuXHRcdGxGaWxlcy5wdXNoIHBhdGhcblxuaWYgKGxGaWxlcy5sZW5ndGggPT0gMClcblx0Y29uc29sZS5sb2cgXCJObyBmaWxlcyB0byByZW1vdmVcIlxuZWxzZVxuXHRmb3IgcGF0aCBvZiBsRmlsZXNcblx0XHRpZiBsaXN0T25seSB8fCBwYXRoLm1hdGNoKC9jbGVhbnVwXFwuY21kXFwudHMvKVxuXHRcdFx0Y29uc29sZS5sb2cgXCJXT1VMRCBSRU1PVkU6ICcje3BhdGh9J1wiXG5cdFx0ZWxzZSBpZiBleGlzdHNTeW5jKHBhdGgpXG5cdFx0XHRjb25zb2xlLmxvZyBcIlJFTU9WRTogJyN7cGF0aH0nXCJcblx0XHRcdERlbm8ucmVtb3ZlU3luYyBwYXRoXG5cdGNvbnNvbGUubG9nIFwiI3tsRmlsZXMubGVuZ3RofSBmaWxlcyByZW1vdmVkXCJcbiJdfQ==