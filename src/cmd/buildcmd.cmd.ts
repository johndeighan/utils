"use strict";
// buildcmd.cmd.civet

import {
	nonOption, FAIL, tryCmd, civet2tsFile, flag, assert, stdChecks,
	doUnitTest, doInstallCmd, parsePath, allFilesMatching,
	} from 'base-utils'

stdChecks()    // --- clear screen if last arg is '!'
const stub = nonOption(0) || FAIL("USAGE: buildcmd <stub> [-n]")

// ---------------------------------------------------------------------------
// --- install before running unit tests
//     since unit test may require command to be installed

if (stub === 'all') {
	for (const path of allFilesMatching('cmd/*.cmd.civet')) {
		const {stub, purpose} = parsePath(path)
		assert((purpose === 'cmd'), `Not a cmd: ${path}`)
		await tryCmd(civet2tsFile, stub, 'cmd')
		if (!flag('n')) {
			await tryCmd(doInstallCmd, stub, 'cmd')
			await tryCmd(doUnitTest, stub, 'cmd')
		}
	}
}
else {
	await tryCmd(civet2tsFile, stub, 'cmd')
	if (!flag('n')) {
		await tryCmd(doInstallCmd, stub, 'cmd')
		await tryCmd(doUnitTest, stub, 'cmd')
	}
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3JjL2NtZC9idWlsZGNtZC5jbWQuY2l2ZXQudHN4Iiwic291cmNlcyI6WyJzcmMvY21kL2J1aWxkY21kLmNtZC5jaXZldCJdLCJtYXBwaW5ncyI6IjtBQUFBLHFCQUFvQjtBQUNwQixBQUFBO0FBQ0EsQUFBQSxNQUFNLENBQUMsQ0FBQztBQUNSLENBQUMsU0FBUyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsWUFBWSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsU0FBUyxDQUFDO0FBQ2hFLENBQUMsVUFBVSxDQUFDLENBQUMsWUFBWSxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsZ0JBQWdCLENBQUM7QUFDdkQsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFlBQVk7QUFDcEIsQUFBQTtBQUNBLEFBQUEsQUFBQSxTQUFTLENBQUMsQ0FBQyxJQUFJLHNDQUFxQztBQUNwRCxBQUFBLEFBQUksTUFBSixJQUFJLENBQUMsQ0FBRSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLDZCQUE2QixDQUFDO0FBQzNELEFBQUE7QUFDQSxBQUFBLDhFQUE2RTtBQUM3RSxBQUFBLHdDQUF1QztBQUN2QyxBQUFBLDBEQUF5RDtBQUN6RCxBQUFBO0FBQ0EsQUFBQSxBQUFBLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRSxDQUFDLEtBQUssQ0FBQyxDQUFBLENBQUE7QUFDbEIsQUFBQSxDQUFDLEdBQUcsQ0FBQyxDQUFBLE1BQUEsSUFBSSxDQUFDLEVBQUUsQ0FBQyxnQkFBZ0IsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFBLENBQUEsQ0FBQTtBQUNoRCxBQUFBLEVBQWlCLE1BQWYsQ0FBQyxJQUFJLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFFLENBQUMsU0FBUyxDQUFBLEFBQUMsSUFBSSxDQUFBO0FBQ25DLEFBQUEsRUFBRSxNQUFNLENBQUEsQUFBQyxDQUFDLE9BQU8sQ0FBQyxHQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLFdBQVcsRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFBO0FBQ2pELEFBQUEsRUFBRSxLQUFLLENBQUMsTUFBTSxDQUFBLEFBQUMsWUFBWSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsS0FBSyxDQUFBO0FBQ3hDLEFBQUEsRUFBRSxHQUFHLENBQUEsQ0FBSSxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUEsQ0FBQSxDQUFBO0FBQ2xCLEFBQUEsR0FBRyxLQUFLLENBQUMsTUFBTSxDQUFBLEFBQUMsWUFBWSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsS0FBSyxDQUFBO0FBQ3pDLEFBQUEsR0FBRyxLQUFLLENBQUMsTUFBTSxDQUFBLEFBQUMsVUFBVSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsS0FBSyxDO0VBQUEsQztDQUFBLEM7QUFBQSxDQUFBO0FBQ3ZDLEFBQUEsQUFBQSxJQUFJLENBQUEsQ0FBQTtBQUNKLEFBQUEsQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFBLEFBQUMsWUFBWSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsS0FBSyxDQUFBO0FBQ3ZDLEFBQUEsQ0FBQyxHQUFHLENBQUEsQ0FBSSxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUEsQ0FBQSxDQUFBO0FBQ2pCLEFBQUEsRUFBRSxLQUFLLENBQUMsTUFBTSxDQUFBLEFBQUMsWUFBWSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsS0FBSyxDQUFBO0FBQ3hDLEFBQUEsRUFBRSxLQUFLLENBQUMsTUFBTSxDQUFBLEFBQUMsVUFBVSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsS0FBSyxDO0NBQUEsQztBQUFBLENBQUE7QUFDdEMiLCJuYW1lcyI6W10sInNvdXJjZXNDb250ZW50IjpbIiMgYnVpbGRjbWQuY21kLmNpdmV0XHJcblxyXG5pbXBvcnQge1xyXG5cdG5vbk9wdGlvbiwgRkFJTCwgdHJ5Q21kLCBjaXZldDJ0c0ZpbGUsIGZsYWcsIGFzc2VydCwgc3RkQ2hlY2tzLFxyXG5cdGRvVW5pdFRlc3QsIGRvSW5zdGFsbENtZCwgcGFyc2VQYXRoLCBhbGxGaWxlc01hdGNoaW5nLFxyXG5cdH0gZnJvbSAnYmFzZS11dGlscydcclxuXHJcbnN0ZENoZWNrcygpICAgICMgLS0tIGNsZWFyIHNjcmVlbiBpZiBsYXN0IGFyZyBpcyAnISdcclxuc3R1YiA6PSBub25PcHRpb24oMCkgfHwgRkFJTChcIlVTQUdFOiBidWlsZGNtZCA8c3R1Yj4gWy1uXVwiKVxyXG5cclxuIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuIyAtLS0gaW5zdGFsbCBiZWZvcmUgcnVubmluZyB1bml0IHRlc3RzXHJcbiMgICAgIHNpbmNlIHVuaXQgdGVzdCBtYXkgcmVxdWlyZSBjb21tYW5kIHRvIGJlIGluc3RhbGxlZFxyXG5cclxuaWYgKHN0dWIgPT0gJ2FsbCcpXHJcblx0Zm9yIHBhdGggb2YgYWxsRmlsZXNNYXRjaGluZygnY21kLyouY21kLmNpdmV0JylcclxuXHRcdHtzdHViLCBwdXJwb3NlfSA6PSBwYXJzZVBhdGggcGF0aFxyXG5cdFx0YXNzZXJ0IChwdXJwb3NlID09ICdjbWQnKSwgXCJOb3QgYSBjbWQ6ICN7cGF0aH1cIlxyXG5cdFx0YXdhaXQgdHJ5Q21kIGNpdmV0MnRzRmlsZSwgc3R1YiwgJ2NtZCdcclxuXHRcdGlmIG5vdCBmbGFnKCduJylcclxuXHRcdFx0YXdhaXQgdHJ5Q21kIGRvSW5zdGFsbENtZCwgc3R1YiwgJ2NtZCdcclxuXHRcdFx0YXdhaXQgdHJ5Q21kIGRvVW5pdFRlc3QsIHN0dWIsICdjbWQnXHJcbmVsc2VcclxuXHRhd2FpdCB0cnlDbWQgY2l2ZXQydHNGaWxlLCBzdHViLCAnY21kJ1xyXG5cdGlmIG5vdCBmbGFnKCduJylcclxuXHRcdGF3YWl0IHRyeUNtZCBkb0luc3RhbGxDbWQsIHN0dWIsICdjbWQnXHJcblx0XHRhd2FpdCB0cnlDbWQgZG9Vbml0VGVzdCwgc3R1YiwgJ2NtZCdcclxuIl19