"use strict";
// compile.cmd.civet

import {
	undef, defined, notdefined, pass, OL, assert, croak,
	getCmdArgs, watchFiles, allFilesMatching,
	DBG, LOG, WARN, ERR,
	getCompilerGlobPattern, compileFile, TCompileResult,
	} from '../lib/utils.lib.ts'

const {_, w: watch} = getCmdArgs({
	_: `files to compile, as one of the following:
	'<stub>.lib'  - file <stub>.lib.<ext>
	'<stub>.cmd'  - file <stub>.cmd.<ext>
	'<stub>.lib.test'  - file <stub>.lib.test.<ext>
	'<stub>.cmd.test'  - file <stub>.cmd.test.<ext>
	- a full or relative file path
where <ext> is a valid extension to compile`,
	w:    "watch for and recompile files if they change"
	})

let numCompiled = 0

// ---------------------------------------------------------------------------

const logResult = (hResult: TCompileResult): void => {

	const {path, status} = hResult
	switch(status) {
		case 'compiled': {
			LOG(`COMPILED: ${OL(path)}`)
			numCompiled += 1;break;
		}
		case 'exists': {
			pass();break;
		}
		default: {
			ERR(`NOT COMPILED: ${OL(path)}`)
		}
	}
	return
}

// ---------------------------------------------------------------------------

if (_.length === 0) {
	const pattern = getCompilerGlobPattern()
	DBG("=====  Compiling all files  =====")
	DBG(`   pattern = ${OL(pattern)}`)
	for (const {path} of allFilesMatching(pattern)) {
		const hResult = compileFile(path)
		logResult(hResult)
	}
}

else {
	// --- Files can be specified as:
	//        - <stub>.(lib|cmd)
	//        - <stub>.(lib|cmd).test
	//        - a full or relative path
	//     Multiple files can be comma-separated

	for (const item of _) {const str: string = item;
		DBG(`non-option: ${OL(str)}`)
		for (const item1 of str.split(',')) {const str: string = item1;
			let ref;let ref1;if ((ref = str.match(/^([A-Za-z0-9_-]+)\.(lib|cmd)$/))) {const lMatches = ref;
				const [_, stub, purpose] = lMatches
				const pat = `**/${stub}.${purpose}.*`
				for (const {path} of allFilesMatching(pat)) {
					DBG(`compile file ${OL(path)}`)
					logResult(compileFile(path))
				}
			}
			else if ((ref1 = str.match(/^([A-Za-z0-9_-]+)\.(lib|cmd)\.test$/))) {const lMatches = ref1;
				const [_, stub, purpose] = lMatches
				const pat = `**/${stub}.${purpose}.test.*`
				for (const {path} of allFilesMatching(pat)) {
					DBG(`compile file ${OL(path)}`)
					logResult(compileFile(path))
				}
			}
			else {
				DBG(`compile file ${OL(str)}`)
				logResult(compileFile(str))
			}
		}
	}
}

LOG(`(${numCompiled} files compiled)`)

if (watch) {
	watchFiles(Deno.cwd(), ({kind, path}) => {
		console.log(`EVENT: ${kind} ${path}`)
		return false
	})
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,