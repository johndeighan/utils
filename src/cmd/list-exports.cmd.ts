"use strict";
// list-exports.cmd.civet

type AutoPromise<T> = Promise<Awaited<T>>;
import {
	getCmdArgs, words, LOG, TextTable,
	} from '../lib/utils.lib.ts'
import {allExportsIn} from '../lib/analyze.lib.ts'

const lValidStubs: string[] = words(
	'datatypes llutils logger text-table indent pll fs',
	'symbols exec cielo compile utils analyze v8-stack unit-test'
	)

// ---------------------------------------------------------------------------
// ASYNC !

const listExports = async (stub: string): AutoPromise<void> => {

	const libPath = `src/lib/${stub}.lib.civet`
	const lExports = await Array.fromAsync(allExportsIn(libPath))

	const tt = new  TextTable('l')
	tt.fullsep('-')
	tt.title(stub)
	tt.fullsep('-')
	for (const {name} of lExports) {
		tt.data([name])
	}
	tt.fullsep('-')
	LOG(tt.asString())
	return
}

// ---------------------------------------------------------------------------

const hArgs = getCmdArgs()

const lStubs = hArgs._
if (lStubs.length === 0) {
	for (const stub of lValidStubs) {
		await listExports(stub)
	}
}
else {
	for (const stub of lStubs) {
		await listExports(stub)
	}
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3JjL2NtZC9saXN0LWV4cG9ydHMuY21kLmNpdmV0LnRzeCIsInNvdXJjZXMiOlsic3JjL2NtZC9saXN0LWV4cG9ydHMuY21kLmNpdmV0Il0sIm1hcHBpbmdzIjoiO0FBQUEseUJBQXdCO0FBQ3hCLEFBQUE7QUFDQSxLLFcseUI7QUFBQSxNQUFNLENBQUMsQ0FBQztBQUNSLENBQUMsVUFBVSxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsU0FBUyxDQUFDO0FBQ25DLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxxQkFBcUI7QUFDN0IsQUFBQSxBQUFBLE1BQU0sQ0FBQyxDQUFDLFlBQVksQ0FBQyxDQUFDLElBQUksQ0FBQyx1QkFBdUI7QUFDbEQsQUFBQTtBQUNBLEFBQUEsQUFBcUIsTUFBckIsV0FBVyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFFLENBQUMsS0FBSyxDQUFDO0FBQy9CLEFBQUEsQ0FBQyxtREFBbUQsQ0FBQztBQUNyRCxBQUFBLENBQUMsNkRBQTZEO0FBQzlELENBQUMsQ0FBQztBQUNGLEFBQUE7QUFDQSxBQUFBLDhFQUE2RTtBQUM3RSxBQUFBLFVBQVM7QUFDVCxBQUFBO0FBQ0EsQUFBQSxBQUFXLE1BQVgsV0FBVyxDQUFDLENBQUUsQyxNQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsTUFBTSxDQUFDLEMsQyxXLENBQUMsQUFBQyxJLENBQUksQ0FBQyxFQUFFLENBQUEsQ0FBQTtBQUN0QyxBQUFBO0FBQ0EsQUFBQSxDQUFRLE1BQVAsT0FBTyxDQUFDLENBQUUsQ0FBQyxDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsVUFBVSxDQUFDO0FBQ3ZDLEFBQUEsQ0FBUyxNQUFSLFFBQVEsQ0FBQyxDQUFFLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0FBQ3pELEFBQUE7QUFDQSxBQUFBLENBQUcsTUFBRixFQUFFLENBQUMsQ0FBRSxDQUFDLEdBQUcsRUFBRSxTQUFTLENBQUMsR0FBRyxDQUFDO0FBQzFCLEFBQUEsQ0FBQyxFQUFFLENBQUMsT0FBTyxDQUFBLEFBQUMsR0FBRyxDQUFBO0FBQ2YsQUFBQSxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUEsQUFBQyxJQUFJLENBQUE7QUFDZCxBQUFBLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQSxBQUFDLEdBQUcsQ0FBQTtBQUNmLEFBQUEsQ0FBQyxHQUFHLENBQUMsQ0FBQSxNQUFBLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLFFBQVEsQ0FBQSxDQUFBLENBQUE7QUFDdkIsQUFBQSxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUEsQUFBQyxDQUFDLElBQUksQ0FBQyxDO0NBQUEsQ0FBQTtBQUNoQixBQUFBLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQSxBQUFDLEdBQUcsQ0FBQTtBQUNmLEFBQUEsQ0FBQyxHQUFHLENBQUEsQUFBQyxFQUFFLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQTtBQUNsQixBQUFBLENBQUMsTTtBQUFNLENBQUE7QUFDUCxBQUFBO0FBQ0EsQUFBQSw4RUFBNkU7QUFDN0UsQUFBQTtBQUNBLEFBQUEsQUFBSyxNQUFMLEtBQUssQ0FBQyxDQUFFLENBQUMsVUFBVSxDQUFDLENBQUM7QUFDckIsQUFBQTtBQUNBLEFBQUEsQUFBTSxNQUFOLE1BQU0sQ0FBQyxDQUFFLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDakIsQUFBQSxBQUFBLEdBQUcsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLEdBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQSxDQUFBO0FBQ3ZCLEFBQUEsQ0FBQyxHQUFHLENBQUMsQ0FBQSxNQUFBLElBQUksQ0FBQyxFQUFFLENBQUMsV0FBVyxDQUFBLENBQUEsQ0FBQTtBQUN4QixBQUFBLEVBQUUsS0FBSyxDQUFDLFdBQVcsQ0FBQyxJQUFJLEM7Q0FBQyxDO0FBQUEsQ0FBQTtBQUN6QixBQUFBLEFBQUEsSUFBSSxDQUFBLENBQUE7QUFDSixBQUFBLENBQUMsR0FBRyxDQUFDLENBQUEsTUFBQSxJQUFJLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQSxDQUFBLENBQUE7QUFDbkIsQUFBQSxFQUFFLEtBQUssQ0FBQyxXQUFXLENBQUMsSUFBSSxDO0NBQUMsQztBQUFBLENBQUE7QUFDekIiLCJuYW1lcyI6W10sInNvdXJjZXNDb250ZW50IjpbIiMgbGlzdC1leHBvcnRzLmNtZC5jaXZldFxyXG5cclxuaW1wb3J0IHtcclxuXHRnZXRDbWRBcmdzLCB3b3JkcywgTE9HLCBUZXh0VGFibGUsXHJcblx0fSBmcm9tICcuLi9saWIvdXRpbHMubGliLnRzJ1xyXG5pbXBvcnQge2FsbEV4cG9ydHNJbn0gZnJvbSAnLi4vbGliL2FuYWx5emUubGliLnRzJ1xyXG5cclxubFZhbGlkU3R1YnM6IHN0cmluZ1tdIDo9IHdvcmRzKFxyXG5cdCdkYXRhdHlwZXMgbGx1dGlscyBsb2dnZXIgdGV4dC10YWJsZSBpbmRlbnQgcGxsIGZzJyxcclxuXHQnc3ltYm9scyBleGVjIGNpZWxvIGNvbXBpbGUgdXRpbHMgYW5hbHl6ZSB2OC1zdGFjayB1bml0LXRlc3QnXHJcblx0KVxyXG5cclxuIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuIyBBU1lOQyAhXHJcblxyXG5saXN0RXhwb3J0cyA6PSAoc3R1Yjogc3RyaW5nKTogdm9pZCA9PlxyXG5cclxuXHRsaWJQYXRoIDo9IFwic3JjL2xpYi8je3N0dWJ9LmxpYi5jaXZldFwiXHJcblx0bEV4cG9ydHMgOj0gYXdhaXQgQXJyYXkuZnJvbUFzeW5jKGFsbEV4cG9ydHNJbihsaWJQYXRoKSlcclxuXHJcblx0dHQgOj0gbmV3ICBUZXh0VGFibGUoJ2wnKVxyXG5cdHR0LmZ1bGxzZXAgJy0nXHJcblx0dHQudGl0bGUgc3R1YlxyXG5cdHR0LmZ1bGxzZXAgJy0nXHJcblx0Zm9yIHtuYW1lfSBvZiBsRXhwb3J0c1xyXG5cdFx0dHQuZGF0YSBbbmFtZV1cclxuXHR0dC5mdWxsc2VwICctJ1xyXG5cdExPRyB0dC5hc1N0cmluZygpXHJcblx0cmV0dXJuXHJcblxyXG4jIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cclxuaEFyZ3MgOj0gZ2V0Q21kQXJncygpXHJcblxyXG5sU3R1YnMgOj0gaEFyZ3MuX1xyXG5pZiAobFN0dWJzLmxlbmd0aCA9PSAwKVxyXG5cdGZvciBzdHViIG9mIGxWYWxpZFN0dWJzXHJcblx0XHRhd2FpdCBsaXN0RXhwb3J0cyhzdHViKVxyXG5lbHNlXHJcblx0Zm9yIHN0dWIgb2YgbFN0dWJzXHJcblx0XHRhd2FpdCBsaXN0RXhwb3J0cyhzdHViKVxyXG4iXX0=