"use strict";
// debug.cmd.civet

import {
	stdChecks, nonOption, FAIL, assert, allNonOptions,
	flag, LOG, execCmd,
	} from 'base-utils'

stdChecks()
const path = nonOption(0) || FAIL("USAGE: debug <path> ...args")
assert(path.endsWith('.ts'), "Only TypeScript files allowed")
const lArgs = Array.from(allNonOptions()).slice(1)

// ---------------------------------------------------------------------------

if (flag('d')) {
	LOG(`path = '${path}'`)
	let i1 = 0;for (const arg of lArgs) {const i = i1++;
		LOG(`arg[${i}] = '${arg}'`)
	}
}

const h = await execCmd('deno', [
	'run',
	'-A',
	'--inspect-brk',
	path,
	'--',
	...lArgs
	])

LOG(h.success ? 'OK' : 'FAILED')

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQzovVXNlcnMvam9obmQvdXRpbHMvc3JjL2NtZC9kZWJ1Zy5jbWQuY2l2ZXQudHN4Iiwic291cmNlcyI6WyJDOi9Vc2Vycy9qb2huZC91dGlscy9zcmMvY21kL2RlYnVnLmNtZC5jaXZldCJdLCJtYXBwaW5ncyI6IjtBQUFBLGtCQUFpQjtBQUNqQixBQUFBO0FBQ0EsQUFBQSxNQUFNLENBQUMsQ0FBQztBQUNSLENBQUMsU0FBUyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsYUFBYSxDQUFDO0FBQ25ELENBQUMsSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsT0FBTyxDQUFDO0FBQ3BCLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxZQUFZO0FBQ3BCLEFBQUE7QUFDQSxBQUFBLEFBQUEsU0FBUyxDQUFDLENBQUM7QUFDWCxBQUFBLEFBQUksTUFBSixJQUFJLENBQUMsQ0FBRSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLDZCQUE2QixDQUFDO0FBQzNELEFBQUEsQUFBQSxNQUFNLENBQUEsQUFBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsK0JBQStCLENBQUE7QUFDNUQsQUFBQSxBQUFLLE1BQUwsS0FBSyxDQUFDLENBQUUsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO0FBQzdDLEFBQUE7QUFDQSxBQUFBLDhFQUE2RTtBQUM3RSxBQUFBO0FBQ0EsQUFBQSxBQUFBLEdBQUcsQ0FBQSxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUEsQ0FBQSxDQUFBO0FBQ1osQUFBQSxDQUFDLEdBQUcsQ0FBQSxBQUFDLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQTtBQUN2QixBQUFBLEMsSSxFLEksQ0FBQyxHQUFHLENBQUMsQ0FBQSxNQUFBLEdBQUssQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFBLENBQUEsQ0FBVixNQUFBLEMsRyxFLEUsQ0FBVTtBQUNuQixBQUFBLEVBQUUsR0FBRyxDQUFBLEFBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLEtBQUssRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLEM7Q0FBQSxDO0FBQUEsQ0FBQTtBQUM1QixBQUFBO0FBQ0EsQUFBQSxBQUFDLE1BQUQsQ0FBQyxDQUFDLENBQUUsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFBLEFBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztBQUM1QixBQUFBLENBQUMsS0FBSyxDQUFBO0FBQ04sQUFBQSxDQUFDLElBQUksQ0FBQTtBQUNMLEFBQUEsQ0FBQyxlQUFlLENBQUE7QUFDaEIsQUFBQSxDQUFDLElBQUksQ0FBQTtBQUNMLEFBQUEsQ0FBQyxJQUFJLENBQUE7QUFDTCxBQUFBLENBQU0sR0FBTCxLQUFRO0FBQ1QsQUFBQSxDQUFDLENBQUMsQ0FBQTtBQUNGLEFBQUE7QUFDQSxBQUFBLEFBQUEsR0FBRyxDQUFBLEFBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUE7QUFDL0IiLCJuYW1lcyI6W10sInNvdXJjZXNDb250ZW50IjpbIiMgZGVidWcuY21kLmNpdmV0XHJcblxyXG5pbXBvcnQge1xyXG5cdHN0ZENoZWNrcywgbm9uT3B0aW9uLCBGQUlMLCBhc3NlcnQsIGFsbE5vbk9wdGlvbnMsXHJcblx0ZmxhZywgTE9HLCBleGVjQ21kLFxyXG5cdH0gZnJvbSAnYmFzZS11dGlscydcclxuXHJcbnN0ZENoZWNrcygpXHJcbnBhdGggOj0gbm9uT3B0aW9uKDApIHx8IEZBSUwoXCJVU0FHRTogZGVidWcgPHBhdGg+IC4uLmFyZ3NcIilcclxuYXNzZXJ0IHBhdGguZW5kc1dpdGgoJy50cycpLCBcIk9ubHkgVHlwZVNjcmlwdCBmaWxlcyBhbGxvd2VkXCJcclxubEFyZ3MgOj0gQXJyYXkuZnJvbShhbGxOb25PcHRpb25zKCkpLnNsaWNlKDEpXHJcblxyXG4jIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cclxuaWYgZmxhZygnZCcpXHJcblx0TE9HIFwicGF0aCA9ICcje3BhdGh9J1wiXHJcblx0Zm9yIGFyZyxpIG9mIGxBcmdzXHJcblx0XHRMT0cgXCJhcmdbI3tpfV0gPSAnI3thcmd9J1wiXHJcblxyXG5oIDo9IGF3YWl0IGV4ZWNDbWQgJ2Rlbm8nLCBbXHJcblx0J3J1bidcclxuXHQnLUEnXHJcblx0Jy0taW5zcGVjdC1icmsnXHJcblx0cGF0aFxyXG5cdCctLSdcclxuXHRsQXJncy4uLlxyXG5cdF1cclxuXHJcbkxPRyBoLnN1Y2Nlc3MgPyAnT0snIDogJ0ZBSUxFRCdcclxuIl19