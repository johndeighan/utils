"use strict";
// run-unit-test.civet

import {
	undef, assert, getCmdArgs, OL, relpath,
	runUnitTestsFor, runAllUnitTests,
	DBG, LOG, WARN, ERR,
	} from '../lib/utils.lib.ts'

const {_, w: watch} = getCmdArgs({
	w: {type: 'boolean'}
	})

// ---------------------------------------------------------------------------

if (_.length === 0) {
	DBG("Running all unit tests")
	for (const {stub, success, msg, code} of runAllUnitTests()) {
		if (!success) {
			if (msg === undef) {
				ERR(`UNIT TEST FAILED: ${stub}`)
			}
			else {
				ERR(`UNIT TEST FAILED: ${stub} - ${msg}`)
			}
		}
	}
}
else {
	DBG(`Running ${_.length} unit tests`)
	for (const stub of _) {
		// --- NOTE: runUnitTestsFor() ensures that lib/cmd file
		//           and unit test files are compiled
		for (const {success} of runUnitTestsFor(stub)) {
			if (!success) {
				ERR(`FAILED: Unit test ${stub}`)
			}
		}
	}
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3JjL2NtZC91dGVzdC5jbWQuY2l2ZXQudHN4Iiwic291cmNlcyI6WyJzcmMvY21kL3V0ZXN0LmNtZC5jaXZldCJdLCJtYXBwaW5ncyI6IjtBQUFBLHNCQUFxQjtBQUNyQixBQUFBO0FBQ0EsQUFBQSxNQUFNLENBQUMsQ0FBQztBQUNSLENBQUMsS0FBSyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDO0FBQ3hDLENBQUMsZUFBZSxDQUFDLENBQUMsZUFBZSxDQUFDO0FBQ2xDLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDO0FBQ3JCLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxxQkFBcUI7QUFDN0IsQUFBQTtBQUNBLEFBQUEsQUFBYSxNQUFiLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBRSxDQUFDLFVBQVUsQ0FBQSxBQUFDLENBQUM7QUFDN0IsQUFBQSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsU0FBUyxDQUFDO0FBQ3JCLENBQUMsQ0FBQyxDQUFBO0FBQ0YsQUFBQTtBQUNBLEFBQUEsOEVBQTZFO0FBQzdFLEFBQUE7QUFDQSxBQUFBLEFBQUEsR0FBRyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsR0FBRSxDQUFDLENBQUMsQ0FBQyxDQUFBLENBQUE7QUFDbEIsQUFBQSxDQUFDLEdBQUcsQ0FBQSxBQUFDLHdCQUF3QixDQUFBO0FBQzdCLEFBQUEsQ0FBQyxHQUFHLENBQUMsQ0FBQSxNQUFBLENBQUMsSUFBSSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUEsQ0FBQSxDQUFBO0FBQ3BELEFBQUEsRUFBRSxHQUFHLENBQUEsQ0FBSSxPQUFPLENBQUEsQ0FBQSxDQUFBO0FBQ2hCLEFBQUEsR0FBRyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQSxDQUFBO0FBQ3BCLEFBQUEsSUFBSSxHQUFHLENBQUEsQUFBQyxDQUFDLGtCQUFrQixFQUFFLElBQUksQ0FBQyxDQUFDLEM7R0FBQSxDQUFBO0FBQ25DLEFBQUEsR0FBRyxJQUFJLENBQUEsQ0FBQTtBQUNQLEFBQUEsSUFBSSxHQUFHLENBQUEsQUFBQyxDQUFDLGtCQUFrQixFQUFFLElBQUksQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUMsQztHQUFBLEM7RUFBQSxDO0NBQUEsQztBQUFBLENBQUE7QUFDNUMsQUFBQSxBQUFBLElBQUksQ0FBQSxDQUFBO0FBQ0osQUFBQSxDQUFDLEdBQUcsQ0FBQSxBQUFDLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLENBQUE7QUFDckMsQUFBQSxDQUFDLEdBQUcsQ0FBQyxDQUFBLE1BQUEsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUEsQ0FBQSxDQUFBO0FBQ2QsQUFBQSxFQUFFLHdEQUF1RDtBQUN6RCxBQUFBLEVBQUUsNkNBQTRDO0FBQzlDLEFBQUEsRUFBRSxHQUFHLENBQUMsQ0FBQSxNQUFBLENBQUMsT0FBTyxDQUFDLENBQUMsRUFBRSxDQUFDLGVBQWUsQ0FBQSxBQUFDLElBQUksQ0FBQSxDQUFBLENBQUEsQ0FBQTtBQUN2QyxBQUFBLEdBQUcsR0FBRyxDQUFBLENBQUksT0FBTyxDQUFBLENBQUEsQ0FBQTtBQUNqQixBQUFBLElBQUksR0FBRyxDQUFBLEFBQUMsQ0FBQyxrQkFBa0IsRUFBRSxJQUFJLENBQUMsQ0FBQyxDO0dBQUEsQztFQUFBLEM7Q0FBQSxDO0FBQUEsQ0FBQTtBQUNuQyIsIm5hbWVzIjpbXSwic291cmNlc0NvbnRlbnQiOlsiIyBydW4tdW5pdC10ZXN0LmNpdmV0XHJcblxyXG5pbXBvcnQge1xyXG5cdHVuZGVmLCBhc3NlcnQsIGdldENtZEFyZ3MsIE9MLCByZWxwYXRoLFxyXG5cdHJ1blVuaXRUZXN0c0ZvciwgcnVuQWxsVW5pdFRlc3RzLFxyXG5cdERCRywgTE9HLCBXQVJOLCBFUlIsXHJcblx0fSBmcm9tICcuLi9saWIvdXRpbHMubGliLnRzJ1xyXG5cclxue18sIHc6IHdhdGNofSA6PSBnZXRDbWRBcmdzIHtcclxuXHR3OiB7dHlwZTogJ2Jvb2xlYW4nfVxyXG5cdH1cclxuXHJcbiMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblxyXG5pZiAoXy5sZW5ndGggPT0gMClcclxuXHREQkcgXCJSdW5uaW5nIGFsbCB1bml0IHRlc3RzXCJcclxuXHRmb3Ige3N0dWIsIHN1Y2Nlc3MsIG1zZywgY29kZX0gb2YgcnVuQWxsVW5pdFRlc3RzKClcclxuXHRcdGlmIG5vdCBzdWNjZXNzXHJcblx0XHRcdGlmIChtc2cgPT0gdW5kZWYpXHJcblx0XHRcdFx0RVJSIFwiVU5JVCBURVNUIEZBSUxFRDogI3tzdHVifVwiXHJcblx0XHRcdGVsc2VcclxuXHRcdFx0XHRFUlIgXCJVTklUIFRFU1QgRkFJTEVEOiAje3N0dWJ9IC0gI3ttc2d9XCJcclxuZWxzZVxyXG5cdERCRyBcIlJ1bm5pbmcgI3tfLmxlbmd0aH0gdW5pdCB0ZXN0c1wiXHJcblx0Zm9yIHN0dWIgb2YgX1xyXG5cdFx0IyAtLS0gTk9URTogcnVuVW5pdFRlc3RzRm9yKCkgZW5zdXJlcyB0aGF0IGxpYi9jbWQgZmlsZVxyXG5cdFx0IyAgICAgICAgICAgYW5kIHVuaXQgdGVzdCBmaWxlcyBhcmUgY29tcGlsZWRcclxuXHRcdGZvciB7c3VjY2Vzc30gb2YgcnVuVW5pdFRlc3RzRm9yIHN0dWJcclxuXHRcdFx0aWYgbm90IHN1Y2Nlc3NcclxuXHRcdFx0XHRFUlIgXCJGQUlMRUQ6IFVuaXQgdGVzdCAje3N0dWJ9XCJcclxuIl19