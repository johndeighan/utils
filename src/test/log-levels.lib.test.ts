"use strict";
// log-levels.lib.test.civet

import {DBG} from 'logger'
import {getCmdArgs} from 'cmd-args'
import {
	TLogLevel, getLogLevel, isLogLevel, isInactiveLevel,
	setLogLevel, pushLogLevel, popLogLevel, resetLogLevel,
	} from 'log-levels'
import {
	equal, truthy, falsy, succeeds, fails, matches,
	isType, notType,
	} from 'unit-test'

// ---------------------------------------------------------------------------

DBG("getLogLevel()")

equal(getLogLevel(), 'info')

DBG("isInactiveLevel()")

truthy(isInactiveLevel('debug'))
falsy( isInactiveLevel('error'))

getCmdArgs()

// ---------------------------------------------------------------------------
// --- Possible log levels:
//        profile
//        debug
//        info
//        warn
//        error
//        silent
//        none
// --- All levels above the current level are inactive

// ---------------------------------------------------------------------------

DBG("type TLogLevel")

isType('TLogLevel', 'debug')
isType('TLogLevel', 'warn')
notType('TLogLevel', 'dummy')

DBG("isLogLevel()")

truthy(isLogLevel('info'))
truthy(isLogLevel('debug'))
falsy( isLogLevel('dummy'))

DBG("setLogLevel()")

setLogLevel('debug')
equal(getLogLevel(), 'debug')
falsy(isInactiveLevel('debug'))
setLogLevel('info')
equal(getLogLevel(), 'info')
truthy(isInactiveLevel('debug'))

DBG("pushLogLevel()")

pushLogLevel('error')
equal(getLogLevel(), 'error')
truthy(isInactiveLevel('info'))
truthy(isInactiveLevel('warn'))
falsy( isInactiveLevel('error'))

DBG("popLogLevel()")

popLogLevel()
equal(getLogLevel(), 'info')

DBG("resetLogLevel()")

setLogLevel('debug')
resetLogLevel()
equal(getLogLevel(), 'info')

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQzpcXFVzZXJzXFxqb2huZFxcdXRpbHNcXHNyY1xcdGVzdFxcbG9nLWxldmVscy5saWIudGVzdC5jaXZldC50c3giLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcam9obmRcXHV0aWxzXFxzcmNcXHRlc3RcXGxvZy1sZXZlbHMubGliLnRlc3QuY2l2ZXQiXSwibWFwcGluZ3MiOiI7QUFBQSw0QkFBMkI7QUFDM0IsQUFBQTtBQUNBLEFBQUEsTUFBTSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVE7QUFDMUIsQUFBQSxBQUFBLE1BQU0sQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFVO0FBQ25DLEFBQUEsQUFBQSxNQUFNLENBQUMsQ0FBQztBQUNSLENBQUMsU0FBUyxDQUFDLENBQUMsV0FBVyxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsZUFBZSxDQUFDO0FBQ3JELENBQUMsV0FBVyxDQUFDLENBQUMsWUFBWSxDQUFDLENBQUMsV0FBVyxDQUFDLENBQUMsYUFBYSxDQUFDO0FBQ3ZELENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxZQUFZO0FBQ3BCLEFBQUEsQUFBQSxNQUFNLENBQUMsQ0FBQztBQUNSLENBQUMsS0FBSyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsT0FBTyxDQUFDO0FBQ2hELENBQUMsTUFBTSxDQUFDLENBQUMsT0FBTyxDQUFDO0FBQ2pCLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxXQUFXO0FBQ25CLEFBQUE7QUFDQSxBQUFBLDhFQUE2RTtBQUM3RSxBQUFBO0FBQ0EsQUFBQSxBQUFBLEdBQUcsQ0FBQSxBQUFDLGVBQWUsQ0FBQTtBQUNuQixBQUFBO0FBQ0EsQUFBQSxBQUFBLEtBQUssQ0FBQSxBQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUE7QUFDM0IsQUFBQTtBQUNBLEFBQUEsQUFBQSxHQUFHLENB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QUFXLENBQUEsQUFBQyxPQUFPLENBQUE7QUFDbkIsQUFBQSxBQUFBLGFBQWEsQ0FBQyxDQUFDO0FBQ2YsQUFBQSxBQUFBLEtBQUssQ0FBQSxBQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUE7QUFDM0IiLCJuYW1lcyI6W10sInNvdXJjZXNDb250ZW50IjpbIiMgbG9nLWxldmVscy5saWIudGVzdC5jaXZldFxyXG5cclxuaW1wb3J0IHtEQkd9IGZyb20gJ2xvZ2dlcidcclxuaW1wb3J0IHtnZXRDbWRBcmdzfSBmcm9tICdjbWQtYXJncydcclxuaW1wb3J0IHtcclxuXHRUTG9nTGV2ZWwsIGdldExvZ0xldmVsLCBpc0xvZ0xldmVsLCBpc0luYWN0aXZlTGV2ZWwsXHJcblx0c2V0TG9nTGV2ZWwsIHB1c2hMb2dMZXZlbCwgcG9wTG9nTGV2ZWwsIHJlc2V0TG9nTGV2ZWwsXHJcblx0fSBmcm9tICdsb2ctbGV2ZWxzJ1xyXG5pbXBvcnQge1xyXG5cdGVxdWFsLCB0cnV0aHksIGZhbHN5LCBzdWNjZWVkcywgZmFpbHMsIG1hdGNoZXMsXHJcblx0aXNUeXBlLCBub3RUeXBlLFxyXG5cdH0gZnJvbSAndW5pdC10ZXN0J1xyXG5cclxuIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuXHJcbkRCRyBcImdldExvZ0xldmVsKClcIlxyXG5cclxuZXF1YWwgZ2V0TG9nTGV2ZWwoKSwgJ2luZm8nXHJcblxyXG5EQkcgXCJpc0luYWN0aXZlTGV2ZWwoKVwiXHJcblxyXG50cnV0aHkgaXNJbmFjdGl2ZUxldmVsKCdkZWJ1ZycpXHJcbmZhbHN5ICBpc0luYWN0aXZlTGV2ZWwoJ2Vycm9yJylcclxuXHJcbmdldENtZEFyZ3MoKVxyXG5cclxuIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuIyAtLS0gUG9zc2libGUgbG9nIGxldmVsczpcclxuIyAgICAgICAgcHJvZmlsZVxyXG4jICAgICAgICBkZWJ1Z1xyXG4jICAgICAgICBpbmZvXHJcbiMgICAgICAgIHdhcm5cclxuIyAgICAgICAgZXJyb3JcclxuIyAgICAgICAgc2lsZW50XHJcbiMgICAgICAgIG5vbmVcclxuIyAtLS0gQWxsIGxldmVscyBhYm92ZSB0aGUgY3VycmVudCBsZXZlbCBhcmUgaW5hY3RpdmVcclxuXHJcbiMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblxyXG5EQkcgXCJ0eXBlIFRMb2dMZXZlbFwiXHJcblxyXG5pc1R5cGUgJ1RMb2dMZXZlbCcsICdkZWJ1ZydcclxuaXNUeXBlICdUTG9nTGV2ZWwnLCAnd2Fybidcclxubm90VHlwZSAnVExvZ0xldmVsJywgJ2R1bW15J1xyXG5cclxuREJHIFwiaXNMb2dMZXZlbCgpXCJcclxuXHJcbnRydXRoeSBpc0xvZ0xldmVsKCdpbmZvJylcclxudHJ1dGh5IGlzTG9nTGV2ZWwoJ2RlYnVnJylcclxuZmFsc3kgIGlzTG9nTGV2ZWwoJ2R1bW15JylcclxuXHJcbkRCRyBcInNldExvZ0xldmVsKClcIlxyXG5cclxuc2V0TG9nTGV2ZWwgJ2RlYnVnJ1xyXG5lcXVhbCBnZXRMb2dMZXZlbCgpLCAnZGVidWcnXHJcbmZhbHN5IGlzSW5hY3RpdmVMZXZlbCgnZGVidWcnKVxyXG5zZXRMb2dMZXZlbCAnaW5mbydcclxuZXF1YWwgZ2V0TG9nTGV2ZWwoKSwgJ2luZm8nXHJcbnRydXRoeSBpc0luYWN0aXZlTGV2ZWwoJ2RlYnVnJylcclxuXHJcbkRCRyBcInB1c2hMb2dMZXZlbCgpXCJcclxuXHJcbnB1c2hMb2dMZXZlbCgnZXJyb3InKVxyXG5lcXVhbCBnZXRMb2dMZXZlbCgpLCAnZXJyb3InXHJcbnRydXRoeSBpc0luYWN0aXZlTGV2ZWwoJ2luZm8nKVxyXG50cnV0aHkgaXNJbmFjdGl2ZUxldmVsKCd3YXJuJylcclxuZmFsc3kgIGlzSW5hY3RpdmVMZXZlbCgnZXJyb3InKVxyXG5cclxuREJHIFwicG9wTG9nTGV2ZWwoKVwiXHJcblxyXG5wb3BMb2dMZXZlbCgpXHJcbmVxdWFsIGdldExvZ0xldmVsKCksICdpbmZvJ1xyXG5cclxuREJHIFwicmVzZXRMb2dMZXZlbCgpXCJcclxuXHJcbnNldExvZ0xldmVsICdkZWJ1ZydcclxucmVzZXRMb2dMZXZlbCgpXHJcbmVxdWFsIGdldExvZ0xldmVsKCksICdpbmZvJ1xyXG4iXX0=