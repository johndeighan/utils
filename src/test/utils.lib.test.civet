# utils.lib.test.civet

import {
	undef, defined, notdefined,
	} from 'datatypes'
import {DBG, getLogLevel} from 'logger'
import {
	spaces, tabs, wsSplit, words, escapeStr, escapeBlock,
	blockToArray, toArray, arrayToBlock, toBlock,
	} from 'llutils'
import {relpath} from 'fsys'
import {getCompilerGlobPattern} from 'compile'
import {
	getCmdArgs, normalizeStr,
	removeLines,
	getOptionInfo, getNonOptionInfo, helpStr,
	logLevelFromArgs,
	} from 'utils'
import {
	equal, like, succeeds, fails, truthy, falsy,
	} from 'unit-test'

getCmdArgs()

# ---------------------------------------------------------------------------

DBG "normalizeStr()"

equal normalizeStr("abc\r\ndef\r\n"), "abc\ndef"
equal normalizeStr("  abc\r\ndef  "), "abc\ndef"

DBG "removeLines()"

equal removeLines('abc\ndef', 'def'), 'abc'
equal removeLines('abc\ndef', 'abc'), 'def'

(() =>
	block := """
		D =====  test/temp.txt  =====
		D debug
		I info
		D =====  test/temp2.txt  =====
		D debug
		I info
		"""
	equal removeLines(block, /^[A-Z] =====.*=====$/), """
		D debug
		I info
		D debug
		I info
		"""
	)()

DBG "logLevelFromArgs(lArgs)"

equal logLevelFromArgs(['-m','-D']), 'debug'
equal logLevelFromArgs(['-mD']), 'debug'
equal logLevelFromArgs(['-mnD', '-I']), 'debug'
equal logLevelFromArgs(['-I', 'mnD']), 'info'
equal logLevelFromArgs(['-mn']), undef
equal logLevelFromArgs([]), undef

DBG "getCompilerGlobPattern()"

equal getCompilerGlobPattern(), "**/*{.svelte,.dot,.cielo,.civet}"

DBG "getCmdArgs()"

equal getCmdArgs(undef, ['-abc']), {
	_: []
	a: true
	b: true
	c: true
	}

equal getCmdArgs(undef, ['-abc=xyz']), {
	_: []
	abc: 'xyz'
	}

equal getCmdArgs(undef, ['-abc=xyz', 'table']), {
	_: ['table']
	abc: 'xyz'
	}

equal getCmdArgs(undef, ['-Df']), {
	_: []
	f: true
	D: true
	}

equal getCmdArgs(undef, ['-D']), {
	_: []
	D: true
	}

equal getLogLevel(), 'debug'

equal getCmdArgs(undef, ['-P']), {
	_: []
	P: true
	}
equal getLogLevel(), 'profile'

equal getCmdArgs(undef, ['-I']), {
	_: []
	I: true
	}
equal getLogLevel(), 'info'

# -------------------------------------------------------------
# --- getCmdArgs() with hDesc

# --- one non-option is required
fails () => getCmdArgs {"_":{"range":1}}, ["-D"]

# --- one non-option is max allowed
fails () => getCmdArgs {"_":{"range":1}}, ["-D", "utils", "other"]

(() =>
	# --- commmand 'compile' allows the following options:
	#        -f  - force compilation
	#        -w  - watch for file changes
	#        -n  - suppress post processing
	#        -dirspec=<spec>  - 'binDir' or 'libDir'
	#     plus any number of non-options
	#     (but we pretend it must be 1, 2 or 3)

	hDesc := {
		f: {type: 'boolean'}
		w: {type: 'boolean'}
		n: {type: 'boolean'}
		d: {type: 'boolean'}
		dirspec: {type: ['libDir','binDir']}
		_: {range: [1, 3]}
		}

	# --- There is no flag named 'f'
	fails () => getCmdArgs(hDesc, ['-daf', 'file1'])

	# --- option 'dirspec' must be 'libDir' or 'binDir'
	fails () => getCmdArgs(hDesc, ['-dirspec=42', 'file1'])
	fails () => getCmdArgs(hDesc, ['-dirspec=blib', 'file1'])

	# --- There must be at least one non-option, and no more than 3
	fails  () => getCmdArgs(hDesc, ['-gf'])
	fails  () => getCmdArgs(hDesc, ['-gf', 'a', 'b', 'c', 'd'])
	)()

(() =>
	hDesc := {
		file: {type: 'string'}
		f: {type: 'boolean'}
		n: {type: 'boolean'}
		w: {type: 'boolean'}
		d: {type: 'boolean'}
		}

	equal getCmdArgs(hDesc, ['-wd']), {
		_: []
		d: true
		f: false
		n: false
		w: true
		}
	equal getCmdArgs(hDesc, ['-wd', 'temp.txt']), {
		_: ['temp.txt']
		d: true
		f: false
		n: false
		w: true
		}
	equal getCmdArgs(hDesc, ['-wd', '-file=temp.txt']), {
		_: []
		d: true
		f: false
		n: false
		w: true
		file: 'temp.txt'
		}
	)()

(() =>
	hDesc := {
		file: {type: 'string'}
		f: {type: 'boolean'}
		n: {type: 'boolean'}
		w: {type: 'boolean'}
		}
	lArgs := ['temp.txt', '-fw', 'temp2.txt', '-file=abc.txt']

	{_, file, f: force, n: nopp, w: watch} := getCmdArgs hDesc, lArgs
	equal _, ['temp.txt', 'temp2.txt']
	equal file, 'abc.txt'
	equal force, true
	equal nopp, false
	equal watch, true
	)()

(() =>
	hDesc := {
		file: {type: 'string'}
		f: {}
		n: {}
		w: {}
		}
	lArgs := ['temp.txt', '-fw', 'temp2.txt', '-file=abc.txt']

	{_, file, f: force, n: nopp, w: watch} := getCmdArgs hDesc, lArgs
	equal _, ['temp.txt', 'temp2.txt']
	equal file, 'abc.txt'
	equal force, true
	equal nopp, false
	equal watch, true
	)()

(() =>
	hDesc := {
		file: {type: 'string'}
		f: undef
		n: undef
		w: undef
		}
	lArgs := ['temp.txt', '-fw', 'temp2.txt', '-file=abc.txt']
	{_, file, f: force, n: nopp, w: watch} := getCmdArgs hDesc, lArgs
	equal _, ['temp.txt', 'temp2.txt']
	equal file, 'abc.txt'
	equal force, true
	equal nopp, false
	equal watch, true
	)()

DBG "getOptionInfo(hDesc, name)"

(() =>
	hDesc := {
		f: 'always compile'
		state: 'current state'
		num: {
			type: 'integer'
			desc: 'number of items'
			}
		label: {
			type: 'string'
			desc: 'label to use'
			}
		item: {
			type: 'string'
			}
		}
	fails () => getOptionInfo(hDesc, '_')
	fails () => getOptionInfo(hDesc, 'dummy')
	equal getOptionInfo(hDesc, 'f'), {
		desc: 'always compile'
		type: 'boolean'
		defaultVal: false
		}
	equal getOptionInfo(hDesc, 'state'), {
		desc: 'current state'
		type: 'string'
		}
	equal getOptionInfo(hDesc, 'item'), {
		type: 'string'
		desc: '<no description available>'
		}
	equal getOptionInfo(hDesc, 'label'), {
		type: 'string'
		desc: 'label to use'
		}
	)()

DBG "getNonOptionInfo()"

(() =>
	hDesc := {
		_: {
			desc: 'list of file names'
			range: [1,3]
			}
		other: {}
		}
	equal getNonOptionInfo({A: 1}), undef
	equal getNonOptionInfo(hDesc), {
		desc: 'list of file names'
		min: 1
		max: 3
		}
	equal getNonOptionInfo({_: {desc: 'xx', range: 4}}), {
		desc: 'xx'
		min: 4
		max: 4
		}
	)()

DBG "helpStr(hDesc)"

(() =>
	hDesc := {
		_: {
			desc: 'list of file names'
			range: [1,10]
			}
		f: 'always compile'
		state: 'current state'
		num: {
			type: 'integer'
			desc: 'number of items'
			}
		label: {
			type: 'string'
			desc: 'label to use'
			}
		item: {
			type: 'string'
			}
		}
	equal helpStr(hDesc), """
		Available options:
			-f: boolean - always compile
			-state: string - current state
			-num: integer - number of items
			-label: string - label to use
			-item: string - <no description available>
		Non-options:
			list of file names
			There must be at least 1 non-option
			There must be at most 10 non-options
		""".replaceAll('\t', '   ')
	)()
