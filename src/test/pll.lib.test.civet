# pll.lib.test.civet

import {undef} from 'datatypes'
import {DBG} from 'logger'
import {allLinesInBlock, o} from 'llutils'
import {
	TPLLToken, tokenWith, TTokenGenerator,
	allTokensIn, allTokensInBlock, allTokensInFile,
	tkIndent, tkUndent, tkEOF, tokenTable,
	} from 'pll'
import {
	equal, iterEqual, iterLike, isType, objListLike, setDirTree,
	} from 'unit-test'

# ---------------------------------------------------------------------------

setup := (): void =>

	setDirTree('src/test/pllfile', """
			tokens.txt
				if x==1
					print "OK"
				exit
			dummy.txt
				dummy
			file1.txt
				line1
				line2
				line3
			file2.txt
				# test1.cielo

				LOG := (str) => console.log str
				LOG "Hello, World!"
			file3.flags.txt
				# test1.cielo

				LOG := (str) => console.log str
				LOG "Hello, World!"
			file4.cielo
				# file.cielo

				abc
			file5.cielo
				this is the REAL first line
				# file.cielo

				abc
			file.config.ts
				export default new Object({
					a: 1,
					b: 'abc',
					f: () => 'hello'
					})
			/aaa
				/bbb
					newfile.txt
						abc
					oldfile.txt
						abc
					temp.txt
						abc
			/subdir
				new.txt
					abc
					def
		""", o'clear')
	return

setup()

# ---------------------------------------------------------------------------

DBG "type TPLLToken"

isType 'TPLLToken', {kind: 'xxx', str: 'yyy'}
isType 'TPLLToken', {kind: 'xxx', str: 'yyy', value: undef}
isType 'TPLLToken', {kind: 'xxx', str: 'yyy', value: 42}

DBG "tokenWith"

equal tokenWith(tkIndent, '\t'), {
	kind: 'indent'
	str: '\t'
	}

DBG "type TTokenGenerator"

(() =>
	identGen := (line: string) ->
		yield {kind: 'line', str: line}
		return
	isType 'TTokenGenerator', identGen
	)()

(() =>
	charGen := (line: string) ->
		for ch of line
			yield {kind: 'char', str: ch}
		return
	isType 'TTokenGenerator', charGen
	)()

DBG "allTokensIn()"

iterLike allTokensIn(allLinesInBlock("abc\ndef")), [
	{kind: 'line', str: 'abc'}
	{kind: 'line', str: 'def'}
	]

iterEqual allTokensIn(allLinesInBlock('abc\ndef')), [
	{kind: 'line', str: 'abc'}
	{kind: 'line', str: 'def'}
	]

DBG "allTokensInBlock(str)"

iterEqual allTokensInBlock('abc\ndef'), [
	{kind: 'line', str: 'abc'}
	{kind: 'line', str: 'def'}
	]

iterLike allTokensInBlock("""
	abc
	def
	"""), [
	{kind: 'line', str: 'abc'}
	{kind: 'line', str: 'def'}
	]

iterLike allTokensInBlock("abc\n\tdef"), [
	{kind: 'line', str: 'abc'}
	{kind: 'indent'}
	{kind: 'line', str: 'def'}
	{kind: 'undent'}
	]

iterLike allTokensInBlock("""
	abc
		def
		ghi
	jkl
		mno
			pqr
	"""), [
	{kind: 'line', str: 'abc'}
	{kind: 'indent'}
	{kind: 'line', str: 'def'}
	{kind: 'line', str: 'ghi'}
	{kind: 'undent'}
	{kind: 'line', str: 'jkl'}
	{kind: 'indent'}
	{kind: 'line', str: 'mno'}
	{kind: 'indent'}
	{kind: 'line', str: 'pqr'}
	{kind: 'undent'}
	{kind: 'undent'}
	]

iterLike allTokensInBlock("""
	abc
		def
		ghi
	jkl
		mno
			pqr

	"""), [
	{kind: 'line', str: 'abc'}
	{kind: 'indent'}
	{kind: 'line', str: 'def'}
	{kind: 'line', str: 'ghi'}
	{kind: 'undent'}
	{kind: 'line', str: 'jkl'}
	{kind: 'indent'}
	{kind: 'line', str: 'mno'}
	{kind: 'indent'}
	{kind: 'line', str: 'pqr'}
	{kind: 'undent'}
	{kind: 'undent'}
	]

# --- by default, empty lines return no tokens

iterLike allTokensInBlock("""
	abc
		def
		ghi

	jkl
		mno
			pqr
	"""), [
	{kind: 'line',  str: 'abc'}
	{kind: 'indent'}
	{kind: 'line',  str: 'def'}
	{kind: 'line',  str: 'ghi'}
	{kind: 'empty'}
	{kind: 'undent'}
	{kind: 'line',  str: 'jkl'}
	{kind: 'indent'}
	{kind: 'line',  str: 'mno'}
	{kind: 'indent'}
	{kind: 'line',  str: 'pqr'}
	{kind: 'undent'}
	{kind: 'undent'}
	]

# --- Test allTokensInBlock() with a custom token generator

(() =>
	charGenerator: TTokenGenerator := (line: string) ->
		for ch of line
			yield {kind: 'char', str: ch}
		return

	iterLike allTokensInBlock("""
		abc
			def
		""", charGenerator), [
		{ kind: "char", str: "a" }
		{ kind: "char", str: "b" }
		{ kind: "char", str: "c" }
		{ kind: "indent"}
		{ kind: "char", str: "d" }
		{ kind: "char", str: "e" }
		{ kind: "char", str: "f" }
		{ kind: "undent"}
		]
	)()

(() =>
	niceGenerator: TTokenGenerator := (line: string) ->
		if let lMatches = line.match(///^
				-
				\s+
				(.*)
				$///)
			yield {
				kind: 'list-item'
				str: line
				value: lMatches[1]
				}
		else
			yield {
				kind: 'line'
				str: line
				}
		return

	iterLike allTokensInBlock("""
		- a
		- b
		""", niceGenerator), [
		{ kind: "list-item", str: "- a", value: "a" }
		{ kind: "list-item", str: "- b", value: "b" }
		]
	)()

DBG "allTokensInFile()"

objListLike Array.from(allTokensInFile('src/test/fsys/tokens.txt')), [
	{kind: 'line',   str: 'if x==1'}
	{kind: 'indent'}
	{kind: 'line',   str: 'print "OK"'}
	{kind: 'undent'}
	{kind: 'line',   str: 'exit'}
	]
DBG "tokenTable()"

equal tokenTable([
	{kind: 'line',   str: 'abc'}
	{kind: 'indent', str: ''}
	{kind: 'line',   str: 'def'}
	{kind: 'undent', str: ''}
	]), """
	==========
	  Tokens
	==========
	 kind  str
	------ ---
	line   abc
	indent
	line   def
	undent
	==========
	"""

