"use strict";
// nice.lib.test.civet

import {undef, isSymbol, symbolName} from 'datatypes'
import {s} from 'llutils'
import {DBG} from 'logger'
import {getCmdArgs} from 'cmd-args'
import {allTokensInBlock} from 'pll'
import {
	toNice, fromNice, getPrimitive,
	niceSplitter, toNiceString, allNiceTokens,
	} from 'nice'
import {
	equal, iterEqual, iterLike, like,
	succeeds, fails, truthy, falsy, setDirTree,
	} from 'unit-test'

getCmdArgs()

// ---------------------------------------------------------------------------

const setup = (): void => {

	DBG("setDirTree()")

	setDirTree('src/test/nice', `test.nice
	- a
	- b
`)
}

setup()

// ---------------------------------------------------------------------------

DBG("toNiceString()")

equal(toNiceString('abc'), 'abc')
equal(toNiceString('\tabc\n'), '\\tabc\\n')
equal(toNiceString('123'), '\\123')
equal(toNiceString('123').length, 4)
equal(toNiceString('3.14'), '\\3.14')
equal(toNiceString('-123'), '\\-123')
equal(toNiceString('-3.14'), '\\-3.14')
equal(toNiceString('134 Main St.'), '\\134 Main St.')
equal(toNiceString('.inf.'), '\\.inf.')
equal(toNiceString('.text'), '\\.text')
equal(toNiceString('label: 42'), '\\label: 42')
equal(toNiceString(' xxx '), '\\x20xxx\\x20')
equal(toNiceString('  xxx  '), '\\x20\\x20xxx\\x20\\x20')
equal(toNiceString('func1 = (str: string)'), 'func1 = (str: string)')

// ---------------------------------------------------------------------------

DBG("toNice()")

// --- 'undefined'
equal(toNice(undef),      '.undef.')

// --- 'boolean'
equal(toNice(true),       '.true.')
equal(toNice(false),      '.false.')

// --- 'number'
equal(toNice(NaN),        '.NaN.')
equal(toNice(Infinity),   '.infinity.')
equal(toNice(-Infinity),  '.neginfinity.')
equal(toNice(42),         '42')
equal(toNice(3.14),       '3.14')

// --- 'bigint'
equal(toNice(12345678n),  '12345678n')

// --- 'string'
equal(toNice('abc'),      'abc')
equal(toNice('say "hi"'), 'say "hi"')
equal(toNice('a\tb'),     'a\\tb')
equal(toNice('a\nb'),     'a\\nb')
equal(toNice('.true.'),   '\\.true.')
equal(toNice('.abc'),     '\\.abc')
equal(toNice('- abc'),    '\\- abc')
equal(toNice('-abc'),     '\\-abc')
equal(toNice('flag: 3'),  '\\flag: 3')
equal(toNice('123'),      '\\123')
equal(toNice('1749 Main St.'), '\\1749 Main St.')

// --- 'symbol'
equal(toNice(Symbol()),   '.symbol.')
equal(toNice(Symbol('abc')), '.symbol abc.');

// --- 'function'
(() => {
	class TempClass {
		var: string = ''

		constructor(str: string) {
			this.var = str
		}
	}

	equal(toNice(TempClass), '.class TempClass.')

	// --- However, a class instance is an object
	equal(toNice(new TempClass('xyz')), `var: xyz`)
}
	)();

(() => {
	const func = (x: string): string => {
		return 'abc'
	}

	equal(toNice(func), '.function func.')
}
	)()

// --- 'object'
equal(toNice(null), '.null.')

equal(toNice(/^abc$/), '.regexp ^abc$.')

equal(toNice([]), ".[].")
equal(toNice([1,2]), `- 1
- 2`)

equal(toNice(new String('abc')), "abc")
equal(toNice(new Boolean(true)), ".true.")
equal(toNice(new Number(42)), "42")
equal(toNice(new Number(3.14)), "3.14")

equal(toNice({}), ".{}.")
equal(toNice({a:1, b:2}), `a: 1
b: 2`);

// ---------------------------------------------------------------------------
// --- Test various options on objects

(() => {
	const h = {
		phone: '540-808-1234',
		address: '1749 Main St.',
		city: 'Blacksburg',
		state: 'VA',
		fName: 'John',
		lName: 'Deighan'
		}

	equal(toNice(h, {lInclude: ['fName','lName']}), `fName: John
lName: Deighan`)
	equal(toNice(h, {lInclude: ['fName','lName','phone']}), `fName: John
lName: Deighan
phone: \\540-808-1234`)
	equal(toNice(h, {lExclude: ['phone','address']}), `city: Blacksburg
state: VA
fName: John
lName: Deighan`)
}
	)();

// ---------------------------------------------------------------------------
// --- test references

(() => {
	type Node = {
		name: string
		ref: (object | undefined)
		}

	const hAst: Node = {
		name: 'John',
		ref: undef
		}
	hAst.ref = hAst

	equal(toNice(hAst), s`name: John
ref: .REF /.`)
}
	)()

// ---------------------------------------------------------------------------

equal(toNice(['a', ['b','c']]), s`- a
-
	- b
	- c`)

// ---------------------------------------------------------------------------

equal(toNice({a: 1, b: {c: 3, d: 4}}), s`a: 1
b:
	c: 3
	d: 4`)

// ---------------------------------------------------------------------------

DBG("niceSplitter()")

iterLike(niceSplitter('a'), [
	{kind: 'primitive', value: 'a'}
	])
iterLike(niceSplitter('42'), [
	{kind: 'primitive', value: 42}
	])
iterLike(niceSplitter('.undef.'), [
	{kind: 'primitive', value: undef}
	])
iterLike(niceSplitter('\\.undef.'), [
	{kind: 'primitive', value: '.undef.'}
	])
iterLike(niceSplitter('\\\\abc'), [
	{kind: 'primitive', value: '\\abc'}
	])
iterLike(niceSplitter('- a'), [
	{kind: 'list-item', value: 'a'}
	])
iterLike(niceSplitter('-'), [
	{kind: 'list-head'}
	])
iterLike(niceSplitter('tag: abc'), [
	{kind: 'hash-item', value: 'abc'}
	])
iterLike(niceSplitter('tag:'), [
	{kind: 'hash-head', name: 'tag'}
	])

// --- Add checks to be sure that extra whitespace is OK

iterLike(niceSplitter('a  '), [
	{kind: 'primitive', value: 'a'}
	])
iterLike(niceSplitter('42   '), [
	{kind: 'primitive', value: 42}
	])
iterLike(niceSplitter('.undef.  '), [
	{kind: 'primitive', value: undef}
	])
iterLike(niceSplitter('.  undef  .  '), [
	{kind: 'primitive', value: undef}
	])
iterLike(niceSplitter('-   a  '), [
	{kind: 'list-item', value: 'a'}
	])
iterLike(niceSplitter('-  '), [
	{kind: 'list-head'}
	])
iterLike(niceSplitter('tag:   abc  '), [
	{kind: 'hash-item', value: 'abc'}
	])
iterLike(niceSplitter('tag:  '), [
	{kind: 'hash-head', name: 'tag'}
	])

// --- Test breaking NICE string into tokens

iterLike(allTokensInBlock(`a
42`, niceSplitter), [
	{kind: 'primitive', value: 'a'},
	{kind: 'primitive', value: 42}
	])

iterLike(allTokensInBlock(`- a
- b`, niceSplitter), [
	{kind: 'list-item', value: 'a'},
	{kind: 'list-item', value: 'b'}
	])

iterLike(allTokensInBlock(`a: 1
b: c`, niceSplitter), [
	{kind: 'hash-item', value: 1},
	{kind: 'hash-item', value: 'c'}
	])

iterLike(allTokensInBlock(`-
	b
	42`, niceSplitter), [
	{kind: 'list-head'},
	{kind: 'indent'},
	{kind: 'primitive', value: 'b'},
	{kind: 'primitive', value: 42},
	{kind: 'undent'}
	])

iterLike(allTokensInBlock(`lItems:
	b
	42`, niceSplitter), [
	{kind: 'hash-head', name: 'lItems'},
	{kind: 'indent'},
	{kind: 'primitive', value: 'b'},
	{kind: 'primitive', value: 42},
	{kind: 'undent'}
	])

iterLike(allTokensInBlock(`lNames:
	John
	Alice
-
	.undef.
	-
		a
		b`, niceSplitter), [
	{kind: 'hash-head', name: 'lNames'},
	{kind: 'indent'},
	{kind: 'primitive', value: 'John'},
	{kind: 'primitive', value: 'Alice'},
	{kind: 'undent'},
	{kind: 'list-head'},
	{kind: 'indent'},
	{kind: 'primitive', value: undef},
	{kind: 'list-head'},
	{kind: 'indent'},
	{kind: 'primitive', value: 'a'},
	{kind: 'primitive', value: 'b'},
	{kind: 'undent'},
	{kind: 'undent'}
	])

DBG("fromNice(str)")

equal(fromNice('abc'),      'abc')
equal(fromNice('say "hi"'), 'say "hi"')
equal(fromNice('a\\nb'),    'a\nb')
equal(fromNice('a\\tb'),    'a\tb')
equal(fromNice('.undef.'),  undef)
equal(fromNice('.null.'),   null)
equal(fromNice('.true.'),   true)
equal(fromNice('.false.'),  false)
equal(fromNice('.NaN.'),    NaN)
equal(fromNice('.infinity.'), Infinity)
equal(fromNice('.neginfinity.'), -Infinity)
equal(fromNice('42'),       42)
equal(fromNice('3.14'),     3.14)
truthy(isSymbol(fromNice('.symbol.')));

(() => {
	const result = fromNice('.symbol dummy.')
	isSymbol(result)
	equal(symbolName(result), 'dummy')
}
	)()

equal(fromNice('.regexp ^abc$.'), /^abc$/)
equal(fromNice('.[].'), [])
equal(fromNice('.{}.'), {})

DBG("allNiceTokens(block)")

iterLike(allNiceTokens(`- a
- b`), [
	{kind: 'list-item', value: 'a'},
	{kind: 'list-item', value: 'b'}
	])

iterLike(allNiceTokens(`-
	a
	b`), [
	{kind: 'list-head'},
	{kind: 'indent'},
	{kind: 'primitive', value: 'a'},
	{kind: 'primitive', value: 'b'},
	{kind: 'undent'}
	])

iterLike(allNiceTokens(`- a
-
	a
	b`), [
	{kind: 'list-item', value: 'a'},
	{kind: 'list-head'},
	{kind: 'indent'},
	{kind: 'primitive', value: 'a'},
	{kind: 'primitive', value: 'b'},
	{kind: 'undent'}
	])

iterLike(allNiceTokens(`-
	a
	b
- a`), [
	{kind: 'list-head'},
	{kind: 'indent'},
	{kind: 'primitive', value: 'a'},
	{kind: 'primitive', value: 'b'},
	{kind: 'undent'},
	{kind: 'list-item', value: 'a'}
	])

iterLike(allNiceTokens(`-
	-
		a
		b
	- c
- a`), [
	{kind: 'list-head'},
	{kind: 'indent'},
	{kind: 'list-head'},
	{kind: 'indent'},
	{kind: 'primitive', value: 'a'},
	{kind: 'primitive', value: 'b'},
	{kind: 'undent'},
	{kind: 'list-item', value: 'c'},
	{kind: 'undent'},
	{kind: 'list-item', value: 'a'}
	])

iterLike(allNiceTokens(`-
	- a
	- b`), [
	{kind: 'list-head'},
	{kind: 'indent'},
	{kind: 'list-item', value: 'a'},
	{kind: 'list-item', value: 'b'},
	{kind: 'undent'}
	])

iterLike(allNiceTokens(`a: 1
b: 2`), [
	{kind: 'hash-item', name: 'a', value: 1},
	{kind: 'hash-item', name: 'b', value: 2}
	])

iterLike(allNiceTokens(`lItems:
	a: 1
	b: 2`), [
	{kind: 'hash-head', name: 'lItems'},
	{kind: 'indent'},
	{kind: 'hash-item', name: 'a', value: 1},
	{kind: 'hash-item', name: 'b', value: 2},
	{kind: 'undent'}
	])

iterLike(allNiceTokens(`lItems:
	a: 1
	b: 2
a: 1
b: 2`), [
	{kind: 'hash-head', name: 'lItems'},
	{kind: 'indent'},
	{kind: 'hash-item', name: 'a', value: 1},
	{kind: 'hash-item', name: 'b', value: 2},
	{kind: 'undent'},
	{kind: 'hash-item', name: 'a', value: 1},
	{kind: 'hash-item', name: 'b', value: 2}
	])

iterLike(allNiceTokens(`a: 1
b: 2
lItems:
	a: 1
	b: 2`), [
	{kind: 'hash-item', name: 'a', value: 1},
	{kind: 'hash-item', name: 'b', value: 2},
	{kind: 'hash-head', name: 'lItems'},
	{kind: 'indent'},
	{kind: 'hash-item', name: 'a', value: 1},
	{kind: 'hash-item', name: 'b', value: 2},
	{kind: 'undent'}
	])

iterLike(allNiceTokens(`a: 1
b: 2
lItems:
	lMoreItems:
		a: 1
		b: 2
	x: abc`), [
	{kind: 'hash-item', name: 'a', value: 1},
	{kind: 'hash-item', name: 'b', value: 2},
	{kind: 'hash-head', name: 'lItems'},
	{kind: 'indent'},
	{kind: 'hash-head', name: 'lMoreItems'},
	{kind: 'indent'},
	{kind: 'hash-item', name: 'a', value: 1},
	{kind: 'hash-item', name: 'b', value: 2},
	{kind: 'undent'},
	{kind: 'hash-item', name: 'x', value: 'abc'},
	{kind: 'undent'}
	])

equal(fromNice(`- 1`), [1])

equal(fromNice(`a: 1`), {a: 1})

// equal fromNice("""
// 	a: 1
// 	b: 3
// 	c:
// 		- 1
// 		- 2
// 	"""), {
// 		a: 1
// 		b: 3
// 		c: [1,2]
// 		}

//# sourceMappingURL=data:application/json;base64,