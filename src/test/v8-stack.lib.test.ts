"use strict";
// v8-stack.lib.test.civet

import {undef, assert, croak} from 'datatypes'
import {o} from 'llutils'
import {DBG} from 'logger'
import {relpath} from 'fsys'
import {getCmdArgs} from 'cmd-args'
import {execCmd, execCmdSync} from 'exec'
import {
	TStackFrame, getV8Stack, getMyCaller,
	getMyOutsideCaller, getV8StackStr,
	} from 'v8-stack'
import {
	equal, like, succeeds, isType, notType, objListLike, setDirTree,
	} from 'unit-test'

getCmdArgs()

// ---------------------------------------------------------------------------

const setup = (): void => {

	DBG("setDirTree()")

	setDirTree('src/test/v8-stack', `v8-module.ts
	"use strict";
	// v8-module.civet

	import {getMyCaller, TStackFrame} from 'v8-stack'

	// ---------------------------------------------------------------------------

	type bothFrames = ((TStackFrame?))[]

	const isBothFrames = (x: unknown): x is bothFrames => {
		return Array.isArray(x) && (x.length === 2)
	}

	// ---------------------------------------------------------------------------

	export const getBoth = function(): bothFrames {

		const result = secondFunc('both')
		if (Array.isArray(result)) {
			return result
		}
		else {
			throw new Error("Expected array, got TStackFrame")
		}
	}

	// ---------------------------------------------------------------------------

	export const getDirect = function(): (TStackFrame?) {

		const result = secondFunc('direct')
		if (Array.isArray(result)) {
			throw new Error("Got unexpected array")
		}
		return result
	}

	// ---------------------------------------------------------------------------

	export const getOutside = function(): (TStackFrame?) {

		const result = secondFunc('outside')
		if (Array.isArray(result)) {
			throw new Error("Got unexpected array")
		}
		return result
	}

	// ---------------------------------------------------------------------------

	const secondFunc = function(type: string): bothFrames | (TStackFrame?) {

		return thirdFunc(type)
	}

	// ---------------------------------------------------------------------------

	const thirdFunc = function(type: string): bothFrames | (TStackFrame?) {

		// --- direct caller should be 'secondFunc'
		//     outside caller should be the function
		//        that called getCaller()
		switch(type) {
			case 'both': {
				return [getMyCaller(), getMyCaller()]
			}
			case 'direct': {
				return getMyCaller()
			}
			case 'outside': {
				return getMyCaller()
			}
			default: {
				throw new Error(\`Unknown type: \${type}\`)
			}
		}
	}`, o`clear`)

	return
}

setup()

// ---------------------------------------------------------------------------

DBG("type TStackFrame")

isType('TStackFrame', {
	type: 'function',
	fileName: 'temp.civet',
	line: 5,
	column: 5,
	name: 'func',
	isConstructor: false,
	isAsync: false,
	objType: undefined
	})

DBG("getV8Stack(), getV8StackStr");

(function() {
	let stack1: TStackFrame[] = []
	let stack2: TStackFrame[] = []
	let stack1Str: string = ''
	let stack2Str: string = ''

	const main = () => {
		func1()
		func2()
	}

	const func1 = function() {
		stack1 = getV8Stack()
		stack1Str = getV8StackStr()
		return
	}

	const func2 = function() {
		stack2 = getV8Stack()
		stack2Str = getV8StackStr()
		return
	}

	main()

	objListLike(stack1, [
		{
			type: 'function',
			name: 'func1',
			fileName: 'src/test/v8-stack.lib.test.civet',
			line: 136
			},
		{
			type: 'function',
			name: 'main',
			fileName: 'src/test/v8-stack.lib.test.civet',
			line: 132
			},
		{
			type: 'function',
			name: '<anon>',
			fileName: 'src/test/v8-stack.lib.test.civet',
			line: 143
			},
		{
			type: 'script',
			fileName: 'src/test/v8-stack.lib.test.civet',
			line: 195
			}
		])

	objListLike(stack2, [
		{
			type: 'function',
			name: 'func2',
			fileName: 'src/test/v8-stack.lib.test.civet',
			line: 140
			},
		{
			type: 'function',
			name: 'main',
			fileName: 'src/test/v8-stack.lib.test.civet',
			line: 133
			},
		{
			type: 'function',
			name: '<anon>',
			fileName: 'src/test/v8-stack.lib.test.civet',
			line: 143
			},
		{
			type: 'script',
			fileName: 'src/test/v8-stack.lib.test.civet',
			line: 195
			}
		])

	equal(stack1Str, `[function func1    ] src/test/v8-stack.lib.test.civet:139:14
[function main     ] src/test/v8-stack.lib.test.civet:134:2
[function <anon>   ] src/test/v8-stack.lib.test.civet:147:1
[script            ] src/test/v8-stack.lib.test.civet:214:2`)

	equal(stack2Str, `[function func2    ] src/test/v8-stack.lib.test.civet:144:14
[function main     ] src/test/v8-stack.lib.test.civet:135:2
[function <anon>   ] src/test/v8-stack.lib.test.civet:147:1
[script            ] src/test/v8-stack.lib.test.civet:214:2`)
}
	)()

// ---------------------------------------------------------------------------

DBG("getMyCaller()");

(function() {
	let caller1: (TStackFrame | undefined) = undef
	let caller2: (TStackFrame | undefined) = undef

	const main = function() {
		func1()
		func2()
	}

	const func1 = function() {
		caller1 = getMyCaller()
	}

	const func2 = function() {
		caller2 = getMyCaller()
		return
	}

	main()
	like(caller1, {
		type: 'function',
		name: 'main',
		fileName: 'src/test/v8-stack.lib.test.civet'
		})
	like(caller2, {
		type: 'function',
		name: 'main',
		fileName: 'src/test/v8-stack.lib.test.civet'
		})
}
	)();

// ---------------------------------------------------------------------------

(function() {
	let hCaller: (TStackFrame | undefined) = undef

	const main = function() {
		func1()
		func2()
	}

	const func1 = function() {
		return
	}

	const func2 = function() {
		hCaller = getMyCaller()
		return
	}

	// ------------------------------------------------------------------------

	main()

	like(hCaller, {
		type: 'function',
		name: 'main',
		fileName: 'src/test/v8-stack.lib.test.civet'
		})
}

	)();

// ---------------------------------------------------------------------------

(async function() {
	await execCmd('deno', [
		'run',
		'-A',
		'npm:@danielx/civet',
		'--inline-map',
		'-o', '.ts',
		'-c', 'src/test/v8-stack/v8-module.civet'
		])
	const {getBoth} = await import('./v8-stack/v8-module.ts')
	let lCallers1: ((TStackFrame | undefined))[] = []
	let lCallers2: ((TStackFrame | undefined))[] = []

	const main = function() {
		func1()
		func2()
	}

	const func1 = function() {
		lCallers1 = getBoth()
	}

	const func2 = function() {
		lCallers2 = getBoth()
		return
	}

	main()
	like(lCallers1[0], {
		type: 'function',
		name: 'secondFunc',
		source: 'src/test/v8-stack/v8-module.civet'
		})
	like(lCallers1[1], {
		type: 'function',
		name: 'secondFunc',
		source: 'src/test/v8-stack/v8-module.civet'
		})
	like(lCallers2[0], {
		type: 'function',
		name: 'secondFunc',
		source: 'src/test/v8-stack/v8-module.civet'
		})
	like(lCallers2[1], {
		type: 'function',
		name: 'secondFunc',
		source: 'src/test/v8-stack/v8-module.civet'
		})
}
	)();

// ---------------------------------------------------------------------------

(async () => {
	const func1 = async () => {
		return await func2()
	}

	const func2 = async () => {
		return await getV8StackStr()
	}

	equal(await func1(), `[function func2    ] src/test/v8-stack.lib.test.civet:332:15
[function func1    ] src/test/v8-stack.lib.test.civet:329:15
[function <anon>   ] src/test/v8-stack.lib.test.civet:334:13
[script            ] src/test/v8-stack.lib.test.civet:341:2`)
}

	)();

// ---------------------------------------------------------------------------

(async () => {
	const func1 = async () => {
		func2()
		return await getV8StackStr()
	}

	const func2 = () => {
		return 2 * 2
	}

	equal(await func1(), `[function func1    ] src/test/v8-stack.lib.test.civet:348:15
[function <anon>   ] src/test/v8-stack.lib.test.civet:353:13
[script            ] src/test/v8-stack.lib.test.civet:358:2`)
}
	)();

// ---------------------------------------------------------------------------

(function() {
	let caller1: (TStackFrame | undefined) = undef
	let caller2: (TStackFrame | undefined) = undef

	const main = function() {
		func1()
		func2()
	}

	const func1 = function() {
		caller1 = getMyCaller()
	}

	const func2 = function() {
		caller2 = getMyCaller()
		return
	}

	main()
	like(caller1, {
		type: 'function',
		name: 'main',
		fileName: 'src/test/v8-stack.lib.test.civet'
		})
	like(caller2, {
		type: 'function',
		name: 'main',
		fileName: 'src/test/v8-stack.lib.test.civet'
		})
}
	)()

// ---------------------------------------------------------------------------

DBG("getMyOutsideCaller()");

(function() {
	let caller1: (TStackFrame | undefined) = undef
	let caller2: (TStackFrame | undefined) = undef

	const main = function() {
		func1()
		func2()
	}

	const func1 = function() {
		caller1 = getMyOutsideCaller()
	}

	const func2 = function() {
		caller2 = getMyOutsideCaller()
		return
	}

	main()
	like(caller1, {
		type: 'function',
		name: 'main',
		source: 'src/test/v8-stack.lib.test.civet'
		})
	like(caller2, {
		type: 'function',
		name: 'main',
		source: 'src/test/v8-stack.lib.test.civet'
		})
}
	)()

//# sourceMappingURL=data:application/json;charset=utf-8;base64,