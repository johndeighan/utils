"use strict";
// temp.civet

import {
	undef, defined, notdefined, LOG, FAIL, SUCCEED,
	buildFileName, findFile, centered,
	} from 'base-utils'
import {o, hasKeys} from 'llutils'
import {getCmdArgs} from 'cmd-args'
import {civet2ast} from 'civet'
import {astAsString} from 'typescript'
import {TNodeInfo, Walker} from 'walker'

getCmdArgs()

// ---------------------------------------------------------------------------

class Person {
	name: string
	gender: 'male' | 'female'
	constructor(name1: string, gender1: 'male'|'female'){this.name = name1;this.gender = gender1;}
}

debugger

const h = {
	friends: [
		{name: 'John Bowling', gender: 'male'},
		{name: 'Julie Booker', gender: 'female'}
		],
	name: 'John Deighan',
	gender: 'male',
	address: {
		street: '1749 Main St.',
		city: 'Blacksburg',
		state: 'VA'
		}
	} as const

const walker = new Walker<Person>('Person')
walker.isNode = (x: object): x is Person => {
	return hasKeys(x, 'name', 'gender')
}

const results=[];for (const item of walker.walk(h)) {const h: TNodeInfo<Person> = item;
	results.push(h.node.name)
};const lNames =results

LOG(lNames)

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQzpcXFVzZXJzXFxqb2huZFxcdXRpbHNcXHNyY1xcdGVzdFxcdGVtcC5jaXZldC50c3giLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcam9obmRcXHV0aWxzXFxzcmNcXHRlc3RcXHRlbXAuY2l2ZXQiXSwibWFwcGluZ3MiOiI7QUFBQSxhQUFZO0FBQ1osQUFBQTtBQUNBLEFBQUEsTUFBTSxDQUFDLENBQUM7QUFDUixDQUFDLEtBQUssQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLE9BQU8sQ0FBQztBQUNoRCxDQUFDLGFBQWEsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLFFBQVEsQ0FBQztBQUNuQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsWUFBWTtBQUNwQixBQUFBLEFBQUEsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVM7QUFDbEMsQUFBQSxBQUFBLE1BQU0sQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFVO0FBQ25DLEFBQUEsQUFBQSxNQUFNLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTztBQUMvQixBQUFBLEFBQUEsTUFBTSxDQUFDLENBQUMsV0FBVyxDQUFDLENBQUMsSUFBSSxDQUFDLFlBQVk7QUFDdEMsQUFBQSxBQUFBLE1BQU0sQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxRQUFRO0FBQ3hDLEFBQUE7QUFDQSxBQUFBLEFBQUEsVUFBVSxDQUFDLENBQUM7QUFDWixBQUFBO0FBQ0EsQUFBQSw4RUFBNkU7QUFDN0UsQUFBQTtBQUNBLEFBQUEsQUFBQSxLQUFLLENBQUMsTUFBTSxDQUFBLENBQUE7QUFDWixBQUFBLENBQUMsSUFBSSxDQUFDLENBQUMsTUFBTTtBQUNiLEFBQUEsQ0FBQyxNQUFNLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLFFBQVE7QUFDMUIsQUFBQSxDLFdBQVksQyxLQUFNLENBQUMsQ0FBQyxNQUFNLENBQUMsQyxPQUFRLENBQUMsQ0FBQyxNQUFNLENBQUMsUUFBUSxDLEMsWSxLLEMsYyxPLEMsQztBQUFDLENBQUE7QUFDckQsQUFBQTtBQUNBLEFBQUEsQUFBQSxRQUFRO0FBQ1IsQUFBQTtBQUNBLEFBQUEsQUFBQyxNQUFELENBQUMsQ0FBQyxDQUFFLENBQUMsQ0FBQztBQUNOLEFBQUEsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO0FBQ1gsQUFBQSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsY0FBYyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUE7QUFDeEMsQUFBQSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsY0FBYyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsUUFBUSxDQUFDO0FBQzFDLEFBQUEsRUFBRSxDQUFDLENBQUE7QUFDSCxBQUFBLENBQUMsSUFBSSxDQUFDLENBQUMsY0FBYyxDQUFBO0FBQ3JCLEFBQUEsQ0FBQyxNQUFNLENBQUMsQ0FBQyxNQUFNLENBQUE7QUFDZixBQUFBLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztBQUNYLEFBQUEsRUFBRSxNQUFNLENBQUMsQ0FBQyxlQUFlLENBQUE7QUFDekIsQUFBQSxFQUFFLElBQUksQ0FBQyxDQUFDLFlBQVksQ0FBQTtBQUNwQixBQUFBLEVBQUUsS0FBSyxDQUFDLENBQUMsSUFBSTtBQUNiLEVBQUUsQ0FBQztBQUNILENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxLQUFLO0FBQ1gsQUFBQTtBQUNBLEFBQUEsQUFBTSxNQUFOLE1BQU0sQ0FBQyxDQUFFLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxRQUFRLENBQUM7QUFDdEMsQUFBQSxBQUFBLE1BQU0sQ0FBQyxNQUFNLEMsQ0FBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUEsQ0FBQTtBQUMzQyxBQUFBLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxRQUFRLEM7QUFBQyxDQUFBO0FBQ3BDLEFBQUE7QUFDQSxBQUFBLEssQyxPLEcsQ0FBVSxHQUFHLENBQUMsQyxNLElBQW9CLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUEsQ0FBQSxDQUF0QyxNQUFBLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxNQUFNLEMsRyxJLENBQW1CO0FBQ3BELEFBQUEsQyxPLE1BQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxJLEM7QUFBSSxDLENBRE4sTUFBTixNQUFNLENBQUMsQyxPQUNLO0FBQ1osQUFBQTtBQUNBLEFBQUEsQUFBQSxHQUFHLENBQUEsQUFBQyxNQUFNLENBQUE7QUFDViIsIm5hbWVzIjpbXSwic291cmNlc0NvbnRlbnQiOlsiIyB0ZW1wLmNpdmV0XG5cbmltcG9ydCB7XG5cdHVuZGVmLCBkZWZpbmVkLCBub3RkZWZpbmVkLCBMT0csIEZBSUwsIFNVQ0NFRUQsXG5cdGJ1aWxkRmlsZU5hbWUsIGZpbmRGaWxlLCBjZW50ZXJlZCxcblx0fSBmcm9tICdiYXNlLXV0aWxzJ1xuaW1wb3J0IHtvLCBoYXNLZXlzfSBmcm9tICdsbHV0aWxzJ1xuaW1wb3J0IHtnZXRDbWRBcmdzfSBmcm9tICdjbWQtYXJncydcbmltcG9ydCB7Y2l2ZXQyYXN0fSBmcm9tICdjaXZldCdcbmltcG9ydCB7YXN0QXNTdHJpbmd9IGZyb20gJ3R5cGVzY3JpcHQnXG5pbXBvcnQge1ROb2RlSW5mbywgV2Fsa2VyfSBmcm9tICd3YWxrZXInXG5cbmdldENtZEFyZ3MoKVxuXG4jIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG5jbGFzcyBQZXJzb25cblx0bmFtZTogc3RyaW5nXG5cdGdlbmRlcjogJ21hbGUnIHwgJ2ZlbWFsZSdcblx0Y29uc3RydWN0b3IoQG5hbWU6IHN0cmluZywgQGdlbmRlcjogJ21hbGUnfCdmZW1hbGUnKVxuXG5kZWJ1Z2dlclxuXG5oIDo9IHtcblx0ZnJpZW5kczogW1xuXHRcdHtuYW1lOiAnSm9obiBCb3dsaW5nJywgZ2VuZGVyOiAnbWFsZSd9XG5cdFx0e25hbWU6ICdKdWxpZSBCb29rZXInLCBnZW5kZXI6ICdmZW1hbGUnfVxuXHRcdF1cblx0bmFtZTogJ0pvaG4gRGVpZ2hhbidcblx0Z2VuZGVyOiAnbWFsZSdcblx0YWRkcmVzczoge1xuXHRcdHN0cmVldDogJzE3NDkgTWFpbiBTdC4nXG5cdFx0Y2l0eTogJ0JsYWNrc2J1cmcnXG5cdFx0c3RhdGU6ICdWQSdcblx0XHR9XG5cdH0gYXMgY29uc3Rcblxud2Fsa2VyIDo9IG5ldyBXYWxrZXI8UGVyc29uPignUGVyc29uJylcbndhbGtlci5pc05vZGUgPSAoeDogb2JqZWN0KTogeCBpcyBQZXJzb24gPT5cblx0cmV0dXJuIGhhc0tleXMoeCwgJ25hbWUnLCAnZ2VuZGVyJylcblxubE5hbWVzIDo9IGZvciBoOiBUTm9kZUluZm88UGVyc29uPiBvZiB3YWxrZXIud2FsayhoKVxuXHRoLm5vZGUubmFtZVxuXG5MT0cgbE5hbWVzXG4iXX0=