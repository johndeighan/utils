"use strict";
// extract.lib.test.civet

import {getCmdArgs} from 'cmd-args'
import {
	TPathItem, extract, getString, getNumber,
	} from 'extract'

import {
	equal, truthy, falsy, succeeds, fails, codeLike,
	isType, notType,
	} from 'unit-test'

getCmdArgs()

// ---------------------------------------------------------------------------

equal(extract({n: 42}, '.n'), 42)

class Person {
	name: string
	gender: TGender
	constructor(name1: string, gender1: TGender){this.name = name1;this.gender = gender1;}
}

type TGender = 'male' | 'female'

const h = {
	friends: [
		new Person('John Bowling', 'male'),
		new Person('Julie Booker', 'female')
		],
	name: 'John Deighan',
	gender: 'male',
	address: {
		street: '1749 Main St.',
		city: 'Blacksburg',
		state: 'VA'
		}
	} as const

equal(extract(h, '.name'), 'John Deighan')
equal(extract(h, '.friends[1].name'), 'Julie Booker')
equal(extract(h, '.friends[0].gender'), 'male')
equal(extract(h, '.friends[1]'), new Person('Julie Booker', 'female'))
equal(extract(h, ''), h)
equal(extract(h, '.address.city'), 'Blacksburg');

// ---------------------------------------------------------------------------

(() => {
	const h = {
		a: 1,
		b: 2,
		c: [
			'abc',
			'def'
			]
		}

	const s = getString(h, '.c[1]')
	equal(s, 'def')
	equal(s.length, 3)

	const n = getNumber(h, '.b')
	equal(n, 2)
}
	)()

// ---------------------------------------------------------------------------

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQzpcXFVzZXJzXFxqb2huZFxcdXRpbHNcXHNyY1xcdGVzdFxcZXh0cmFjdC5saWIudGVzdC5jaXZldC50c3giLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcam9obmRcXHV0aWxzXFxzcmNcXHRlc3RcXGV4dHJhY3QubGliLnRlc3QuY2l2ZXQiXSwibWFwcGluZ3MiOiI7QUFBQSx5QkFBd0I7QUFDeEIsQUFBQTtBQUNBLEFBQUEsTUFBTSxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQVU7QUFDbkMsQUFBQSxBQUFBLE1BQU0sQ0FBQyxDQUFDO0FBQ1IsQ0FBQyxTQUFTLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxTQUFTLENBQUM7QUFDMUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVM7QUFDakIsQUFBQTtBQUNBLEFBQUEsQUFBQSxNQUFNLENBQUMsQ0FBQztBQUNSLENBQUMsS0FBSyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsUUFBUSxDQUFDO0FBQ2pELENBQUMsTUFBTSxDQUFDLENBQUMsT0FBTyxDQUFDO0FBQ2pCLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxXQUFXO0FBQ25CLEFBQUE7QUFDQSxBQUFBLEFBQUEsVUFBVSxDQUFDLENBQUM7QUFDWixBQUFBO0FBQ0EsQUFBQSw4RUFBNkU7QUFDN0UsQUFBQTtBQUNBLEFBQUEsQUFBQSxLQUFLLENBQUEsQUFBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFBO0FBQ2hDLEFBQUE7QUFDQSxBQUFBLEFBQUEsS0FBSyxDQUFDLE1BQU0sQ0FBQSxDQUFBO0FBQ1osQUFBQSxDQUFDLElBQUksQ0FBQyxDQUFDLE1BQU07QUFDYixBQUFBLENBQUMsTUFBTSxDQUFDLENBQUMsT0FBTztB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QyxDQUFDLENBQUE7QUFDbEIsQUFBQTtBQUNBLEFBQUEsQ0FBRSxNQUFELENBQUMsQ0FBQyxDQUFFLENBQUMsU0FBUyxDQUFBLEFBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFBO0FBQ3ZCLEFBQUEsQ0FBQyxLQUFLLENBQUEsQUFBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEM7QUFBQSxDQUFBO0FBQ1gsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNKO0FBQ0EsQUFBQSw4RUFBNkU7QUFDN0UiLCJuYW1lcyI6W10sInNvdXJjZXNDb250ZW50IjpbIiMgZXh0cmFjdC5saWIudGVzdC5jaXZldFxuXG5pbXBvcnQge2dldENtZEFyZ3N9IGZyb20gJ2NtZC1hcmdzJ1xuaW1wb3J0IHtcblx0VFBhdGhJdGVtLCBleHRyYWN0LCBnZXRTdHJpbmcsIGdldE51bWJlcixcblx0fSBmcm9tICdleHRyYWN0J1xuXG5pbXBvcnQge1xuXHRlcXVhbCwgdHJ1dGh5LCBmYWxzeSwgc3VjY2VlZHMsIGZhaWxzLCBjb2RlTGlrZSxcblx0aXNUeXBlLCBub3RUeXBlLFxuXHR9IGZyb20gJ3VuaXQtdGVzdCdcblxuZ2V0Q21kQXJncygpXG5cbiMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbmVxdWFsIGV4dHJhY3Qoe246IDQyfSwgJy5uJyksIDQyXG5cbmNsYXNzIFBlcnNvblxuXHRuYW1lOiBzdHJpbmdcblx0Z2VuZGVyOiBUR2VuZGVyXG5cdGNvbnN0cnVjdG9yKEBuYW1lOiBzdHJpbmcsIEBnZW5kZXI6IFRHZW5kZXIpXG5cbnR5cGUgVEdlbmRlciA9ICdtYWxlJyB8ICdmZW1hbGUnXG5cbmggOj0ge1xuXHRmcmllbmRzOiBbXG5cdFx0bmV3IFBlcnNvbignSm9obiBCb3dsaW5nJywgJ21hbGUnKVxuXHRcdG5ldyBQZXJzb24oJ0p1bGllIEJvb2tlcicsICdmZW1hbGUnKVxuXHRcdF1cblx0bmFtZTogJ0pvaG4gRGVpZ2hhbidcblx0Z2VuZGVyOiAnbWFsZSdcblx0YWRkcmVzczoge1xuXHRcdHN0cmVldDogJzE3NDkgTWFpbiBTdC4nXG5cdFx0Y2l0eTogJ0JsYWNrc2J1cmcnXG5cdFx0c3RhdGU6ICdWQSdcblx0XHR9XG5cdH0gYXMgY29uc3RcblxuZXF1YWwgZXh0cmFjdChoLCAnLm5hbWUnKSwgJ0pvaG4gRGVpZ2hhbidcbmVxdWFsIGV4dHJhY3QoaCwgJy5mcmllbmRzWzFdLm5hbWUnKSwgJ0p1bGllIEJvb2tlcidcbmVxdWFsIGV4dHJhY3QoaCwgJy5mcmllbmRzWzBdLmdlbmRlcicpLCAnbWFsZSdcbmVxdWFsIGV4dHJhY3QoaCwgJy5mcmllbmRzWzFdJyksIG5ldyBQZXJzb24oJ0p1bGllIEJvb2tlcicsICdmZW1hbGUnKVxuZXF1YWwgZXh0cmFjdChoLCAnJyksIGhcbmVxdWFsIGV4dHJhY3QoaCwgJy5hZGRyZXNzLmNpdHknKSwgJ0JsYWNrc2J1cmcnXG5cbiMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbigoKSA9PlxuXHRoIDo9IHtcblx0XHRhOiAxXG5cdFx0YjogMlxuXHRcdGM6IFtcblx0XHRcdCdhYmMnXG5cdFx0XHQnZGVmJ1xuXHRcdFx0XVxuXHRcdH1cblxuXHRzIDo9IGdldFN0cmluZyBoLCAnLmNbMV0nXG5cdGVxdWFsIHMsICdkZWYnXG5cdGVxdWFsIHMubGVuZ3RoLCAzXG5cblx0biA6PSBnZXROdW1iZXIgaCwgJy5iJ1xuXHRlcXVhbCBuLCAyXG5cdCkoKVxuXG4jIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuIl19