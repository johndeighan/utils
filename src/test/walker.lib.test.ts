"use strict";
// walker.lib.test.civet

import {undef, hash} from 'datatypes'
import {hasKey, hasKeys} from 'llutils'
import {DBG} from 'logger'
import {getCmdArgs} from 'cmd-args'
import {Walker} from 'walker'
import {equal, truthy, falsy, isType, notType} from 'unit-test'

getCmdArgs()

// ---------------------------------------------------------------------------

DBG("class Walker");

(() => {
	// --- Try a very simple class

	type TGender = 'male' | 'female'

	class Person {
		name: string
		gender: TGender
		constructor(name1: string, gender1: TGender){this.name = name1;this.gender = gender1;}
	}

	class PersonWalker extends Walker<Person> {
		override isNode = (x: object): x is Person => {
			return x instanceof Person
		}
	}

	const walker = new PersonWalker()

	// --- Walk a single node
	const person = new Person('John', 'male')
	const results=[];for (const {name, gender} of walker.walk(person)) {
		results.push(`${name} is ${gender}`)
	};const lStrings =results
	equal(lStrings, ['John is male'])

	// --- Walk an array
	const results1=[];for (const {name, gender} of walker.walk([
			new Person('John', 'male'),
			new Person('Julie', 'female')
			])) {
		results1.push(`${name} is ${gender}`)
	};const lStrings2 =results1
	equal(lStrings2, ['John is male', 'Julie is female'])

	// --- Walk an object
	const results2=[];for (const {name, gender} of walker.walk({
			first: new Person('John', 'male'),
			second: new Person('Julie', 'female')
			})) {
		results2.push(`${name} is ${gender}`)
	};const lStrings3 =results2
	equal(lStrings3, [
		'John is male',
		'Julie is female'     // TODO add key by querying for parent
		])

	const h = {
		friends: [
			new Person('John Bowling', 'male'),
			new Person('Julie Booker', 'female')
			],
		name: 'John Deighan',
		gender: 'male',
		address: {
			street: '1749 Main St.',
			city: 'Blacksburg',
			state: 'VA'
			}
		} as const

	const results3=[];for (const {name} of walker.walk(h)) {
		results3.push(name)
	};const lNames =results3
	equal(lNames, ['John Bowling', 'Julie Booker'])

	// --- put it in an array
	const arr = [{
		friends: [
			new Person('John Bowling', 'male'),
			new Person('Julie Booker', 'female')
			],
		name: 'John Deighan',
		gender: 'male',
		address: {
			street: '1749 Main St.',
			city: 'Blacksburg',
			state: 'VA'
			}
		}] as const

	const results4=[];for (const {name} of walker.walk(arr)) {
		results4.push(name)
	};const lNames2 =results4
	equal(lNames2, ['John Bowling', 'Julie Booker'])

	// --- put it in a hash
	const h3 = { stuff: {
		friends: [
			new Person('John Bowling', 'male'),
			new Person('Julie Booker', 'female')
			],
		name: 'John Deighan',
		gender: 'male',
		address: {
			street: '1749 Main St.',
			city: 'Blacksburg',
			state: 'VA'
			}
		}} as const

	const results5=[];for (const {name} of walker.walk(h3)) {
		results5.push(`${walker.level} ${name}`)
	};const lNames3 =results5
	equal(lNames3, ['0 John Bowling', '0 Julie Booker'])
}
	)();

// --- NOTE: In the above, the nodes must be Person objects,
//           not just hashes with the keys 'name' and 'gender'
// --- However, if you just want to check for those keys,
//        you can overried the isNode() method

(() => {
	// --- A node is a hash with keys 'name' and 'gender'

	type Person = {
		name: string
		gender: 'male' | 'female'
		}

	class PersonWalker extends Walker<hash> {
		override isNode = (x: object): x is hash => {
			return hasKeys(x, 'name', 'gender')
		}
	}
	const walker = new PersonWalker()

	// --- Walk a single node
	const person = {name: 'John', gender: 'male'}
	const results6=[];for (const {name, gender} of walker.walk(person)) {
		results6.push(`${name} is ${gender}`)
	};const lStrings =results6
	equal(lStrings, ['John is male'])

	// --- Walk an array
	const results7=[];for (const {name, gender} of walker.walk([
			{name: 'John', gender: 'male'},
			{name: 'Julie', gender: 'female'}
			])) {
		results7.push(`${name} is ${gender}`)
	};const lStrings2 =results7
	equal(lStrings2, ['John is male', 'Julie is female'])

	// --- Walk an object
	const results8=[];for (const node of walker.walk({
			first: {name: 'John', gender: 'male'},
			second: {name: 'Julie', gender: 'female'}
			})) {
		results8.push(`${node.name} is ${node.gender}`)
	};const lStrings3 =results8
	equal(lStrings3, [
		'John is male',
		'Julie is female'
		])

	const h = {
		friends: [
			{name: 'John Bowling', gender: 'male'},
			{name: 'Julie Booker', gender: 'female'}
			],
		name: 'John Deighan',
		gender: 'male',
		address: {
			street: '1749 Main St.',
			city: 'Blacksburg',
			state: 'VA'
			}
		} as const

	const results9=[];for (const node of walker.walk(h)) {
		results9.push(node.name)
	};const lNames =results9
	equal(lNames, ['John Deighan', 'John Bowling', 'Julie Booker'])

	// --- put it in an array
	const h2 = [{
		friends: [
			{name: 'John Bowling', gender: 'male'},
			{name: 'Julie Booker', gender: 'female'}
			],
		name: 'John Deighan',
		gender: 'male',
		address: {
			street: '1749 Main St.',
			city: 'Blacksburg',
			state: 'VA'
			}
		}] as const

	const results10=[];for (const node of walker.walk(h2)) {
		results10.push(node.name)
	};const lNames2 =results10
	equal(lNames2, ['John Deighan', 'John Bowling', 'Julie Booker'])

	// --- put it in a hash
	const h3 = { stuff: {
		friends: [
			{name: 'John Bowling', gender: 'male'},
			{name: 'Julie Booker', gender: 'female'}
			],
		name: 'John Deighan',
		gender: 'male',
		address: {
			street: '1749 Main St.',
			city: 'Blacksburg',
			state: 'VA'
			}
		}} as const

	const results11=[];for (const node of walker.walk(h3)) {
		results11.push(node.name)
	};const lNames3 =results11
	equal(lNames3, ['John Deighan', 'John Bowling', 'Julie Booker'])
}
	)();

// ---------------------------------------------------------------------------

(() => {
	const h = {
		name: 'John D',
		age: 72,
		friends: [
			{
				name: 'John B',
				alias: {name: 'male JB'}
				},
			{
				name: 'Julie',
				aliases: [{name: 'female JB'}]
				},
			{name: 'Aaron'},
			{notname: 'building'}
			],
		enemies: {
			a: {name: 'Donald', kind: 'scumbag'},
			b: {name: 'Satan',  kind: 'devil'},
			c: {notname: 'woods', key: 'nothing'}
			}
		}

	class PersonWalker extends Walker<hash> {
		override isNode(x: object): x is hash {
			return hasKey(x, 'name')
		}
	}

	const walker = new PersonWalker()

	const results12=[];for (const node of walker.walk(h)) {
		results12.push([walker.level, node.name])
	};const lItems =results12

	equal(lItems, [
		[ 0, "John D" ],
		[ 1, "John B" ],
		[ 2, "male JB" ],
		[ 1, "Julie" ],
		[ 2, "female JB" ],
		[ 1, "Aaron" ],
		[ 1, "Donald" ],
		[ 1, "Satan" ]
		])
}
	)()


//# sourceMappingURL=data:application/json;base64,