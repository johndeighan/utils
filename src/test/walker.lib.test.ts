"use strict";
// walker.lib.test.civet

import {undef, hash} from 'datatypes'
import {hasKey, hasKeys} from 'llutils'
import {LOG, DBG} from 'logger'
import {getCmdArgs} from 'cmd-args'
import {Walker} from 'walker'
import {equal, truthy, falsy, isType, notType} from 'unit-test'

getCmdArgs()

// ---------------------------------------------------------------------------

DBG("class Walker");

(() => {
	// --- Try a very simple class

	type TGender = 'male' | 'female'

	class Person {
		name: string
		gender: TGender
		constructor(name1: string, gender1: TGender){this.name = name1;this.gender = gender1;}
	}

	class PersonWalker extends Walker<Person> {
		override isNode = (x: object): x is Person => {
			return x instanceof Person
		}
	}

	const walker = new PersonWalker()

	// --- Walk a single node
	const person = new Person('John', 'male')
	const results=[];for (const {name, gender} of walker.walk(person)) {
		results.push(`${name} is ${gender}`)
	};const lStrings =results
	equal(lStrings, ['John is male'])

	// --- Walk an array
	const results1=[];for (const {name, gender} of walker.walk([
			new Person('John', 'male'),
			new Person('Julie', 'female')
			])) {
		results1.push(`${name} is ${gender}`)
	};const lStrings2 =results1
	equal(lStrings2, ['John is male', 'Julie is female'])

	// --- Walk an object
	const results2=[];for (const {name, gender} of walker.walk({
			first: new Person('John', 'male'),
			second: new Person('Julie', 'female')
			})) {
		results2.push(`${name} is ${gender}`)
	};const lStrings3 =results2
	equal(lStrings3, [
		'John is male',
		'Julie is female'     // TODO add key by querying for parent
		])

	const h = {
		friends: [
			new Person('John Bowling', 'male'),
			new Person('Julie Booker', 'female')
			],
		name: 'John Deighan',
		gender: 'male',
		address: {
			street: '1749 Main St.',
			city: 'Blacksburg',
			state: 'VA'
			}
		} as const

	const results3=[];for (const {name} of walker.walk(h)) {
		results3.push(name)
	};const lNames =results3
	equal(lNames, ['John Bowling', 'Julie Booker'])

	// --- put it in an array
	const arr = [{
		friends: [
			new Person('John Bowling', 'male'),
			new Person('Julie Booker', 'female')
			],
		name: 'John Deighan',
		gender: 'male',
		address: {
			street: '1749 Main St.',
			city: 'Blacksburg',
			state: 'VA'
			}
		}] as const

	const results4=[];for (const {name} of walker.walk(arr)) {
		results4.push(name)
	};const lNames2 =results4
	equal(lNames2, ['John Bowling', 'Julie Booker'])

	// --- put it in a hash
	const h3 = { stuff: {
		friends: [
			new Person('John Bowling', 'male'),
			new Person('Julie Booker', 'female')
			],
		name: 'John Deighan',
		gender: 'male',
		address: {
			street: '1749 Main St.',
			city: 'Blacksburg',
			state: 'VA'
			}
		}} as const

	const results5=[];for (const {name} of walker.walk(h3)) {
		results5.push(`${walker.level} ${name}`)
	};const lNames3 =results5
	equal(lNames3, ['0 John Bowling', '0 Julie Booker'])
}
	)();

// --- NOTE: In the above, the nodes must be Person objects,
//           not just hashes with the keys 'name' and 'gender'
// --- However, if you just want to check for those keys,
//        you can overried the isNode() method

(() => {
	// --- A node is a hash with keys 'name' and 'gender'

	type Person = {
		name: string
		gender: 'male' | 'female'
		}

	class PersonWalker extends Walker<Person> {
		override isNode = (x: object): x is Person => {
			return hasKeys(x, 'name', 'gender')
		}
	}
	const walker = new PersonWalker()

	// --- Walk a single node
	const person = {name: 'John', gender: 'male'}
	const results6=[];for (const {name, gender} of walker.walk(person)) {
		results6.push(`${name} is ${gender}`)
	};const lStrings =results6
	equal(lStrings, ['John is male'])

	// --- Walk an array
	const results7=[];for (const {name, gender} of walker.walk([
			{name: 'John', gender: 'male'},
			{name: 'Julie', gender: 'female'}
			])) {
		results7.push(`${name} is ${gender}`)
	};const lStrings2 =results7
	equal(lStrings2, ['John is male', 'Julie is female'])

	// --- Walk an object
	const results8=[];for (const node of walker.walk({
			first: {name: 'John', gender: 'male'},
			second: {name: 'Julie', gender: 'female'}
			})) {
		results8.push(`${node.name} is ${node.gender}`)
	};const lStrings3 =results8
	equal(lStrings3, [
		'John is male',
		'Julie is female'
		])

	const h = {
		friends: [
			{name: 'John Bowling', gender: 'male'},
			{name: 'Julie Booker', gender: 'female'}
			],
		name: 'John Deighan',
		gender: 'male',
		address: {
			street: '1749 Main St.',
			city: 'Blacksburg',
			state: 'VA'
			}
		} as const

	const results9=[];for (const node of walker.walk(h)) {
		results9.push(node.name)
	};const lNames =results9
	equal(lNames, ['John Deighan', 'John Bowling', 'Julie Booker'])

	// --- put it in an array
	const h2 = [{
		friends: [
			{name: 'John Bowling', gender: 'male'},
			{name: 'Julie Booker', gender: 'female'}
			],
		name: 'John Deighan',
		gender: 'male',
		address: {
			street: '1749 Main St.',
			city: 'Blacksburg',
			state: 'VA'
			}
		}] as const

	const results10=[];for (const node of walker.walk(h2)) {
		results10.push(node.name)
	};const lNames2 =results10
	equal(lNames2, ['John Deighan', 'John Bowling', 'Julie Booker'])

	// --- put it in a hash
	const h3 = { stuff: {
		friends: [
			{name: 'John Bowling', gender: 'male'},
			{name: 'Julie Booker', gender: 'female'}
			],
		name: 'John Deighan',
		gender: 'male',
		address: {
			street: '1749 Main St.',
			city: 'Blacksburg',
			state: 'VA'
			}
		}} as const

	const results11=[];for (const node of walker.walk(h3)) {
		results11.push(node.name)
	};const lNames3 =results11
	equal(lNames3, ['John Deighan', 'John Bowling', 'Julie Booker'])
}
	)();

// ---------------------------------------------------------------------------

(() => {
	const h = {
		name: 'John D',
		age: 72,
		friends: [
			{
				name: 'John B',
				alias: {name: 'male JB'}
				},
			{
				name: 'Julie',
				aliases: [{name: 'female JB'}]
				},
			{name: 'Aaron'},
			{notname: 'building'}
			],
		enemies: {
			a: {name: 'Donald', kind: 'scumbag'},
			b: {name: 'Satan',  kind: 'devil'},
			c: {notname: 'woods', key: 'nothing'}
			}
		}

	class PersonWalker extends Walker<Person> {
		override isNode(x: object): x is Person {
			return hasKey(x, 'name')
		}
	}

	const walker = new PersonWalker()

	const results12=[];for (const node of walker.walk(h)) {
		results12.push([walker.level, node.name])
	};const lItems =results12

	equal(lItems, [
		[ 0, "John D" ],
		[ 1, "John B" ],
		[ 2, "male JB" ],
		[ 1, "Julie" ],
		[ 2, "female JB" ],
		[ 1, "Aaron" ],
		[ 1, "Donald" ],
		[ 1, "Satan" ]
		])
}
	)()

// ---------------------------------------------------------------------------
// --- Define some classes to use in subsequent tests

class Person {
	name: string
	gender: 'male' | 'female'
	email: (string | undefined)
	constructor(
			name2: string,
			gender2: 'male' | 'female',
			email1: (string | undefined) = undef
			){this.name = name2;this.gender = gender2;this.email = email1;}
}

class PersonWalker extends Walker<Person> {
	override isNode(x: object): x is Person {
		return x instanceof Person
	}
};

// ---------------------------------------------------------------------------
// --- Walk a single node

(() => {
	const hAst = new Person('John', 'male')

	const walker = new PersonWalker()

	const results13=[];for (const {name} of walker.walk(hAst)) {
		results13.push(name)
	};const lNames =results13
	const results14=[];for (const {gender} of walker.walk(hAst)) {
		results14.push(gender)
	};const lGenders =results14
	const results15=[];for (const {name, gender} of walker.walk(hAst)) {
		results15.push(`${name} is ${gender}`)
	};const lDesc =results15

	equal(lNames,   ['John'])
	equal(lGenders, ['male'])
	equal(lDesc,    ['John is male'])
}
	)();

// ---------------------------------------------------------------------------
// --- Walk an array of nodes

(() => {
	const hAst = [
		new Person('John', 'male'),
		new Person('Julie', 'female')
		]

	const walker = new PersonWalker()

	const results16=[];for (const {name} of walker.walk(hAst)) {
		results16.push(name)
	};const lNames   =results16
	const results17=[];for (const {gender} of walker.walk(hAst)) {
		results17.push(gender)
	};const lGenders =results17
	const results18=[];for (const {name, gender} of walker.walk(hAst)) {
		results18.push(`${name} is ${gender}`)
	};const lDesc    =results18

	equal(lNames,   ['John', 'Julie'])
	equal(lGenders, ['male', 'female'])
	equal(lDesc,    ['John is male', 'Julie is female'])
}
	)();

// ---------------------------------------------------------------------------
// --- Walk a hash with node values

(() => {
	const hAst = {
		first: new Person('John', 'male'),
		second: new Person('Julie', 'female')
		}

	const walker = new PersonWalker()

	const results19=[];for (const {name} of walker.walk(hAst)) {
		results19.push(name)
	};const lNames   =results19
	const results20=[];for (const {gender} of walker.walk(hAst)) {
		results20.push(gender)
	};const lGenders =results20
	const results21=[];for (const {name, gender} of walker.walk(hAst)) {
		results21.push(`${name} is ${gender}`)
	};const lDesc    =results21

	equal(lNames,   ['John', 'Julie'])
	equal(lGenders, ['male', 'female'])
	equal(lDesc,    ['John is male', 'Julie is female'])
}
	)();

// ---------------------------------------------------------------------------
// --- Walk a complex structure with nodes inside
//     including hashes that look like a Person, but it's not

(() => {
	const hAst = {
		first: new Person('John', 'male'),
		third: {name: 'Julie', gender: 'female'},
		fourth: {name: 'Bob', gender: 'male', email: 'bob@gmail.com'},
		pos: 1,
		end: 42,
		second: [
			{
				person: new Person('Julie', 'female'),
				index: 13.2,
				for: 'me'
				},
			[1,2,3]
			]
		}

	const walker = new PersonWalker()

	const results22=[];for (const {name} of walker.walk(hAst)) {
		results22.push(name)
	};const lNames   =results22
	const results23=[];for (const {gender} of walker.walk(hAst)) {
		results23.push(gender)
	};const lGenders =results23
	const results24=[];for (const {name, gender} of walker.walk(hAst)) {
		results24.push(`${name} is ${gender}`)
	};const lDesc    =results24

	equal(lNames,   ['John', 'Julie'])
	equal(lGenders, ['male', 'female'])
	equal(lDesc,    ['John is male', 'Julie is female'])
}
	)();

// ---------------------------------------------------------------------------
// --- Redefine node to be anything with name and gender

(() => {
	const hAst = {
		first: new Person('John', 'male'),
		third: {name: 'Julie', gender: 'female'},
		fourth: {name: 'Bob', gender: 'male', email: 'bob@gmail.com'},
		pos: 1,
		end: 42,
		second: [
			{
				person: new Person('Jane', 'female'),
				index: 13.2,
				for: 'me'
				},
			[1,2,3]
			]
		}

	class NewPersonWalker extends Walker<Person> {
		override isNode(x: object): x is Person {
			return hasKeys(x, 'name', 'gender')
		}
	}

	const walker = new NewPersonWalker()

	const results25=[];for (const {name, gender} of walker.walk(hAst)) {
		results25.push(`${name} is ${gender}`)
	};const lDesc =results25

	equal(lDesc, [
		'John is male',
		'Julie is female',
		'Bob is male',
		'Jane is female'
		])

	// --- Try extended walking

	const results26=[];for (const [vkind, {name, gender}] of walker.walkEx(hAst)) {if (!(vkind === 'enter')) continue;
		results26.push(`${name} is ${gender}`)
	};const lDesc2 =results26

	equal(lDesc2, [
		'John is male',
		'Julie is female',
		'Bob is male',
		'Jane is female'
		])
}
	)();

// ---------------------------------------------------------------------------
// --- test extended walking

(() => {
	const hAst = {
		kind: 'top',
		first: 'first',
		next: {
			kind: 'next',
			a: 'one',
			b: 'two',
			c: 'three'
			},
		last: {
			kind: 'last',
			A: 'one',
			B: 'two'
			}
		}


	const walker = new Walker()
	const results27=[];for (const [vkind, item] of walker.walkEx(hAst)) {
		results27.push(`${vkind} ${item.kind}`)
	};const lItems =results27
	equal(lItems, [
		'enter top',
		'enter next',
		'exit next',
		'enter last',
		'exit last',
		'exit top'
		])
}
	)()

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQzpcXFVzZXJzXFxqb2huZFxcdXRpbHNcXHNyY1xcdGVzdFxcd2Fsa2VyLmxpYi50ZXN0LmNpdmV0LnRzeCIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxqb2huZFxcdXRpbHNcXHNyY1xcdGVzdFxcd2Fsa2VyLmxpYi50ZXN0LmNpdmV0Il0sIm1hcHBpbmdzIjoiO0FBQUEsd0JBQXVCO0FBQ3ZCLEFBQUE7QUFDQSxBQUFBLE1BQU0sQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxXQUFXO0FBQ3JDLEFBQUEsQUFBQSxNQUFNLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxJQUFJLENBQUMsU0FBUztBQUN2QyxBQUFBLEFBQUEsTUFBTSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVE7QUFDL0IsQUFBQSxBQUFBLE1BQU0sQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFVO0FBQ25DLEFBQUEsQUFBQSxNQUFNLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUTtBQUM3QixBQUFBLEFBQUEsTUFBTSxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUFDLFdBQVc7QUFDL0QsQUFBQTtBQUNBLEFBQUEsQUFBQSxVQUFVLENBQUMsQ0FBQztBQUNaLEFBQUE7QUFDQSxBQUFBLDhFQUE2RTtBQUM3RSxBQUFBO0FBQ0EsQUFBQSxBQUFBLEdBQUcsQ0FBQSxBQUFDLGNBQWMsQyxDQUFBO0FBQ2xCLEFBQUE7QUFDQSxBQUFBLEFBQUEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUEsQ0FBQTtBQUNOLEFBQUEsQ0FBQyw4QkFBNkI7QUFDOUIsQUFBQTtBQUNBLEFBQUEsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLFFBQVE7QUFDakMsQUFBQTtBQUNBLEFBQUEsQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFBLENBQUE7QUFDYixBQUFBLEVBQUUsSUFBSSxDQUFDLENBQUMsTUFBTTtBQUNkLEFBQUEsRUFBRSxNQUFNLENBQUMsQ0FBQyxPQUFPO0FBQ2pCLEFBQUEsRSxXQUFhLEMsS0FBTSxDQUFDLENBQUMsTUFBTSxDQUFDLEMsT0FBUSxDQUFDLENBQUMsT0FBTyxDLEMsWSxLLEMsYyxPLEMsQztDQUFDLENBQUE7QUFDOUMsQUFBQTtBQUNBLEFBQUEsQ0FBQyxLQUFLLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUEsQ0FBQTtBQUMxQyxBQUFBLEVBQUUsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQSxDQUFBO0FBQy9DLEFBQUEsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxNO0VBQU0sQztDQUFBLENBQUE7QUFDN0IsQUFBQTtBQUNBLEFBQUEsQ0FBTyxNQUFOLE1BQU0sQ0FBQyxDQUFFLENBQUMsR0FBRyxDQUFDLFlBQVksQ0FBQyxDQUFDO0FBQzdCLEFBQUE7QUFDQSxBQUFBLENBQUMseUJBQXdCO0FBQ3pCLEFBQUEsQ0FBTyxNQUFOLE1BQU0sQ0FBQyxDQUFFLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxNQUFNLENBQUM7QUFDckMsQUFBQSxDLEssQyxPLEcsQ0FBYSxHQUFHLENBQUMsQ0FBQSxNQUFBLENBQUMsSUFBSSxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUEsQ0FBQSxDQUFBO0FBQ3RELEFBQUEsRSxPLE1BQUUsQ0FBQyxFQUFFLElBQUksQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDLEMsQztDQUFDLEMsQ0FEZixNQUFSLFFBQVEsQ0FBQyxDLE9BQ2M7QUFDeEIsQUFBQSxDQUFDLEtBQUssQ0FBQSxBQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsY0FBYyxDQUFDLENBQUE7QUFDakMsQUFBQTtBQUNBLEFBQUEsQ0FBQyxvQkFBbUI7QUFDcEIsQUFBQSxDLEssQyxRLEcsQ0FBYyxHQUFHLENBQUMsQ0FBQSxNQUFBLENBQUMsSUFBSSxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUNqRCxBQUFBLEdBQUcsR0FBRyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQTtBQUM3QixBQUFBLEdBQUcsR0FBRyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQyxRQUFRLENBQUM7QUFDaEMsQUFBQSxHQUFHLENBQUMsQ0FBQyxDQUFBLENBQUEsQ0FBQTtBQUNMLEFBQUEsRSxRLE1BQUUsQ0FBQyxFQUFFLElBQUksQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDLEMsQztDQUFDLEMsQ0FKZCxNQUFULFNBQVMsQ0FBQyxDLFFBSWE7QUFDeEIsQUFBQSxDQUFDLEtBQUssQ0FBQSxBQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsY0FBYyxDQUFDLENBQUMsaUJBQWlCLENBQUMsQ0FBQTtBQUNyRCxBQUFBO0FBQ0EsQUFBQSxDQUFDLHFCQUFvQjtBQUNyQixBQUFBLEMsSyxDLFEsRyxDQUFjLEdBQUcsQ0FBQyxDQUFBLE1BQUEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQ2pELEFBQUEsR0FBRyxLQUFLLENBQUMsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFBO0FBQ3BDLEFBQUEsR0FBRyxNQUFNLENBQUMsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDLFFBQVEsQ0FBQztBQUN4QyxHQUFHLENBQUMsQ0FBQyxDQUFBLENBQUEsQ0FBQTtBQUNMLEFBQUEsRSxRLE1BQUUsQ0FBQyxFQUFFLElBQUksQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDLEMsQztDQUFDLEMsQ0FKZCxNQUFULFNBQVMsQ0FBQyxDLFFBSWE7QUFDeEIsQUFBQSxDQUFDLEtBQUssQ0FBQSxBQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUM7QUFDbkIsQUFBQSxFQUFFLGNBQWMsQ0FBQztBQUNqQixBQUFBLEVBQUUsaUJBQWlCLEtBQUssc0NBQXFDO0FBQzdELEFBQUEsRUFBRSxDQUFDLENBQUE7QUFDSCxBQUFBO0FBQ0EsQUFBQSxDQUFFLE1BQUQsQ0FBQyxDQUFDLENBQUUsQ0FBQyxDQUFDO0FBQ1AsQUFBQSxFQUFFLE9BQU8sQ0FBQyxDQUFDLENBQUM7QUFDWixBQUFBLEdBQUcsR0FBRyxDQUFDLE1BQU0sQ0FBQyxjQUFjLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQTtBQUNyQyxBQUFBLEdBQUcsR0FBRyxDQUFDLE1BQU0sQ0FBQyxjQUFjLENBQUMsQ0FBQyxRQUFRLENBQUM7QUFDdkMsQUFBQSxHQUFHLENBQUMsQ0FBQTtBQUNKLEFBQUEsRUFBRSxJQUFJLENBQUMsQ0FBQyxjQUFjLENBQUE7QUFDdEIsQUFBQSxFQUFFLE1BQU0sQ0FBQyxDQUFDLE1BQU0sQ0FBQTtBQUNoQixBQUFBLEVBQUUsT0FBTyxDQUFDLENBQUMsQ0FBQztBQUNaLEFBQUEsR0FBRyxNQUFNLENBQUMsQ0FBQyxlQUFlLENBQUE7QUFDMUIsQUFBQSxHQUFHLElBQUksQ0FBQyxDQUFDLFlBQVksQ0FBQTtBQUNyQixBQUFBLEdBQUcsS0FBSyxDQUFDLENBQUMsSUFBSTtBQUNkLEdBQUcsQ0FBQztBQUNKLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxLQUFLO0FBQ1osQUFBQTtBQUNBLEFBQUEsQyxLLEMsUSxHLENBQVcsR0FBRyxDQUFDLENBQUEsTUFBQSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFBLENBQUEsQ0FBQTtBQUN2QyxBQUFBLEUsUSxNQUFFLEksQztDQUFJLEMsQ0FEQyxNQUFOLE1BQU0sQ0FBQyxDLFFBQ0Y7QUFDTixBQUFBLENBQUMsS0FBSyxDQUFBLEFBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxjQUFjLENBQUMsQ0FBQyxjQUFjLENBQUMsQ0FBQTtBQUMvQyxBQUFBO0FBQ0EsQUFBQSxDQUFDLHlCQUF3QjtBQUN6QixBQUFBLENBQUksTUFBSCxHQUFHLENBQUMsQ0FBRSxDQUFDLENBQUMsQ0FBQztBQUNWLEFBQUEsRUFBRSxPQUFPLENBQUMsQ0FBQyxDQUFDO0FBQ1osQUFBQSxHQUFHLEdBQUcsQ0FBQyxNQUFNLENBQUMsY0FBYyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUE7QUFDckMsQUFBQSxHQUFHLEdBQUcsQ0FBQyxNQUFNLENBQUMsY0FBYyxDQUFDLENBQUMsUUFBUSxDQUFDO0FBQ3ZDLEFBQUEsR0FBRyxDQUFDLENBQUE7QUFDSixBQUFBLEVBQUUsSUFBSSxDQUFDLENBQUMsY0FBYyxDQUFBO0FBQ3RCLEFBQUEsRUFBRSxNQUFNLENBQUMsQ0FBQyxNQUFNLENBQUE7QUFDaEIsQUFBQSxFQUFFLE9BQU8sQ0FBQyxDQUFDLENBQUM7QUFDWixBQUFBLEdBQUcsTUFBTSxDQUFDLENBQUMsZUFBZSxDQUFBO0FBQzFCLEFBQUEsR0FBRyxJQUFJLENBQUMsQ0FBQyxZQUFZLENBQUE7QUFDckIsQUFBQSxHQUFHLEtBQUssQ0FBQyxDQUFDLElBQUk7QUFDZCxHQUFHLENBQUM7QUFDSixFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxLQUFLO0FBQ2IsQUFBQTtBQUNBLEFBQUEsQyxLLEMsUSxHLENBQVksR0FBRyxDQUFDLENBQUEsTUFBQSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFBLENBQUEsQ0FBQTtBQUMxQyxBQUFBLEUsUSxNQUFFLEksQztDQUFJLEMsQ0FERSxNQUFQLE9BQU8sQ0FBQyxDLFFBQ0g7QUFDTixBQUFBLENBQUMsS0FBSyxDQUFBLEFBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxjQUFjLENBQUMsQ0FBQyxjQUFjLENBQUMsQ0FBQTtBQUNoRCxBQUFBO0FBQ0EsQUFBQSxDQUFDLHVCQUFzQjtBQUN2QixBQUFBLENBQUcsTUFBRixFQUFFLENBQUMsQ0FBRSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO0FBQ2pCLEFBQUEsRUFBRSxPQUFPLENBQUMsQ0FBQyxDQUFDO0FBQ1osQUFBQSxHQUFHLEdBQUcsQ0FBQyxNQUFNLENBQUMsY0FBYyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUE7QUFDckMsQUFBQSxHQUFHLEdBQUcsQ0FBQyxNQUFNLENBQUMsY0FBYyxDQUFDLENBQUMsUUFBUSxDQUFDO0FBQ3ZDLEFBQUEsR0FBRyxDQUFDLENBQUE7QUFDSixBQUFBLEVBQUUsSUFBSSxDQUFDLENBQUMsY0FBYyxDQUFBO0FBQ3RCLEFBQUEsRUFBRSxNQUFNLENBQUMsQ0FBQyxNQUFNLENBQUE7QUFDaEIsQUFBQSxFQUFFLE9BQU8sQ0FBQyxDQUFDLENBQUM7QUFDWixBQUFBLEdBQUcsTUFBTSxDQUFDLENBQUMsZUFBZSxDQUFBO0FBQzFCLEFBQUEsR0FBRyxJQUFJLENBQUMsQ0FBQyxZQUFZLENBQUE7QUFDckIsQUFBQSxHQUFHLEtBQUssQ0FBQyxDQUFDLElBQUk7QUFDZCxHQUFHLENBQUM7QUFDSixFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxLQUFLO0FBQ2IsQUFBQTtBQUNBLEFBQUEsQyxLLEMsUSxHLENBQVksR0FBRyxDQUFDLENBQUEsTUFBQSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFBLENBQUEsQ0FBQTtBQUN6QyxBQUFBLEUsUSxNQUFFLENBQUMsRUFBRSxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsQyxDO0NBQUMsQyxDQURuQixNQUFQLE9BQU8sQ0FBQyxDLFFBQ2tCO0FBQzNCLEFBQUEsQ0FBQyxLQUFLLENBQUEsQUFBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLGdCQUFnQixDQUFDLENBQUMsZ0JBQWdCLENBQUMsQztBQUFBLENBQUE7QUFDcEQsQ0FBQyxDQUFDLENBQUMsQyxDQUFDO0FBQ0osQUFBQTtBQUNBLEFBQUEsNERBQTJEO0FBQzNELEFBQUEsOERBQTZEO0FBQzdELEFBQUEseURBQXdEO0FBQ3hELEFBQUEsOENBQTZDO0FBQzdDLEFBQUE7QUFDQSxBQUFBLEFBQUEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUEsQ0FBQTtBQUNOLEFBQUEsQ0FBQyxxREFBb0Q7QUFDckQsQUFBQTtBQUNBLEFBQUEsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ2hCLEFBQUEsRUFBRSxJQUFJLENBQUMsQ0FBQyxNQUFNO0FBQ2QsQUFBQSxFQUFFLE1BQU0sQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsUUFBUTtBQUMzQixFQUFFLENBQUM7QUFDSCxBQUFBO0FBQ0EsQUFBQSxDQUFDLEtBQUssQ0FBQyxZQUFZLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQSxDQUFBO0FBQzFDLEFBQUEsRUFBRSxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFBLENBQUE7QUFDL0MsQUFBQSxHQUFHLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsUUFBUSxDO0VBQUMsQztDQUFBLENBQUE7QUFDdEMsQUFBQSxDQUFPLE1BQU4sTUFBTSxDQUFDLENBQUUsQ0FBQyxHQUFHLENBQUMsWUFBWSxDQUFDLENBQUM7QUFDN0IsQUFBQTtBQUNBLEFBQUEsQ0FBQyx5QkFBd0I7QUFDekIsQUFBQSxDQUFPLE1BQU4sTUFBTSxDQUFDLENBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLE1BQU0sQ0FBQztBQUN6QyxBQUFBLEMsSyxDLFEsRyxDQUFhLEdBQUcsQ0FBQyxDQUFBLE1BQUEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQSxDQUFBLENBQUE7QUFDdEQsQUFBQSxFLFEsTUFBRSxDQUFDLEVBQUUsSUFBSSxDQUFDLElBQUksRUFBRSxNQUFNLENBQUMsQyxDO0NBQUMsQyxDQURmLE1BQVIsUUFBUSxDQUFDLEMsUUFDYztBQUN4QixBQUFBLENBQUMsS0FBSyxDQUFBLEFBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxjQUFjLENBQUMsQ0FBQTtBQUNqQyxBQUFBO0FBQ0EsQUFBQSxDQUFDLG9CQUFtQjtBQUNwQixBQUFBLEMsSyxDLFEsRyxDQUFjLEdBQUcsQ0FBQyxDQUFBLE1BQUEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQ2pELEFBQUEsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFBO0FBQ2pDLEFBQUEsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLFFBQVEsQ0FBQztBQUNwQyxBQUFBLEdBQUcsQ0FBQyxDQUFDLENBQUEsQ0FBQSxDQUFBO0FBQ0wsQUFBQSxFLFEsTUFBRSxDQUFDLEVBQUUsSUFBSSxDQUFDLElBQUksRUFBRSxNQUFNLENBQUMsQyxDO0NBQUMsQyxDQUpkLE1BQVQsU0FBUyxDQUFDLEMsUUFJYTtBQUN4QixBQUFBLENBQUMsS0FBSyxDQUFBLEFBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxjQUFjLENBQUMsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFBO0FBQ3JELEFBQUE7QUFDQSxBQUFBLENBQUMscUJBQW9CO0FBQ3JCLEFBQUEsQyxLLEMsUSxHLENBQWMsR0FBRyxDQUFDLENBQUEsTUFBQSxJQUFJLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUN2QyxBQUFBLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQTtBQUN4QyxBQUFBLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxRQUFRLENBQUM7QUFDNUMsR0FBRyxDQUFDLENBQUMsQ0FBQSxDQUFBLENBQUE7QUFDTCxBQUFBLEUsUSxNQUFFLENBQUMsRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLEMsQztDQUFDLEMsQ0FKeEIsTUFBVCxTQUFTLENBQUMsQyxRQUl1QjtBQUNsQyxBQUFBLENBQUMsS0FBSyxDQUFBLEFBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQztBQUNuQixBQUFBLEVBQUUsY0FBYyxDQUFDO0FBQ2pCLEFBQUEsRUFBRSxpQkFBaUI7QUFDbkIsQUFBQSxFQUFFLENBQUMsQ0FBQTtBQUNILEFBQUE7QUFDQSxBQUFBLENBQUUsTUFBRCxDQUFDLENBQUMsQ0FBRSxDQUFDLENBQUM7QUFDUCxBQUFBLEVBQUUsT0FBTyxDQUFDLENBQUMsQ0FBQztBQUNaLEFBQUEsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLGNBQWMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFBO0FBQ3pDLEFBQUEsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLGNBQWMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLFFBQVEsQ0FBQztBQUMzQyxBQUFBLEdBQUcsQ0FBQyxDQUFBO0FBQ0osQUFBQSxFQUFFLElBQUksQ0FBQyxDQUFDLGNBQWMsQ0FBQTtBQUN0QixBQUFBLEVBQUUsTUFBTSxDQUFDLENBQUMsTUFBTSxDQUFBO0FBQ2hCLEFBQUEsRUFBRSxPQUFPLENBQUMsQ0FBQyxDQUFDO0FBQ1osQUFBQSxHQUFHLE1BQU0sQ0FBQyxDQUFDLGVBQWUsQ0FBQTtBQUMxQixBQUFBLEdBQUcsSUFBSSxDQUFDLENBQUMsWUFBWSxDQUFBO0FBQ3JCLEFBQUEsR0FBRyxLQUFLLENBQUMsQ0FBQyxJQUFJO0FBQ2QsR0FBRyxDQUFDO0FBQ0osRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLEtBQUs7QUFDWixBQUFBO0FBQ0EsQUFBQSxDLEssQyxRLEcsQ0FBVyxHQUFHLENBQUMsQ0FBQSxNQUFBLElBQUksQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQSxDQUFBLENBQUE7QUFDckMsQUFBQSxFLFEsTUFBRSxJQUFJLENBQUMsSSxDO0NBQUksQyxDQURKLE1BQU4sTUFBTSxDQUFDLEMsUUFDRztBQUNYLEFBQUEsQ0FBQyxLQUFLLENBQUEsQUFBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLGNBQWMsQ0FBQyxDQUFDLGNBQWMsQ0FBQyxDQUFDLGNBQWMsQ0FBQyxDQUFBO0FBQy9ELEFBQUE7QUFDQSxBQUFBLENBQUMseUJBQXdCO0FBQ3pCLEFBQUEsQ0FBRyxNQUFGLEVBQUUsQ0FBQyxDQUFFLENBQUMsQ0FBQyxDQUFDO0FBQ1QsQUFBQSxFQUFFLE9BQU8sQ0FBQyxDQUFDLENBQUM7QUFDWixBQUFBLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxjQUFjLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQTtBQUN6QyxBQUFBLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxjQUFjLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxRQUFRLENBQUM7QUFDM0MsQUFBQSxHQUFHLENBQUMsQ0FBQTtBQUNKLEFBQUEsRUFBRSxJQUFJLENBQUMsQ0FBQyxjQUFjLENBQUE7QUFDdEIsQUFBQSxFQUFFLE1BQU0sQ0FBQyxDQUFDLE1BQU0sQ0FBQTtBQUNoQixBQUFBLEVBQUUsT0FBTyxDQUFDLENBQUMsQ0FBQztBQUNaLEFBQUEsR0FBRyxNQUFNLENBQUMsQ0FBQyxlQUFlLENBQUE7QUFDMUIsQUFBQSxHQUFHLElBQUksQ0FBQyxDQUFDLFlBQVksQ0FBQTtBQUNyQixBQUFBLEdBQUcsS0FBSyxDQUFDLENBQUMsSUFBSTtBQUNkLEdBQUcsQ0FBQztBQUNKLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEtBQUs7QUFDYixBQUFBO0FBQ0EsQUFBQSxDLEssQyxTLEcsQ0FBWSxHQUFHLENBQUMsQ0FBQSxNQUFBLElBQUksQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQSxDQUFBLENBQUE7QUFDdkMsQUFBQSxFLFMsTUFBRSxJQUFJLENBQUMsSSxDO0NBQUksQyxDQURILE1BQVAsT0FBTyxDQUFDLEMsU0FDRTtBQUNYLEFBQUEsQ0FBQyxLQUFLLENBQUEsQUFBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLGNBQWMsQ0FBQyxDQUFDLGNBQWMsQ0FBQyxDQUFDLGNBQWMsQ0FBQyxDQUFBO0FBQ2hFLEFBQUE7QUFDQSxBQUFBLENBQUMsdUJBQXNCO0FBQ3ZCLEFBQUEsQ0FBRyxNQUFGLEVBQUUsQ0FBQyxDQUFFLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7QUFDakIsQUFBQSxFQUFFLE9BQU8sQ0FBQyxDQUFDLENBQUM7QUFDWixBQUFBLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxjQUFjLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQTtBQUN6QyxBQUFBLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxjQUFjLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxRQUFRLENBQUM7QUFDM0MsQUFBQSxHQUFHLENBQUMsQ0FBQTtBQUNKLEFBQUEsRUFBRSxJQUFJLENBQUMsQ0FBQyxjQUFjLENBQUE7QUFDdEIsQUFBQSxFQUFFLE1BQU0sQ0FBQyxDQUFDLE1BQU0sQ0FBQTtBQUNoQixBQUFBLEVBQUUsT0FBTyxDQUFDLENBQUMsQ0FBQztBQUNaLEFBQUEsR0FBRyxNQUFNLENBQUMsQ0FBQyxlQUFlLENBQUE7QUFDMUIsQUFBQSxHQUFHLElBQUksQ0FBQyxDQUFDLFlBQVksQ0FBQTtBQUNyQixBQUFBLEdBQUcsS0FBSyxDQUFDLENBQUMsSUFBSTtBQUNkLEdBQUcsQ0FBQztBQUNKLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEtBQUs7QUFDYixBQUFBO0FBQ0EsQUFBQSxDLEssQyxTLEcsQ0FBWSxHQUFHLENBQUMsQ0FBQSxNQUFBLElBQUksQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQSxDQUFBLENBQUE7QUFDdkMsQUFBQSxFLFMsTUFBRSxJQUFJLENBQUMsSSxDO0NBQUksQyxDQURILE1BQVAsT0FBTyxDQUFDLEMsU0FDRTtBQUNYLEFBQUEsQ0FBQyxLQUFLLENBQUEsQUFBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLGNBQWMsQ0FBQyxDQUFDLGNBQWMsQ0FBQyxDQUFDLGNBQWMsQ0FBQyxDO0FBQUEsQ0FBQTtBQUNoRSxDQUFDLENBQUMsQ0FBQyxDLENBQUM7QUFDSixBQUFBO0FBQ0EsQUFBQSw4RUFBNkU7QUFDN0UsQUFBQTtBQUNBLEFBQUEsQUFBQSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQSxDQUFBO0FBQ04sQUFBQSxDQUFFLE1BQUQsQ0FBQyxDQUFDLENBQUUsQ0FBQyxDQUFDO0FBQ1AsQUFBQSxFQUFFLElBQUksQ0FBQyxDQUFDLFFBQVEsQ0FBQTtBQUNoQixBQUFBLEVBQUUsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFBO0FBQ1QsQUFBQSxFQUFFLE9BQU8sQ0FBQyxDQUFDLENBQUM7QUFDWixBQUFBLEdBQUcsQ0FBQztBQUNKLEFBQUEsSUFBSSxJQUFJLENBQUMsQ0FBQyxRQUFRLENBQUM7QUFDbkIsQUFBQSxJQUFJLEtBQUssQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsU0FBUyxDQUFDO0FBQzVCLElBQUksQ0FBQyxDQUFBO0FBQ0wsQUFBQSxHQUFHLENBQUM7QUFDSixBQUFBLElBQUksSUFBSSxDQUFDLENBQUMsT0FBTyxDQUFDO0FBQ2xCLEFBQUEsSUFBSSxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsV0FBVyxDQUFDLENBQUM7QUFDbEMsSUFBSSxDQUFDLENBQUE7QUFDTCxBQUFBLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQTtBQUNsQixBQUFBLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQyxVQUFVLENBQUM7QUFDeEIsQUFBQSxHQUFHLENBQUMsQ0FBQTtBQUNKLEFBQUEsRUFBRSxPQUFPLENBQUMsQ0FBQyxDQUFDO0FBQ1osQUFBQSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUE7QUFDdkMsQUFBQSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsT0FBTyxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUE7QUFDckMsQUFBQSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsU0FBUyxDQUFDO0FBQ3hDLEdBQUcsQ0FBQztBQUNKLEVBQUUsQ0FBQztBQUNILEFBQUE7QUFDQSxBQUFBLENBQUMsS0FBSyxDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFBLENBQUE7QUFDMUMsQUFBQSxFQUFFLFFBQVEsQyxNQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQSxDQUFBO0FBQ3pDLEFBQUEsR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFBLEFBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDO0VBQUEsQztDQUFBLENBQUE7QUFDMUIsQUFBQTtBQUNBLEFBQUEsQ0FBTyxNQUFOLE1BQU0sQ0FBQyxDQUFFLENBQUMsR0FBRyxDQUFDLFlBQVksQ0FBQyxDQUFDO0FBQzdCLEFBQUE7QUFDQSxBQUFBLEMsSyxDLFMsRyxDQUFXLEdBQUcsQ0FBQyxDQUFBLE1BQUEsSUFBSSxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFBLENBQUEsQ0FBQTtBQUNyQyxBQUFBLEUsUyxNQUFFLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLEMsQztDQUFDLEMsQ0FEcEIsTUFBTixNQUFNLENBQUMsQyxTQUNtQjtBQUMzQixBQUFBO0FBQ0EsQUFBQSxDQUFDLEtBQUssQ0FBQSxBQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7QUFDaEIsQUFBQSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO0FBQ2xCLEFBQUEsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztBQUNsQixBQUFBLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUM7QUFDbkIsQUFBQSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO0FBQ2pCLEFBQUEsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQztBQUNyQixBQUFBLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7QUFDakIsQUFBQSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO0FBQ2xCLEFBQUEsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUM7QUFD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O0FBQ0EsQUFBQSxBQUFBLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFBLENBQUE7QUFDTixBQUFBLENBQUssTUFBSixJQUFJLENBQUMsQ0FBRSxDQUFDLENBQUM7QUFDVixBQUFBLEVBQUUsS0FBSyxDQUFDLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQTtBQUNuQyxBQUFBLEVBQUUsS0FBSyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQTtBQUMxQyxBQUFBLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxlQUFlLENBQUMsQ0FBQTtBQUMvRCxBQUFBLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFBO0FBQ1IsQUFBQSxFQUFFLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQTtBQUNULEFBQUEsRUFBRSxNQUFNLENBQUMsQ0FBQyxDQUFDO0FBQ1gsQUFBQSxHQUFHLENBQUM7QUFDSixBQUFBLElBQUksTUFBTSxDQUFDLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQTtBQUN6QyxBQUFBLElBQUksS0FBSyxDQUFDLENBQUMsSUFBSSxDQUFBO0FBQ2YsQUFBQSxJQUFJLEdBQUcsQ0FBQyxDQUFDLElBQUk7QUFDYixJQUFJLENBQUMsQ0FBQTtBQUNMLEFBQUEsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ1YsQUFBQSxHQUFHLENBQUM7QUFDSixFQUFFLENBQUM7QUFDSCxBQUFBO0FBQ0EsQUFBQSxDQUFPLE1BQU4sTUFBTSxDQUFDLENBQUUsQ0FBQyxHQUFHLENBQUMsWUFBWSxDQUFDLENBQUM7QUFDN0IsQUFBQTtBQUNBLEFBQUEsQyxLLEMsUyxHLENBQWEsR0FBRyxDQUFDLENBQUEsTUFBQSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFBLENBQUEsQ0FBQTtBQUM1QyxBQUFBLEUsUyxNQUFFLEksQztDQUFJLEMsQ0FERyxNQUFSLE1BQU0sR0FBRyxDLFNBQ0o7QUFDTixBQUFBLEMsSyxDLFMsRyxDQUFhLEdBQUcsQ0FBQyxDQUFBLE1BQUEsQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQSxDQUFBLENBQUE7QUFDOUMsQUFBQSxFLFMsTUFBRSxNLEM7Q0FBTSxDLENBREMsTUFBUixRQUFRLENBQUMsQyxTQUNGO0FBQ1IsQUFBQSxDLEssQyxTLEcsQ0FBYSxHQUFHLENBQUMsQ0FBQSxNQUFBLENBQUMsSUFBSSxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUEsQ0FBQSxDQUFBO0FBQ3BELEFBQUEsRSxTLE1BQUUsQ0FBQyxFQUFFLElBQUksQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDLEMsQztDQUFDLEMsQ0FEZixNQUFSLEtBQUssSUFBSSxDLFNBQ2M7QUFDeEIsQUFBQTtBQUNBLEFBQUEsQ0FBQyxLQUFLLENBQUEsQUFBQyxNQUFNLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFBO0FBQ2xDLEFBQUEsQ0FBQyxLQUFLLENBQUEsQUFBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFBO0FBQ25DLEFBQUEsQ0FBQyxLQUFLLENBQUEsQUFBQyxLQUFLLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDLGlCQUFpQixDQUFDLEM7QUFBQSxDQUFBO0FBQ3BELENBQUMsQ0FBQyxDQUFDLEMsQ0FBQztBQUNKLEFBQUE7QUFDQSxBQUFBLDhFQUE2RTtBQUM3RSxBQUFBLHdEQUF1RDtBQUN2RCxBQUFBO0FBQ0EsQUFBQSxBQUFBLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFBLENBQUE7QUFDTixBQUFBLENBQUssTUFBSixJQUFJLENBQUMsQ0FBRSxDQUFDLENBQUM7QUFDVixBQUFBLEVBQUUsS0FBSyxDQUFDLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQTtBQUNuQyxBQUFBLEVBQUUsS0FBSyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQTtBQUMxQyxBQUFBLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxlQUFlLENBQUMsQ0FBQTtBQUMvRCxBQUFBLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFBO0FBQ1IsQUFBQSxFQUFFLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQTtBQUNULEFBQUEsRUFBRSxNQUFNLENBQUMsQ0FBQyxDQUFDO0FBQ1gsQUFBQSxHQUFHLENBQUM7QUFDSixBQUFBLElBQUksTUFBTSxDQUFDLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQTtBQUN4QyxBQUFBLElBQUksS0FBSyxDQUFDLENBQUMsSUFBSSxDQUFBO0FBQ2YsQUFBQSxJQUFJLEdBQUcsQ0FBQyxDQUFDLElBQUk7QUFDYixJQUFJLENBQUMsQ0FBQTtBQUNMLEFBQUEsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ1YsQUFBQSxHQUFHLENBQUM7QUFDSixFQUFFLENBQUM7QUFDSCxBQUFBO0FBQ0EsQUFBQSxDQUFDLEtBQUssQ0FBQyxlQUFlLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQSxDQUFBO0FBQzdD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LEdBQUcsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFBO0FBQ1gsQUFBQSxHQUFHLENBQUMsQ0FBQyxDQUFDLEtBQUs7QUFDWCxHQUFHLENBQUM7QUFDSixFQUFFLENBQUM7QUFDSCxBQUFBO0FBQ0EsQUFBQTtBQUNBLEFBQUEsQ0FBTyxNQUFOLE1BQU0sQ0FBQyxDQUFFLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQ3ZCLEFBQUEsQyxLLEMsUyxHLENBQVcsR0FBRyxDQUFDLENBQUEsTUFBQSxDQUFDLEtBQUssQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFBLENBQUEsQ0FBQTtBQUNuRCxBQUFBLEUsUyxNQUFFLENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsQyxDO0NBQUMsQyxDQURsQixNQUFOLE1BQU0sQ0FBQyxDLFNBQ2lCO0FBQ3pCLEFBQUEsQ0FBQyxLQUFLLENBQUEsQUFBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO0FBQ2hCLEFBQUEsRUFBRSxXQUFXLENBQUE7QUFDYixBQUFBLEVBQUUsWUFBWSxDQUFBO0FBQ2QsQUFBQSxFQUFFLFdBQVcsQ0FBQTtBQUNiLEFBQUEsRUFBRSxZQUFZLENBQUE7QUFDZCxBQUFBLEVBQUUsV0FBVyxDQUFBO0FBQ2IsQUFBQSxFQUFFLFVBQVU7QUFDWixBQUFBLEVBQUUsQ0FBQyxDO0FBQUEsQ0FBQTtBQUNILENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDSiIsIm5hbWVzIjpbXSwic291cmNlc0NvbnRlbnQiOlsiIyB3YWxrZXIubGliLnRlc3QuY2l2ZXRcclxuXHJcbmltcG9ydCB7dW5kZWYsIGhhc2h9IGZyb20gJ2RhdGF0eXBlcydcclxuaW1wb3J0IHtoYXNLZXksIGhhc0tleXN9IGZyb20gJ2xsdXRpbHMnXHJcbmltcG9ydCB7TE9HLCBEQkd9IGZyb20gJ2xvZ2dlcidcclxuaW1wb3J0IHtnZXRDbWRBcmdzfSBmcm9tICdjbWQtYXJncydcclxuaW1wb3J0IHtXYWxrZXJ9IGZyb20gJ3dhbGtlcidcclxuaW1wb3J0IHtlcXVhbCwgdHJ1dGh5LCBmYWxzeSwgaXNUeXBlLCBub3RUeXBlfSBmcm9tICd1bml0LXRlc3QnXHJcblxyXG5nZXRDbWRBcmdzKClcclxuXHJcbiMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblxyXG5EQkcgXCJjbGFzcyBXYWxrZXJcIlxyXG5cclxuKCgpID0+XHJcblx0IyAtLS0gVHJ5IGEgdmVyeSBzaW1wbGUgY2xhc3NcclxuXHJcblx0dHlwZSBUR2VuZGVyID0gJ21hbGUnIHwgJ2ZlbWFsZSdcclxuXHJcblx0Y2xhc3MgUGVyc29uXHJcblx0XHRuYW1lOiBzdHJpbmdcclxuXHRcdGdlbmRlcjogVEdlbmRlclxyXG5cdFx0Y29uc3RydWN0b3IoQG5hbWU6IHN0cmluZywgQGdlbmRlcjogVEdlbmRlcilcclxuXHJcblx0Y2xhc3MgUGVyc29uV2Fsa2VyIGV4dGVuZHMgV2Fsa2VyPFBlcnNvbj5cclxuXHRcdG92ZXJyaWRlIGlzTm9kZSA9ICh4OiBvYmplY3QpOiB4IGlzIFBlcnNvbiA9PlxyXG5cdFx0XHRyZXR1cm4geCBpbnN0YW5jZW9mIFBlcnNvblxyXG5cclxuXHR3YWxrZXIgOj0gbmV3IFBlcnNvbldhbGtlcigpXHJcblxyXG5cdCMgLS0tIFdhbGsgYSBzaW5nbGUgbm9kZVxyXG5cdHBlcnNvbiA6PSBuZXcgUGVyc29uKCdKb2huJywgJ21hbGUnKVxyXG5cdGxTdHJpbmdzIDo9IGZvciB7bmFtZSwgZ2VuZGVyfSBvZiB3YWxrZXIud2FsayhwZXJzb24pXHJcblx0XHRcIiN7bmFtZX0gaXMgI3tnZW5kZXJ9XCJcclxuXHRlcXVhbCBsU3RyaW5ncywgWydKb2huIGlzIG1hbGUnXVxyXG5cclxuXHQjIC0tLSBXYWxrIGFuIGFycmF5XHJcblx0bFN0cmluZ3MyIDo9IGZvciB7bmFtZSwgZ2VuZGVyfSBvZiB3YWxrZXIud2FsayhbXHJcblx0XHRcdG5ldyBQZXJzb24oJ0pvaG4nLCAnbWFsZScpXHJcblx0XHRcdG5ldyBQZXJzb24oJ0p1bGllJywgJ2ZlbWFsZScpXHJcblx0XHRcdF0pXHJcblx0XHRcIiN7bmFtZX0gaXMgI3tnZW5kZXJ9XCJcclxuXHRlcXVhbCBsU3RyaW5nczIsIFsnSm9obiBpcyBtYWxlJywgJ0p1bGllIGlzIGZlbWFsZSddXHJcblxyXG5cdCMgLS0tIFdhbGsgYW4gb2JqZWN0XHJcblx0bFN0cmluZ3MzIDo9IGZvciB7bmFtZSwgZ2VuZGVyfSBvZiB3YWxrZXIud2Fsayh7XHJcblx0XHRcdGZpcnN0OiBuZXcgUGVyc29uKCdKb2huJywgJ21hbGUnKVxyXG5cdFx0XHRzZWNvbmQ6IG5ldyBQZXJzb24oJ0p1bGllJywgJ2ZlbWFsZScpXHJcblx0XHRcdH0pXHJcblx0XHRcIiN7bmFtZX0gaXMgI3tnZW5kZXJ9XCJcclxuXHRlcXVhbCBsU3RyaW5nczMsIFtcclxuXHRcdCdKb2huIGlzIG1hbGUnLFxyXG5cdFx0J0p1bGllIGlzIGZlbWFsZScgICAgICMgVE9ETyBhZGQga2V5IGJ5IHF1ZXJ5aW5nIGZvciBwYXJlbnRcclxuXHRcdF1cclxuXHJcblx0aCA6PSB7XHJcblx0XHRmcmllbmRzOiBbXHJcblx0XHRcdG5ldyBQZXJzb24oJ0pvaG4gQm93bGluZycsICdtYWxlJylcclxuXHRcdFx0bmV3IFBlcnNvbignSnVsaWUgQm9va2VyJywgJ2ZlbWFsZScpXHJcblx0XHRcdF1cclxuXHRcdG5hbWU6ICdKb2huIERlaWdoYW4nXHJcblx0XHRnZW5kZXI6ICdtYWxlJ1xyXG5cdFx0YWRkcmVzczoge1xyXG5cdFx0XHRzdHJlZXQ6ICcxNzQ5IE1haW4gU3QuJ1xyXG5cdFx0XHRjaXR5OiAnQmxhY2tzYnVyZydcclxuXHRcdFx0c3RhdGU6ICdWQSdcclxuXHRcdFx0fVxyXG5cdFx0fSBhcyBjb25zdFxyXG5cclxuXHRsTmFtZXMgOj0gZm9yIHtuYW1lfSBvZiB3YWxrZXIud2FsayhoKVxyXG5cdFx0bmFtZVxyXG5cdGVxdWFsIGxOYW1lcywgWydKb2huIEJvd2xpbmcnLCAnSnVsaWUgQm9va2VyJ11cclxuXHJcblx0IyAtLS0gcHV0IGl0IGluIGFuIGFycmF5XHJcblx0YXJyIDo9IFt7XHJcblx0XHRmcmllbmRzOiBbXHJcblx0XHRcdG5ldyBQZXJzb24oJ0pvaG4gQm93bGluZycsICdtYWxlJylcclxuXHRcdFx0bmV3IFBlcnNvbignSnVsaWUgQm9va2VyJywgJ2ZlbWFsZScpXHJcblx0XHRcdF1cclxuXHRcdG5hbWU6ICdKb2huIERlaWdoYW4nXHJcblx0XHRnZW5kZXI6ICdtYWxlJ1xyXG5cdFx0YWRkcmVzczoge1xyXG5cdFx0XHRzdHJlZXQ6ICcxNzQ5IE1haW4gU3QuJ1xyXG5cdFx0XHRjaXR5OiAnQmxhY2tzYnVyZydcclxuXHRcdFx0c3RhdGU6ICdWQSdcclxuXHRcdFx0fVxyXG5cdFx0fV0gYXMgY29uc3RcclxuXHJcblx0bE5hbWVzMiA6PSBmb3Ige25hbWV9IG9mIHdhbGtlci53YWxrKGFycilcclxuXHRcdG5hbWVcclxuXHRlcXVhbCBsTmFtZXMyLCBbJ0pvaG4gQm93bGluZycsICdKdWxpZSBCb29rZXInXVxyXG5cclxuXHQjIC0tLSBwdXQgaXQgaW4gYSBoYXNoXHJcblx0aDMgOj0geyBzdHVmZjoge1xyXG5cdFx0ZnJpZW5kczogW1xyXG5cdFx0XHRuZXcgUGVyc29uKCdKb2huIEJvd2xpbmcnLCAnbWFsZScpXHJcblx0XHRcdG5ldyBQZXJzb24oJ0p1bGllIEJvb2tlcicsICdmZW1hbGUnKVxyXG5cdFx0XHRdXHJcblx0XHRuYW1lOiAnSm9obiBEZWlnaGFuJ1xyXG5cdFx0Z2VuZGVyOiAnbWFsZSdcclxuXHRcdGFkZHJlc3M6IHtcclxuXHRcdFx0c3RyZWV0OiAnMTc0OSBNYWluIFN0LidcclxuXHRcdFx0Y2l0eTogJ0JsYWNrc2J1cmcnXHJcblx0XHRcdHN0YXRlOiAnVkEnXHJcblx0XHRcdH1cclxuXHRcdH19IGFzIGNvbnN0XHJcblxyXG5cdGxOYW1lczMgOj0gZm9yIHtuYW1lfSBvZiB3YWxrZXIud2FsayhoMylcclxuXHRcdFwiI3t3YWxrZXIubGV2ZWx9ICN7bmFtZX1cIlxyXG5cdGVxdWFsIGxOYW1lczMsIFsnMCBKb2huIEJvd2xpbmcnLCAnMCBKdWxpZSBCb29rZXInXVxyXG5cdCkoKVxyXG5cclxuIyAtLS0gTk9URTogSW4gdGhlIGFib3ZlLCB0aGUgbm9kZXMgbXVzdCBiZSBQZXJzb24gb2JqZWN0cyxcclxuIyAgICAgICAgICAgbm90IGp1c3QgaGFzaGVzIHdpdGggdGhlIGtleXMgJ25hbWUnIGFuZCAnZ2VuZGVyJ1xyXG4jIC0tLSBIb3dldmVyLCBpZiB5b3UganVzdCB3YW50IHRvIGNoZWNrIGZvciB0aG9zZSBrZXlzLFxyXG4jICAgICAgICB5b3UgY2FuIG92ZXJyaWVkIHRoZSBpc05vZGUoKSBtZXRob2RcclxuXHJcbigoKSA9PlxyXG5cdCMgLS0tIEEgbm9kZSBpcyBhIGhhc2ggd2l0aCBrZXlzICduYW1lJyBhbmQgJ2dlbmRlcidcclxuXHJcblx0dHlwZSBQZXJzb24gPSB7XHJcblx0XHRuYW1lOiBzdHJpbmdcclxuXHRcdGdlbmRlcjogJ21hbGUnIHwgJ2ZlbWFsZSdcclxuXHRcdH1cclxuXHJcblx0Y2xhc3MgUGVyc29uV2Fsa2VyIGV4dGVuZHMgV2Fsa2VyPFBlcnNvbj5cclxuXHRcdG92ZXJyaWRlIGlzTm9kZSA9ICh4OiBvYmplY3QpOiB4IGlzIFBlcnNvbiA9PlxyXG5cdFx0XHRyZXR1cm4gaGFzS2V5cyh4LCAnbmFtZScsICdnZW5kZXInKVxyXG5cdHdhbGtlciA6PSBuZXcgUGVyc29uV2Fsa2VyKClcclxuXHJcblx0IyAtLS0gV2FsayBhIHNpbmdsZSBub2RlXHJcblx0cGVyc29uIDo9IHtuYW1lOiAnSm9obicsIGdlbmRlcjogJ21hbGUnfVxyXG5cdGxTdHJpbmdzIDo9IGZvciB7bmFtZSwgZ2VuZGVyfSBvZiB3YWxrZXIud2FsayhwZXJzb24pXHJcblx0XHRcIiN7bmFtZX0gaXMgI3tnZW5kZXJ9XCJcclxuXHRlcXVhbCBsU3RyaW5ncywgWydKb2huIGlzIG1hbGUnXVxyXG5cclxuXHQjIC0tLSBXYWxrIGFuIGFycmF5XHJcblx0bFN0cmluZ3MyIDo9IGZvciB7bmFtZSwgZ2VuZGVyfSBvZiB3YWxrZXIud2FsayhbXHJcblx0XHRcdHtuYW1lOiAnSm9obicsIGdlbmRlcjogJ21hbGUnfVxyXG5cdFx0XHR7bmFtZTogJ0p1bGllJywgZ2VuZGVyOiAnZmVtYWxlJ31cclxuXHRcdFx0XSlcclxuXHRcdFwiI3tuYW1lfSBpcyAje2dlbmRlcn1cIlxyXG5cdGVxdWFsIGxTdHJpbmdzMiwgWydKb2huIGlzIG1hbGUnLCAnSnVsaWUgaXMgZmVtYWxlJ11cclxuXHJcblx0IyAtLS0gV2FsayBhbiBvYmplY3RcclxuXHRsU3RyaW5nczMgOj0gZm9yIG5vZGUgb2Ygd2Fsa2VyLndhbGsoe1xyXG5cdFx0XHRmaXJzdDoge25hbWU6ICdKb2huJywgZ2VuZGVyOiAnbWFsZSd9XHJcblx0XHRcdHNlY29uZDoge25hbWU6ICdKdWxpZScsIGdlbmRlcjogJ2ZlbWFsZSd9XHJcblx0XHRcdH0pXHJcblx0XHRcIiN7bm9kZS5uYW1lfSBpcyAje25vZGUuZ2VuZGVyfVwiXHJcblx0ZXF1YWwgbFN0cmluZ3MzLCBbXHJcblx0XHQnSm9obiBpcyBtYWxlJyxcclxuXHRcdCdKdWxpZSBpcyBmZW1hbGUnXHJcblx0XHRdXHJcblxyXG5cdGggOj0ge1xyXG5cdFx0ZnJpZW5kczogW1xyXG5cdFx0XHR7bmFtZTogJ0pvaG4gQm93bGluZycsIGdlbmRlcjogJ21hbGUnfVxyXG5cdFx0XHR7bmFtZTogJ0p1bGllIEJvb2tlcicsIGdlbmRlcjogJ2ZlbWFsZSd9XHJcblx0XHRcdF1cclxuXHRcdG5hbWU6ICdKb2huIERlaWdoYW4nXHJcblx0XHRnZW5kZXI6ICdtYWxlJ1xyXG5cdFx0YWRkcmVzczoge1xyXG5cdFx0XHRzdHJlZXQ6ICcxNzQ5IE1haW4gU3QuJ1xyXG5cdFx0XHRjaXR5OiAnQmxhY2tzYnVyZydcclxuXHRcdFx0c3RhdGU6ICdWQSdcclxuXHRcdFx0fVxyXG5cdFx0fSBhcyBjb25zdFxyXG5cclxuXHRsTmFtZXMgOj0gZm9yIG5vZGUgb2Ygd2Fsa2VyLndhbGsoaClcclxuXHRcdG5vZGUubmFtZVxyXG5cdGVxdWFsIGxOYW1lcywgWydKb2huIERlaWdoYW4nLCAnSm9obiBCb3dsaW5nJywgJ0p1bGllIEJvb2tlciddXHJcblxyXG5cdCMgLS0tIHB1dCBpdCBpbiBhbiBhcnJheVxyXG5cdGgyIDo9IFt7XHJcblx0XHRmcmllbmRzOiBbXHJcblx0XHRcdHtuYW1lOiAnSm9obiBCb3dsaW5nJywgZ2VuZGVyOiAnbWFsZSd9XHJcblx0XHRcdHtuYW1lOiAnSnVsaWUgQm9va2VyJywgZ2VuZGVyOiAnZmVtYWxlJ31cclxuXHRcdFx0XVxyXG5cdFx0bmFtZTogJ0pvaG4gRGVpZ2hhbidcclxuXHRcdGdlbmRlcjogJ21hbGUnXHJcblx0XHRhZGRyZXNzOiB7XHJcblx0XHRcdHN0cmVldDogJzE3NDkgTWFpbiBTdC4nXHJcblx0XHRcdGNpdHk6ICdCbGFja3NidXJnJ1xyXG5cdFx0XHRzdGF0ZTogJ1ZBJ1xyXG5cdFx0XHR9XHJcblx0XHR9XSBhcyBjb25zdFxyXG5cclxuXHRsTmFtZXMyIDo9IGZvciBub2RlIG9mIHdhbGtlci53YWxrKGgyKVxyXG5cdFx0bm9kZS5uYW1lXHJcblx0ZXF1YWwgbE5hbWVzMiwgWydKb2huIERlaWdoYW4nLCAnSm9obiBCb3dsaW5nJywgJ0p1bGllIEJvb2tlciddXHJcblxyXG5cdCMgLS0tIHB1dCBpdCBpbiBhIGhhc2hcclxuXHRoMyA6PSB7IHN0dWZmOiB7XHJcblx0XHRmcmllbmRzOiBbXHJcblx0XHRcdHtuYW1lOiAnSm9obiBCb3dsaW5nJywgZ2VuZGVyOiAnbWFsZSd9XHJcblx0XHRcdHtuYW1lOiAnSnVsaWUgQm9va2VyJywgZ2VuZGVyOiAnZmVtYWxlJ31cclxuXHRcdFx0XVxyXG5cdFx0bmFtZTogJ0pvaG4gRGVpZ2hhbidcclxuXHRcdGdlbmRlcjogJ21hbGUnXHJcblx0XHRhZGRyZXNzOiB7XHJcblx0XHRcdHN0cmVldDogJzE3NDkgTWFpbiBTdC4nXHJcblx0XHRcdGNpdHk6ICdCbGFja3NidXJnJ1xyXG5cdFx0XHRzdGF0ZTogJ1ZBJ1xyXG5cdFx0XHR9XHJcblx0XHR9fSBhcyBjb25zdFxyXG5cclxuXHRsTmFtZXMzIDo9IGZvciBub2RlIG9mIHdhbGtlci53YWxrKGgzKVxyXG5cdFx0bm9kZS5uYW1lXHJcblx0ZXF1YWwgbE5hbWVzMywgWydKb2huIERlaWdoYW4nLCAnSm9obiBCb3dsaW5nJywgJ0p1bGllIEJvb2tlciddXHJcblx0KSgpXHJcblxyXG4jIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cclxuKCgpID0+XHJcblx0aCA6PSB7XHJcblx0XHRuYW1lOiAnSm9obiBEJ1xyXG5cdFx0YWdlOiA3MlxyXG5cdFx0ZnJpZW5kczogW1xyXG5cdFx0XHR7XHJcblx0XHRcdFx0bmFtZTogJ0pvaG4gQicsXHJcblx0XHRcdFx0YWxpYXM6IHtuYW1lOiAnbWFsZSBKQid9XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0bmFtZTogJ0p1bGllJyxcclxuXHRcdFx0XHRhbGlhc2VzOiBbe25hbWU6ICdmZW1hbGUgSkInfV1cclxuXHRcdFx0XHR9XHJcblx0XHRcdHtuYW1lOiAnQWFyb24nfVxyXG5cdFx0XHR7bm90bmFtZTogJ2J1aWxkaW5nJ31cclxuXHRcdFx0XVxyXG5cdFx0ZW5lbWllczoge1xyXG5cdFx0XHRhOiB7bmFtZTogJ0RvbmFsZCcsIGtpbmQ6ICdzY3VtYmFnJ31cclxuXHRcdFx0Yjoge25hbWU6ICdTYXRhbicsICBraW5kOiAnZGV2aWwnfVxyXG5cdFx0XHRjOiB7bm90bmFtZTogJ3dvb2RzJywga2V5OiAnbm90aGluZyd9XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0Y2xhc3MgUGVyc29uV2Fsa2VyIGV4dGVuZHMgV2Fsa2VyPFBlcnNvbj5cclxuXHRcdG92ZXJyaWRlIGlzTm9kZSh4OiBvYmplY3QpOiB4IGlzIFBlcnNvblxyXG5cdFx0XHRyZXR1cm4gaGFzS2V5IHgsICduYW1lJ1xyXG5cclxuXHR3YWxrZXIgOj0gbmV3IFBlcnNvbldhbGtlcigpXHJcblxyXG5cdGxJdGVtcyA6PSBmb3Igbm9kZSBvZiB3YWxrZXIud2FsayhoKVxyXG5cdFx0W3dhbGtlci5sZXZlbCwgbm9kZS5uYW1lXVxyXG5cclxuXHRlcXVhbCBsSXRlbXMsIFtcclxuXHRcdFsgMCwgXCJKb2huIERcIiBdLFxyXG5cdFx0WyAxLCBcIkpvaG4gQlwiIF0sXHJcblx0XHRbIDIsIFwibWFsZSBKQlwiIF0sXHJcblx0XHRbIDEsIFwiSnVsaWVcIiBdLFxyXG5cdFx0WyAyLCBcImZlbWFsZSBKQlwiIF0sXHJcblx0XHRbIDEsIFwiQWFyb25cIiBdLFxyXG5cdFx0WyAxLCBcIkRvbmFsZFwiIF0sXHJcblx0XHRbIDEsIFwiU2F0YW5cIiBdXHJcblx0XHRdXHJcblx0KSgpXHJcblxyXG4jIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4jIC0tLSBEZWZpbmUgc29tZSBjbGFzc2VzIHRvIHVzZSBpbiBzdWJzZXF1ZW50IHRlc3RzXHJcblxyXG5jbGFzcyBQZXJzb25cclxuXHRuYW1lOiBzdHJpbmdcclxuXHRnZW5kZXI6ICdtYWxlJyB8ICdmZW1hbGUnXHJcblx0ZW1haWw6IHN0cmluZz9cclxuXHRjb25zdHJ1Y3RvcihcclxuXHRcdFx0QG5hbWU6IHN0cmluZ1xyXG5cdFx0XHRAZ2VuZGVyOiAnbWFsZScgfCAnZmVtYWxlJ1xyXG5cdFx0XHRAZW1haWw6IHN0cmluZz8gPSB1bmRlZlxyXG5cdFx0XHQpXHJcblxyXG5jbGFzcyBQZXJzb25XYWxrZXIgZXh0ZW5kcyBXYWxrZXI8UGVyc29uPlxyXG5cdG92ZXJyaWRlIGlzTm9kZSh4OiBvYmplY3QpOiB4IGlzIFBlcnNvblxyXG5cdFx0cmV0dXJuIHggaW5zdGFuY2VvZiBQZXJzb25cclxuXHJcbiMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiMgLS0tIFdhbGsgYSBzaW5nbGUgbm9kZVxyXG5cclxuKCgpID0+XHJcblx0aEFzdCA6PSBuZXcgUGVyc29uKCdKb2huJywgJ21hbGUnKVxyXG5cclxuXHR3YWxrZXIgOj0gbmV3IFBlcnNvbldhbGtlcigpXHJcblxyXG5cdGxOYW1lcyA6PSBmb3Ige25hbWV9IG9mIHdhbGtlci53YWxrKGhBc3QpXHJcblx0XHRuYW1lXHJcblx0bEdlbmRlcnMgOj0gZm9yIHtnZW5kZXJ9IG9mIHdhbGtlci53YWxrKGhBc3QpXHJcblx0XHRnZW5kZXJcclxuXHRsRGVzYyA6PSBmb3Ige25hbWUsIGdlbmRlcn0gb2Ygd2Fsa2VyLndhbGsoaEFzdClcclxuXHRcdFwiI3tuYW1lfSBpcyAje2dlbmRlcn1cIlxyXG5cclxuXHRlcXVhbCBsTmFtZXMsICAgWydKb2huJ11cclxuXHRlcXVhbCBsR2VuZGVycywgWydtYWxlJ11cclxuXHRlcXVhbCBsRGVzYywgICAgWydKb2huIGlzIG1hbGUnXVxyXG5cdCkoKVxyXG5cclxuIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuIyAtLS0gV2FsayBhbiBhcnJheSBvZiBub2Rlc1xyXG5cclxuKCgpID0+XHJcblx0aEFzdCA6PSBbXHJcblx0XHRuZXcgUGVyc29uKCdKb2huJywgJ21hbGUnKVxyXG5cdFx0bmV3IFBlcnNvbignSnVsaWUnLCAnZmVtYWxlJylcclxuXHRcdF1cclxuXHJcblx0d2Fsa2VyIDo9IG5ldyBQZXJzb25XYWxrZXIoKVxyXG5cclxuXHRsTmFtZXMgICA6PSBmb3Ige25hbWV9IG9mIHdhbGtlci53YWxrKGhBc3QpXHJcblx0XHRuYW1lXHJcblx0bEdlbmRlcnMgOj0gZm9yIHtnZW5kZXJ9IG9mIHdhbGtlci53YWxrKGhBc3QpXHJcblx0XHRnZW5kZXJcclxuXHRsRGVzYyAgICA6PSBmb3Ige25hbWUsIGdlbmRlcn0gb2Ygd2Fsa2VyLndhbGsoaEFzdClcclxuXHRcdFwiI3tuYW1lfSBpcyAje2dlbmRlcn1cIlxyXG5cclxuXHRlcXVhbCBsTmFtZXMsICAgWydKb2huJywgJ0p1bGllJ11cclxuXHRlcXVhbCBsR2VuZGVycywgWydtYWxlJywgJ2ZlbWFsZSddXHJcblx0ZXF1YWwgbERlc2MsICAgIFsnSm9obiBpcyBtYWxlJywgJ0p1bGllIGlzIGZlbWFsZSddXHJcblx0KSgpXHJcblxyXG4jIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4jIC0tLSBXYWxrIGEgaGFzaCB3aXRoIG5vZGUgdmFsdWVzXHJcblxyXG4oKCkgPT5cclxuXHRoQXN0IDo9IHtcclxuXHRcdGZpcnN0OiBuZXcgUGVyc29uKCdKb2huJywgJ21hbGUnKVxyXG5cdFx0c2Vjb25kOiBuZXcgUGVyc29uKCdKdWxpZScsICdmZW1hbGUnKVxyXG5cdFx0fVxyXG5cclxuXHR3YWxrZXIgOj0gbmV3IFBlcnNvbldhbGtlcigpXHJcblxyXG5cdGxOYW1lcyAgIDo9IGZvciB7bmFtZX0gb2Ygd2Fsa2VyLndhbGsoaEFzdClcclxuXHRcdG5hbWVcclxuXHRsR2VuZGVycyA6PSBmb3Ige2dlbmRlcn0gb2Ygd2Fsa2VyLndhbGsoaEFzdClcclxuXHRcdGdlbmRlclxyXG5cdGxEZXNjICAgIDo9IGZvciB7bmFtZSwgZ2VuZGVyfSBvZiB3YWxrZXIud2FsayhoQXN0KVxyXG5cdFx0XCIje25hbWV9IGlzICN7Z2VuZGVyfVwiXHJcblxyXG5cdGVxdWFsIGxOYW1lcywgICBbJ0pvaG4nLCAnSnVsaWUnXVxyXG5cdGVxdWFsIGxHZW5kZXJzLCBbJ21hbGUnLCAnZmVtYWxlJ11cclxuXHRlcXVhbCBsRGVzYywgICAgWydKb2huIGlzIG1hbGUnLCAnSnVsaWUgaXMgZmVtYWxlJ11cclxuXHQpKClcclxuXHJcbiMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiMgLS0tIFdhbGsgYSBjb21wbGV4IHN0cnVjdHVyZSB3aXRoIG5vZGVzIGluc2lkZVxyXG4jICAgICBpbmNsdWRpbmcgaGFzaGVzIHRoYXQgbG9vayBsaWtlIGEgUGVyc29uLCBidXQgaXQncyBub3RcclxuXHJcbigoKSA9PlxyXG5cdGhBc3QgOj0ge1xyXG5cdFx0Zmlyc3Q6IG5ldyBQZXJzb24oJ0pvaG4nLCAnbWFsZScpXHJcblx0XHR0aGlyZDoge25hbWU6ICdKdWxpZScsIGdlbmRlcjogJ2ZlbWFsZSd9XHJcblx0XHRmb3VydGg6IHtuYW1lOiAnQm9iJywgZ2VuZGVyOiAnbWFsZScsIGVtYWlsOiAnYm9iQGdtYWlsLmNvbSd9XHJcblx0XHRwb3M6IDFcclxuXHRcdGVuZDogNDJcclxuXHRcdHNlY29uZDogW1xyXG5cdFx0XHR7XHJcblx0XHRcdFx0cGVyc29uOiBuZXcgUGVyc29uKCdKdWxpZScsICdmZW1hbGUnKVxyXG5cdFx0XHRcdGluZGV4OiAxMy4yXHJcblx0XHRcdFx0Zm9yOiAnbWUnXHJcblx0XHRcdFx0fVxyXG5cdFx0XHRbMSwyLDNdXHJcblx0XHRcdF1cclxuXHRcdH1cclxuXHJcblx0d2Fsa2VyIDo9IG5ldyBQZXJzb25XYWxrZXIoKVxyXG5cclxuXHRsTmFtZXMgICA6PSBmb3Ige25hbWV9IG9mIHdhbGtlci53YWxrKGhBc3QpXHJcblx0XHRuYW1lXHJcblx0bEdlbmRlcnMgOj0gZm9yIHtnZW5kZXJ9IG9mIHdhbGtlci53YWxrKGhBc3QpXHJcblx0XHRnZW5kZXJcclxuXHRsRGVzYyAgICA6PSBmb3Ige25hbWUsIGdlbmRlcn0gb2Ygd2Fsa2VyLndhbGsoaEFzdClcclxuXHRcdFwiI3tuYW1lfSBpcyAje2dlbmRlcn1cIlxyXG5cclxuXHRlcXVhbCBsTmFtZXMsICAgWydKb2huJywgJ0p1bGllJ11cclxuXHRlcXVhbCBsR2VuZGVycywgWydtYWxlJywgJ2ZlbWFsZSddXHJcblx0ZXF1YWwgbERlc2MsICAgIFsnSm9obiBpcyBtYWxlJywgJ0p1bGllIGlzIGZlbWFsZSddXHJcblx0KSgpXHJcblxyXG4jIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4jIC0tLSBSZWRlZmluZSBub2RlIHRvIGJlIGFueXRoaW5nIHdpdGggbmFtZSBhbmQgZ2VuZGVyXHJcblxyXG4oKCkgPT5cclxuXHRoQXN0IDo9IHtcclxuXHRcdGZpcnN0OiBuZXcgUGVyc29uKCdKb2huJywgJ21hbGUnKVxyXG5cdFx0dGhpcmQ6IHtuYW1lOiAnSnVsaWUnLCBnZW5kZXI6ICdmZW1hbGUnfVxyXG5cdFx0Zm91cnRoOiB7bmFtZTogJ0JvYicsIGdlbmRlcjogJ21hbGUnLCBlbWFpbDogJ2JvYkBnbWFpbC5jb20nfVxyXG5cdFx0cG9zOiAxXHJcblx0XHRlbmQ6IDQyXHJcblx0XHRzZWNvbmQ6IFtcclxuXHRcdFx0e1xyXG5cdFx0XHRcdHBlcnNvbjogbmV3IFBlcnNvbignSmFuZScsICdmZW1hbGUnKVxyXG5cdFx0XHRcdGluZGV4OiAxMy4yXHJcblx0XHRcdFx0Zm9yOiAnbWUnXHJcblx0XHRcdFx0fVxyXG5cdFx0XHRbMSwyLDNdXHJcblx0XHRcdF1cclxuXHRcdH1cclxuXHJcblx0Y2xhc3MgTmV3UGVyc29uV2Fsa2VyIGV4dGVuZHMgV2Fsa2VyPFBlcnNvbj5cclxuXHRcdG92ZXJyaWRlIGlzTm9kZSh4OiBvYmplY3QpOiB4IGlzIFBlcnNvblxyXG5cdFx0XHRyZXR1cm4gaGFzS2V5cyh4LCAnbmFtZScsICdnZW5kZXInKVxyXG5cclxuXHR3YWxrZXIgOj0gbmV3IE5ld1BlcnNvbldhbGtlcigpXHJcblxyXG5cdGxEZXNjIDo9IGZvciB7bmFtZSwgZ2VuZGVyfSBvZiB3YWxrZXIud2FsayhoQXN0KVxyXG5cdFx0XCIje25hbWV9IGlzICN7Z2VuZGVyfVwiXHJcblxyXG5cdGVxdWFsIGxEZXNjLCBbXHJcblx0XHQnSm9obiBpcyBtYWxlJ1xyXG5cdFx0J0p1bGllIGlzIGZlbWFsZSdcclxuXHRcdCdCb2IgaXMgbWFsZSdcclxuXHRcdCdKYW5lIGlzIGZlbWFsZSdcclxuXHRcdF1cclxuXHJcblx0IyAtLS0gVHJ5IGV4dGVuZGVkIHdhbGtpbmdcclxuXHJcblx0bERlc2MyIDo9IGZvciBbdmtpbmQsIHtuYW1lLCBnZW5kZXJ9XSBvZiB3YWxrZXIud2Fsa0V4KGhBc3QpXHJcblx0XHR3aGVuICh2a2luZCA9PSAnZW50ZXInKVxyXG5cdFx0XCIje25hbWV9IGlzICN7Z2VuZGVyfVwiXHJcblxyXG5cdGVxdWFsIGxEZXNjMiwgW1xyXG5cdFx0J0pvaG4gaXMgbWFsZSdcclxuXHRcdCdKdWxpZSBpcyBmZW1hbGUnXHJcblx0XHQnQm9iIGlzIG1hbGUnXHJcblx0XHQnSmFuZSBpcyBmZW1hbGUnXHJcblx0XHRdXHJcblx0KSgpXHJcblxyXG4jIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4jIC0tLSB0ZXN0IGV4dGVuZGVkIHdhbGtpbmdcclxuXHJcbigoKSA9PlxyXG5cdGhBc3QgOj0ge1xyXG5cdFx0a2luZDogJ3RvcCdcclxuXHRcdGZpcnN0OiAnZmlyc3QnXHJcblx0XHRuZXh0OiB7XHJcblx0XHRcdGtpbmQ6ICduZXh0J1xyXG5cdFx0XHRhOiAnb25lJ1xyXG5cdFx0XHRiOiAndHdvJ1xyXG5cdFx0XHRjOiAndGhyZWUnXHJcblx0XHRcdH1cclxuXHRcdGxhc3Q6IHtcclxuXHRcdFx0a2luZDogJ2xhc3QnXHJcblx0XHRcdEE6ICdvbmUnXHJcblx0XHRcdEI6ICd0d28nXHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblxyXG5cdHdhbGtlciA6PSBuZXcgV2Fsa2VyKClcclxuXHRsSXRlbXMgOj0gZm9yIFt2a2luZCwgaXRlbV0gb2Ygd2Fsa2VyLndhbGtFeChoQXN0KVxyXG5cdFx0XCIje3ZraW5kfSAje2l0ZW0ua2luZH1cIlxyXG5cdGVxdWFsIGxJdGVtcywgW1xyXG5cdFx0J2VudGVyIHRvcCdcclxuXHRcdCdlbnRlciBuZXh0J1xyXG5cdFx0J2V4aXQgbmV4dCdcclxuXHRcdCdlbnRlciBsYXN0J1xyXG5cdFx0J2V4aXQgbGFzdCdcclxuXHRcdCdleGl0IHRvcCdcclxuXHRcdF1cclxuXHQpKClcclxuIl19