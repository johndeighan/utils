"use strict";
// walker.lib.test.civet

import {undef, hash, isArray, isHash} from 'datatypes'
import {hasKeys} from 'llutils'
import {DBG, setLogLevel} from 'logger'
import {getCmdArgs} from 'cmd-args'
import {
	TNodeInfo, Walker,
	} from 'walker'
import {
	equal, truthy, falsy, isType, notType,
	} from 'unit-test'

getCmdArgs()
setLogLevel('debug')

// ---------------------------------------------------------------------------

DBG("type TNodeInfo")

isType( 'TNodeInfo<number>', {node: 42, level: 1,   parent: undef})
notType('TNodeInfo<number>', {node: 42, level: 'a', parent: undef})

// ---------------------------------------------------------------------------

DBG("class Walker");

(() => {
	// --- Try a very simple class

	type TGender = 'male' | 'female'

	class Person {
		name: string
		gender: TGender
		constructor(name1: string, gender1: TGender){this.name = name1;this.gender = gender1;}
	}

	const walker = new Walker<Person>(Person)


	// --- Walk a single node
	const results=[];for (const h of walker.walk(new Person('John', 'male'))) {
		results.push(`${h.node.name} is ${h.node.gender}`)
	};const lStrings =results
	equal(lStrings, ['John is male'])

	// --- Walk an array
	const results1=[];for (const h of walker.walk([
			new Person('John', 'male'),
			new Person('Julie', 'female')
			])) {
		results1.push(`${h.node.name} is ${h.node.gender}`)
	};const lStrings2 =results1
	equal(lStrings2, ['John is male', 'Julie is female'])

	// --- Walk an object
	const results2=[];for (const h of walker.walk({
			first: new Person('John', 'male'),
			second: new Person('Julie', 'female')
			})) {
		results2.push(`${h.index}: ${h.node.name} is ${h.node.gender}`)
	};const lStrings3 =results2
	equal(lStrings3, [
		'first: John is male',
		'second: Julie is female'
		])

	const h = {
		friends: [
			new Person('John Bowling', 'male'),
			new Person('Julie Booker', 'female')
			],
		name: 'John Deighan',
		gender: 'male',
		address: {
			street: '1749 Main St.',
			city: 'Blacksburg',
			state: 'VA'
			}
		} as const

	const results3=[];for (const item of walker.walk(h)) {const h: TNodeInfo<Person> = item;
		results3.push(h.node.name)
	};const lNames =results3
	equal(lNames, ['John Bowling', 'Julie Booker'])

	// --- put it in an array
	const h2 = [{
		friends: [
			new Person('John Bowling', 'male'),
			new Person('Julie Booker', 'female')
			],
		name: 'John Deighan',
		gender: 'male',
		address: {
			street: '1749 Main St.',
			city: 'Blacksburg',
			state: 'VA'
			}
		}] as const

	const results4=[];for (const item1 of walker.walk(h)) {const h: TNodeInfo<Person> = item1;
		results4.push(h.node.name)
	};const lNames2 =results4
	equal(lNames2, ['John Bowling', 'Julie Booker'])

	// --- put it in a hash
	const h3 = { stuff: {
		friends: [
			new Person('John Bowling', 'male'),
			new Person('Julie Booker', 'female')
			],
		name: 'John Deighan',
		gender: 'male',
		address: {
			street: '1749 Main St.',
			city: 'Blacksburg',
			state: 'VA'
			}
		}} as const

	const results5=[];for (const item2 of walker.walk(h)) {const h: TNodeInfo<Person> = item2;
		results5.push(h.node.name)
	};const lNames3 =results5
	equal(lNames3, ['John Bowling', 'Julie Booker'])
}
	)();

// --- NOTE: In the above, the nodes must be Person objects,
//           not just hashes with the keys 'name' and 'gender'
// --- However, if you just want to check for those keys,
//        you can overried the isNode() method

(() => {
	// --- A node is a hash with keys 'name' and 'gender'

	type Person = {
		name: string
		gender: 'male' | 'female'
		}

	const walker = new Walker<Person>()
	walker.isNode = (x: object): x is Person => {
		return hasKeys(x, 'name', 'gender')
	}

	// --- Walk a single node
	const results6=[];for (const h of walker.walk({name: 'John', gender: 'male'})) {
		results6.push(`${h.node.name} is ${h.node.gender}`)
	};const lStrings =results6
	equal(lStrings, ['John is male'])

	// --- Walk an array
	const results7=[];for (const h of walker.walk([
			{name: 'John', gender: 'male'},
			{name: 'Julie', gender: 'female'}
			])) {
		results7.push(`${h.node.name} is ${h.node.gender}`)
	};const lStrings2 =results7
	equal(lStrings2, ['John is male', 'Julie is female'])

	// --- Walk an object
	const results8=[];for (const h of walker.walk({
			first: {name: 'John', gender: 'male'},
			second: {name: 'Julie', gender: 'female'}
			})) {
		results8.push(`${h.index}: ${h.node.name} is ${h.node.gender}`)
	};const lStrings3 =results8
	equal(lStrings3, [
		'first: John is male',
		'second: Julie is female'
		])

	const h = {
		friends: [
			{name: 'John Bowling', gender: 'male'},
			{name: 'Julie Booker', gender: 'female'}
			],
		name: 'John Deighan',
		gender: 'male',
		address: {
			street: '1749 Main St.',
			city: 'Blacksburg',
			state: 'VA'
			}
		} as const

	const results9=[];for (const item3 of walker.walk(h)) {const h: TNodeInfo<Person> = item3;
		results9.push(h.node.name)
	};const lNames =results9
	equal(lNames, ['John Deighan', 'John Bowling', 'Julie Booker'])

	// --- put it in an array
	const h2 = [{
		friends: [
			{name: 'John Bowling', gender: 'male'},
			{name: 'Julie Booker', gender: 'female'}
			],
		name: 'John Deighan',
		gender: 'male',
		address: {
			street: '1749 Main St.',
			city: 'Blacksburg',
			state: 'VA'
			}
		}] as const

	const results10=[];for (const item4 of walker.walk(h)) {const h: TNodeInfo<Person> = item4;
		results10.push(h.node.name)
	};const lNames2 =results10
	equal(lNames2, ['John Deighan', 'John Bowling', 'Julie Booker'])

	// --- put it in a hash
	const h3 = { stuff: {
		friends: [
			{name: 'John Bowling', gender: 'male'},
			{name: 'Julie Booker', gender: 'female'}
			],
		name: 'John Deighan',
		gender: 'male',
		address: {
			street: '1749 Main St.',
			city: 'Blacksburg',
			state: 'VA'
			}
		}} as const

	const results11=[];for (const item5 of walker.walk(h)) {const h: TNodeInfo<Person> = item5;
		results11.push(h.node.name)
	};const lNames3 =results11
	equal(lNames3, ['John Deighan', 'John Bowling', 'Julie Booker'])
}
	)()

//# sourceMappingURL=data:application/json;base64,