"use strict";
// walker.lib.test.civet

import {undef, hash, isArray, isHash} from 'datatypes'
import {hasKeys} from 'llutils'
import {DBG, setLogLevel} from 'logger'
import {getCmdArgs} from 'cmd-args'
import {
	TNodeInfo, Walker,
	} from 'walker'
import {
	equal, truthy, falsy, isType, notType,
	} from 'unit-test'

getCmdArgs()
setLogLevel('debug')

// ---------------------------------------------------------------------------

DBG("type TNodeInfo")

isType( 'TNodeInfo<number>', {node: 42, level: 1,   parent: undef})
notType('TNodeInfo<number>', {node: 42, level: 'a', parent: undef})

// ---------------------------------------------------------------------------

DBG("class Walker");

(() => {
	// --- Try a very basic hash type
	//     A node is a hash with keys 'name' and 'gender'

	type TPerson = {
		name: string
		gender: 'male' | 'female'
		}

	const walker = new Walker<TPerson>()
	walker.useNode = (x: unknown): boolean => {
			return hasKeys(x, 'name', 'gender')
	}

	// --- Walk a single node
	const results=[];for (const item of walker.walk({
			name: 'John',
			gender: 'male'
			})) {const h: TNodeInfo<TPerson> = item;
		results.push(`${h.node.name} is ${h.node.gender}`)
	};const lStrings =results
	equal(lStrings, ['John is male'])

	// --- Walk an array
	const results1=[];for (const item1 of walker.walk([
			{
				name: 'John',
				gender: 'male'
				},
			{
				name: 'Julie',
				gender: 'female'
				}
			])) {const h: TNodeInfo<TPerson> = item1;
		results1.push(`${h.node.name} is ${h.node.gender}`)
	};const lStrings2 =results1
	equal(lStrings2, ['John is male', 'Julie is female'])

	// --- Walk an object
	const results2=[];for (const item2 of walker.walk({
			first: {
				name: 'John',
				gender: 'male'
				},
			second: {
				name: 'Julie',
				gender: 'female'
				}
			})) {const h: TNodeInfo<TPerson> = item2;
		results2.push(`${h.index}: ${h.node.name} is ${h.node.gender}`)
	};const lStrings3 =results2
	equal(lStrings3, [
		'first: John is male',
		'second: Julie is female'
		])

	const h = {
		friends: [
			{name: 'John Bowling', gender: 'male'},
			{name: 'Julie Booker', gender: 'female'}
			],
		name: 'John Deighan',
		gender: 'male',
		address: {
			street: '1749 Main St.',
			city: 'Blacksburg',
			state: 'VA'
			}
		} as const

	const results3=[];for (const item3 of walker.walk(h)) {const h: TNodeInfo<TPerson> = item3;
		results3.push(h.node.name)
	};const lNames =results3
	equal(lNames, ['John Deighan', 'John Bowling', 'Julie Booker'])

	// --- put it in an array
	const h2 = [{
		friends: [
			{name: 'John Bowling', gender: 'male'},
			{name: 'Julie Booker', gender: 'female'}
			],
		name: 'John Deighan',
		gender: 'male',
		address: {
			street: '1749 Main St.',
			city: 'Blacksburg',
			state: 'VA'
			}
		}] as const

	const results4=[];for (const item4 of walker.walk(h)) {const h: TNodeInfo<TPerson> = item4;
		results4.push(h.node.name)
	};const lNames2 =results4
	equal(lNames2, ['John Deighan', 'John Bowling', 'Julie Booker'])

	// --- put it in a hash
	const h3 = { stuff: {
		friends: [
			{name: 'John Bowling', gender: 'male'},
			{name: 'Julie Booker', gender: 'female'}
			],
		name: 'John Deighan',
		gender: 'male',
		address: {
			street: '1749 Main St.',
			city: 'Blacksburg',
			state: 'VA'
			}
		}} as const

	const results5=[];for (const item5 of walker.walk(h)) {const h: TNodeInfo<TPerson> = item5;
		results5.push(h.node.name)
	};const lNames3 =results5
	equal(lNames3, ['John Deighan', 'John Bowling', 'Julie Booker'])
}
	)()

//# sourceMappingURL=data:application/json;charset=utf-8;base64,