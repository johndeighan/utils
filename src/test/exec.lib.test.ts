"use strict";
// exec.lib.test.civet

import {isEmpty, nonEmpty} from 'datatypes'
import {DBG} from 'logger'
import {o} from 'llutils'
import {getCmdArgs} from 'cmd-args'
import {
	mkstr, getCmdLine,
	execCmd, execCmdSync, getCmdOutput, getCmdOutputSync,
	cmdSucceeds, TExecResult,
	} from 'exec'
import {
	equal, like, succeeds, fails, truthy, falsy, setDirTree,
	} from 'unit-test'

getCmdArgs()

// ---------------------------------------------------------------------------

const setup = (): void => {

	DBG("setDirTree()")

	setDirTree('src/test/exec', `bad.civet
	str: string := undef
`)
}

setup()

// ---------------------------------------------------------------------------

DBG("mkstr(x)")

const buffer = new ArrayBuffer(3)
const view = new Int8Array(buffer)

view[0] = 97
view[1] = 98
view[2] = 99

equal(mkstr('abc'), 'abc')
equal(mkstr(buffer), 'abc')
equal(mkstr(view), 'abc')

DBG("getCmdLine()")

equal(getCmdLine('dothis', ['-a', 'willy']), 'dothis -a willy')

DBG("execCmd()", "type TExecResult");

(async () => {
	const hResult = await getCmdOutput('echo', ["Hello"])
	equal(hResult.code, 0)
	equal(hResult.stdout, "Hello\n")
}
	)()

DBG("execCmdSync()", "type TExecResult")

equal(execCmdSync("echo", ["Hello"]).code, 0);

(() => {
	const hResult = getCmdOutputSync('echo', ["Hello"])
	equal(hResult.code, 0)
	equal(hResult.stdout, "Hello\n")
}
	)()

DBG("getCmdOutput()");

(async () => {
	const hResult = await getCmdOutput('echo', ["Hello"])
	equal(hResult.code, 0)
}
	)()

DBG("getCmdOutputSync()");

(() => {
	const hResult = getCmdOutputSync('echo', ["Hello"])
	equal(hResult.code, 0)
	equal(hResult.stdout, "Hello\n")
}
	)()

DBG("cmdSucceeds(cmdName, lArgs, hOptions)")

truthy(cmdSucceeds('ls'))
falsy( cmdSucceeds('nosuchcmd'))

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQzpcXFVzZXJzXFxqb2huZFxcdXRpbHNcXHNyY1xcdGVzdFxcZXhlYy5saWIudGVzdC5jaXZldC50c3giLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcam9obmRcXHV0aWxzXFxzcmNcXHRlc3RcXGV4ZWMubGliLnRlc3QuY2l2ZXQiXSwibWFwcGluZ3MiOiI7QUFBQSxzQkFBcUI7QUFDckIsQUFBQTtBQUNBLEFBQUEsTUFBTSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsSUFBSSxDQUFDLFdBQVc7QUFDM0MsQUFBQSxBQUFBLE1BQU0sQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxRQUFRO0FBQzFCLEFBQUEsQUFBQSxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsU0FBUztBQUN6QixBQUFBLEFBQUEsTUFBTSxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQVU7QUFDbkMsQUFBQSxBQUFBLE1BQU0sQ0FBQyxDQUFDO0FBQ1IsQ0FBQyxLQUFLLENBQUMsQ0FBQyxVQUFVLENBQUM7QUFDbkIsQ0FBQyxPQUFPLENBQUMsQ0FBQyxXQUFXLENBQUMsQ0FBQyxZQUFZLENBQUMsQ0FBQyxnQkFBZ0IsQ0FBQztBQUN0RCxDQUFDLFdBQVcsQ0FBQyxDQUFDLFdBQVcsQ0FBQztBQUMxQixDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTTtBQUNkLEFBQUEsQUFBQSxNQUFNLENBQUMsQ0FBQztBQUNSLENBQUMsS0FBSyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsVUFBVSxDQUFDO0FBQ3pELENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxXQUFXO0FBQ25CLEFBQUE7QUFDQSxBQUFBLEFBQUEsVUFBVSxDQUFDLENBQUM7QUFDWixBQUFBO0FBQ0EsQUFBQSw4RUFBNkU7QUFDN0UsQUFB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Q0FBQTtBQUMzQyxBQUFBO0FBQ0EsQUFBQSxBQUFBLE1BQU0sQ0FBQSxBQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUN4QixBQUFBLEFBQUEsS0FBSyxDQUFBLENBQUUsV0FBVyxDQUFDLFdBQVcsQ0FBQyxDQUFBO0FBQy9CIiwibmFtZXMiOltdLCJzb3VyY2VzQ29udGVudCI6WyIjIGV4ZWMubGliLnRlc3QuY2l2ZXRcclxuXHJcbmltcG9ydCB7aXNFbXB0eSwgbm9uRW1wdHl9IGZyb20gJ2RhdGF0eXBlcydcclxuaW1wb3J0IHtEQkd9IGZyb20gJ2xvZ2dlcidcclxuaW1wb3J0IHtvfSBmcm9tICdsbHV0aWxzJ1xyXG5pbXBvcnQge2dldENtZEFyZ3N9IGZyb20gJ2NtZC1hcmdzJ1xyXG5pbXBvcnQge1xyXG5cdG1rc3RyLCBnZXRDbWRMaW5lLFxyXG5cdGV4ZWNDbWQsIGV4ZWNDbWRTeW5jLCBnZXRDbWRPdXRwdXQsIGdldENtZE91dHB1dFN5bmMsXHJcblx0Y21kU3VjY2VlZHMsIFRFeGVjUmVzdWx0LFxyXG5cdH0gZnJvbSAnZXhlYydcclxuaW1wb3J0IHtcclxuXHRlcXVhbCwgbGlrZSwgc3VjY2VlZHMsIGZhaWxzLCB0cnV0aHksIGZhbHN5LCBzZXREaXJUcmVlLFxyXG5cdH0gZnJvbSAndW5pdC10ZXN0J1xyXG5cclxuZ2V0Q21kQXJncygpXHJcblxyXG4jIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cclxuc2V0dXAgOj0gKCk6IHZvaWQgPT5cclxuXHJcblx0REJHIFwic2V0RGlyVHJlZSgpXCJcclxuXHJcblx0c2V0RGlyVHJlZSAnc3JjL3Rlc3QvZXhlYycsIFwiXCJcIlxyXG5cdFx0YmFkLmNpdmV0XHJcblx0XHRcdHN0cjogc3RyaW5nIDo9IHVuZGVmXHJcblxyXG5cdFx0XCJcIlwiXHJcblxyXG5zZXR1cCgpXHJcblxyXG4jIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cclxuREJHIFwibWtzdHIoeClcIlxyXG5cclxuYnVmZmVyIDo9IG5ldyBBcnJheUJ1ZmZlcigzKVxyXG52aWV3IDo9IG5ldyBJbnQ4QXJyYXkoYnVmZmVyKVxyXG5cclxudmlld1swXSA9IDk3XHJcbnZpZXdbMV0gPSA5OFxyXG52aWV3WzJdID0gOTlcclxuXHJcbmVxdWFsIG1rc3RyKCdhYmMnKSwgJ2FiYydcclxuZXF1YWwgbWtzdHIoYnVmZmVyKSwgJ2FiYydcclxuZXF1YWwgbWtzdHIodmlldyksICdhYmMnXHJcblxyXG5EQkcgXCJnZXRDbWRMaW5lKClcIlxyXG5cclxuZXF1YWwgZ2V0Q21kTGluZSgnZG90aGlzJywgWyctYScsICd3aWxseSddKSwgJ2RvdGhpcyAtYSB3aWxseSdcclxuXHJcbkRCRyBcImV4ZWNDbWQoKVwiLCBcInR5cGUgVEV4ZWNSZXN1bHRcIlxyXG5cclxuKCgpID0+XHJcblx0aFJlc3VsdCA6PSBhd2FpdCBnZXRDbWRPdXRwdXQgJ2VjaG8nLCBbXCJIZWxsb1wiXVxyXG5cdGVxdWFsIGhSZXN1bHQuY29kZSwgMFxyXG5cdGVxdWFsIGhSZXN1bHQuc3Rkb3V0LCBcIkhlbGxvXFxuXCJcclxuXHQpKClcclxuXHJcbkRCRyBcImV4ZWNDbWRTeW5jKClcIiwgXCJ0eXBlIFRFeGVjUmVzdWx0XCJcclxuXHJcbmVxdWFsIGV4ZWNDbWRTeW5jKFwiZWNob1wiLCBbXCJIZWxsb1wiXSkuY29kZSwgMFxyXG5cclxuKCgpID0+XHJcblx0aFJlc3VsdCA6PSBnZXRDbWRPdXRwdXRTeW5jICdlY2hvJywgW1wiSGVsbG9cIl1cclxuXHRlcXVhbCBoUmVzdWx0LmNvZGUsIDBcclxuXHRlcXVhbCBoUmVzdWx0LnN0ZG91dCwgXCJIZWxsb1xcblwiXHJcblx0KSgpXHJcblxyXG5EQkcgXCJnZXRDbWRPdXRwdXQoKVwiXHJcblxyXG4oKCkgPT5cclxuXHRoUmVzdWx0IDo9IGF3YWl0IGdldENtZE91dHB1dCAnZWNobycsIFtcIkhlbGxvXCJdXHJcblx0ZXF1YWwgaFJlc3VsdC5jb2RlLCAwXHJcblx0KSgpXHJcblxyXG5EQkcgXCJnZXRDbWRPdXRwdXRTeW5jKClcIlxyXG5cclxuKCgpID0+XHJcblx0aFJlc3VsdCA6PSBnZXRDbWRPdXRwdXRTeW5jICdlY2hvJywgW1wiSGVsbG9cIl1cclxuXHRlcXVhbCBoUmVzdWx0LmNvZGUsIDBcclxuXHRlcXVhbCBoUmVzdWx0LnN0ZG91dCwgXCJIZWxsb1xcblwiXHJcblx0KSgpXHJcblxyXG5EQkcgXCJjbWRTdWNjZWVkcyhjbWROYW1lLCBsQXJncywgaE9wdGlvbnMpXCJcclxuXHJcbnRydXRoeSBjbWRTdWNjZWVkcygnbHMnKVxyXG5mYWxzeSAgY21kU3VjY2VlZHMoJ25vc3VjaGNtZCcpXHJcbiJdfQ==