"use strict";
// expr.grammar.civet

import {
	Node, toAst,
	} from '../../src/lib/ast-builder.lib.ts'

// ---------------------------------------------------------------------------

// --- Regular Expressions - to use in rules

const reIdent = /^([a-zA-Z_$][a-zA-Z0-9_$]*)/
reIdent.toString = () => 'reIdent'

const reNumber = /^((?:[0-9]+\.?[0-9]*|\.[0-9]+)(?:[eE][-+]?[0-9]+)?)\b/
reNumber.toString = () => 'reNumber'

const reAddOp = /[+\-]/
reAddOp.toString = () => 'reOp'

const reMulOp = /[\*\/]/
reMulOp.toString = () => 'reOp'

// ---------------------------------------------------------------------------

const desc = `expr ::= term ( /^[+-]/ term )*
term ::= factor ( /^[*\/]/ factor )*
factor ::= /^\d+/ | '(' expr ')'`

export const exprGrammar = toAst(['grammar', [
	['expr', [
		['ALL', [
			['term'],
			['STAR', [
				['REGEX', [], {re: /^[+-]/}],
				['term']
				]]
			]]
		]],
	['term', [
		['ALL', [
			['factor'],
			['STAR', [
				['REGEX', [], {re: /^[*\/]/}],
				['factor']
				]]
			]]
		]],
	['factor', [
		['ANY', [
			['REGEX', [], {re: /^\d+/}],
			['ALL', [
				['STRING', [], {str: '('}],
				['expr'],
				['STRING', [], {str: ')'}]
				]]
			]]
		]]
	]])

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3JjL3Rlc3QvcGFyc2VyL2V4cHIuZ3JhbW1hci5jaXZldC50c3giLCJzb3VyY2VzIjpbInNyYy90ZXN0L3BhcnNlci9leHByLmdyYW1tYXIuY2l2ZXQiXSwibWFwcGluZ3MiOiI7QUFBQSxxQkFBb0I7QUFDcEIsQUFBQTtBQUNBLEFBQUEsTUFBTSxDQUFDLENBQUM7QUFDUixDQUFDLElBQUksQ0FBQyxDQUFDLEtBQUssQ0FBQztBQUNiLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxrQ0FBa0M7QUFDMUMsQUFBQTtBQUNBLEFBQUEsOEVBQTZFO0FBQzdFLEFBQUE7QUFDQSxBQUFBLDRDQUEyQztBQUMzQyxBQUFBO0FBQ0EsQUFBQSxBQUFPLE1BQVAsT0FBTyxDQUFDLENBQUUsQ0FBQyxDQUFHLEVBQUUsQUFBQyxVQUFVLEFBQUMsYUFBYSxDQUFDLEFBQUMsQ0FBQyxBQUFDLENBQUc7QUFDaEQsQUFBQSxBQUFBLE9BQU8sQ0FBQyxRQUFRLEMsQ0FBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxTQUFTO0FBQ2xDLEFBQUE7QUFDQSxBQUFBLEFBQVEsTUFBUixRQUFRLENBQUMsQ0FBRSxDQUFDLENBQUcsQ0FBQyxBQUNmLENBQUMsQUFDQSxHQUFHLEFBQ0YsS0FBSyxDQUFDLEFBQUMsRUFBRSxDQUFDLEFBQUMsS0FBSyxDQUFDLEFBQUMsQ0FBQyxBQUFDLEVBQUUsQUFBQyxLQUFLLENBQUMsQUFDN0IsQ0FBQyxBQUNGLEdBQUcsQUFDRixJQUFJLEFBQUMsSUFBSSxDQUFDLEFBQUMsS0FBSyxDQUFDLEFBQ2pCLEVBQUUsQUFDSCxDQUFDLEVBQUUsQUFDSixDQUFHO0FBQ0osQUFBQSxBQUFBLFFBQVEsQ0FBQyxRQUFRLEMsQ0FBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxVQUFVO0FBQ3BDLEFBQUE7QUFDQSxBQUFBLEFBQU8sTUFBUCxPQUFPLENBQUMsQ0FBRSxDQUFDLE9BQU87QUFDbEIsQUFBQSxBQUFBLE9BQU8sQ0FBQyxRQUFRLEMsQ0FBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxNQUFNO0FBQy9CLEFBQUE7QUFDQSxBQUFBLEFBQU8sTUFBUCxPQUFPLENBQUMsQ0FBRSxDQUFDLFFBQVE7QUFDbkIsQUFBQSxBQUFBLE9BQU8sQ0FBQyxRQUFRLEMsQ0FBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxNQUFNO0FBQy9CLEFBQUE7QUFDQSxBQUFBLDhFQUE2RTtBQUM3RSxBQUFBO0FBQ0EsQUFBQSxBQUFJLE1BQUosSUFBSSxDQUFDLENBQUUsQ0FBQyxDQUFHO0FBQ1g7QUFDQSxnQ0FFQyxDQUFHO0FBQ0osQUFBQTtBQUNBLEFBQUEsQUFBQSxNQUFNLENBQVksTUFBWCxXQUFXLENBQUMsQ0FBRSxDQUFDLEtBQUssQ0FBQSxBQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQztBQUN6QyxBQUFBLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO0FBQ1gsQUFBQSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztBQUNYLEFBQUEsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFBO0FBQ1gsQUFBQSxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztBQUNiLEFBQUEsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFBO0FBQ2hDLEFBQUEsSUFBSSxDQUFDLE1BQU0sQ0FBQztBQUNaLEFBQUEsSUFBSSxDQUFDLENBQUM7QUFDTixBQUFBLEdBQUcsQ0FBQyxDQUFDO0FBQ0wsQUFBQSxFQUFFLENBQUMsQ0FBQyxDQUFBO0FBQ0osQUFBQSxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztBQUNYLEFBQUEsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7QUFDWCxBQUFBLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQTtBQUNiLEFBQUEsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7QUFDYixBQUFBLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQTtBQUNqQyxBQUFBLElBQUksQ0FBQyxRQUFRLENBQUM7QUFDZCxBQUFBLElBQUksQ0FBQyxDQUFDO0FBQ04sQUFBQSxHQUFHLENBQUMsQ0FBQztBQUNMLEFBQUEsRUFBRSxDQUFDLENBQUMsQ0FBQTtBQUNKLEFBQUEsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7QUFDYixBQUFBLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO0FBQ1gsQUFBQSxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUE7QUFDOUIsQUFBQSxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztBQUNaLEFBQUEsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFBO0FBQzlCLEFBQUEsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0FBQ1osQUFBQSxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQzlCLEFBQUEsSUFBSSxDQUFDLENBQUM7QUFDTixBQUFBLEdBQUcsQ0FBQyxDQUFDO0FBQ0wsQUFBQSxFQUFFLENBQUMsQ0FBQztBQUNKLEFBQUEsQ0FBQyxDQUFDLENBQUMsQ0FBQTtBQUNIIiwibmFtZXMiOltdLCJzb3VyY2VzQ29udGVudCI6WyIjIGV4cHIuZ3JhbW1hci5jaXZldFxyXG5cclxuaW1wb3J0IHtcclxuXHROb2RlLCB0b0FzdCxcclxuXHR9IGZyb20gJy4uLy4uL3NyYy9saWIvYXN0LWJ1aWxkZXIubGliLnRzJ1xyXG5cclxuIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuXHJcbiMgLS0tIFJlZ3VsYXIgRXhwcmVzc2lvbnMgLSB0byB1c2UgaW4gcnVsZXNcclxuXHJcbnJlSWRlbnQgOj0gLy8vXiggW2EtekEtWl8kXSBbYS16QS1aMC05XyRdKiApIC8vL1xyXG5yZUlkZW50LnRvU3RyaW5nID0gKCkgPT4gJ3JlSWRlbnQnXHJcblxyXG5yZU51bWJlciA6PSAvLy9eXHJcblx0KFxyXG5cdFx0KD86XHJcblx0XHRcdFswLTldKyBcXC4/IFswLTldKiB8IFxcLiBbMC05XStcclxuXHRcdFx0KVxyXG5cdFx0KD86XHJcblx0XHRcdFtlRV0gWy0rXT8gWzAtOV0rXHJcblx0XHRcdCk/XHJcblx0XHQpXFxiXHJcblx0Ly8vXHJcbnJlTnVtYmVyLnRvU3RyaW5nID0gKCkgPT4gJ3JlTnVtYmVyJ1xyXG5cclxucmVBZGRPcCA6PSAvWytcXC1dL1xyXG5yZUFkZE9wLnRvU3RyaW5nID0gKCkgPT4gJ3JlT3AnXHJcblxyXG5yZU11bE9wIDo9IC9bXFwqXFwvXS9cclxucmVNdWxPcC50b1N0cmluZyA9ICgpID0+ICdyZU9wJ1xyXG5cclxuIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuXHJcbmRlc2MgOj0gXCJcIlwiXHJcblx0ZXhwciA6Oj0gdGVybSAoIC9eWystXS8gdGVybSApKlxyXG5cdHRlcm0gOjo9IGZhY3RvciAoIC9eWypcXC9dLyBmYWN0b3IgKSpcclxuXHRmYWN0b3IgOjo9IC9eXFxkKy8gfCAnKCcgZXhwciAnKSdcclxuXHRcIlwiXCJcclxuXHJcbmV4cG9ydCBleHByR3JhbW1hciA6PSB0b0FzdCBbJ2dyYW1tYXInLCBbXHJcblx0WydleHByJywgW1xyXG5cdFx0WydBTEwnLCBbXHJcblx0XHRcdFsndGVybSddXHJcblx0XHRcdFsnU1RBUicsIFtcclxuXHRcdFx0XHRbJ1JFR0VYJywgW10sIHtyZTogL15bKy1dL31dXHJcblx0XHRcdFx0Wyd0ZXJtJ11cclxuXHRcdFx0XHRdXVxyXG5cdFx0XHRdXVxyXG5cdFx0XV1cclxuXHRbJ3Rlcm0nLCBbXHJcblx0XHRbJ0FMTCcsIFtcclxuXHRcdFx0WydmYWN0b3InXVxyXG5cdFx0XHRbJ1NUQVInLCBbXHJcblx0XHRcdFx0WydSRUdFWCcsIFtdLCB7cmU6IC9eWypcXC9dL31dXHJcblx0XHRcdFx0WydmYWN0b3InXVxyXG5cdFx0XHRcdF1dXHJcblx0XHRcdF1dXHJcblx0XHRdXVxyXG5cdFsnZmFjdG9yJywgW1xyXG5cdFx0WydBTlknLCBbXHJcblx0XHRcdFsnUkVHRVgnLCBbXSwge3JlOiAvXlxcZCsvfV1cclxuXHRcdFx0WydBTEwnLCBbXHJcblx0XHRcdFx0WydTVFJJTkcnLCBbXSwge3N0cjogJygnfV1cclxuXHRcdFx0XHRbJ2V4cHInXVxyXG5cdFx0XHRcdFsnU1RSSU5HJywgW10sIHtzdHI6ICcpJ31dXHJcblx0XHRcdFx0XV1cclxuXHRcdFx0XV1cclxuXHRcdF1dXHJcblx0XV1cclxuIl19