# expr.grammar.civet

import {
	Node, toAst,
	} from '../../src/lib/ast-builder.lib.ts'

# ---------------------------------------------------------------------------

# --- Regular Expressions - to use in rules

reIdent := ///^( [a-zA-Z_$] [a-zA-Z0-9_$]* ) ///
reIdent.toString = () => 'reIdent'

reNumber := ///^
	(
		(?:
			[0-9]+ \.? [0-9]* | \. [0-9]+
			)
		(?:
			[eE] [-+]? [0-9]+
			)?
		)\b
	///
reNumber.toString = () => 'reNumber'

reAddOp := /[+\-]/
reAddOp.toString = () => 'reOp'

reMulOp := /[\*\/]/
reMulOp.toString = () => 'reOp'

# ---------------------------------------------------------------------------

desc := """
	expr ::= term ( /^[+-]/ term )*
	term ::= factor ( /^[*\/]/ factor )*
	factor ::= /^\d+/ | '(' expr ')'
	"""

export exprGrammar := toAst ['grammar', [
	['expr', [
		['ALL', [
			['term']
			['STAR', [
				['REGEX', [], {re: /^[+-]/}]
				['term']
				]]
			]]
		]]
	['term', [
		['ALL', [
			['factor']
			['STAR', [
				['REGEX', [], {re: /^[*\/]/}]
				['factor']
				]]
			]]
		]]
	['factor', [
		['ANY', [
			['REGEX', [], {re: /^\d+/}]
			['ALL', [
				['STRING', [], {str: '('}]
				['expr']
				['STRING', [], {str: ')'}]
				]]
			]]
		]]
	]]
