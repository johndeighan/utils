"use strict";
// symbols.lib.test.civet

import {undef} from 'datatypes'
import {LOG, DBG} from 'logger'
import {
	loadSymbols,
	sourceLib, libsAndSymbols, getNeededImportStmts,
	} from 'symbols'
import {
	equal, succeeds,
	} from 'unit-test'


// ---------------------------------------------------------------------------

DBG("loadSymbols()");

(() => {
	const myMap = loadSymbols(`datatypes.lib.ts
	undef defined
indent.lib.ts
	splitLine`)

	equal(sourceLib('undef', myMap), 'datatypes.lib.ts')
	equal(sourceLib('defined', myMap), 'datatypes.lib.ts')
	equal(sourceLib('splitLine', myMap), 'indent.lib.ts')
	equal(sourceLib('dummy', myMap), undef)
}
	)()

DBG("sourceLib()");

(() => {
	const myMap = new Map([['x', 'temp.ts'],['y', 'dummy.ts']])
	equal(sourceLib('x', myMap), 'temp.ts')
	equal(sourceLib('y', myMap), 'dummy.ts')
}
	)()

equal(sourceLib('defined'), 'datatypes')
equal(sourceLib('isArray'), 'datatypes')

equal(sourceLib('array'), 'datatypes')
equal(sourceLib('hash'), 'datatypes')

DBG("libsAndSymbols()")

equal(libsAndSymbols(['defined','array']), {
	'datatypes': ['defined','array']
	})
equal(libsAndSymbols(['defined','splitLine']), {
	'datatypes': ['defined'],
	'indent': ['splitLine']
	})

DBG("getNeededImportStmts()")

equal(getNeededImportStmts(['defined','array']), [
	"import {defined, array} from 'datatypes';"
	])
equal(getNeededImportStmts(['arrayof','integer']), [
	"import {arrayof, integer} from 'datatypes';"
	])

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQzpcXFVzZXJzXFxqb2huZFxcdXRpbHNcXHNyY1xcdGVzdFxcc3ltYm9scy5saWIudGVzdC5jaXZldC50c3giLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcam9obmRcXHV0aWxzXFxzcmNcXHRlc3RcXHN5bWJvbHMubGliLnRlc3QuY2l2ZXQiXSwibWFwcGluZ3MiOiI7QUFBQSx5QkFBd0I7QUFDeEIsQUFBQTtBQUNBLEFBQUEsTUFBTSxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsSUFBSSxDQUFDLFdBQVc7QUFDL0IsQUFBQSxBQUFBLE1BQU0sQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxRQUFRO0FBQy9CLEFBQUEsQUFBQSxNQUFNLENBQUMsQ0FBQztBQUNSLENBQUMsV0FBVyxDQUFDO0FBQ2IsQ0FBQyxTQUFTLENBQUMsQ0FBQyxjQUFjLENBQUMsQ0FBQyxvQkFBb0IsQ0FBQztBQUNqRCxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsU0FBUztBQUNqQixBQUFBLEFBQUEsTUFBTSxDQUFDLENBQUM7QUFDUixDQUFDLEtBQUssQ0FBQyxDQUFDLFFBQVEsQ0FBQztBQUNqQixDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsV0FBVztBQUNuQixBQUFBO0FBQ0EsQUFBQTtBQUNBLEFBQUEsOEVBQTZFO0FBQzdFLEFBQUE7QUFDQSxBQUFBLEFBQUEsR0FBRyxDQUFBLEFBQUMsZUFBZSxDLENBQUE7QUFDbkIsQUFBQTtBQUNBLEFBQUEsQUFBQSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQSxDQUFBO0FBQ04sQUFBQSxDQUFNLE1BQUwsS0FBSyxDQUFDLENBQUUsQ0FBQyxXQUFXLENBQUMsQ0FBRztBQUN6QjtBQUNBO0FBQ0EsVUFFRSxDQUFHLENBQUM7QUFDTixBQUFBO0FBQ0EsQUFBQSxDQUFDLEtBQUssQ0FBQSxBQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLGtCQUFrQixDQUFB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QUFBLENBQUMsQ0FBQyxDQUFBO0FBQ0YiLCJuYW1lcyI6W10sInNvdXJjZXNDb250ZW50IjpbIiMgc3ltYm9scy5saWIudGVzdC5jaXZldFxyXG5cclxuaW1wb3J0IHt1bmRlZn0gZnJvbSAnZGF0YXR5cGVzJ1xyXG5pbXBvcnQge0xPRywgREJHfSBmcm9tICdsb2dnZXInXHJcbmltcG9ydCB7XHJcblx0bG9hZFN5bWJvbHMsXHJcblx0c291cmNlTGliLCBsaWJzQW5kU3ltYm9scywgZ2V0TmVlZGVkSW1wb3J0U3RtdHMsXHJcblx0fSBmcm9tICdzeW1ib2xzJ1xyXG5pbXBvcnQge1xyXG5cdGVxdWFsLCBzdWNjZWVkcyxcclxuXHR9IGZyb20gJ3VuaXQtdGVzdCdcclxuXHJcblxyXG4jIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cclxuREJHIFwibG9hZFN5bWJvbHMoKVwiXHJcblxyXG4oKCkgPT5cclxuXHRteU1hcCA6PSBsb2FkU3ltYm9scyhcIlwiXCJcclxuXHRcdGRhdGF0eXBlcy5saWIudHNcclxuXHRcdFx0dW5kZWYgZGVmaW5lZFxyXG5cdFx0aW5kZW50LmxpYi50c1xyXG5cdFx0XHRzcGxpdExpbmVcclxuXHRcdFwiXCJcIilcclxuXHJcblx0ZXF1YWwgc291cmNlTGliKCd1bmRlZicsIG15TWFwKSwgJ2RhdGF0eXBlcy5saWIudHMnXHJcblx0ZXF1YWwgc291cmNlTGliKCdkZWZpbmVkJywgbXlNYXApLCAnZGF0YXR5cGVzLmxpYi50cydcclxuXHRlcXVhbCBzb3VyY2VMaWIoJ3NwbGl0TGluZScsIG15TWFwKSwgJ2luZGVudC5saWIudHMnXHJcblx0ZXF1YWwgc291cmNlTGliKCdkdW1teScsIG15TWFwKSwgdW5kZWZcclxuXHQpKClcclxuXHJcbkRCRyBcInNvdXJjZUxpYigpXCJcclxuXHJcbigoKSA9PlxyXG5cdG15TWFwIDo9IG5ldyBNYXAoW1sneCcsICd0ZW1wLnRzJ10sWyd5JywgJ2R1bW15LnRzJ11dKVxyXG5cdGVxdWFsIHNvdXJjZUxpYigneCcsIG15TWFwKSwgJ3RlbXAudHMnXHJcblx0ZXF1YWwgc291cmNlTGliKCd5JywgbXlNYXApLCAnZHVtbXkudHMnXHJcblx0KSgpXHJcblxyXG5lcXVhbCBzb3VyY2VMaWIoJ2RlZmluZWQnKSwgJ2RhdGF0eXBlcydcclxuZXF1YWwgc291cmNlTGliKCdpc0FycmF5JyksICdkYXRhdHlwZXMnXHJcblxyXG5lcXVhbCBzb3VyY2VMaWIoJ2FycmF5JyksICdkYXRhdHlwZXMnXHJcbmVxdWFsIHNvdXJjZUxpYignaGFzaCcpLCAnZGF0YXR5cGVzJ1xyXG5cclxuREJHIFwibGlic0FuZFN5bWJvbHMoKVwiXHJcblxyXG5lcXVhbCBsaWJzQW5kU3ltYm9scyhbJ2RlZmluZWQnLCdhcnJheSddKSwge1xyXG5cdCdkYXRhdHlwZXMnOiBbJ2RlZmluZWQnLCdhcnJheSddXHJcblx0fVxyXG5lcXVhbCBsaWJzQW5kU3ltYm9scyhbJ2RlZmluZWQnLCdzcGxpdExpbmUnXSksIHtcclxuXHQnZGF0YXR5cGVzJzogWydkZWZpbmVkJ11cclxuXHQnaW5kZW50JzogWydzcGxpdExpbmUnXVxyXG5cdH1cclxuXHJcbkRCRyBcImdldE5lZWRlZEltcG9ydFN0bXRzKClcIlxyXG5cclxuZXF1YWwgZ2V0TmVlZGVkSW1wb3J0U3RtdHMoWydkZWZpbmVkJywnYXJyYXknXSksIFtcclxuXHRcImltcG9ydCB7ZGVmaW5lZCwgYXJyYXl9IGZyb20gJ2RhdGF0eXBlcyc7XCJcclxuXHRdXHJcbmVxdWFsIGdldE5lZWRlZEltcG9ydFN0bXRzKFsnYXJyYXlvZicsJ2ludGVnZXInXSksIFtcclxuXHRcImltcG9ydCB7YXJyYXlvZiwgaW50ZWdlcn0gZnJvbSAnZGF0YXR5cGVzJztcIlxyXG5cdF1cclxuIl19