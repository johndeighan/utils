# typescript.lib.test.civet

import {SourceFile} from 'npm:typescript'

import {
	undef, isHash, isEmpty, nonEmpty, normalizeCode,
	} from 'datatypes'
import {pass, o, s, t} from 'llutils'
import {DBG} from 'logger'
import {getCmdArgs} from 'cmd-args'
import {slurp, withExt} from 'fsys'
import {
	typeCheckCode, splitFuncStr, getSymbolsFromType,
	getImportCode, getTsCode, checkType,
	ts2ast, ast2ts, typeCheckFiles, astAsString,
	} from 'typescript'
import {
	equal, like, succeeds, fails, truthy, falsy, isType, setDirTree,
	} from 'unit-test'

getCmdArgs()

# ---------------------------------------------------------------------------

setup := (): void =>

	DBG "setDirTree()"

	setDirTree 'src/test/typescript', """
		tstest.ts
			const str: string = 'abc'
		tstest2.ts
			const func1 = (str: string): boolean =>
				return true
		"""

setup()

# ---------------------------------------------------------------------------

DBG "typeCheckCode(tsCode)"

truthy isEmpty(typeCheckCode("let s: string = 'abc';"))
truthy nonEmpty(typeCheckCode("let s: string = 42;"))

DBG "ts2ast(tsCode)", "astAsString(ast)"

ast := ts2ast(slurp('src/test/typescript/tstest2.ts'))
equal astAsString(ast), s"""
	kind: 308
	kindStr: SourceFile
	statements:
		-
			kind: 244
			kindStr: FirstStatement
			declarationList:
				kind: 262
				kindStr: VariableDeclarationList
				declarations:
					-
						kind: 261
						kindStr: VariableDeclaration
						name:
							kind: 80
							kindStr: Identifier
							escapedText: func1
						initializer:
							kind: 220
							kindStr: ArrowFunction
							parameters:
								-
									kind: 170
									kindStr: Parameter
									name:
										kind: 80
										kindStr: Identifier
										escapedText: str
									type:
										kind: 154
										kindStr: StringKeyword
							type:
								kind: 136
								kindStr: BooleanKeyword
							equalsGreaterThanToken:
								kind: 39
								kindStr: EqualsGreaterThanToken
							body:
								kind: 242
								kindStr: Block
								statements:
									-
										kind: 254
										kindStr: ReturnStatement
										expression:
											kind: 112
											kindStr: TrueKeyword
								multiLine: .true.
	endOfFileToken:
		kind: 1
		kindStr: EndOfFileToken
	text: const˳func1˳=˳(str:˳string):˳boolean˳=>↓→return˳true
	fileName: temp.ts
	scriptKind: 3
	isDeclarationFile: .false.
	nodeCount: 16
	identifierCount: 3
	symbolCount: 0
	parseDiagnostics:
		-
			file: .REF /.
			start: 41
			length: 6
			messageText: '{'˳expected.
			category: 1
			code: 1005
		-
			file: .REF /.
			start: 52
			length: 0
			messageText: '}'˳expected.
			category: 1
			code: 1005
	"""
DBG "getSymbolsFromType(typeStr)"

equal getSymbolsFromType('integer'), ['integer']
equal getSymbolsFromType('hashof<integer>'), ['hashof','integer']

DBG "getImportCode(typeStr)"

equal getImportCode('integer'), """
	import {integer} from 'datatypes';
	"""
equal getImportCode('hashof<integer>'), """
	import {hashof, integer} from 'datatypes';
	"""

DBG "splitFuncStr(valueStr)"

equal splitFuncStr("abc"), undef
equal splitFuncStr("() => true"), [[], 'true']
equal splitFuncStr("(  ) => true"), [[], 'true']
equal splitFuncStr("(a,b,c) => false"), [
	['a','b','c']
	'false'
	]
equal splitFuncStr("( a , b,c ) => false"), [
	['a','b','c']
	'false'
	]
equal splitFuncStr("(a: string, b)=>true"), [
	['a: string', 'b']
	'true'
	]

DBG "getTsCode(typeStr, valueStr)"

equal getTsCode('integer', '42'), 'const x: integer = 42'
equal getTsCode('TFilterFunc', '(x) => true'),
	'const x: TFilterFunc = (x: unknown) => true'

DBG "checkType(x, typeStr)"

equal checkType(42, 'number'), []

