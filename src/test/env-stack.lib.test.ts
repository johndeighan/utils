"use strict";
// env-stack.lib.test.civet

import {undef, assert} from 'datatypes'
import {getCmdArgs} from 'cmd-args'
import {CEnvStack} from 'env-stack'
import {
	equal, truthy, falsy, succeeds, fails, codeLike,
	isType, notType,
	} from 'unit-test'

getCmdArgs();

// ---------------------------------------------------------------------------

(() => {
	const env = new CEnvStack()
	env.setVal('name', 'John')
	env.setVal('gender', 'male')

	equal(env.getVal('name'), 'John')
	equal(env.getVal('gender'), 'male')
	equal(env.getVal('dummy'), undef)

	succeeds(() => {
		env.pushEnv()
		env.setVal('name', 'Julie')
		assert(env.getVal('name') === 'Julie')
		env.popEnv()
		assert(env.getVal('name') === 'John')
	})
}
	)();

(() => {
	const env = new CEnvStack({
		name: 'John',
		gender: 'male',
		address: '1 Main St.'
		})
	equal(env.getVal('name'), 'John')
	equal(env.getVal('gender'), 'male')
	equal(env.getVal('address'), '1 Main St.')
	succeeds(() => {

		env.pushEnv()
		env.setVal('name', 'Julie')
		env.setVal('gender', 'female')

		assert(env.getVal('name') === 'Julie')
		assert(env.getVal('gender') === 'female')
		assert(env.getVal('address') === '1 Main St.')

		env.popEnv()

		assert(env.getVal('name') === 'John')
		assert(env.getVal('gender') === 'male')
		assert(env.getVal('address') === '1 Main St.')
	})
}
	)()


//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQzpcXFVzZXJzXFxqb2huZFxcdXRpbHNcXHNyY1xcdGVzdFxcZW52LXN0YWNrLmxpYi50ZXN0LmNpdmV0LnRzeCIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxqb2huZFxcdXRpbHNcXHNyY1xcdGVzdFxcZW52LXN0YWNrLmxpYi50ZXN0LmNpdmV0Il0sIm1hcHBpbmdzIjoiO0FBQUEsMkJBQTBCO0FBQzFCLEFBQUE7QUFDQSxBQUFBLE1BQU0sQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxXQUFXO0FBQ3ZDLEFBQUEsQUFBQSxNQUFNLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBVTtBQUNuQyxBQUFBLEFBQUEsTUFBTSxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsSUFBSSxDQUFDLFdBQVc7QUFDbkMsQUFBQSxBQUFBLE1BQU0sQ0FBQyxDQUFDO0FBQ1IsQ0FBQyxLQUFLLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxRQUFRLENBQUM7QUFDakQsQ0FBQyxNQUFNLENBQUMsQ0FBQyxPQUFPLENBQUM7QUFDakIsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFdBQVc7QUFDbkIsQUFBQTtBQUNBLEFBQUEsQUFBQSxVQUFVLENBQUMsQyxDQUFDO0FBQ1osQUFBQTtBQUNBLEFBQUEsOEVBQTZFO0FBQzdFLEFBQUE7QUFDQSxBQUFBLEFBQUEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUEsQ0FBQTtBQUNOLEFBQUEsQ0FBSSxNQUFILEdBQUcsQ0FBQyxDQUFFLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxDQUFDO0FBQ3ZCLEFBQUEsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFBLEFBQUMsTUFBTSxDQUFDLENBQUMsTUFBTSxDQUFBO0FBQzFCLEFBQUEsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFBLEFBQUMsUUFBUSxDQUFDLENBQUMsTUFBTSxDQUFBO0FBQzVCLEFBQUE7QUFDQSxBQUFBLENBQUMsS0FBSyxDQUFBLEFBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQTtBQUNqQyxBQUFBLENBQUMsS0FBSyxDQUFBLEFBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQTtBQUNuQyxBQUFBLENBQUMsS0FBSyxDQUFBLEFBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQTtBQUNqQyxBQUFBO0FBQ0EsQUFBQSxDQUFDLFFBQVEsQ0FBQSxBQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQSxDQUFBO0FBQ2YsQUFBQSxFQUFFLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQztBQUNmLEFBQUEsRUFBRSxHQUFHLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLE9BQU8sQ0FBQztBQUM3QixBQUFBLEVBQUUsTUFBTSxDQUFBLEFBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFFLENBQUMsT0FBTyxDQUFBO0FBQ3RDLEFBQUEsRUFBRSxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDZCxBQUFBLEVBQUUsTUFBTSxDQUFBLEFBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFFLENBQUMsTUFBTSxDO0NBQUEsQ0FBQSxDO0FBQUEsQ0FBQTtBQUNyQyxDQUFDLENBQUMsQ0FBQyxDLENBQUM7QUFDSixBQUFBO0FBQ0EsQUFBQSxBQUFBLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFBLENBQUE7QUFDTixBQUFBLENBQUksTUFBSCxHQUFHLENBQUMsQ0FBRSxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUEsQUFBQyxDQUFDO0FBQ3ZCLEFBQUEsRUFBRSxJQUFJLENBQUMsQ0FBQyxNQUFNLENBQUE7QUFDZCxBQUFBLEVBQUUsTUFBTSxDQUFDLENBQUMsTUFBTSxDQUFBO0FBQ2hCLEFBQUEsRUFBRSxPQUFPLENBQUMsQ0FBQyxZQUFZO0FBQ3ZCLEVBQUUsQ0FBQyxDQUFBO0FBQ0gsQUFBQSxDQUFDLEtBQUssQ0FBQSxBQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUE7QUFDakMsQUFBQSxDQUFDLEtBQUssQ0FBQSxBQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUE7QUFDbkMsQUFBQSxDQUFDLEtBQUssQ0FBQSxBQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxZQUFZLENBQUE7QUFDMUMsQUFBQSxDQUFDLFFBQVEsQ0FBQSxBQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQSxDQUFBO0FBQ2YsQUFBQTtBQUNBLEFBQUEsRUFBRSxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUM7QUFDZixBQUFBLEVBQUUsR0FBRyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxPQUFPLENBQUM7QUFDN0IsQUFBQSxFQUFFLEdBQUcsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUMsUUFBUSxDQUFDO0FBQ2hDLEFBQUE7QUFDQSxBQUFBLEVBQUUsTUFBTSxDQUFBLEFBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFFLENBQUMsT0FBTyxDQUFBO0FBQ3RDLEFBQUEsRUFBRSxNQUFNLENBQUEsQUFBQyxHQUFHLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDLEdBQUUsQ0FBQyxRQUFRLENBQUE7QUFDekMsQUFBQSxFQUFFLE1BQU0sQ0FBQSxBQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUMsR0FBRSxDQUFDLFlBQVksQ0FBQTtBQUM5QyxBQUFBO0FBQ0EsQUFBQSxFQUFFLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUNkLEFBQUE7QUFDQSxBQUFBLEVBQUUsTUFBTSxDQUFBLEFBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFFLENBQUMsTUFBTSxDQUFBO0FBQ3JDLEFBQUEsRUFBRSxNQUFNLENBQUEsQUFBQyxHQUFHLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDLEdBQUUsQ0FBQyxNQUFNLENBQUE7QUFDdkMsQUFBQSxFQUFFLE1BQU0sQ0FBQSxBQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUMsR0FBRSxDQUFDLFlBQVksQztDQUFBLENBQUEsQztBQUFBLENBQUE7QUFDOUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNKO0FBQ0EiLCJuYW1lcyI6W10sInNvdXJjZXNDb250ZW50IjpbIiMgZW52LXN0YWNrLmxpYi50ZXN0LmNpdmV0XG5cbmltcG9ydCB7dW5kZWYsIGFzc2VydH0gZnJvbSAnZGF0YXR5cGVzJ1xuaW1wb3J0IHtnZXRDbWRBcmdzfSBmcm9tICdjbWQtYXJncydcbmltcG9ydCB7Q0VudlN0YWNrfSBmcm9tICdlbnYtc3RhY2snXG5pbXBvcnQge1xuXHRlcXVhbCwgdHJ1dGh5LCBmYWxzeSwgc3VjY2VlZHMsIGZhaWxzLCBjb2RlTGlrZSxcblx0aXNUeXBlLCBub3RUeXBlLFxuXHR9IGZyb20gJ3VuaXQtdGVzdCdcblxuZ2V0Q21kQXJncygpXG5cbiMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbigoKSA9PlxuXHRlbnYgOj0gbmV3IENFbnZTdGFjaygpXG5cdGVudi5zZXRWYWwgJ25hbWUnLCAnSm9obidcblx0ZW52LnNldFZhbCAnZ2VuZGVyJywgJ21hbGUnXG5cblx0ZXF1YWwgZW52LmdldFZhbCgnbmFtZScpLCAnSm9obidcblx0ZXF1YWwgZW52LmdldFZhbCgnZ2VuZGVyJyksICdtYWxlJ1xuXHRlcXVhbCBlbnYuZ2V0VmFsKCdkdW1teScpLCB1bmRlZlxuXG5cdHN1Y2NlZWRzICgpID0+XG5cdFx0ZW52LnB1c2hFbnYoKVxuXHRcdGVudi5zZXRWYWwoJ25hbWUnLCAnSnVsaWUnKVxuXHRcdGFzc2VydCBlbnYuZ2V0VmFsKCduYW1lJykgPT0gJ0p1bGllJ1xuXHRcdGVudi5wb3BFbnYoKVxuXHRcdGFzc2VydCBlbnYuZ2V0VmFsKCduYW1lJykgPT0gJ0pvaG4nXG5cdCkoKVxuXG4oKCkgPT5cblx0ZW52IDo9IG5ldyBDRW52U3RhY2sge1xuXHRcdG5hbWU6ICdKb2huJ1xuXHRcdGdlbmRlcjogJ21hbGUnXG5cdFx0YWRkcmVzczogJzEgTWFpbiBTdC4nXG5cdFx0fVxuXHRlcXVhbCBlbnYuZ2V0VmFsKCduYW1lJyksICdKb2huJ1xuXHRlcXVhbCBlbnYuZ2V0VmFsKCdnZW5kZXInKSwgJ21hbGUnXG5cdGVxdWFsIGVudi5nZXRWYWwoJ2FkZHJlc3MnKSwgJzEgTWFpbiBTdC4nXG5cdHN1Y2NlZWRzICgpID0+XG5cblx0XHRlbnYucHVzaEVudigpXG5cdFx0ZW52LnNldFZhbCgnbmFtZScsICdKdWxpZScpXG5cdFx0ZW52LnNldFZhbCgnZ2VuZGVyJywgJ2ZlbWFsZScpXG5cblx0XHRhc3NlcnQgZW52LmdldFZhbCgnbmFtZScpID09ICdKdWxpZSdcblx0XHRhc3NlcnQgZW52LmdldFZhbCgnZ2VuZGVyJykgPT0gJ2ZlbWFsZSdcblx0XHRhc3NlcnQgZW52LmdldFZhbCgnYWRkcmVzcycpID09ICcxIE1haW4gU3QuJ1xuXG5cdFx0ZW52LnBvcEVudigpXG5cblx0XHRhc3NlcnQgZW52LmdldFZhbCgnbmFtZScpID09ICdKb2huJ1xuXHRcdGFzc2VydCBlbnYuZ2V0VmFsKCdnZW5kZXInKSA9PSAnbWFsZSdcblx0XHRhc3NlcnQgZW52LmdldFZhbCgnYWRkcmVzcycpID09ICcxIE1haW4gU3QuJ1xuXHQpKClcblxuIl19