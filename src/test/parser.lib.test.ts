"use strict";
// parser.lib.test.civet

import {undef, hash} from 'datatypes'
import {DBG} from 'logger'
import {o} from 'llutils'
import {getCmdArgs} from 'cmd-args'
import {
	TRuleFunc, isRuleFunc, Rule, TLaxRule, TCallback,
	ParseError, TParser, getParser,
	} from 'parser'
import {
	equal, same, like, succeeds, fails, truthy, falsy,
	matches, isType, notType, objListLike,
	} from 'unit-test'

getCmdArgs()

// ---------------------------------------------------------------------------
// Regular Expressions

const reIdent = /^[a-zA-Z_$][a-zA-Z0-9_$]*/
reIdent.toString = () => 'reIdent'

const reNumber = /^[-+]?\d+(?:\.\d+([eE][-+]?\d+)?)?/
reNumber.toString = () => 'reNumber'

const reString = /^(?:'([^']*)')|(?:"([^"]*)")/
reString.toString = () => 'reString'

const reOp = /[+\-*\/]/
reOp.toString = () => 'reOp'

// ---------------------------------------------------------------------------

const parseIdent = getParser(reIdent)
succeeds(() => parseIdent('abc'))
succeeds(() => parseIdent(' abc  '))  // --- whitespace skipped
fails(   () => parseIdent('1abc'))
fails(   () => parseIdent('abc def'))
succeeds(() => getParser(reIdent, [], o`partial`)('abc def'))

const parseOp = getParser(reOp)
succeeds(() => parseOp('+'))
succeeds(() => parseOp('  -  '))
succeeds(() => parseOp('*'))
succeeds(() => parseOp('  /  '))
fails(   () => parseOp('!'))

const parseNum = getParser(reNumber)
succeeds(() => parseNum('42'))
succeeds(() => parseNum('  42  '))
succeeds(() => parseNum('3.14'))
succeeds(() => parseNum('  3.14  '))
succeeds(() => parseNum('3.14e5'))
succeeds(() => parseNum('  3.14E5  '))
fails(   () => parseNum('!'))

const parseAssign = getParser([reIdent, '=', reNumber])
succeeds(() => parseAssign('x=42'))
succeeds(() => parseAssign(' x = 42 '))

const parseAssign2 = getParser([reIdent, '=', [reIdent, reOp, reIdent]])
succeeds(() => parseAssign2('x = a + b'))

const parseVal = getParser({
	number: reNumber,
	string: reString
	})
succeeds(() => parseVal('12'))
succeeds(() => parseVal('"abc"'))
succeeds(() => parseVal(' 12 '))
succeeds(() => parseVal(' "abc" '))
fails(   () => parseVal('+'))

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQzpcXFVzZXJzXFxqb2huZFxcdXRpbHNcXHNyY1xcdGVzdFxccGFyc2VyLmxpYi50ZXN0LmNpdmV0LnRzeCIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxqb2huZFxcdXRpbHNcXHNyY1xcdGVzdFxccGFyc2VyLmxpYi50ZXN0LmNpdmV0Il0sIm1hcHBpbmdzIjoiO0FBQUEsd0JBQXVCO0FBQ3ZCLEFBQUE7QUFDQSxBQUFBLE1BQU0sQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxXQUFXO0FBQ3JDLEFBQUEsQUFBQSxNQUFNLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUTtBQUMxQixBQUFBLEFBQUEsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVM7QUFDekIsQUFBQSxBQUFBLE1BQU0sQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFVO0FBQ25DLEFBQUEsQUFBQSxNQUFNLENBQUMsQ0FBQztBQUNSLENBQUMsU0FBUyxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsU0FBUyxDQUFDO0FBQ2xELENBQUMsVUFBVSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsU0FBUyxDQUFDO0FBQ2hDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxRQUFRO0FBQ2hCLEFBQUEsQUFBQSxNQUFNLENBQUMsQ0FBQztBQUNSLENBQUMsS0FBSyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsS0FBSyxDQUFDO0FBQ25ELENBQUMsT0FBTyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsV0FBVyxDQUFDO0FBQ3ZDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxXQUFXO0FBQ25CLEFBQUE7QUFDQSxBQUFBLEFBQUEsVUFBVSxDQUFDLENBQUM7QUFDWixBQUFBO0FBQ0EsQUFBQSw4RUFBNkU7QUFDN0UsQUFBQSxzQkFBcUI7QUFDckIsQUFBQTtBQUNBLEFBQUEsQUFBTyxNQUFQLE9BQU8sQ0FBQyxDQUFFLENBQUMsQ0FBRyxDQUFDLEFBQUMsVUFBVSxBQUFDLGFBQWEsQ0FBQyxBQUFDLENBQUc7QUFDN0MsQUFBQSxBQUFBLE9BQU8sQ0FBQyxRQUFRLEMsQ0FBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxTQUFTO0FBQ2xDLEFBQUE7QUFDQSxBQUFBLEFBQVEsTUFBUixRQUFRLENBQUMsQ0FBRSxDQUFDLENBQUcsQ0FBQyxBQUNmLElBQUksQ0FBQyxBQUNMLEVBQUUsQ0FBQyxBQUNILEdBQUcsQUFDRixFQUFFLEFBQ0YsRUFBRSxDQUFDLEFBQ0gsQ0FBQyxJQUFJLElBQUksQ0FBQyxFQUFFLEdBQUcsQUFDZixFQUFFLEFBQ0gsQ0FBRztBQUNKLEFBQUEsQUFBQSxRQUFRLENBQUMsUUFBUSxDLENBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsVUFBVTtBQUNwQyxBQUFBO0FBQ0EsQUFBQSxBQUFRLE1BQVIsUUFBUSxDQUFDLENBQUUsQ0FBQyxDQUFHLENBQUMsQUFDZixHQUFHLEFBQUMsQ0FBQyxBQUFDLENBQUMsSUFBSSxFQUFFLEFBQUMsQ0FBQyxBQUFDLENBQUMsQUFBQyxDQUFDLEFBQUMsR0FBRyxBQUFDLENBQUMsQUFBQyxDQUFDLElBQUksRUFBRSxBQUFDLENBQUMsQUFBQyxDQUFDLEFBQ3JDLENBQUc7QUFDSixBQUFBLEFBQUEsUUFBUSxDQUFDLFFBQVEsQyxDQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLFVBQVU7QUFDcEMsQUFBQTtBQUNBLEFBQUEsQUFBSSxNQUFKLElBQUksQ0FBQyxDQUFFLENBQUMsVUFBVTtBQUNsQixBQUFBLEFBQUEsSUFBSSxDQUFDLFFBQVEsQyxDQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLE1BQU07QUFDNUIsQUFBQTtBQUNBLEFBQUEsOEVBQTZFO0FBQzdFLEFBQUE7QUFDQSxBQUFBLEFBQVUsTUFBVixVQUFVLENBQUMsQ0FBRSxDQUFDLFNBQVMsQ0FBQSxBQUFDLE9BQU8sQ0FBQTtBQUMvQixBQUFBLEFBQUEsUUFBUSxDQUFBLEFBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLFVBQVUsQ0FBQSxBQUFDLEtBQUssQ0FBQSxDQUFBO0FBQy9CLEFBQUEsQUFBQSxRQUFRLENBQUEsQUFBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsVUFBVSxDQUFBLEFBQUMsUUFBUSxDQUFBLENBQUEsRUFBRSx5QkFBd0I7QUFDNUQsQUFBQSxBQUFBLEtBQUssQ0FBQSxHQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxVQUFVLENBQUEsQUFBQyxNQUFNLENBQUEsQ0FBQTtBQUNoQyxBQUFBLEFBQUEsS0FBSyxDQUFBLEdBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLFVBQVUsQ0FBQSxBQUFDLFNBQVMsQ0FBQSxDQUFBO0FBQ25DLEFBQUEsQUFBQSxRQUFRLENBQUEsQUFBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQyxTQUFVLENBQUMsQ0FBQSxBQUFDLFNBQVMsQ0FBQSxDQUFBO0FBQzNELEFBQUE7QUFDQSxBQUFBLEFBQU8sTUFBUCxPQUFPLENBQUMsQ0FBRSxDQUFDLFNBQVMsQ0FBQSxBQUFDLElBQUksQ0FBQTtBQUN6QixBQUFBLEFBQUEsUUFBUSxDQUFBLEFBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQSxBQUFDLEdBQUcsQ0FBQSxDQUFBO0FBQzFCLEFBQUEsQUFBQSxRQUFRLENBQUEsQUFBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxDQUFBLEFBQUMsT0FBTyxDQUFBLENBQUE7QUFDOUIsQUFBQSxBQUFBLFFBQVEsQ0FBQSxBQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxPQUFPLENBQUEsQUFBQyxHQUFHLENBQUEsQ0FBQTtBQUMxQixBQUFBLEFBQUEsUUFBUSxDQUFBLEFBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQSxBQUFDLE9BQU8sQ0FBQSxDQUFBO0FBQzlCLEFBQUEsQUFBQSxLQUFLLENBQUEsR0FBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxDQUFBLEFBQUMsR0FBRyxDQUFBLENBQUE7QUFDMUIsQUFBQTtBQUNBLEFBQUEsQUFBUSxNQUFSLFFBQVEsQ0FBQyxDQUFFLENBQUMsU0FBUyxDQUFBLEFBQUMsUUFBUSxDQUFBO0FBQzlCLEFBQUEsQUFBQSxRQUFRLENBQUEsQUFBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsUUFBUSxDQUFBLEFBQUMsSUFBSSxDQUFBLENBQUE7QUFDNUIsQUFBQSxBQUFBLFFBQVEsQ0FBQSxBQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxRQUFRLENBQUEsQUFBQyxRQUFRLENBQUEsQ0FBQTtBQUNoQyxBQUFBLEFBQUEsUUFBUSxDQUFBLEFBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLFFBQVEsQ0FBQSxBQUFDLE1BQU0sQ0FBQSxDQUFBO0FBQzlCLEFBQUEsQUFBQSxRQUFRLENBQUEsQUFBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsUUFBUSxDQUFBLEFBQUMsVUFBVSxDQUFBLENBQUE7QUFDbEMsQUFBQSxBQUFBLFFBQVEsQ0FBQSxBQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxRQUFRLENBQUEsQUFBQyxRQUFRLENBQUEsQ0FBQTtBQUNoQyxBQUFBLEFBQUEsUUFBUSxDQUFBLEFBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLFFBQVEsQ0FBQSxBQUFDLFlBQVksQ0FBQSxDQUFBO0FBQ3BDLEFBQUEsQUFBQSxLQUFLLENBQUEsR0FBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsUUFBUSxDQUFBLEFBQUMsR0FBRyxDQUFBLENBQUE7QUFDM0IsQUFBQTtBQUNBLEFBQUEsQUFBVyxNQUFYLFdBQVcsQ0FBQyxDQUFFLENBQUMsU0FBUyxDQUFBLEFBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQTtBQUNqRCxBQUFBLEFBQUEsUUFBUSxDQUFBLEFBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLFdBQVcsQ0FBQSxBQUFDLE1BQU0sQ0FBQSxDQUFBO0FBQ2pDLEFBQUEsQUFBQSxRQUFRLENBQUEsQUFBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsV0FBVyxDQUFBLEFBQUMsVUFBVSxDQUFBLENBQUE7QUFDckMsQUFBQTtBQUNBLEFBQUEsQUFBWSxNQUFaLFlBQVksQ0FBQyxDQUFFLENBQUMsU0FBUyxDQUFBLEFBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUE7QUFDbEUsQUFBQSxBQUFBLFFBQVEsQ0FBQSxBQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxZQUFZLENBQUEsQUFBQyxXQUFXLENBQUEsQ0FBQTtBQUN2QyxBQUFBO0FBQ0EsQUFBQSxBQUFRLE1BQVIsUUFBUSxDQUFDLENBQUUsQ0FBQyxTQUFTLENBQUEsQUFBQyxDQUFDO0FBQ3ZCLEFBQUEsQ0FBQyxNQUFNLENBQUMsQ0FBQyxRQUFRLENBQUE7QUFDakIsQUFBQSxDQUFDLE1BQU0sQ0FBQyxDQUFDLFFBQVE7QUFDakIsQ0FBQyxDQUFDLENBQUE7QUFDRixBQUFBLEFBQUEsUUFBUSxDQUFBLEFBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLFFBQVEsQ0FBQSxBQUFDLElBQUksQ0FBQSxDQUFBO0FBQzVCLEFBQUEsQUFBQSxRQUFRLENBQUEsQUFBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsUUFBUSxDQUFBLEFBQUMsT0FBTyxDQUFBLENBQUE7QUFDL0IsQUFBQSxBQUFBLFFBQVEsQ0FBQSxBQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxRQUFRLENBQUEsQUFBQyxNQUFNLENBQUEsQ0FBQTtBQUM5QixBQUFBLEFBQUEsUUFBUSxDQUFBLEFBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLFFBQVEsQ0FBQSxBQUFDLFNBQVMsQ0FBQSxDQUFBO0FBQ2pDLEFBQUEsQUFBQSxLQUFLLENBQUEsR0FBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsUUFBUSxDQUFBLEFBQUMsR0FBRyxDQUFBLENBQUE7QUFDM0IiLCJuYW1lcyI6W10sInNvdXJjZXNDb250ZW50IjpbIiMgcGFyc2VyLmxpYi50ZXN0LmNpdmV0XHJcblxyXG5pbXBvcnQge3VuZGVmLCBoYXNofSBmcm9tICdkYXRhdHlwZXMnXHJcbmltcG9ydCB7REJHfSBmcm9tICdsb2dnZXInXHJcbmltcG9ydCB7b30gZnJvbSAnbGx1dGlscydcclxuaW1wb3J0IHtnZXRDbWRBcmdzfSBmcm9tICdjbWQtYXJncydcclxuaW1wb3J0IHtcclxuXHRUUnVsZUZ1bmMsIGlzUnVsZUZ1bmMsIFJ1bGUsIFRMYXhSdWxlLCBUQ2FsbGJhY2ssXHJcblx0UGFyc2VFcnJvciwgVFBhcnNlciwgZ2V0UGFyc2VyLFxyXG5cdH0gZnJvbSAncGFyc2VyJ1xyXG5pbXBvcnQge1xyXG5cdGVxdWFsLCBzYW1lLCBsaWtlLCBzdWNjZWVkcywgZmFpbHMsIHRydXRoeSwgZmFsc3ksXHJcblx0bWF0Y2hlcywgaXNUeXBlLCBub3RUeXBlLCBvYmpMaXN0TGlrZSxcclxuXHR9IGZyb20gJ3VuaXQtdGVzdCdcclxuXHJcbmdldENtZEFyZ3MoKVxyXG5cclxuIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuIyBSZWd1bGFyIEV4cHJlc3Npb25zXHJcblxyXG5yZUlkZW50IDo9IC8vL14gW2EtekEtWl8kXSBbYS16QS1aMC05XyRdKiAvLy9cclxucmVJZGVudC50b1N0cmluZyA9ICgpID0+ICdyZUlkZW50J1xyXG5cclxucmVOdW1iZXIgOj0gLy8vXlxyXG5cdFstK10/XHJcblx0XFxkK1xyXG5cdCg/OlxyXG5cdFx0XFwuXHJcblx0XHRcXGQrXHJcblx0XHQoW2VFXVstK10/XFxkKyk/XHJcblx0XHQpP1xyXG5cdC8vL1xyXG5yZU51bWJlci50b1N0cmluZyA9ICgpID0+ICdyZU51bWJlcidcclxuXHJcbnJlU3RyaW5nIDo9IC8vL15cclxuXHQoPzogJyAoW14nXSopICcgKSB8ICg/OiBcIiAoW15cIl0qKSBcIiApXHJcblx0Ly8vXHJcbnJlU3RyaW5nLnRvU3RyaW5nID0gKCkgPT4gJ3JlU3RyaW5nJ1xyXG5cclxucmVPcCA6PSAvWytcXC0qXFwvXS9cclxucmVPcC50b1N0cmluZyA9ICgpID0+ICdyZU9wJ1xyXG5cclxuIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuXHJcbnBhcnNlSWRlbnQgOj0gZ2V0UGFyc2VyIHJlSWRlbnRcclxuc3VjY2VlZHMgKCkgPT4gcGFyc2VJZGVudCAnYWJjJ1xyXG5zdWNjZWVkcyAoKSA9PiBwYXJzZUlkZW50ICcgYWJjICAnICAjIC0tLSB3aGl0ZXNwYWNlIHNraXBwZWRcclxuZmFpbHMgICAgKCkgPT4gcGFyc2VJZGVudCAnMWFiYydcclxuZmFpbHMgICAgKCkgPT4gcGFyc2VJZGVudCAnYWJjIGRlZidcclxuc3VjY2VlZHMgKCkgPT4gZ2V0UGFyc2VyKHJlSWRlbnQsIFtdLCBvJ3BhcnRpYWwnKSAnYWJjIGRlZidcclxuXHJcbnBhcnNlT3AgOj0gZ2V0UGFyc2VyIHJlT3Bcclxuc3VjY2VlZHMgKCkgPT4gcGFyc2VPcCAnKydcclxuc3VjY2VlZHMgKCkgPT4gcGFyc2VPcCAnICAtICAnXHJcbnN1Y2NlZWRzICgpID0+IHBhcnNlT3AgJyonXHJcbnN1Y2NlZWRzICgpID0+IHBhcnNlT3AgJyAgLyAgJ1xyXG5mYWlscyAgICAoKSA9PiBwYXJzZU9wICchJ1xyXG5cclxucGFyc2VOdW0gOj0gZ2V0UGFyc2VyIHJlTnVtYmVyXHJcbnN1Y2NlZWRzICgpID0+IHBhcnNlTnVtICc0Midcclxuc3VjY2VlZHMgKCkgPT4gcGFyc2VOdW0gJyAgNDIgICdcclxuc3VjY2VlZHMgKCkgPT4gcGFyc2VOdW0gJzMuMTQnXHJcbnN1Y2NlZWRzICgpID0+IHBhcnNlTnVtICcgIDMuMTQgICdcclxuc3VjY2VlZHMgKCkgPT4gcGFyc2VOdW0gJzMuMTRlNSdcclxuc3VjY2VlZHMgKCkgPT4gcGFyc2VOdW0gJyAgMy4xNEU1ICAnXHJcbmZhaWxzICAgICgpID0+IHBhcnNlTnVtICchJ1xyXG5cclxucGFyc2VBc3NpZ24gOj0gZ2V0UGFyc2VyIFtyZUlkZW50LCAnPScsIHJlTnVtYmVyXVxyXG5zdWNjZWVkcyAoKSA9PiBwYXJzZUFzc2lnbiAneD00Midcclxuc3VjY2VlZHMgKCkgPT4gcGFyc2VBc3NpZ24gJyB4ID0gNDIgJ1xyXG5cclxucGFyc2VBc3NpZ24yIDo9IGdldFBhcnNlciBbcmVJZGVudCwgJz0nLCBbcmVJZGVudCwgcmVPcCwgcmVJZGVudF1dXHJcbnN1Y2NlZWRzICgpID0+IHBhcnNlQXNzaWduMiAneCA9IGEgKyBiJ1xyXG5cclxucGFyc2VWYWwgOj0gZ2V0UGFyc2VyIHtcclxuXHRudW1iZXI6IHJlTnVtYmVyXHJcblx0c3RyaW5nOiByZVN0cmluZ1xyXG5cdH1cclxuc3VjY2VlZHMgKCkgPT4gcGFyc2VWYWwgJzEyJ1xyXG5zdWNjZWVkcyAoKSA9PiBwYXJzZVZhbCAnXCJhYmNcIidcclxuc3VjY2VlZHMgKCkgPT4gcGFyc2VWYWwgJyAxMiAnXHJcbnN1Y2NlZWRzICgpID0+IHBhcnNlVmFsICcgXCJhYmNcIiAnXHJcbmZhaWxzICAgICgpID0+IHBhcnNlVmFsICcrJ1xyXG4iXX0=