"use strict";
// scope.lib.test.civet

import {undef, assert} from 'datatypes'
import {s} from 'llutils'
import {getCmdArgs} from 'cmd-args'
import {toNice} from 'to-nice'
import {CMainScope, CScope} from 'scope'
import {
	equal, truthy, falsy, succeeds, fails, codeLike,
	isType, notType,
	} from 'unit-test'

getCmdArgs();

// ---------------------------------------------------------------------------

(() => {
	const mainScope = new CMainScope()
	mainScope.define('name')
	mainScope.define('gender')

	truthy(mainScope.isDefined('name'))
	truthy(mainScope.isDefined('gender'))
	falsy( mainScope.isDefined('dummy'))

	succeeds(() => {
		const scope = mainScope.newChildScope('func', ['age'])
		truthy(scope.isDefined('age'))
		truthy(scope.isDefined('name'))
		truthy(scope.isDefined('gender'))
		falsy( scope.isDefined('dummy'))

		falsy( mainScope.isDefined('age'))
	})
}
	)();

(() => {
	const mainScope = new CMainScope()
	mainScope.define('name')
	mainScope.define('gender')

	mainScope.use('name')
	mainScope.use('address')

	truthy(mainScope.isDefined('name'))
	truthy(mainScope.isDefined('gender'))
	falsy( mainScope.isDefined('dummy'))

	succeeds(() => {
		const scope = mainScope.newChildScope('func', ['age'])
		truthy(scope.isDefined('age'))
		truthy(scope.isDefined('name'))
		truthy(scope.isDefined('gender'))
		falsy( scope.isDefined('dummy'))

		falsy( mainScope.isDefined('age'))
	})
}
	)();

(() => {
	const mainScope = new CMainScope()
	mainScope.define('name')
	mainScope.define('gender')

	const childScope = mainScope.newChildScope('func', ['age'])
	childScope.define('temp')

	equal(toNice(mainScope), s`name: main
sDefined: .set name gender
sUsed: .emptySet
parent: .undef
lChildren:
	-
	❘  name: func
	❘  sDefined: .set age temp
	❘  sUsed: .emptySet
	❘  parent: .ref root
	❘  lChildren: []`)
}
	)()


//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQzovVXNlcnMvam9obmQvdXRpbHMvc3JjL3Rlc3Qvc2NvcGUubGliLnRlc3QuY2l2ZXQudHN4Iiwic291cmNlcyI6WyJDOi9Vc2Vycy9qb2huZC91dGlscy9zcmMvdGVzdC9zY29wZS5saWIudGVzdC5jaXZldCJdLCJtYXBwaW5ncyI6IjtBQUFBLHVCQUFzQjtBQUN0QixBQUFBO0FBQ0EsQUFBQSxNQUFNLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLENBQUMsV0FBVztBQUN2QyxBQUFBLEFBQUEsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVM7QUFDekIsQUFBQSxBQUFBLE1BQU0sQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFVO0FBQ25DLEFBQUEsQUFBQSxNQUFNLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLENBQUMsU0FBUztBQUM5QixBQUFBLEFBQUEsTUFBTSxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU87QUFDeEMsQUFBQSxBQUFBLE1BQU0sQ0FBQyxDQUFDO0FBQ1IsQ0FBQyxLQUFLLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxRQUFRLENBQUM7QUFDakQsQ0FBQyxNQUFNLENBQUMsQ0FBQyxPQUFPLENBQUM7QUFDakIsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFdBQVc7QUFDbkIsQUFBQTtBQUNBLEFBQUEsQUFBQSxVQUFVLENBQUMsQyxDQUFDO0FBQ1osQUFBQTtBQUNBLEFBQUEsOEVBQTZFO0FBQzdFLEFBQUE7QUFDQSxBQUFBLEFBQUEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUEsQ0FBQTtBQUNOLEFBQUEsQ0FBVSxNQUFULFNBQVMsQ0FBQyxDQUFFLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxDQUFDO0FBQzlCLEFBQUEsQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFBLEFBQUMsTUFBTSxDQUFBO0FBQ3hCLEFBQUEsQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFBLEFBQUMsUUFBUSxDQUFBO0FBQzFCLEFBQUE7QUFDQSxBQUFBLENBQUMsTUFBTSxDQUFBLEFBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQTtBQUNuQyxBQUFBLENBQUMsTUFBTSxDQUFBLEFBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsQ0FBQTtBQUNyQyxBQUFBLENBQUMsS0FBSyxDQUFBLENBQUUsU0FBUyxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsQ0FBQTtBQUNwQyxBQUFBO0FBQ0EsQUFBQSxDQUFDLFFBQVEsQ0FBQSxBQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQSxDQUFBO0FBQ2YsQUFBQSxFQUFPLE1BQUwsS0FBSyxDQUFDLENBQUUsQ0FBQyxTQUFTLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDbkQsQUFBQSxFQUFFLE1BQU0sQ0FBQSxBQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLENBQUE7QUFDL0IsQUFBQSxFQUFFLE1BQU0sQ0FBQSxBQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUE7QUFDaEMsQUFBQSxFQUFFLE1BQU0sQ0FBQSxBQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLENBQUE7QUFDbEMsQUFBQSxFQUFFLEtBQUssQ0FBQSxDQUFFLEtBQUssQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLENBQUE7QUFDakMsQUFBQTtBQUNBLEFBQUEsRUFBRSxLQUFLLENBQUEsQ0FBRSxTQUFTLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDO0NBQUEsQ0FBQSxDO0FBQUEsQ0FBQTtBQUNuQyxDQUFDLENBQUMsQ0FBQyxDLENBQUM7QUFDSixBQUFBO0FBQ0EsQUFBQSxBQUFBLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFBLENBQUE7QUFDTixBQUFBLENBQVUsTUFBVCxTQUFTLENBQUMsQ0FBRSxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsQ0FBQztBQUM5QixBQUFBLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQSxBQUFDLE1BQU0sQ0FBQTtBQUN4QixBQUFBLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQSxBQUFDLFFBQVEsQ0FBQTtBQUMxQixBQUFBO0FBQ0EsQUFBQSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUEsQUFBQyxNQUFNLENBQUE7QUFDckIsQUFBQSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUEsQUFBQyxTQUFTLENBQUE7QUFDeEIsQUFBQTtBQUNBLEFBQUEsQ0FBQyxNQUFNLENBQUEsQUFBQyxTQUFTLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFBO0FBQ25DLEFBQUEsQ0FBQyxNQUFNLENBQUEsQUFBQyxTQUFTLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxDQUFBO0FBQ3JDLEFBQUEsQ0FBQyxLQUFLLENBQUEsQ0FBRSxTQUFTLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxDQUFBO0FBQ3BDLEFBQUE7QUFDQSxBQUFBLENBQUMsUUFBUSxDQUFBLEFBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFBLENBQUE7QUFDZixBQUFBLEVBQU8sTUFBTCxLQUFLLENBQUMsQ0FBRSxDQUFDLFNBQVMsQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUNuRCxBQUFBLEVBQUUsTUFBTSxDQUFBLEFBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQTtBQUMvQixBQUFBLEVBQUUsTUFBTSxDQUFBLEFBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQTtBQUNoQyxBQUFBLEVBQUUsTUFBTSxDQUFBLEFBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsQ0FBQTtBQUNsQyxBQUFBLEVBQUUsS0FBSyxDQUFBLENBQUUsS0FBSyxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsQ0FBQTtBQUNqQyxBQUFBO0FBQ0EsQUFBQSxFQUFFLEtBQUssQ0FBQSxDQUFFLFNBQVMsQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLEM7Q0FBQSxDQUFBLEM7QUFBQSxDQUFBO0FBQ25DLENBQUMsQ0FBQyxDQUFDLEMsQ0FBQztBQUNKLEFBQUE7QUFDQSxBQUFBLEFBQUEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUEsQ0FBQTtBQUNOLEFBQUEsQ0FBVSxNQUFULFNBQVMsQ0FBQyxDQUFFLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxDQUFDO0FBQzlCLEFBQUEsQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFBLEFBQUMsTUFBTSxDQUFBO0FBQ3hCLEFBQUEsQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFBLEFBQUMsUUFBUSxDQUFBO0FBQzFCLEFBQUE7QUFDQSxBQUFBLENBQVcsTUFBVixVQUFVLENBQUMsQ0FBRSxDQUFDLFNBQVMsQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUN2RCxBQUFBLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQSxBQUFDLE1BQU0sQ0FBQTtBQUN6QixBQUFBO0FBQ0EsQUFBQSxDQUFDLEtBQUssQ0FBQSxBQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBRztBQUM5QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFFRSxDQUFHLEM7QUFBQSxDQUFBO0FBQ0wsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNKO0FBQ0EiLCJuYW1lcyI6W10sInNvdXJjZXNDb250ZW50IjpbIiMgc2NvcGUubGliLnRlc3QuY2l2ZXRcblxuaW1wb3J0IHt1bmRlZiwgYXNzZXJ0fSBmcm9tICdkYXRhdHlwZXMnXG5pbXBvcnQge3N9IGZyb20gJ2xsdXRpbHMnXG5pbXBvcnQge2dldENtZEFyZ3N9IGZyb20gJ2NtZC1hcmdzJ1xuaW1wb3J0IHt0b05pY2V9IGZyb20gJ3RvLW5pY2UnXG5pbXBvcnQge0NNYWluU2NvcGUsIENTY29wZX0gZnJvbSAnc2NvcGUnXG5pbXBvcnQge1xuXHRlcXVhbCwgdHJ1dGh5LCBmYWxzeSwgc3VjY2VlZHMsIGZhaWxzLCBjb2RlTGlrZSxcblx0aXNUeXBlLCBub3RUeXBlLFxuXHR9IGZyb20gJ3VuaXQtdGVzdCdcblxuZ2V0Q21kQXJncygpXG5cbiMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbigoKSA9PlxuXHRtYWluU2NvcGUgOj0gbmV3IENNYWluU2NvcGUoKVxuXHRtYWluU2NvcGUuZGVmaW5lICduYW1lJ1xuXHRtYWluU2NvcGUuZGVmaW5lICdnZW5kZXInXG5cblx0dHJ1dGh5IG1haW5TY29wZS5pc0RlZmluZWQoJ25hbWUnKVxuXHR0cnV0aHkgbWFpblNjb3BlLmlzRGVmaW5lZCgnZ2VuZGVyJylcblx0ZmFsc3kgIG1haW5TY29wZS5pc0RlZmluZWQoJ2R1bW15JylcblxuXHRzdWNjZWVkcyAoKSA9PlxuXHRcdHNjb3BlIDo9IG1haW5TY29wZS5uZXdDaGlsZFNjb3BlKCdmdW5jJywgWydhZ2UnXSlcblx0XHR0cnV0aHkgc2NvcGUuaXNEZWZpbmVkKCdhZ2UnKVxuXHRcdHRydXRoeSBzY29wZS5pc0RlZmluZWQoJ25hbWUnKVxuXHRcdHRydXRoeSBzY29wZS5pc0RlZmluZWQoJ2dlbmRlcicpXG5cdFx0ZmFsc3kgIHNjb3BlLmlzRGVmaW5lZCgnZHVtbXknKVxuXG5cdFx0ZmFsc3kgIG1haW5TY29wZS5pc0RlZmluZWQoJ2FnZScpXG5cdCkoKVxuXG4oKCkgPT5cblx0bWFpblNjb3BlIDo9IG5ldyBDTWFpblNjb3BlKClcblx0bWFpblNjb3BlLmRlZmluZSAnbmFtZSdcblx0bWFpblNjb3BlLmRlZmluZSAnZ2VuZGVyJ1xuXG5cdG1haW5TY29wZS51c2UgJ25hbWUnXG5cdG1haW5TY29wZS51c2UgJ2FkZHJlc3MnXG5cblx0dHJ1dGh5IG1haW5TY29wZS5pc0RlZmluZWQoJ25hbWUnKVxuXHR0cnV0aHkgbWFpblNjb3BlLmlzRGVmaW5lZCgnZ2VuZGVyJylcblx0ZmFsc3kgIG1haW5TY29wZS5pc0RlZmluZWQoJ2R1bW15JylcblxuXHRzdWNjZWVkcyAoKSA9PlxuXHRcdHNjb3BlIDo9IG1haW5TY29wZS5uZXdDaGlsZFNjb3BlKCdmdW5jJywgWydhZ2UnXSlcblx0XHR0cnV0aHkgc2NvcGUuaXNEZWZpbmVkKCdhZ2UnKVxuXHRcdHRydXRoeSBzY29wZS5pc0RlZmluZWQoJ25hbWUnKVxuXHRcdHRydXRoeSBzY29wZS5pc0RlZmluZWQoJ2dlbmRlcicpXG5cdFx0ZmFsc3kgIHNjb3BlLmlzRGVmaW5lZCgnZHVtbXknKVxuXG5cdFx0ZmFsc3kgIG1haW5TY29wZS5pc0RlZmluZWQoJ2FnZScpXG5cdCkoKVxuXG4oKCkgPT5cblx0bWFpblNjb3BlIDo9IG5ldyBDTWFpblNjb3BlKClcblx0bWFpblNjb3BlLmRlZmluZSAnbmFtZSdcblx0bWFpblNjb3BlLmRlZmluZSAnZ2VuZGVyJ1xuXG5cdGNoaWxkU2NvcGUgOj0gbWFpblNjb3BlLm5ld0NoaWxkU2NvcGUoJ2Z1bmMnLCBbJ2FnZSddKVxuXHRjaGlsZFNjb3BlLmRlZmluZSAndGVtcCdcblxuXHRlcXVhbCB0b05pY2UobWFpblNjb3BlKSwgc1wiXCJcIlxuXHRcdG5hbWU6IG1haW5cblx0XHRzRGVmaW5lZDogLnNldCBuYW1lIGdlbmRlclxuXHRcdHNVc2VkOiAuZW1wdHlTZXRcblx0XHRwYXJlbnQ6IC51bmRlZlxuXHRcdGxDaGlsZHJlbjpcblx0XHRcdC1cblx0XHRcdOKdmCAgbmFtZTogZnVuY1xuXHRcdFx04p2YICBzRGVmaW5lZDogLnNldCBhZ2UgdGVtcFxuXHRcdFx04p2YICBzVXNlZDogLmVtcHR5U2V0XG5cdFx0XHTinZggIHBhcmVudDogLnJlZiByb290XG5cdFx0XHTinZggIGxDaGlsZHJlbjogW11cblx0XHRcIlwiXCJcblx0KSgpXG5cbiJdfQ==