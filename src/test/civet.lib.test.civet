# civet.lib.test.civet

import {SourceFile} from 'npm:typescript'

import {defined, isHash} from 'datatypes'
import {o, s} from 'llutils'
import {getCmdArgs} from 'cmd-args'
import {DBG} from 'logger'
import {slurp, withExt} from 'fsys'
import {setDirTree} from 'pllfile'
import {ts2ast, pprintAst} from 'typescript'
import {
	civet2tsFile, civet2ts, civet2ast,
	} from 'civet'
import {
	equal, like, succeeds, fails, truthy, falsy, isType,
	} from 'unit-test'

getCmdArgs()

# ---------------------------------------------------------------------------

setup := (): void =>

	DBG "setDirTree()"

	setDirTree 'src/test/civet', """
		test.civet
			x := 42

		"""

setup()

# ---------------------------------------------------------------------------

testPath := './src/test/civet/test.civet'
civetCode := slurp testPath

tsCode := civet2ts civetCode
ast1 := ts2ast tsCode
ast2 := civet2ast civetCode
equal ast1, ast2

DBG "civet2ts(code)"

equal civet2ts('x := 42'), """
	"use strict";
	const x = 42
	"""

DBG "civet2tsFile(path)"

(() =>
	civet2tsFile testPath, withExt(testPath, '.ts'), o'!inlineMap'
	code := slurp withExt(testPath, '.ts')
	equal code, """
		"use strict";
		const x = 42
		"""
	)()

DBG "civet2ast(code)"

# isType 'SourceFile', ast1
# isType 'SourceFile', ast2

DBG "pprintAst(hAST)"

equal pprintAst(ts2ast('x := 42')), s"""
	SourceFile
		LabeledStatement
			Identifier
			ExpressionStatement
				BinaryExpression
					Identifier
					FirstAssignment
					FirstLiteralToken
		EndOfFileToken
	"""

succeeds () => civet2ast('x := 42')
