"use strict";
// cmd-args.lib.test.civet

import {
	undef, defined, notdefined,
	} from 'datatypes'
import {DBG, getLogLevel} from 'logger'
import {
	spaces, tabs, wsSplit, words, escapeStr, escapeBlock,
	blockToArray, toArray, arrayToBlock, toBlock,
	} from 'llutils'
import {relpath} from 'fsys'
import {
	getCmdArgs,
	getOptionInfo, getNonOptionInfo, helpStr,
	logLevelFromArgs,
	} from 'cmd-args'
import {
	equal, like, succeeds, fails, truthy, falsy,
	} from 'unit-test'

getCmdArgs()

// ---------------------------------------------------------------------------

DBG("logLevelFromArgs(lArgs)")

equal(logLevelFromArgs(['-m','-D']), 'debug')
equal(logLevelFromArgs(['-mD']), 'debug')
equal(logLevelFromArgs(['-mnD', '-I']), 'debug')
equal(logLevelFromArgs(['-I', 'mnD']), 'info')
equal(logLevelFromArgs(['-mn']), undef)
equal(logLevelFromArgs([]), undef)

DBG("getCmdArgs()")

equal(getCmdArgs(undef, ['-abc']), [{
	a: true,
	b: true,
	c: true
	}, []])

equal(getCmdArgs(undef, ['-abc=xyz']), [{
	abc: 'xyz'
	}, []])

equal(getCmdArgs(undef, ['-abc=xyz', 'table']), [{
	abc: 'xyz'
	}, ['table']])

equal(getCmdArgs(undef, ['-Df']), [{
	f: true,
	D: true
	}, []])

equal(getCmdArgs(undef, ['-D']), [{
	D: true
	}, []])

equal(getLogLevel(), 'debug')

equal(getCmdArgs(undef, ['-P']), [{
	P: true
	}, []])
equal(getLogLevel(), 'profile')

equal(getCmdArgs(undef, ['-I']), [{
	I: true
	}, []])
equal(getLogLevel(), 'info')

// -------------------------------------------------------------
// --- getCmdArgs() with hDesc

// --- one non-option is required
fails(() => getCmdArgs({"_":{"range":1}}, ["-D"]))

// --- one non-option is max allowed
fails(() => getCmdArgs({"_":{"range":1}}, ["-D", "utils", "other"]));

(() => {
	// --- commmand 'compile' allows the following options:
	//        -f  - force compilation
	//        -w  - watch for file changes
	//        -n  - suppress post processing
	//        -dirspec=<spec>  - 'binDir' or 'libDir'
	//     plus any number of non-options
	//     (but we pretend it must be 1, 2 or 3)

	const hDesc = {
		f: {type: 'boolean'},
		w: {type: 'boolean'},
		n: {type: 'boolean'},
		d: {type: 'boolean'},
		dirspec: {type: ['libDir','binDir']},
		_: {range: [1, 3]}
		}

	// --- There is no flag named 'f'
	fails(() => getCmdArgs(hDesc, ['-daf', 'file1']))

	// --- option 'dirspec' must be 'libDir' or 'binDir'
	fails(() => getCmdArgs(hDesc, ['-dirspec=42', 'file1']))
	fails(() => getCmdArgs(hDesc, ['-dirspec=blib', 'file1']))

	// --- There must be at least one non-option, and no more than 3
	fails( () => getCmdArgs(hDesc, ['-gf']))
	fails( () => getCmdArgs(hDesc, ['-gf', 'a', 'b', 'c', 'd']))
}
	)();

(() => {
	const hDesc = {
		file: {type: 'string'},
		f: {type: 'boolean'},
		n: {type: 'boolean'},
		w: {type: 'boolean'},
		d: {type: 'boolean'}
		}

	equal(getCmdArgs(hDesc, ['-wd']), [{
		d: true,
		f: false,
		n: false,
		w: true
		}, []])

	equal(getCmdArgs(hDesc, ['-wd', 'temp.txt']), [{
		d: true,
		f: false,
		n: false,
		w: true
		}, ['temp.txt']])

	equal(getCmdArgs(hDesc, ['-wd', '-file=temp.txt']), [{
		d: true,
		f: false,
		n: false,
		w: true,
		file: 'temp.txt'
		}, []])
}
	)();

(() => {
	const hDesc = {
		file: {type: 'string'},
		f: {type: 'boolean'},
		n: {type: 'boolean'},
		w: {type: 'boolean'}
		}
	const lArgs = ['temp.txt', '-fw', 'temp2.txt', '-file=abc.txt']

	const [{file, f: force, n: nopp, w: watch}, lNonOptions] = getCmdArgs(hDesc, lArgs)
	equal(lNonOptions, ['temp.txt', 'temp2.txt'])
	equal(file, 'abc.txt')
	equal(force, true)
	equal(nopp, false)
	equal(watch, true)
}
	)();

(() => {
	const hDesc = {
		file: {type: 'string'},
		f: {},
		n: {},
		w: {}
		}
	const lArgs = ['temp.txt', '-fw', 'temp2.txt', '-file=abc.txt']

	const [{file, f: force, n: nopp, w: watch}, lNonOptions] = getCmdArgs(hDesc, lArgs)
	equal(lNonOptions, ['temp.txt', 'temp2.txt'])
	equal(file, 'abc.txt')
	equal(force, true)
	equal(nopp, false)
	equal(watch, true)
}
	)();

(() => {
	const hDesc = {
		file: {type: 'string'},
		f: undef,
		n: undef,
		w: undef
		}
	const lArgs = ['temp.txt', '-fw', 'temp2.txt', '-file=abc.txt']
	const [{file, f: force, n: nopp, w: watch}, lNonOptions] = getCmdArgs(hDesc, lArgs)
	equal(lNonOptions, ['temp.txt', 'temp2.txt'])
	equal(file, 'abc.txt')
	equal(force, true)
	equal(nopp, false)
	equal(watch, true)
}
	)()

DBG("getOptionInfo(hDesc, name)");

(() => {
	const hDesc = {
		f: 'always compile',
		state: 'current state',
		num: {
			type: 'integer',
			desc: 'number of items'
			},
		label: {
			type: 'string',
			desc: 'label to use'
			},
		item: {
			type: 'string'
			}
		}

	// --- You cannot ask for option '_'
	fails(() => getOptionInfo(hDesc, '_'))

	// --- No such option
	fails(() => getOptionInfo(hDesc, 'dummy'))

	equal(getOptionInfo(hDesc, 'f'), {
		desc: 'always compile',
		type: 'boolean',
		defaultVal: false
		})
	equal(getOptionInfo(hDesc, 'state'), {
		desc: 'current state',
		type: 'string'
		})
	equal(getOptionInfo(hDesc, 'item'), {
		type: 'string',
		desc: '<no description available>'
		})
	equal(getOptionInfo(hDesc, 'label'), {
		type: 'string',
		desc: 'label to use'
		})
}
	)()

DBG("getNonOptionInfo()");

(() => {
	const hDesc = {
		_: {
			desc: 'list of file names',
			range: [1,3]
			},
		other: {}
		}
	equal(getNonOptionInfo({A: 1}), undef)
	equal(getNonOptionInfo(hDesc), {
		desc: 'list of file names',
		min: 1,
		max: 3
		})
	equal(getNonOptionInfo({_: {desc: 'xx', range: 4}}), {
		desc: 'xx',
		min: 4,
		max: 4
		})
}
	)()

DBG("helpStr(hDesc)");

(() => {
	const hDesc = {
		_: {
			desc: 'list of file names',
			range: [1,10]
			},
		f: 'always compile',
		state: 'current state',
		num: {
			type: 'integer',
			desc: 'number of items'
			},
		label: {
			type: 'string',
			desc: 'label to use'
			},
		item: {
			type: 'string'
			}
		}
	equal(helpStr(hDesc), `Available options:
	-f: boolean - always compile
	-state: string - current state
	-num: integer - number of items
	-label: string - label to use
	-item: string - <no description available>
Non-options:
	list of file names
	There must be at least 1 non-option
	There must be at most 10 non-options`.replaceAll('\t', '   '))
}
	)()

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQzpcXFVzZXJzXFxqb2huZFxcdXRpbHNcXHNyY1xcdGVzdFxcY21kLWFyZ3MubGliLnRlc3QuY2l2ZXQudHN4Iiwic291cmNlcyI6WyJDOlxcVXNlcnNcXGpvaG5kXFx1dGlsc1xcc3JjXFx0ZXN0XFxjbWQtYXJncy5saWIudGVzdC5jaXZldCJdLCJtYXBwaW5ncyI6IjtBQUFBLDBCQUF5QjtBQUN6QixBQUFBO0FBQ0EsQUFBQSxNQUFNLENBQUMsQ0FBQztBQUNSLENBQUMsS0FBSyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsVUFBVSxDQUFDO0FBQzVCLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxXQUFXO0FBQ25CLEFBQUEsQUFBQSxNQUFNLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxXQUFXLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUTtBQUN2QyxBQUFBLEFBQUEsTUFBTSxDQUFDLENBQUM7QUFDUixDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLFdBQVcsQ0FBQztBQUN0RCxDQUFDLFlBQVksQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLFlBQVksQ0FBQyxDQUFDLE9BQU8sQ0FBQztBQUM5QyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsU0FBUztBQUNqQixBQUFBLEFBQUEsTUFBTSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU07QUFDNUIsQUFBQSxBQUFBLE1BQU0sQ0FBQyxDQUFDO0FBQ1IsQ0FBQyxVQUFVLENBQUM7QUFDWixDQUFDLGFBQWEsQ0FBQyxDQUFDLGdCQUFnQixDQUFDLENBQUMsT0FBTyxDQUFDO0FBQzFDLENBQUMsZ0JBQWdCLENBQUM7QUFDbEIsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQVU7QUFDbEIsQUFBQSxBQUFBLE1BQU0sQ0FBQyxDQUFDO0FBQ1IsQ0FBQyxLQUFLLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxLQUFLLENBQUM7QUFDN0MsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFdBQVc7QUFDbkIsQUFBQTtBQUNBLEFBQUEsQUFBQSxVQUFVLENBQUMsQ0FBQztBQUNaLEFBQUE7QUFDQSxBQUFBLDhFQUE2RTtBQUM3RSxBQUFBO0FBQ0EsQUFBQSxBQUFBLEdBQUcsQ0FBQSxBQUFDLHlCQUF5QixDQUFBO0FBQzdCLEFBQUE7QUFDQSxBQUFBLEFBQUEsS0FBSyxDQUFBLEFBQUMsZ0JBQWdCLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQTtBQUM1QyxBQUFBLEFBQUEsS0FBSyxDQUFBLEFBQUMsZ0JBQWdCLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFBO0FBQ3hDLEFBQUEsQUFBQSxLQUFLLENBQUEsQUFBQyxnQkFBZ0IsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUE7QUFDL0MsQUFBQSxBQUFBLEtBQUssQ0FBQSxBQUFDLGdCQUFnQixDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQTtBQUM3QyxBQUFBLEFBQUEsS0FBSyxDQUFBLEFBQUMsZ0JBQWdCLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFBO0FBQ3RDLEFBQUEsQUFBQSxLQUFLLENBQUEsQUFBQyxnQkFBZ0IsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFBO0FBQ2pDLEFBQUE7QUFDQSxBQUFBLEFBQUEsR0FBRyxDQUFBLEFBQUMsY0FBYyxDQUFBO0FBQ2xCLEFBQUE7QUFDQSxBQUFBLEFBQUEsS0FBSyxDQUFBLEFBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNyQyxBQUFBLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFBO0FBQ1IsQUFBQSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQTtBQUNSLEFBQUEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJO0FBQ1IsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBO0FBQ1AsQUFBQTtBQUNBLEFBQUEsQUFBQSxLQUFLLENBQUEsQUFBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ3pDLEFBQUEsQ0FBQyxHQUFHLENBQUMsQ0FBQyxLQUFLO0FBQ1gsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBO0FBQ1AsQUFBQTtBQUNBLEFBQUEsQUFBQSxLQUFLLENBQUEsQUFBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ2xELEFBQUEsQ0FBQyxHQUFHLENBQUMsQ0FBQyxLQUFLO0FBQ1gsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUE7QUFDZCxBQUFBO0FBQ0EsQUFBQSxBQUFBLEtBQUssQ0FBQSxBQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDcEMsQUFBQSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQTtBQUNSLEFBQUEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJO0FBQ1IsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBO0FBQ1AsQUFBQTtBQUNBLEFBQUEsQUFBQSxLQUFLLENBQUEsQUFBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFD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Q1gsQUFBQSxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUE7QUFDeEIsQUFBQSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUE7QUFDdEIsQUFBQSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUE7QUFDdEIsQUFBQSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUE7QUFDdEIsQUFBQSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsU0FBUyxDQUFDO0FBQ3RCLEVBQUUsQ0FBQztBQUNILEFBQUE7QUFDQSxBQUFBLENBQUMsS0FBSyxDQUFBLEFBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNyQyxBQUFBLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFBO0FBQ1QsQUFBQSxFQUFFLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQTtBQUNWLEFBQUEsRUFBRSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUE7QUFDVixBQUFBLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSTtBQUNULEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQTtBQUNSLEFBQUE7QUFDQSxBQUFBLENBQUMsS0FBSyxDQUFBLEFBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNqRCxBQUFBLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFBO0FBQ1QsQUFBQSxFQUFFLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQTtBQUNWLEFBQUEsRUFBRSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUE7QUFDVixBQUFBLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSTtBQUNULEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFBO0FBQ2xCLEFBQUE7QUFDQSxBQUFBLENBQUMsS0FBSyxDQUFBLEFBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ3ZELEFBQUEsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUE7QUFDVCxBQUFBLEVBQUUsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFBO0FBQ1YsQUFBQSxFQUFFLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQTtBQUNWLEFBQUEsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUE7QUFDVCxBQUFBLEVBQUUsSUFBSSxDQUFDLENBQUMsVUFBVTtBQUNsQixFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEM7QUFBQSxDQUFBO0FBQ1IsQ0FBQyxDQUFDLENBQUMsQyxDQUFDO0FBQ0osQUFBQTtBQUNBLEFBQUEsQUFBQSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQSxDQUFBO0FBQ04sQUFBQSxDQUFNLE1BQUwsS0FBSyxDQUFDLENBQUUsQ0FBQyxDQUFDO0FBQ1gsQUFBQSxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUE7QUFDeEIsQUFBQSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUE7QUFDdEIsQUFBQSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUE7QUFDdEIsQUFBQSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsU0FBUyxDQUFDO0FBQ3RCLEVBQUUsQ0FBQztBQUNILEFBQUEsQ0FBTSxNQUFMLEtBQUssQ0FBQyxDQUFFLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxXQUFXLENBQUMsQ0FBQyxlQUFlLENBQUM7QUFDM0QsQUFBQTtBQUNBLEFBQUEsQ0FBbUQsTUFBbEQsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBRSxDQUFDLFVBQVUsQ0FBQSxBQUFDLEtBQUssQ0FBQyxDQUFDLEtBQUssQ0FBQTtBQUM5RSxBQUFBLENBQUMsS0FBSyxDQUFBLEFBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxXQUFXLENBQUMsQ0FBQTtBQUM3QyxBQUFBLENBQUMsS0FBSyxDQUFBLEFBQUMsSUFBSSxDQUFDLENBQUMsU0FBUyxDQUFBO0FBQ3RCLEFBQUEsQ0FBQyxLQUFLLENBQUEsQUFBQyxLQUFLLENBQUMsQ0FBQyxJQUFJLENBQUE7QUFDbEIsQUFBQSxDQUFDLEtBQUssQ0FBQSxBQUFDLElBQUksQ0FBQyxDQUFDLEtBQUssQ0FBQTtBQUNsQixBQUFBLENBQUMsS0FBSyxDQUFBLEFBQUMsS0FBSyxDQUFDLENBQUMsSUFBSSxDO0FBQUEsQ0FBQTtBQUNsQixDQUFDLENBQUMsQ0FBQyxDLENBQUM7QUFDSixBQUFBO0FBQ0EsQUFBQSxBQUFBLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFBLENBQUE7QUFDTixBQUFBLENBQU0sTUFBTCxLQUFLLENBQUMsQ0FBRSxDQUFDLENBQUM7QUFDWCxBQUFBLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQTtBQUN4QixBQUFBLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7QUFDUCxBQUFBLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7QUFDUCxBQUFBLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ1AsRUFBRSxDQUFDO0FBQ0gsQUFBQSxDQUFNLE1BQUwsS0FBSyxDQUFDLENBQUUsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLFdBQVcsQ0FBQyxDQUFDLGVBQWUsQ0FBQztBQUMzRCxBQUFBO0FBQ0EsQUFBQSxDQUFtRCxNQUFsRCxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFFLENBQUMsVUFBVSxDQUFBLEFBQUMsS0FBSyxDQUFDLENBQUMsS0FBSyxDQUFBO0FBQzlFLEFBQUEsQ0FBQyxLQUFLLENBQUEsQUFBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxDQUFBO0FBQzdDLEFBQUEsQ0FBQyxLQUFLLENBQUEsQUFBQyxJQUFJLENBQUMsQ0FBQyxTQUFTLENBQUE7QUFDdEIsQUFBQSxDQUFDLEtBQUssQ0FBQSxBQUFDLEtBQUssQ0FBQyxDQUFDLElBQUksQ0FBQTtBQUNsQixBQUFBLENBQUMsS0FBSyxDQUFBLEFBQUMsSUFBSSxDQUFDLENBQUMsS0FBSyxDQUFBO0FBQ2xCLEFBQUEsQ0FBQyxLQUFLLENBQUEsQUFBQyxLQUFLLENBQUMsQ0FBQyxJQUFJLEM7QUFBQSxDQUFBO0FBQ2xCLENBQUMsQ0FBQyxDQUFDLEMsQ0FBQztBQUNKLEFBQUE7QUFDQSxBQUFBLEFBQUEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUEsQ0FBQTtBQUNOLEFBQUEsQ0FBTSxNQUFMLEtBQUssQ0FBQyxDQUFFLENBQUMsQ0FBQztBQUNYLEFBQUEsRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFBO0FBQ3hCLEFBQUEsRUFBRSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUE7QUFDVixBQUFBLEVBQUUsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFBO0FBQ1YsQUFBQSxFQUFFLENBQUMsQ0FBQyxDQUFDLEtBQUs7QUFDVixFQUFFLENBQUM7QUFDSCxBQUFBLENBQU0sTUFBTCxLQUFLLENBQUMsQ0FBRSxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsV0FBVyxDQUFDLENBQUMsZUFBZSxDQUFDO0FBQzNELEFBQUEsQ0FBbUQsTUFBbEQsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBRSxDQUFDLFVBQVUsQ0FBQSxBQUFDLEtBQUssQ0FBQyxDQUFDLEtBQUssQ0FBQTtBQUM5RSxBQUFBLENBQUMsS0FBSyxDQUFBLEFBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxXQUFXLENBQUMsQ0FBQTtBQUM3QyxBQUFBLENBQUMsS0FBSyxDQUFBLEFBQUMsSUFBSSxDQUFDLENBQUMsU0FBUyxDQUFBO0FBQ3RCLEFBQUEsQ0FBQyxLQUFLLENBQUEsQUFBQyxLQUFLLENBQUMsQ0FBQyxJQUFJLENBQUE7QUFDbEIsQUFBQSxDQUFDLEtBQUssQ0FBQSxBQUFDLElBQUksQ0FBQyxDQUFDLEtBQUssQ0FBQTtBQUNsQixBQUFBLENBQUMsS0FBSyxDQUFBLEFBQUMsS0FBSyxDQUFDLENBQUMsSUFBSSxDO0FBQUEsQ0FBQTtBQUNsQixDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ0osQUFBQTtBQUNBLEFBQUEsQUFBQSxHQUFHLENBQUEsQUFBQyw0QkFBNEIsQyxDQUFBO0FBQ2hDLEFBQUE7QUFDQSxBQUFBLEFBQUEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUEsQ0FBQTtBQUNOLEFBQUEsQ0FBTSxNQUFMLEtBQUssQ0FBQyxDQUFFLENBQUMsQ0FBQztBQUNYLEFBQUEsRUFB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QyxDQUFDLG9CQUFvQixDQUFBO0FBQzdCLEFBQUEsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7QUFDaEIsR0FBRyxDQUFDLENBQUE7QUFDSixBQUFBLEVBQUUsQ0FBQyxDQUFDLENBQUMsZ0JBQWdCLENBQUE7QUFDckIsQUFBQSxFQUFFLEtBQUssQ0FBQyxDQUFDLGVBQWUsQ0FBQTtBQUN4QixBQUFBLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQztBQUNSLEFBQUEsR0FBRyxJQUFJLENBQUMsQ0FBQyxTQUFTLENBQUE7QUFDbEIsQUFBQSxHQUFHLElBQUksQ0FBQyxDQUFDLGlCQUFpQjtBQUMxQixHQUFHLENBQUMsQ0FBQTtBQUNKLEFBQUEsRUFBRSxLQUFLLENBQUMsQ0FBQyxDQUFDO0FBQ1YsQUFBQSxHQUFHLElBQUksQ0FBQyxDQUFDLFFBQVEsQ0FBQTtBQUNqQixBQUFBLEdBQUcsSUFBSSxDQUFDLENBQUMsY0FBYztBQUN2QixHQUFHLENBQUMsQ0FBQTtBQUNKLEFBQUEsRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDO0FBQ1QsQUFBQSxHQUFHLElBQUksQ0FBQyxDQUFDLFFBQVE7QUFDakIsR0FBRyxDQUFDO0FBQ0osRUFBRSxDQUFDO0FBQ0gsQUFBQSxDQUFDLEtBQUssQ0FBQSxBQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUc7QUFDMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFDQUVFLENBQUcsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUMsS0FBSyxDQUFDLEM7QUFBQSxDQUFBO0FBQzdCLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDSiIsIm5hbWVzIjpbXSwic291cmNlc0NvbnRlbnQiOlsiIyBjbWQtYXJncy5saWIudGVzdC5jaXZldFxyXG5cclxuaW1wb3J0IHtcclxuXHR1bmRlZiwgZGVmaW5lZCwgbm90ZGVmaW5lZCxcclxuXHR9IGZyb20gJ2RhdGF0eXBlcydcclxuaW1wb3J0IHtEQkcsIGdldExvZ0xldmVsfSBmcm9tICdsb2dnZXInXHJcbmltcG9ydCB7XHJcblx0c3BhY2VzLCB0YWJzLCB3c1NwbGl0LCB3b3JkcywgZXNjYXBlU3RyLCBlc2NhcGVCbG9jayxcclxuXHRibG9ja1RvQXJyYXksIHRvQXJyYXksIGFycmF5VG9CbG9jaywgdG9CbG9jayxcclxuXHR9IGZyb20gJ2xsdXRpbHMnXHJcbmltcG9ydCB7cmVscGF0aH0gZnJvbSAnZnN5cydcclxuaW1wb3J0IHtcclxuXHRnZXRDbWRBcmdzLFxyXG5cdGdldE9wdGlvbkluZm8sIGdldE5vbk9wdGlvbkluZm8sIGhlbHBTdHIsXHJcblx0bG9nTGV2ZWxGcm9tQXJncyxcclxuXHR9IGZyb20gJ2NtZC1hcmdzJ1xyXG5pbXBvcnQge1xyXG5cdGVxdWFsLCBsaWtlLCBzdWNjZWVkcywgZmFpbHMsIHRydXRoeSwgZmFsc3ksXHJcblx0fSBmcm9tICd1bml0LXRlc3QnXHJcblxyXG5nZXRDbWRBcmdzKClcclxuXHJcbiMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblxyXG5EQkcgXCJsb2dMZXZlbEZyb21BcmdzKGxBcmdzKVwiXHJcblxyXG5lcXVhbCBsb2dMZXZlbEZyb21BcmdzKFsnLW0nLCctRCddKSwgJ2RlYnVnJ1xyXG5lcXVhbCBsb2dMZXZlbEZyb21BcmdzKFsnLW1EJ10pLCAnZGVidWcnXHJcbmVxdWFsIGxvZ0xldmVsRnJvbUFyZ3MoWyctbW5EJywgJy1JJ10pLCAnZGVidWcnXHJcbmVxdWFsIGxvZ0xldmVsRnJvbUFyZ3MoWyctSScsICdtbkQnXSksICdpbmZvJ1xyXG5lcXVhbCBsb2dMZXZlbEZyb21BcmdzKFsnLW1uJ10pLCB1bmRlZlxyXG5lcXVhbCBsb2dMZXZlbEZyb21BcmdzKFtdKSwgdW5kZWZcclxuXHJcbkRCRyBcImdldENtZEFyZ3MoKVwiXHJcblxyXG5lcXVhbCBnZXRDbWRBcmdzKHVuZGVmLCBbJy1hYmMnXSksIFt7XHJcblx0YTogdHJ1ZVxyXG5cdGI6IHRydWVcclxuXHRjOiB0cnVlXHJcblx0fSwgW11dXHJcblxyXG5lcXVhbCBnZXRDbWRBcmdzKHVuZGVmLCBbJy1hYmM9eHl6J10pLCBbe1xyXG5cdGFiYzogJ3h5eidcclxuXHR9LCBbXV1cclxuXHJcbmVxdWFsIGdldENtZEFyZ3ModW5kZWYsIFsnLWFiYz14eXonLCAndGFibGUnXSksIFt7XHJcblx0YWJjOiAneHl6J1xyXG5cdH0sIFsndGFibGUnXV1cclxuXHJcbmVxdWFsIGdldENtZEFyZ3ModW5kZWYsIFsnLURmJ10pLCBbe1xyXG5cdGY6IHRydWVcclxuXHREOiB0cnVlXHJcblx0fSwgW11dXHJcblxyXG5lcXVhbCBnZXRDbWRBcmdzKHVuZGVmLCBbJy1EJ10pLCBbe1xyXG5cdEQ6IHRydWVcclxuXHR9LCBbXV1cclxuXHJcbmVxdWFsIGdldExvZ0xldmVsKCksICdkZWJ1ZydcclxuXHJcbmVxdWFsIGdldENtZEFyZ3ModW5kZWYsIFsnLVAnXSksIFt7XHJcblx0UDogdHJ1ZVxyXG5cdH0sIFtdXVxyXG5lcXVhbCBnZXRMb2dMZXZlbCgpLCAncHJvZmlsZSdcclxuXHJcbmVxdWFsIGdldENtZEFyZ3ModW5kZWYsIFsnLUknXSksIFt7XHJcblx0STogdHJ1ZVxyXG5cdH0sIFtdXVxyXG5lcXVhbCBnZXRMb2dMZXZlbCgpLCAnaW5mbydcclxuXHJcbiMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4jIC0tLSBnZXRDbWRBcmdzKCkgd2l0aCBoRGVzY1xyXG5cclxuIyAtLS0gb25lIG5vbi1vcHRpb24gaXMgcmVxdWlyZWRcclxuZmFpbHMgKCkgPT4gZ2V0Q21kQXJncyB7XCJfXCI6e1wicmFuZ2VcIjoxfX0sIFtcIi1EXCJdXHJcblxyXG4jIC0tLSBvbmUgbm9uLW9wdGlvbiBpcyBtYXggYWxsb3dlZFxyXG5mYWlscyAoKSA9PiBnZXRDbWRBcmdzIHtcIl9cIjp7XCJyYW5nZVwiOjF9fSwgW1wiLURcIiwgXCJ1dGlsc1wiLCBcIm90aGVyXCJdXHJcblxyXG4oKCkgPT5cclxuXHQjIC0tLSBjb21tbWFuZCAnY29tcGlsZScgYWxsb3dzIHRoZSBmb2xsb3dpbmcgb3B0aW9uczpcclxuXHQjICAgICAgICAtZiAgLSBmb3JjZSBjb21waWxhdGlvblxyXG5cdCMgICAgICAgIC13ICAtIHdhdGNoIGZvciBmaWxlIGNoYW5nZXNcclxuXHQjICAgICAgICAtbiAgLSBzdXBwcmVzcyBwb3N0IHByb2Nlc3NpbmdcclxuXHQjICAgICAgICAtZGlyc3BlYz08c3BlYz4gIC0gJ2JpbkRpcicgb3IgJ2xpYkRpcidcclxuXHQjICAgICBwbHVzIGFueSBudW1iZXIgb2Ygbm9uLW9wdGlvbnNcclxuXHQjICAgICAoYnV0IHdlIHByZXRlbmQgaXQgbXVzdCBiZSAxLCAyIG9yIDMpXHJcblxyXG5cdGhEZXNjIDo9IHtcclxuXHRcdGY6IHt0eXBlOiAnYm9vbGVhbid9XHJcblx0XHR3OiB7dHlwZTogJ2Jvb2xlYW4nfVxyXG5cdFx0bjoge3R5cGU6ICdib29sZWFuJ31cclxuXHRcdGQ6IHt0eXBlOiAnYm9vbGVhbid9XHJcblx0XHRkaXJzcGVjOiB7dHlwZTogWydsaWJEaXInLCdiaW5EaXInXX1cclxuXHRcdF86IHtyYW5nZTogWzEsIDNdfVxyXG5cdFx0fVxyXG5cclxuXHQjIC0tLSBUaGVyZSBpcyBubyBmbGFnIG5hbWVkICdmJ1xyXG5cdGZhaWxzICgpID0+IGdldENtZEFyZ3MoaERlc2MsIFsnLWRhZicsICdmaWxlMSddKVxyXG5cclxuXHQjIC0tLSBvcHRpb24gJ2RpcnNwZWMnIG11c3QgYmUgJ2xpYkRpcicgb3IgJ2JpbkRpcidcclxuXHRmYWlscyAoKSA9PiBnZXRDbWRBcmdzKGhEZXNjLCBbJy1kaXJzcGVjPTQyJywgJ2ZpbGUxJ10pXHJcblx0ZmFpbHMgKCkgPT4gZ2V0Q21kQXJncyhoRGVzYywgWyctZGlyc3BlYz1ibGliJywgJ2ZpbGUxJ10pXHJcblxyXG5cdCMgLS0tIFRoZXJlIG11c3QgYmUgYXQgbGVhc3Qgb25lIG5vbi1vcHRpb24sIGFuZCBubyBtb3JlIHRoYW4gM1xyXG5cdGZhaWxzICAoKSA9PiBnZXRDbWRBcmdzKGhEZXNjLCBbJy1nZiddKVxyXG5cdGZhaWxzICAoKSA9PiBnZXRDbWRBcmdzKGhEZXNjLCBbJy1nZicsICdhJywgJ2InLCAnYycsICdkJ10pXHJcblx0KSgpXHJcblxyXG4oKCkgPT5cclxuXHRoRGVzYyA6PSB7XHJcblx0XHRmaWxlOiB7dHlwZTogJ3N0cmluZyd9XHJcblx0XHRmOiB7dHlwZTogJ2Jvb2xlYW4nfVxyXG5cdFx0bjoge3R5cGU6ICdib29sZWFuJ31cclxuXHRcdHc6IHt0eXBlOiAnYm9vbGVhbid9XHJcblx0XHRkOiB7dHlwZTogJ2Jvb2xlYW4nfVxyXG5cdFx0fVxyXG5cclxuXHRlcXVhbCBnZXRDbWRBcmdzKGhEZXNjLCBbJy13ZCddKSwgW3tcclxuXHRcdGQ6IHRydWVcclxuXHRcdGY6IGZhbHNlXHJcblx0XHRuOiBmYWxzZVxyXG5cdFx0dzogdHJ1ZVxyXG5cdFx0fSwgW11dXHJcblxyXG5cdGVxdWFsIGdldENtZEFyZ3MoaERlc2MsIFsnLXdkJywgJ3RlbXAudHh0J10pLCBbe1xyXG5cdFx0ZDogdHJ1ZVxyXG5cdFx0ZjogZmFsc2VcclxuXHRcdG46IGZhbHNlXHJcblx0XHR3OiB0cnVlXHJcblx0XHR9LCBbJ3RlbXAudHh0J11dXHJcblxyXG5cdGVxdWFsIGdldENtZEFyZ3MoaERlc2MsIFsnLXdkJywgJy1maWxlPXRlbXAudHh0J10pLCBbe1xyXG5cdFx0ZDogdHJ1ZVxyXG5cdFx0ZjogZmFsc2VcclxuXHRcdG46IGZhbHNlXHJcblx0XHR3OiB0cnVlXHJcblx0XHRmaWxlOiAndGVtcC50eHQnXHJcblx0XHR9LCBbXV1cclxuXHQpKClcclxuXHJcbigoKSA9PlxyXG5cdGhEZXNjIDo9IHtcclxuXHRcdGZpbGU6IHt0eXBlOiAnc3RyaW5nJ31cclxuXHRcdGY6IHt0eXBlOiAnYm9vbGVhbid9XHJcblx0XHRuOiB7dHlwZTogJ2Jvb2xlYW4nfVxyXG5cdFx0dzoge3R5cGU6ICdib29sZWFuJ31cclxuXHRcdH1cclxuXHRsQXJncyA6PSBbJ3RlbXAudHh0JywgJy1mdycsICd0ZW1wMi50eHQnLCAnLWZpbGU9YWJjLnR4dCddXHJcblxyXG5cdFt7ZmlsZSwgZjogZm9yY2UsIG46IG5vcHAsIHc6IHdhdGNofSwgbE5vbk9wdGlvbnNdIDo9IGdldENtZEFyZ3MgaERlc2MsIGxBcmdzXHJcblx0ZXF1YWwgbE5vbk9wdGlvbnMsIFsndGVtcC50eHQnLCAndGVtcDIudHh0J11cclxuXHRlcXVhbCBmaWxlLCAnYWJjLnR4dCdcclxuXHRlcXVhbCBmb3JjZSwgdHJ1ZVxyXG5cdGVxdWFsIG5vcHAsIGZhbHNlXHJcblx0ZXF1YWwgd2F0Y2gsIHRydWVcclxuXHQpKClcclxuXHJcbigoKSA9PlxyXG5cdGhEZXNjIDo9IHtcclxuXHRcdGZpbGU6IHt0eXBlOiAnc3RyaW5nJ31cclxuXHRcdGY6IHt9XHJcblx0XHRuOiB7fVxyXG5cdFx0dzoge31cclxuXHRcdH1cclxuXHRsQXJncyA6PSBbJ3RlbXAudHh0JywgJy1mdycsICd0ZW1wMi50eHQnLCAnLWZpbGU9YWJjLnR4dCddXHJcblxyXG5cdFt7ZmlsZSwgZjogZm9yY2UsIG46IG5vcHAsIHc6IHdhdGNofSwgbE5vbk9wdGlvbnNdIDo9IGdldENtZEFyZ3MgaERlc2MsIGxBcmdzXHJcblx0ZXF1YWwgbE5vbk9wdGlvbnMsIFsndGVtcC50eHQnLCAndGVtcDIudHh0J11cclxuXHRlcXVhbCBmaWxlLCAnYWJjLnR4dCdcclxuXHRlcXVhbCBmb3JjZSwgdHJ1ZVxyXG5cdGVxdWFsIG5vcHAsIGZhbHNlXHJcblx0ZXF1YWwgd2F0Y2gsIHRydWVcclxuXHQpKClcclxuXHJcbigoKSA9PlxyXG5cdGhEZXNjIDo9IHtcclxuXHRcdGZpbGU6IHt0eXBlOiAnc3RyaW5nJ31cclxuXHRcdGY6IHVuZGVmXHJcblx0XHRuOiB1bmRlZlxyXG5cdFx0dzogdW5kZWZcclxuXHRcdH1cclxuXHRsQXJncyA6PSBbJ3RlbXAudHh0JywgJy1mdycsICd0ZW1wMi50eHQnLCAnLWZpbGU9YWJjLnR4dCddXHJcblx0W3tmaWxlLCBmOiBmb3JjZSwgbjogbm9wcCwgdzogd2F0Y2h9LCBsTm9uT3B0aW9uc10gOj0gZ2V0Q21kQXJncyBoRGVzYywgbEFyZ3NcclxuXHRlcXVhbCBsTm9uT3B0aW9ucywgWyd0ZW1wLnR4dCcsICd0ZW1wMi50eHQnXVxyXG5cdGVxdWFsIGZpbGUsICdhYmMudHh0J1xyXG5cdGVxdWFsIGZvcmNlLCB0cnVlXHJcblx0ZXF1YWwgbm9wcCwgZmFsc2VcclxuXHRlcXVhbCB3YXRjaCwgdHJ1ZVxyXG5cdCkoKVxyXG5cclxuREJHIFwiZ2V0T3B0aW9uSW5mbyhoRGVzYywgbmFtZSlcIlxyXG5cclxuKCgpID0+XHJcblx0aERlc2MgOj0ge1xyXG5cdFx0ZjogJ2Fsd2F5cyBjb21waWxlJ1xyXG5cdFx0c3RhdGU6ICdjdXJyZW50IHN0YXRlJ1xyXG5cdFx0bnVtOiB7XHJcblx0XHRcdHR5cGU6ICdpbnRlZ2VyJ1xyXG5cdFx0XHRkZXNjOiAnbnVtYmVyIG9mIGl0ZW1zJ1xyXG5cdFx0XHR9XHJcblx0XHRsYWJlbDoge1xyXG5cdFx0XHR0eXBlOiAnc3RyaW5nJ1xyXG5cdFx0XHRkZXNjOiAnbGFiZWwgdG8gdXNlJ1xyXG5cdFx0XHR9XHJcblx0XHRpdGVtOiB7XHJcblx0XHRcdHR5cGU6ICdzdHJpbmcnXHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0IyAtLS0gWW91IGNhbm5vdCBhc2sgZm9yIG9wdGlvbiAnXydcclxuXHRmYWlscyAoKSA9PiBnZXRPcHRpb25JbmZvKGhEZXNjLCAnXycpXHJcblxyXG5cdCMgLS0tIE5vIHN1Y2ggb3B0aW9uXHJcblx0ZmFpbHMgKCkgPT4gZ2V0T3B0aW9uSW5mbyhoRGVzYywgJ2R1bW15JylcclxuXHJcblx0ZXF1YWwgZ2V0T3B0aW9uSW5mbyhoRGVzYywgJ2YnKSwge1xyXG5cdFx0ZGVzYzogJ2Fsd2F5cyBjb21waWxlJ1xyXG5cdFx0dHlwZTogJ2Jvb2xlYW4nXHJcblx0XHRkZWZhdWx0VmFsOiBmYWxzZVxyXG5cdFx0fVxyXG5cdGVxdWFsIGdldE9wdGlvbkluZm8oaERlc2MsICdzdGF0ZScpLCB7XHJcblx0XHRkZXNjOiAnY3VycmVudCBzdGF0ZSdcclxuXHRcdHR5cGU6ICdzdHJpbmcnXHJcblx0XHR9XHJcblx0ZXF1YWwgZ2V0T3B0aW9uSW5mbyhoRGVzYywgJ2l0ZW0nKSwge1xyXG5cdFx0dHlwZTogJ3N0cmluZydcclxuXHRcdGRlc2M6ICc8bm8gZGVzY3JpcHRpb24gYXZhaWxhYmxlPidcclxuXHRcdH1cclxuXHRlcXVhbCBnZXRPcHRpb25JbmZvKGhEZXNjLCAnbGFiZWwnKSwge1xyXG5cdFx0dHlwZTogJ3N0cmluZydcclxuXHRcdGRlc2M6ICdsYWJlbCB0byB1c2UnXHJcblx0XHR9XHJcblx0KSgpXHJcblxyXG5EQkcgXCJnZXROb25PcHRpb25JbmZvKClcIlxyXG5cclxuKCgpID0+XHJcblx0aERlc2MgOj0ge1xyXG5cdFx0Xzoge1xyXG5cdFx0XHRkZXNjOiAnbGlzdCBvZiBmaWxlIG5hbWVzJ1xyXG5cdFx0XHRyYW5nZTogWzEsM11cclxuXHRcdFx0fVxyXG5cdFx0b3RoZXI6IHt9XHJcblx0XHR9XHJcblx0ZXF1YWwgZ2V0Tm9uT3B0aW9uSW5mbyh7QTogMX0pLCB1bmRlZlxyXG5cdGVxdWFsIGdldE5vbk9wdGlvbkluZm8oaERlc2MpLCB7XHJcblx0XHRkZXNjOiAnbGlzdCBvZiBmaWxlIG5hbWVzJ1xyXG5cdFx0bWluOiAxXHJcblx0XHRtYXg6IDNcclxuXHRcdH1cclxuXHRlcXVhbCBnZXROb25PcHRpb25JbmZvKHtfOiB7ZGVzYzogJ3h4JywgcmFuZ2U6IDR9fSksIHtcclxuXHRcdGRlc2M6ICd4eCdcclxuXHRcdG1pbjogNFxyXG5cdFx0bWF4OiA0XHJcblx0XHR9XHJcblx0KSgpXHJcblxyXG5EQkcgXCJoZWxwU3RyKGhEZXNjKVwiXHJcblxyXG4oKCkgPT5cclxuXHRoRGVzYyA6PSB7XHJcblx0XHRfOiB7XHJcblx0XHRcdGRlc2M6ICdsaXN0IG9mIGZpbGUgbmFtZXMnXHJcblx0XHRcdHJhbmdlOiBbMSwxMF1cclxuXHRcdFx0fVxyXG5cdFx0ZjogJ2Fsd2F5cyBjb21waWxlJ1xyXG5cdFx0c3RhdGU6ICdjdXJyZW50IHN0YXRlJ1xyXG5cdFx0bnVtOiB7XHJcblx0XHRcdHR5cGU6ICdpbnRlZ2VyJ1xyXG5cdFx0XHRkZXNjOiAnbnVtYmVyIG9mIGl0ZW1zJ1xyXG5cdFx0XHR9XHJcblx0XHRsYWJlbDoge1xyXG5cdFx0XHR0eXBlOiAnc3RyaW5nJ1xyXG5cdFx0XHRkZXNjOiAnbGFiZWwgdG8gdXNlJ1xyXG5cdFx0XHR9XHJcblx0XHRpdGVtOiB7XHJcblx0XHRcdHR5cGU6ICdzdHJpbmcnXHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHRlcXVhbCBoZWxwU3RyKGhEZXNjKSwgXCJcIlwiXHJcblx0XHRBdmFpbGFibGUgb3B0aW9uczpcclxuXHRcdFx0LWY6IGJvb2xlYW4gLSBhbHdheXMgY29tcGlsZVxyXG5cdFx0XHQtc3RhdGU6IHN0cmluZyAtIGN1cnJlbnQgc3RhdGVcclxuXHRcdFx0LW51bTogaW50ZWdlciAtIG51bWJlciBvZiBpdGVtc1xyXG5cdFx0XHQtbGFiZWw6IHN0cmluZyAtIGxhYmVsIHRvIHVzZVxyXG5cdFx0XHQtaXRlbTogc3RyaW5nIC0gPG5vIGRlc2NyaXB0aW9uIGF2YWlsYWJsZT5cclxuXHRcdE5vbi1vcHRpb25zOlxyXG5cdFx0XHRsaXN0IG9mIGZpbGUgbmFtZXNcclxuXHRcdFx0VGhlcmUgbXVzdCBiZSBhdCBsZWFzdCAxIG5vbi1vcHRpb25cclxuXHRcdFx0VGhlcmUgbXVzdCBiZSBhdCBtb3N0IDEwIG5vbi1vcHRpb25zXHJcblx0XHRcIlwiXCIucmVwbGFjZUFsbCgnXFx0JywgJyAgICcpXHJcblx0KSgpXHJcbiJdfQ==