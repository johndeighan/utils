# pllfile.lib.test.civet

import {DBG} from 'logger'
import {spaces, o} from 'llutils'
import {
	setDirTree, TFileOp, allTokensInFile, fileOpsTable,
	} from 'pllfile'
import {
	equal, isType, objListLike,
	} from 'unit-test'

# ---------------------------------------------------------------------------

setup := (): void =>

	DBG "setDirTree()"

	setDirTree('src/test/pllfile', """
			tokens.txt
				if x==1
					print "OK"
				exit
			dummy.txt
				dummy
			file1.txt
				line1
				line2
				line3
			file2.txt
				# test1.cielo

				LOG := (str) => console.log str
				LOG "Hello, World!"
			file3.flags.txt
				# test1.cielo

				LOG := (str) => console.log str
				LOG "Hello, World!"
			file4.cielo
				# file.cielo

				abc
			file5.cielo
				this is the REAL first line
				# file.cielo

				abc
			file.config.ts
				export default new Object({
					a: 1,
					b: 'abc',
					f: () => 'hello'
					})
			/aaa
				/bbb
					newfile.txt
						abc
					oldfile.txt
						abc
					temp.txt
						abc
			/subdir
				new.txt
					abc
					def
		""", o'clear')
	return

setup()

DBG "allTokensInFile()"

objListLike Array.from(allTokensInFile('src/test/fsys/tokens.txt')), [
	{kind: 'line',   str: 'if x==1'}
	{kind: 'indent'}
	{kind: 'line',   str: 'print "OK"'}
	{kind: 'undent'}
	{kind: 'line',   str: 'exit'}
	]

DBG "setDirTree()"

(() =>
	lFileOps := setDirTree('test/t', """
		temp.txt
			abc
			def
		""", o'scaffold')

	equal lFileOps, [
			{ funcName: 'mkDir', path: 'test/t'}
			{ funcName: 'barf',  path: 'test/t/temp.txt', contents: "abc\ndef"}
			]
	)()

(() =>
	lFileOps := setDirTree('test/t', """
		dummy.txt
			abc
			def
		file1.txt
			abc
		file2.txt
			abc
		file3.flags.txt
			abc
		/aaa
			/bbb
				newfile.txt
				oldfile.txt
				temp.txt
			/subdir1
		/subdir2
		""", o'scaffold')

	equal lFileOps, [
			{ funcName: 'mkDir', path: 'test/t'}
			{ funcName: 'barf',  path: 'test/t/dummy.txt', contents: "abc\ndef"}
			{ funcName: 'barf',  path: 'test/t/file1.txt', contents: "abc"}
			{ funcName: 'barf',  path: 'test/t/file2.txt', contents: "abc"}
			{ funcName: 'barf',  path: 'test/t/file3.flags.txt', contents: "abc"}
			{ funcName: 'mkDir', path: 'test/t/aaa'}
			{ funcName: 'mkDir', path: 'test/t/aaa/bbb'}
			{ funcName: 'barf',  path: 'test/t/aaa/bbb/newfile.txt', contents: ''}
			{ funcName: 'barf',  path: 'test/t/aaa/bbb/oldfile.txt', contents: ''}
			{ funcName: 'barf',  path: 'test/t/aaa/bbb/temp.txt', contents: ''}
			{ funcName: 'mkDir', path: 'test/t/aaa/subdir1'}
			{ funcName: 'mkDir', path: 'test/t/subdir2'}
			]
	)()

DBG "type TFileOp"

isType 'TFileOp', {
	funcName: 'mkDir',
	path: '/usr/bin'
	}
isType 'TFileOp', {
	funcName: 'barf',
	path: '/usr/bin/deighan.txt'
	}
isType 'TFileOp', {
	funcName: 'barf',
	path: '/usr/bin/temp.txt',
	contents: 'abc\ndef'
	}

DBG "fileOpsTable()"

(() =>
	lFileOps: TFileOp[] := [
		{funcName: 'mkDir', path: '/usr/bin'}
		{funcName: 'barf',  path: '/usr/bin/deighan.txt'}
		{funcName: 'barf',  path: '/usr/bin/temp.txt', contents: 'abc\ndef'}
		]
	block := fileOpsTable(lFileOps)
	equal block, """
		--------------------------
		#{spaces(9)}FILE OPS
		--------------------------
		mkdir /usr/bin
		barf  /usr/bin/deighan.txt
		barf  /usr/bin/temp.txt
		#{spaces(6)}abc
		#{spaces(6)}def
		--------------------------
		"""
	)()
