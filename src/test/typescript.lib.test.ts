"use strict";
// typescript.lib.test.civet

import {SourceFile} from 'npm:typescript'

import {
	undef, isHash, isEmpty, nonEmpty, normalizeCode,
	} from 'datatypes'
import {pass, o, s, t} from 'llutils'
import {DBG} from 'logger'
import {getCmdArgs} from 'cmd-args'
import {slurp, withExt} from 'fsys'
import {
	typeCheckCode, splitFuncStr, getSymbolsFromType,
	getImportCode, getTsCode, checkType,
	ts2ast, ast2ts, typeCheckFiles, pprintAst,
	} from 'typescript'
import {
	equal, like, succeeds, fails, truthy, falsy, isType, setDirTree,
	} from 'unit-test'

getCmdArgs()

// ---------------------------------------------------------------------------

const setup = (): void => {

	DBG("setDirTree()")

	setDirTree('src/test/typescript', `test.ts
	const str: string = 'abc'
test2.ts
	const func1 = (str: string): boolean =>
		return true`)
}

setup()

// ---------------------------------------------------------------------------

DBG("typeCheckCode(tsCode)")

truthy(isEmpty(typeCheckCode("let s: string = 'abc';")))
truthy(nonEmpty(typeCheckCode("let s: string = 42;")))

DBG("ts2ast(tsCode)", "pprintAst(ast)")

const ast = ts2ast(slurp('src/test/typescript/test2.ts'))
equal(pprintAst(ast), s`kind: SourceFile
statements:
	-
		kind: FirstStatement
		declarationList:
			kind: VariableDeclarationList
			declarations:
				-
					kind: VariableDeclaration
					name:
						kind: Identifier
						escapedText: func1
					initializer:
						kind: ArrowFunction
						parameters:
							-
								kind: Parameter
								name:
									kind: Identifier
									escapedText: str
								type:
									kind: StringKeyword
						type:
							kind: BooleanKeyword
						equalsGreaterThanToken:
							kind: EqualsGreaterThanToken
						body:
							kind: Block
							statements:
								-
									kind: ReturnStatement
									expression:
										kind: TrueKeyword
							multiLine: .true.
endOfFileToken:
	kind: EndOfFileToken
text: const func1 = (str: string): boolean =>\\n\\treturn true
fileName: temp.ts
scriptKind: 3
isDeclarationFile: .false.
nodeCount: 16
identifierCount: 3
symbolCount: 0
parseDiagnostics:
	-
		file: .REF /.
		start: 41
		length: 6
		messageText: '{' expected.
		category: 1
		code: 1005
	-
		file: .REF /.
		start: 52
		length: 0
		messageText: '}' expected.
		category: 1
		code: 1005`)
DBG("getSymbolsFromType(typeStr)")

equal(getSymbolsFromType('integer'), ['integer'])
equal(getSymbolsFromType('hashof<integer>'), ['hashof','integer'])

DBG("getImportCode(typeStr)")

equal(getImportCode('integer'), `import {integer} from 'datatypes';`)
equal(getImportCode('hashof<integer>'), `import {hashof, integer} from 'datatypes';`)

DBG("splitFuncStr(valueStr)")

equal(splitFuncStr("abc"), undef)
equal(splitFuncStr("() => true"), [[], 'true'])
equal(splitFuncStr("(  ) => true"), [[], 'true'])
equal(splitFuncStr("(a,b,c) => false"), [
	['a','b','c'],
	'false'
	])
equal(splitFuncStr("( a , b,c ) => false"), [
	['a','b','c'],
	'false'
	])
equal(splitFuncStr("(a: string, b)=>true"), [
	['a: string', 'b'],
	'true'
	])

DBG("getTsCode(typeStr, valueStr)")

equal(getTsCode('integer', '42'), 'const x: integer = 42')
equal(getTsCode('TFilterFunc', '(x) => true'),
	'const x: TFilterFunc = (x: unknown) => true')

DBG("checkType(x, typeStr)")

equal(checkType(42, 'number'), [])


//# sourceMappingURL=data:application/json;charset=utf-8;base64,