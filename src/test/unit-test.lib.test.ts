"use strict";
// unit-test.lib.test.civet

import {undef, assert, hash} from 'datatypes'
import {DBG} from 'logger'
import {range, o, spaces} from 'llutils'
import {getCmdArgs} from 'cmd-args'
import {pathToURL} from 'fsys'
import {
	equal, truthy, falsy, fails, succeeds, iterEqual, iterLike,
	like, strListLike, objListLike,
	matches, includes, includesAll, isType, notType,
	TFileOp, setDirTree, fileOpsTable,
	} from 'unit-test'

getCmdArgs()

// ---------------------------------------------------------------------------

DBG("equal()")

equal(   2+2, 4)
equal(   'abc'+'def', 'abcdef')
equal(   'abc   '.trim(), 'abc')
equal(   {a:1, b:2}, {b:2, a:1})

DBG("truthy()")

truthy(  42)
truthy(  'abc')
truthy(  '   ')

DBG("falsy()")

falsy(   false)
falsy(   undefined)
falsy(   null)
falsy(   '')

DBG("fails(func)")

fails(() => { throw new Error("bad") });

(() => {
	const func = (h: hash, key: string) => {
		assert((key !== '_'), "Cannot ask for '_'")
		return
	}
	fails(() => func({}, '_'))
}
	)()

DBG("succeeds(func)")

succeeds(() => { return 'me' })

DBG("iterEqual(iterable, array)")

iterEqual([1,2,3], [1,2,3])
iterEqual(range(5), [0,1,2,3,4]);

(() => {
	const gen = function*() {
		yield 'a'
		yield 'x'
		return
	}
	iterEqual(gen(), ['a', 'x'])
}
	)()

DBG("iterLike(iterable, array)")

iterLike([{a:1, b:2}], [{a:1}]);

(() => {
	const gen = function*() {
		yield {a:1, b:2}
		yield {c:3, d:4}
		return
	}
	iterLike(gen(), [
		{a:1},
		{d:4}
		])
}
	)()

DBG("matches()")

matches( "this is a long sentence", "long")
matches( "another 42 lines", /\d+/)
matches( "abcdef", "abc")

DBG("like()")

like(    {a:1, b:2, c:3}, {a:1, c:3})

DBG("strListLike()")

strListLike(['a','b'], ['a', 'b'])
strListLike(['b','a'], ['a', 'b'])

DBG("objListLike()")

objListLike([{a:1, b:2, c:3}], [{a:1, c:3}])

DBG("includes()")

includes(['a','b','c'], 'b')

DBG("includesAll()")

includesAll(['a','b','c'], ['a', 'c'])

DBG("isType()")

const dump = () => {
	return
}

isType('number', 23)
isType('string', 'abc')
isType('boolean', false)
isType('() => void', () => { return })
isType('() => void', dump)
isType('voidFunc', dump)
isType('TFilterFunc', (x: unknown) => { return true })

DBG("notType()")

notType('string', 23)

DBG("setDirTree()");

(() => {
	const lFileOps = setDirTree('test/t', `temp.txt
	abc
	def`, o`scaffold`)

	equal(lFileOps, [
			{ funcName: 'mkDir', path: 'test/t'},
			{ funcName: 'barf',  path: 'test/t/temp.txt', contents: "abc\ndef"}
			])
}
	)();

(() => {
	const lFileOps = setDirTree('test/t', `dummy.txt
	abc
	def
file1.txt
	abc
file2.txt
	abc
file3.flags.txt
	abc
/aaa
	/bbb
		newfile.txt
		oldfile.txt
		temp.txt
	/subdir1
/subdir2`, o`scaffold`)

	equal(lFileOps, [
			{ funcName: 'mkDir', path: 'test/t'},
			{ funcName: 'barf',  path: 'test/t/dummy.txt', contents: "abc\ndef"},
			{ funcName: 'barf',  path: 'test/t/file1.txt', contents: "abc"},
			{ funcName: 'barf',  path: 'test/t/file2.txt', contents: "abc"},
			{ funcName: 'barf',  path: 'test/t/file3.flags.txt', contents: "abc"},
			{ funcName: 'mkDir', path: 'test/t/aaa'},
			{ funcName: 'mkDir', path: 'test/t/aaa/bbb'},
			{ funcName: 'barf',  path: 'test/t/aaa/bbb/newfile.txt', contents: ''},
			{ funcName: 'barf',  path: 'test/t/aaa/bbb/oldfile.txt', contents: ''},
			{ funcName: 'barf',  path: 'test/t/aaa/bbb/temp.txt', contents: ''},
			{ funcName: 'mkDir', path: 'test/t/aaa/subdir1'},
			{ funcName: 'mkDir', path: 'test/t/subdir2'}
			])
}
	)()

DBG("type TFileOp")

isType('TFileOp', {
	funcName: 'mkDir',
	path: '/usr/bin'
	})
isType('TFileOp', {
	funcName: 'barf',
	path: '/usr/bin/deighan.txt'
	})
isType('TFileOp', {
	funcName: 'barf',
	path: '/usr/bin/temp.txt',
	contents: 'abc\ndef'
	})

DBG("fileOpsTable()");

(() => {
	const lFileOps: TFileOp[] = [
		{funcName: 'mkDir', path: '/usr/bin'},
		{funcName: 'barf',  path: '/usr/bin/deighan.txt'},
		{funcName: 'barf',  path: '/usr/bin/temp.txt', contents: 'abc\ndef'}
		]
	const block = fileOpsTable(lFileOps)
	equal(block, `--------------------------
${spaces(9)}FILE OPS
--------------------------
mkdir /usr/bin
barf  /usr/bin/deighan.txt
barf  /usr/bin/temp.txt
${spaces(6)}abc
${spaces(6)}def
--------------------------`)
}
	)()

//# sourceMappingURL=data:application/json;base64,