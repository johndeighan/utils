"use strict";
// civet.lib.test.civet

import {stripAnsiCode} from "@std/fmt/colors"
import {SourceFile} from 'npm:typescript'

import {defined, isHash} from 'datatypes'
import {o, s} from 'llutils'
import {getCmdArgs} from 'cmd-args'
import {DBG} from 'logger'
import {slurp, withExt} from 'fsys'
import {ts2ast, astAsString} from 'typescript'
import {
	civet2tsFile, civet2ts, civet2ast,
	} from 'civet'
import {stripSrcMap} from 'source-map'
import {
	equal, like, succeeds, fails, truthy, falsy,
	isType, setDirTree,
	} from 'unit-test'

getCmdArgs()

const fileName = "test-civet.civet"

// ---------------------------------------------------------------------------

setDirTree('src/test/civet', `${fileName}
	x := 42
`)

// ---------------------------------------------------------------------------

const testPath = `src/test/civet/${fileName}`

const civetCode = slurp(testPath)
const tsCode =  civet2ts(civetCode)

// --- source maps are stripped out before an ast is created
const ast1 = civet2ast(civetCode)
const ast2 = ts2ast(tsCode)
equal(ast1, ast2)

DBG("civet2ts(code)")

equal(civet2ts('x := 42', o`nomap`), `"use strict";
const x = 42`)

DBG("civet2tsFile(path)");

(() => {
	civet2tsFile(testPath, withExt(testPath, '.ts'), o`nomap`)
	const code = slurp(withExt(testPath, '.ts'))
	equal(code, `"use strict";
const x = 42`)
}
	)()

DBG("civet2ast(code)")

// isType 'SourceFile', ast1
// isType 'SourceFile', ast2

DBG("astAsString(hAST)")

equal(stripAnsiCode(astAsString(ts2ast('x := 42'))), s`kind: 308 (SourceFile)
statements:
	-
	❘  kind: 257 (LabeledStatement)
	❘  label:
	❘     kind: 80 (Identifier)
	❘     escapedText: x
	❘  statement:
	❘     kind: 245 (ExpressionStatement)
	❘     expression:
	❘     ❘  kind: 227 (BinaryExpression)
	❘     ❘  left:
	❘     ❘     kind: 80 (Identifier)
	❘     ❘  operatorToken:
	❘     ❘     kind: 64 (FirstAssignment)
	❘     ❘  right:
	❘     ❘     kind: 9 (FirstLiteralToken)
	❘     ❘     text: \\42
endOfFileToken:
	kind: 1 (EndOfFileToken)
text: x˳:=˳42
fileName: temp.ts
scriptKind: 3
isDeclarationFile: .false
nodeCount: 9
identifierCount: 2
symbolCount: 0
parseDiagnostics:
	-
	❘  file: .ref root
	❘  start: 3
	❘  length: 1
	❘  messageText: Expression˳expected.
	❘  category: 1
	❘  code: 1109`)

succeeds(() => civet2ast('x := 42'))

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQzpcXFVzZXJzXFxqb2huZFxcdXRpbHNcXHNyY1xcdGVzdFxcY2l2ZXQubGliLnRlc3QuY2l2ZXQudHN4Iiwic291cmNlcyI6WyJDOlxcVXNlcnNcXGpvaG5kXFx1dGlsc1xcc3JjXFx0ZXN0XFxjaXZldC5saWIudGVzdC5jaXZldCJdLCJtYXBwaW5ncyI6IjtBQUFBLHVCQUFzQjtBQUN0QixBQUFBO0FBQ0EsQUFBQSxNQUFNLENBQUMsQ0FBQyxhQUFhLENBQUMsQ0FBQyxJQUFJLENBQUMsaUJBQWlCO0FBQzdDLEFBQUEsQUFBQSxNQUFNLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxJQUFJLENBQUMsZ0JBQWdCO0FBQ3pDLEFBQUE7QUFDQSxBQUFBLEFBQUEsTUFBTSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLFdBQVc7QUFDekMsQUFBQSxBQUFBLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxTQUFTO0FBQzVCLEFBQUEsQUFBQSxNQUFNLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBVTtBQUNuQyxBQUFBLEFBQUEsTUFBTSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVE7QUFDMUIsQUFBQSxBQUFBLE1BQU0sQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNO0FBQ25DLEFBQUEsQUFBQSxNQUFNLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxXQUFXLENBQUMsQ0FBQyxJQUFJLENBQUMsWUFBWTtBQUM5QyxBQUFBLEFBQUEsTUFBTSxDQUFDLENBQUM7QUFDUixDQUFDLFlBQVksQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLFNBQVMsQ0FBQztBQUNuQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTztBQUNmLEFBQUEsQUFBQSxNQUFNLENBQUMsQ0FBQyxXQUFXLENB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QUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBRUMsQ0FBRyxDQUFBO0FBQ0osQUFBQTtBQUNBLEFBQUEsQUFBQSxRQUFRLENBQUEsQUFBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxDQUFBO0FBQ25DIiwibmFtZXMiOltdLCJzb3VyY2VzQ29udGVudCI6WyIjIGNpdmV0LmxpYi50ZXN0LmNpdmV0XHJcblxyXG5pbXBvcnQge3N0cmlwQW5zaUNvZGV9IGZyb20gXCJAc3RkL2ZtdC9jb2xvcnNcIlxyXG5pbXBvcnQge1NvdXJjZUZpbGV9IGZyb20gJ25wbTp0eXBlc2NyaXB0J1xyXG5cclxuaW1wb3J0IHtkZWZpbmVkLCBpc0hhc2h9IGZyb20gJ2RhdGF0eXBlcydcclxuaW1wb3J0IHtvLCBzfSBmcm9tICdsbHV0aWxzJ1xyXG5pbXBvcnQge2dldENtZEFyZ3N9IGZyb20gJ2NtZC1hcmdzJ1xyXG5pbXBvcnQge0RCR30gZnJvbSAnbG9nZ2VyJ1xyXG5pbXBvcnQge3NsdXJwLCB3aXRoRXh0fSBmcm9tICdmc3lzJ1xyXG5pbXBvcnQge3RzMmFzdCwgYXN0QXNTdHJpbmd9IGZyb20gJ3R5cGVzY3JpcHQnXHJcbmltcG9ydCB7XHJcblx0Y2l2ZXQydHNGaWxlLCBjaXZldDJ0cywgY2l2ZXQyYXN0LFxyXG5cdH0gZnJvbSAnY2l2ZXQnXHJcbmltcG9ydCB7c3RyaXBTcmNNYXB9IGZyb20gJ3NvdXJjZS1tYXAnXHJcbmltcG9ydCB7XHJcblx0ZXF1YWwsIGxpa2UsIHN1Y2NlZWRzLCBmYWlscywgdHJ1dGh5LCBmYWxzeSxcclxuXHRpc1R5cGUsIHNldERpclRyZWUsXHJcblx0fSBmcm9tICd1bml0LXRlc3QnXHJcblxyXG5nZXRDbWRBcmdzKClcclxuXHJcbmZpbGVOYW1lIDo9IFwidGVzdC1jaXZldC5jaXZldFwiXHJcblxyXG4jIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cclxuc2V0RGlyVHJlZSAnc3JjL3Rlc3QvY2l2ZXQnLCBcIlwiXCJcclxuXHQje2ZpbGVOYW1lfVxyXG5cdFx0eCA6PSA0MlxyXG5cclxuXHRcIlwiXCJcclxuXHJcbiMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblxyXG50ZXN0UGF0aCA6PSBcInNyYy90ZXN0L2NpdmV0LyN7ZmlsZU5hbWV9XCJcclxuXHJcbmNpdmV0Q29kZSA6PSBzbHVycCB0ZXN0UGF0aFxyXG50c0NvZGUgOj0gIGNpdmV0MnRzIGNpdmV0Q29kZVxyXG5cclxuIyAtLS0gc291cmNlIG1hcHMgYXJlIHN0cmlwcGVkIG91dCBiZWZvcmUgYW4gYXN0IGlzIGNyZWF0ZWRcclxuYXN0MSA6PSBjaXZldDJhc3QgY2l2ZXRDb2RlXHJcbmFzdDIgOj0gdHMyYXN0IHRzQ29kZVxyXG5lcXVhbCBhc3QxLCBhc3QyXHJcblxyXG5EQkcgXCJjaXZldDJ0cyhjb2RlKVwiXHJcblxyXG5lcXVhbCBjaXZldDJ0cygneCA6PSA0MicsIG8nbm9tYXAnKSwgXCJcIlwiXHJcblx0XCJ1c2Ugc3RyaWN0XCI7XHJcblx0Y29uc3QgeCA9IDQyXHJcblx0XCJcIlwiXHJcblxyXG5EQkcgXCJjaXZldDJ0c0ZpbGUocGF0aClcIlxyXG5cclxuKCgpID0+XHJcblx0Y2l2ZXQydHNGaWxlIHRlc3RQYXRoLCB3aXRoRXh0KHRlc3RQYXRoLCAnLnRzJyksIG8nbm9tYXAnXHJcblx0Y29kZSA6PSBzbHVycCB3aXRoRXh0KHRlc3RQYXRoLCAnLnRzJylcclxuXHRlcXVhbCBjb2RlLCBcIlwiXCJcclxuXHRcdFwidXNlIHN0cmljdFwiO1xyXG5cdFx0Y29uc3QgeCA9IDQyXHJcblx0XHRcIlwiXCJcclxuXHQpKClcclxuXHJcbkRCRyBcImNpdmV0MmFzdChjb2RlKVwiXHJcblxyXG4jIGlzVHlwZSAnU291cmNlRmlsZScsIGFzdDFcclxuIyBpc1R5cGUgJ1NvdXJjZUZpbGUnLCBhc3QyXHJcblxyXG5EQkcgXCJhc3RBc1N0cmluZyhoQVNUKVwiXHJcblxyXG5lcXVhbCBzdHJpcEFuc2lDb2RlKGFzdEFzU3RyaW5nKHRzMmFzdCgneCA6PSA0MicpKSksIHNcIlwiXCJcclxuXHRraW5kOiAzMDggKFNvdXJjZUZpbGUpXHJcblx0c3RhdGVtZW50czpcclxuXHRcdC1cclxuXHRcdOKdmCAga2luZDogMjU3IChMYWJlbGVkU3RhdGVtZW50KVxyXG5cdFx04p2YICBsYWJlbDpcclxuXHRcdOKdmCAgICAga2luZDogODAgKElkZW50aWZpZXIpXHJcblx0XHTinZggICAgIGVzY2FwZWRUZXh0OiB4XHJcblx0XHTinZggIHN0YXRlbWVudDpcclxuXHRcdOKdmCAgICAga2luZDogMjQ1IChFeHByZXNzaW9uU3RhdGVtZW50KVxyXG5cdFx04p2YICAgICBleHByZXNzaW9uOlxyXG5cdFx04p2YICAgICDinZggIGtpbmQ6IDIyNyAoQmluYXJ5RXhwcmVzc2lvbilcclxuXHRcdOKdmCAgICAg4p2YICBsZWZ0OlxyXG5cdFx04p2YICAgICDinZggICAgIGtpbmQ6IDgwIChJZGVudGlmaWVyKVxyXG5cdFx04p2YICAgICDinZggIG9wZXJhdG9yVG9rZW46XHJcblx0XHTinZggICAgIOKdmCAgICAga2luZDogNjQgKEZpcnN0QXNzaWdubWVudClcclxuXHRcdOKdmCAgICAg4p2YICByaWdodDpcclxuXHRcdOKdmCAgICAg4p2YICAgICBraW5kOiA5IChGaXJzdExpdGVyYWxUb2tlbilcclxuXHRcdOKdmCAgICAg4p2YICAgICB0ZXh0OiBcXFxcNDJcclxuXHRlbmRPZkZpbGVUb2tlbjpcclxuXHRcdGtpbmQ6IDEgKEVuZE9mRmlsZVRva2VuKVxyXG5cdHRleHQ6IHjLszo9y7M0MlxyXG5cdGZpbGVOYW1lOiB0ZW1wLnRzXHJcblx0c2NyaXB0S2luZDogM1xyXG5cdGlzRGVjbGFyYXRpb25GaWxlOiAuZmFsc2VcclxuXHRub2RlQ291bnQ6IDlcclxuXHRpZGVudGlmaWVyQ291bnQ6IDJcclxuXHRzeW1ib2xDb3VudDogMFxyXG5cdHBhcnNlRGlhZ25vc3RpY3M6XHJcblx0XHQtXHJcblx0XHTinZggIGZpbGU6IC5yZWYgcm9vdFxyXG5cdFx04p2YICBzdGFydDogM1xyXG5cdFx04p2YICBsZW5ndGg6IDFcclxuXHRcdOKdmCAgbWVzc2FnZVRleHQ6IEV4cHJlc3Npb27Ls2V4cGVjdGVkLlxyXG5cdFx04p2YICBjYXRlZ29yeTogMVxyXG5cdFx04p2YICBjb2RlOiAxMTA5XHJcblx0XCJcIlwiXHJcblxyXG5zdWNjZWVkcyAoKSA9PiBjaXZldDJhc3QoJ3ggOj0gNDInKVxyXG4iXX0=