"use strict";
// civet.lib.test.civet

import {SourceFile} from 'npm:typescript'

import {defined, isHash} from 'datatypes'
import {o, s} from 'llutils'
import {getCmdArgs} from 'cmd-args'
import {DBG} from 'logger'
import {slurp, withExt} from 'fsys'
import {ts2ast, pprintAst} from 'typescript'
import {
	civet2tsFile, civet2ts, civet2ast,
	} from 'civet'
import {stripSrcMap} from 'source-map'
import {
	equal, like, succeeds, fails, truthy, falsy,
	isType, setDirTree,
	} from 'unit-test'

getCmdArgs()

const fileName = "test-civet.civet"

// ---------------------------------------------------------------------------

setDirTree('src/test/civet', `${fileName}
	x := 42
`)

// ---------------------------------------------------------------------------

const testPath = `src/test/civet/${fileName}`

const civetCode = slurp(testPath)
const tsCode =  civet2ts(civetCode)

// --- source maps are stripped out before an ast is created
const ast1 = civet2ast(civetCode)
const ast2 = ts2ast(tsCode)
equal(ast1, ast2)

DBG("civet2ts(code)")

equal(civet2ts('x := 42', o`nomap`), `"use strict";
const x = 42`)

DBG("civet2tsFile(path)");

(() => {
	civet2tsFile(testPath, withExt(testPath, '.ts'), o`nomap`)
	const code = slurp(withExt(testPath, '.ts'))
	equal(code, `"use strict";
const x = 42`)
}
	)()

DBG("civet2ast(code)")

// isType 'SourceFile', ast1
// isType 'SourceFile', ast2

DBG("pprintAst(hAST)")

equal(pprintAst(ts2ast('x := 42')), s`kind: SourceFile
statements:
	-
		kind: LabeledStatement
		label:
			kind: Identifier
			escapedText: x
		statement:
			kind: ExpressionStatement
			expression:
				kind: BinaryExpression
				left:
					kind: Identifier
				operatorToken:
					kind: FirstAssignment
				right:
					kind: FirstLiteralToken
					text: \\42
endOfFileToken:
	kind: EndOfFileToken
text: x := 42
fileName: temp.ts
scriptKind: 3
isDeclarationFile: .false.
nodeCount: 9
identifierCount: 2
symbolCount: 0
parseDiagnostics:
	-
		file: .REF /.
		start: 3
		length: 1
		messageText: Expression expected.
		category: 1
		code: 1109`)

succeeds(() => civet2ast('x := 42'))

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQzpcXFVzZXJzXFxqb2huZFxcdXRpbHNcXHNyY1xcdGVzdFxcY2l2ZXQubGliLnRlc3QuY2l2ZXQudHN4Iiwic291cmNlcyI6WyJDOlxcVXNlcnNcXGpvaG5kXFx1dGlsc1xcc3JjXFx0ZXN0XFxjaXZldC5saWIudGVzdC5jaXZldCJdLCJtYXBwaW5ncyI6IjtBQUFBLHVCQUFzQjtBQUN0QixBQUFBO0FBQ0EsQUFBQSxNQUFNLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxJQUFJLENBQUMsZ0JBQWdCO0FBQ3pDLEFBQUE7QUFDQSxBQUFBLEFBQUEsTUFBTSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLFdBQVc7QUFDekMsQUFBQSxBQUFBLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxTQUFTO0FBQzVCLEFBQUEsQUFBQSxNQUFNLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBVTtBQUNuQyxBQUFBLEFBQUEsTUFBTSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVE7QUFDMUIsQUFBQSxBQUFBLE1BQU0sQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNO0FBQ25DLEFBQUEsQUFBQSxNQUFNLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxJQUFJLENBQUMsWUFBWTtBQUM1QyxBQUFBLEFBQUEsTUFBTSxDQUFDLENBQUM7QUFDUixDQUFDLFlBQVksQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLFNBQVMsQ0FBQztBQUNuQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTztBQUNmLEFBQUEsQUFBQSxNQUFNLENBQUMsQ0FBQyxXQUFXLENBQUMsQ0FBQyxJQUFJLENBQUMsWUFBWTtBQUN0QyxBQUFBLEFBQUEsTUFBTSxDQUFDLENBQUM7QUFDUixDQUFD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O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBRUMsQ0FBRyxDQUFBO0FBQ0osQUFBQTtBQUNBLEFBQUEsQUFBQSxRQUFRLENBQUEsQUFBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxDQUFBO0FBQ25DIiwibmFtZXMiOltdLCJzb3VyY2VzQ29udGVudCI6WyIjIGNpdmV0LmxpYi50ZXN0LmNpdmV0XHJcblxyXG5pbXBvcnQge1NvdXJjZUZpbGV9IGZyb20gJ25wbTp0eXBlc2NyaXB0J1xyXG5cclxuaW1wb3J0IHtkZWZpbmVkLCBpc0hhc2h9IGZyb20gJ2RhdGF0eXBlcydcclxuaW1wb3J0IHtvLCBzfSBmcm9tICdsbHV0aWxzJ1xyXG5pbXBvcnQge2dldENtZEFyZ3N9IGZyb20gJ2NtZC1hcmdzJ1xyXG5pbXBvcnQge0RCR30gZnJvbSAnbG9nZ2VyJ1xyXG5pbXBvcnQge3NsdXJwLCB3aXRoRXh0fSBmcm9tICdmc3lzJ1xyXG5pbXBvcnQge3RzMmFzdCwgcHByaW50QXN0fSBmcm9tICd0eXBlc2NyaXB0J1xyXG5pbXBvcnQge1xyXG5cdGNpdmV0MnRzRmlsZSwgY2l2ZXQydHMsIGNpdmV0MmFzdCxcclxuXHR9IGZyb20gJ2NpdmV0J1xyXG5pbXBvcnQge3N0cmlwU3JjTWFwfSBmcm9tICdzb3VyY2UtbWFwJ1xyXG5pbXBvcnQge1xyXG5cdGVxdWFsLCBsaWtlLCBzdWNjZWVkcywgZmFpbHMsIHRydXRoeSwgZmFsc3ksXHJcblx0aXNUeXBlLCBzZXREaXJUcmVlLFxyXG5cdH0gZnJvbSAndW5pdC10ZXN0J1xyXG5cclxuZ2V0Q21kQXJncygpXHJcblxyXG5maWxlTmFtZSA6PSBcInRlc3QtY2l2ZXQuY2l2ZXRcIlxyXG5cclxuIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuXHJcbnNldERpclRyZWUgJ3NyYy90ZXN0L2NpdmV0JywgXCJcIlwiXHJcblx0I3tmaWxlTmFtZX1cclxuXHRcdHggOj0gNDJcclxuXHJcblx0XCJcIlwiXHJcblxyXG4jIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cclxudGVzdFBhdGggOj0gXCJzcmMvdGVzdC9jaXZldC8je2ZpbGVOYW1lfVwiXHJcblxyXG5jaXZldENvZGUgOj0gc2x1cnAgdGVzdFBhdGhcclxudHNDb2RlIDo9ICBjaXZldDJ0cyBjaXZldENvZGVcclxuXHJcbiMgLS0tIHNvdXJjZSBtYXBzIGFyZSBzdHJpcHBlZCBvdXQgYmVmb3JlIGFuIGFzdCBpcyBjcmVhdGVkXHJcbmFzdDEgOj0gY2l2ZXQyYXN0IGNpdmV0Q29kZVxyXG5hc3QyIDo9IHRzMmFzdCB0c0NvZGVcclxuZXF1YWwgYXN0MSwgYXN0MlxyXG5cclxuREJHIFwiY2l2ZXQydHMoY29kZSlcIlxyXG5cclxuZXF1YWwgY2l2ZXQydHMoJ3ggOj0gNDInLCBvJ25vbWFwJyksIFwiXCJcIlxyXG5cdFwidXNlIHN0cmljdFwiO1xyXG5cdGNvbnN0IHggPSA0MlxyXG5cdFwiXCJcIlxyXG5cclxuREJHIFwiY2l2ZXQydHNGaWxlKHBhdGgpXCJcclxuXHJcbigoKSA9PlxyXG5cdGNpdmV0MnRzRmlsZSB0ZXN0UGF0aCwgd2l0aEV4dCh0ZXN0UGF0aCwgJy50cycpLCBvJ25vbWFwJ1xyXG5cdGNvZGUgOj0gc2x1cnAgd2l0aEV4dCh0ZXN0UGF0aCwgJy50cycpXHJcblx0ZXF1YWwgY29kZSwgXCJcIlwiXHJcblx0XHRcInVzZSBzdHJpY3RcIjtcclxuXHRcdGNvbnN0IHggPSA0MlxyXG5cdFx0XCJcIlwiXHJcblx0KSgpXHJcblxyXG5EQkcgXCJjaXZldDJhc3QoY29kZSlcIlxyXG5cclxuIyBpc1R5cGUgJ1NvdXJjZUZpbGUnLCBhc3QxXHJcbiMgaXNUeXBlICdTb3VyY2VGaWxlJywgYXN0MlxyXG5cclxuREJHIFwicHByaW50QXN0KGhBU1QpXCJcclxuXHJcbmVxdWFsIHBwcmludEFzdCh0czJhc3QoJ3ggOj0gNDInKSksIHNcIlwiXCJcclxuXHRraW5kOiBTb3VyY2VGaWxlXHJcblx0c3RhdGVtZW50czpcclxuXHRcdC1cclxuXHRcdFx0a2luZDogTGFiZWxlZFN0YXRlbWVudFxyXG5cdFx0XHRsYWJlbDpcclxuXHRcdFx0XHRraW5kOiBJZGVudGlmaWVyXHJcblx0XHRcdFx0ZXNjYXBlZFRleHQ6IHhcclxuXHRcdFx0c3RhdGVtZW50OlxyXG5cdFx0XHRcdGtpbmQ6IEV4cHJlc3Npb25TdGF0ZW1lbnRcclxuXHRcdFx0XHRleHByZXNzaW9uOlxyXG5cdFx0XHRcdFx0a2luZDogQmluYXJ5RXhwcmVzc2lvblxyXG5cdFx0XHRcdFx0bGVmdDpcclxuXHRcdFx0XHRcdFx0a2luZDogSWRlbnRpZmllclxyXG5cdFx0XHRcdFx0b3BlcmF0b3JUb2tlbjpcclxuXHRcdFx0XHRcdFx0a2luZDogRmlyc3RBc3NpZ25tZW50XHJcblx0XHRcdFx0XHRyaWdodDpcclxuXHRcdFx0XHRcdFx0a2luZDogRmlyc3RMaXRlcmFsVG9rZW5cclxuXHRcdFx0XHRcdFx0dGV4dDogXFxcXDQyXHJcblx0ZW5kT2ZGaWxlVG9rZW46XHJcblx0XHRraW5kOiBFbmRPZkZpbGVUb2tlblxyXG5cdHRleHQ6IHggOj0gNDJcclxuXHRmaWxlTmFtZTogdGVtcC50c1xyXG5cdHNjcmlwdEtpbmQ6IDNcclxuXHRpc0RlY2xhcmF0aW9uRmlsZTogLmZhbHNlLlxyXG5cdG5vZGVDb3VudDogOVxyXG5cdGlkZW50aWZpZXJDb3VudDogMlxyXG5cdHN5bWJvbENvdW50OiAwXHJcblx0cGFyc2VEaWFnbm9zdGljczpcclxuXHRcdC1cclxuXHRcdFx0ZmlsZTogLlJFRiAvLlxyXG5cdFx0XHRzdGFydDogM1xyXG5cdFx0XHRsZW5ndGg6IDFcclxuXHRcdFx0bWVzc2FnZVRleHQ6IEV4cHJlc3Npb24gZXhwZWN0ZWQuXHJcblx0XHRcdGNhdGVnb3J5OiAxXHJcblx0XHRcdGNvZGU6IDExMDlcclxuXHRcIlwiXCJcclxuXHJcbnN1Y2NlZWRzICgpID0+IGNpdmV0MmFzdCgneCA6PSA0MicpXHJcbiJdfQ==