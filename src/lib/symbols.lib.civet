# symbols.lib.civet

import {
	undef, defined, notdefined, assert, croak,
	hash, hashof, isEmpty, nonEmpty,
	} from 'datatypes'
import {
	pass, OL, ML, o, getOptions, keys,
	} from 'llutils'
import {resetOneIndent} from 'indent'
import {LOG, DBG, DBGVALUE, ERR} from 'logger'
import {
	TPLLToken, TTokenGenerator, allTokensInBlock,
	} from 'pll'
import {isFile, slurp} from 'fsys'

/**
 * @module symbols - locate common symbols
 *    parses a file (default: src/.symbols) that looks like:
 *       src/lib/indent.lib.ts
 *          oneIndent resetOneIndent indentLevel
 *          lineDesc splitLine indented
 *       src/lib/fs.lib.ts
 *          isFile isDir
 *          fileExt withExt
 *
 *    and implements function:
 *       sourceLib := (symbol: string): string?
 */

# --- not exported!

# --- {<sym>: <lib>, ...}
symbolsPath := 'src/.symbols'

# --- holds symbols in symbolsPath,
#     but only loaded when needed
#     and only if file exists
symbolMap := new Map<string,string>()

# ---------------------------------------------------------------------------

export loadSymbols := (
		block: string
		aMap = new Map<string,string>()
		hOptions: hash={}
		): Map<string,string> =>

	DBG "in loadSymbols()"

	# --- Check if libraries actually exist
	type opt = {
		checkFiles: boolean
		}
	{checkFiles} := getOptions<opt> hOptions, {
		checkFiles: false
		}

	let level = 0   # --- symGen must know the current level

	symGen: TTokenGenerator := (line: string) ->

		if (level == 0)
			yield {kind: 'lib', str: line}
		else if (level == 1)
			for str of line.split(/\s+/)
				yield {kind: 'symbol', str}
		else
			ERR "level = #{level}"
			croak "level = #{level}"
		return

	let curLib: string? = undef
	for {kind, str} of allTokensInBlock(block, symGen)
		DBG "TOKEN: #{kind}"
		switch kind
			when 'indent'
				level += 1
			when 'undent'
				level -= 1
			when 'lib'
				DBG "Set curLib to #{OL(str)}"
				curLib = str
			when 'symbol', 'guard'
				if defined(str)
					if (level == 0)
						if checkFiles
							assert isFile(str), "No such file: #{str}"
						curLib = str
					else if defined(curLib)
						DBG "ADD #{str} from #{curLib}"
						aMap.set str, curLib
					else
						croak "curLib empty at level > 0"
				else
					croak "undefined str!"
			else
				croak "Unknown kind: #{kind}"
	resetOneIndent()
	return aMap

# ---------------------------------------------------------------------------

export sourceLib := (
		symbol: string
		m: Map<string,string> = symbolMap  # use global symbolMap by default
		): string? =>

	if (m == symbolMap) && (symbolMap.size == 0)
		contents := slurp(symbolsPath)
		loadSymbols(contents, symbolMap, o"checkFiles")
	return m.get(symbol)

# ---------------------------------------------------------------------------

export libsAndSymbols := (
		lSymbols: string[]
		): hashof<string[]> =>

	if (symbolMap.size == 0) && isFile(symbolsPath)
		contents := slurp(symbolsPath)
		loadSymbols(contents, symbolMap, o'checkFiles')

	hLibs: hashof<string[]> := {}
	for sym of lSymbols
		srcLib := sourceLib(sym)
		if defined(srcLib)
			if (srcLib in hLibs)
				hLibs[srcLib].push sym
			else
				hLibs[srcLib] = [sym]
	return hLibs

# ---------------------------------------------------------------------------

export getNeededImportStmts := (
		lSymbols: string[]
		): string[] =>

	DBG "CALL getNeededImportStmts(#{OL(lSymbols)})"
	hLibs := libsAndSymbols(lSymbols)
	DBGVALUE 'hLibs', hLibs
	lStmts := for lib of keys(hLibs)
		lSyms := hLibs[lib]
		strSyms := lSyms.join(', ')
		"import {#{strSyms}} from '#{lib}';"
	return lStmts
