/**
 * unit-test - provides functions for use in unit tests
 * available tests:
 *    equal
 *    truthy
 *    falsy
 *    fails
 *    succeeds
 *    matches
 *    like
 *    codeLike
 *    strListLike
 *    objListLike
 *    includes
 *    includesAll
 *
 * @module
 */

# unit-test.lib.civet

import {
	assert, assertEquals, assertNotEquals, assertObjectMatch,
	assertStringIncludes, assertMatch, assertArrayIncludes,
	} from '@std/assert'

import {normalizeCode} from './typescript.lib.ts'
import {
	undef, defined, notdefined, isEmpty, nonEmpty,
	array, arrayof, isArray, isHash, isString, hash,
	hashof, isIterable, deepEqual, hashLike,
	TObjCompareFunc, TObjLikeFunc, TToStringFunc,
	} from './datatypes.lib.ts'
import {pass, stringify, OL, keys} from './llutils.lib.ts'
import {sourceLib, getNeededImportStmts} from './symbols.lib.ts'
import {typeCheck} from './exec.lib.ts'
import {
	pushLogLevel, popLogLevel,
	DBG, LOG, LOGVALUE, DBGVALUE, INDENT, UNDENT,
	} from './logger.lib.ts'
import {getMyOutsideCaller} from './v8-stack.lib.ts'

# ---------------------------------------------------------------------------

/**
 * Generate a test name using the source line number
 */

getTestName := (): string =>

	pushLogLevel 'silent'
	frame := getMyOutsideCaller()
	line := (frame == undef) ? 0 : frame.line
	popLogLevel()
	DBG "TEST NAME: line #{line}"
	return "line #{line}"

# ---------------------------------------------------------------------------

/**
 * In a unit test, checks if  value is deeply equal to
 * the expected value. Reports line number of the test.
 *
 * @param {any} value - any JavaScript value
 * @param {any} expected - any JavaScript value
 * @returns {void} - nothing
 *
 * @example
 * ```js
 * equal 2+2, 4
 * ```
 * This test will pass.
 */

export equal := (value: any, expected: any) : void =>

	name := getTestName()
	DBG "equal ?, #{stringify(expected)} (#{name})"
	Deno.test name, () => assertEquals(value, expected)
	return

# ---------------------------------------------------------------------------

/**
 * In a unit test, tests if value is truthy
 * Reports line number of the test.

 * @param {any} value - any JavaScript value
 * @returns {void} - nothing
 *
 * @example
 * ```js
 * truthy isString('abc')
 * ```
 * This test will pass.
 */

export truthy := (value: any): void =>

	name := getTestName()
	DBG "truthy #{stringify(value)} (#{name})"
	Deno.test name, () => assert value
	return

# ---------------------------------------------------------------------------

/**
 * In a unit test, tests if value is falsy
 * Reports line number of the test.
 *
 * @param {any} value - any JavaScript value
 * @returns {void} - nothing
 *
 * @example
 * ```js
 * falsy isString(42)
 * ```
 * This test will pass.
 */

export falsy := (value: any): void =>

	name := getTestName()
	DBG "falsy #{stringify(value)} (#{name})"
	Deno.test name, () => assert (not value)
	return

# ---------------------------------------------------------------------------

/**
 * In a unit test, tests if calling the provided function
 * throws an exception. Reports line number of the test.
 *
 * @param {any => any} func - any JavaScript function
 * @returns {void} - nothing
 *
 * @example
 * ```js
 * fails () => throw new Error('bad')
 * ```
 * This test will pass.
 */

export fails := (func: () => void): void =>

	pushLogLevel 'silent'       # --- silence any errors generated
	name := getTestName()
	DBG "fails <func> (#{name})"
	Deno.test name, () =>
		try
			func()
			throw new Error("Test Failure - function succeeds!!!")
		catch err
			pass()

	popLogLevel()
	return

# ---------------------------------------------------------------------------

/**
 * In a unit test, tests if calling the provided function
 * runs without throwing an exception.
 * Reports line number of the test.
 *
 * @param {any => any} func - any JavaScript function
 * @returns {void} - nothing
 *
 * @example
 * ```js
 * succeeds () => return 42
 * ```
 * This test will pass.
 */

export succeeds := (func: () => void): void =>

	assert (typeof func == 'function'), "test succeeds() passed non-function"
	name := getTestName()
	DBG "succeeds <func> (#{name})"
	Deno.test name, () =>
		try
			func()
		catch err
			# @ts-ignore
			msg := err.message
			throw new Error("FAIL - func throws (#{msg})")
	return

# ---------------------------------------------------------------------------

export iterEqual := (iter: Iterable<any>, expected: any[]) =>

	name := getTestName()
	DBG "iterEqual ?, #{stringify(expected)} (#{name})"
	Deno.test name, () => assertEquals Array.from(iter), expected
	return

# ---------------------------------------------------------------------------

export iterLike := (iter: Iterable<hash>, expected: hash[]) =>

	name := getTestName()
	DBG "iterEqual ?, #{stringify(expected)} (#{name})"

	lItems := Array.from(iter)
	len := lItems.length
	Deno.test "#{name}/len", () => assertEquals len, expected.length
	for i of [0..len-1]
		# @ts-ignore
		Deno.test "#{name}/#{i}", () => assertObjectMatch lItems[i], expected[i]
	return

# ---------------------------------------------------------------------------

/**
 * In a unit test, tests a value, which must be a string,
 * matches either a substring or a regular expression.
 * Reports line number of the test.
 *
 * @param {any} value - any JavaScript value
 * @param {any} expected - any JavaScript value
 * @returns {void} - nothing
 *
 * @example
 * ```js
 * matches 'abcde', 'bce'
 * ```
 * This test will pass.
 *
 * @example
 * ```js
 * matches 'aabbcc', /a+b+c+/
 * ```
 * This test will pass.
 */

export matches := (value: any, expected: any) =>

	assert isString(value), "Not a string: #{value}"
	name := getTestName()
	DBG "matches ?, #{stringify(expected)} (#{name})"
	if isString(expected)
		Deno.test name, () => assertStringIncludes value, expected
	else if (expected instanceof RegExp)
		Deno.test name, () => assertMatch value, expected
	else
		Deno.test name, () => assert false
	return

# ---------------------------------------------------------------------------

/**
 * In a unit test, tests if one hash matches another hash.
 * the first hash must have all the properties in the second hash,
 * but extra properties are allowed.
 * Reports line number of the test.
 *
 * @param {hash} value - any JavaScript object
 * @param {hash} expected - any JavaScript object
 * @returns {void} - nothing
 *
 * @example
 * ```js
 * like {a:1, b:2, c:3}, {a:1, c:3}
 * ```
 * This test will pass.
 */

export like := (value: hash?, expected: hash): void =>

	name := getTestName()
	DBG "like ?, #{stringify(expected)} (#{name})"
	if notdefined(value)
		Deno.test name, () => assertEquals value, undef
	else
		Deno.test name, () => assertObjectMatch value, expected
	return

# ---------------------------------------------------------------------------

export codeLike := (value: string, expected: string): void =>

	name := getTestName()
	DBG "codeLike ?, #{stringify(expected)} (#{name})"
	Deno.test name, () =>
		assertEquals normalizeCode(value), normalizeCode(expected)
	return

# ---------------------------------------------------------------------------

export strListLike := (
		value: string[]
		expected: string[]
		): void =>

	name := getTestName()
	DBG "strListLike ?, #{stringify(expected, {trunc: 64})}"

	len := value.length
	Deno.test "#{name}/len", () => assertEquals len, expected.length

	if (len == 0)
		return

	lValues := value.toSorted()
	lExpected := expected.toSorted()
	for i of [0..len-1]
		val := lValues[i]
		exp := lExpected[i]
		# @ts-ignore
		Deno.test "#{name}/#{i}", () => assertEquals(val, exp)
	return

# ---------------------------------------------------------------------------

/**
 * In a unit test, tests if each Object in an array matches
 * each object in another array. The 2 arrays must be of the
 * same length. If a function is passed as the 3rd parameter,
 * then each array is first sorted by using the function to
 * convert each object to a string, then sorting the array
 * using those strings.
 * A matching function can also be provided as the 4th argument.
 * By default, the function hashLike (from llutils.lib) is used.
 * Reports line number of the test.
 *
 * @param {array | object} value - any JavaScript value
 * @param {array | object} expected - any JavaScript value
 * @returns {void} - nothing
 *
 * @example
 * ```js
 * like {a:1, b:2, c:3}, {a:1, c:3}
 * ```
 * This test will pass.
 *
 * @example
 * ```js
 * like [{a:1, b:2, c:3}, {a:3, b:5, c:23}], [{a:1, b:2}]
 * ```
 * This test will pass.
 */

export objListLike := (
		value: hash[]
		expected: hash[]
		strFunc: TToStringFunc? = undef     # used for sorting if defined
		likeFunc: TObjLikeFunc = hashLike   # used for comparison
		): void =>

	name := getTestName()
	DBG "objListLike ?, #{stringify(expected, {trunc: 64})}"
	DBG "strFunc is #{OL(strFunc)}"

	len := value.length
	Deno.test "#{name}/len", () => assertEquals len, expected.length

	if (len == 0)
		return

	# --- create the arrays to actually be compared
	let lVals: hash[] = value

	if defined(strFunc)
		compareFunc: TObjCompareFunc := (a: hash, b: hash) =>
			str1 := strFunc(a)
			str2 := strFunc(b)
			return (str1 < str2) ? -1 : (str1 > str2) ? 1 : 0
		lVals = value.toSorted(compareFunc)

	nVals := lVals.length
	DBG "lVals is array of length #{nVals}"

	let lExp: hash[] = value
	if defined(strFunc)
		DBG "strFunc defined"
		compareFunc: TObjCompareFunc := (a: hash, b: hash) =>
			str1 := strFunc(a)
			str2 := strFunc(b)
			return (str1 < str2) ? -1 : (str1 > str2) ? 1 : 0
		lExp = expected.toSorted(compareFunc)

	nExp := lExp.length
	DBG "lExp is array of length #{nExp}"

	for i of [0..len-1]
		# @ts-ignore
		Deno.test "#{name}/#{i}", () => assert likeFunc(lVals[i], lExp[i])
	return

# ---------------------------------------------------------------------------

/**
 * In a unit test, tests a value, which must be an array,
 * includes the expected value.
 * Reports line number of the test
 *
 * @param {Array<any>} value - an array
 * @param {any} expected - any JavaScript value
 * @returns {void} - nothing
 *
 * @example
 * ```js
 * includes ['a', 'b', 'c'], 'b'
 * ```
 * This test will pass.
 */

export includes := (
		value: any,
		expected: any
		): void =>

	assert Array.isArray(value), "not an array: #{value}"
	name := getTestName()
	DBG "includes ?, #{stringify(expected)} (#{name})"
	Deno.test name, () => assertArrayIncludes(value, [expected])
	return

# ---------------------------------------------------------------------------

/**
 * In a unit test, tests a value, which must be an array,
 * includes all of the items in the expected array.
 * Reports line number of the test
 *
 * @param {Array<any>} value - an array
 * @param {Array<any>} expected - an array
 * @returns {void} - nothing
 *
 * @example
 * ```js
 * includesAll ['a', 'b', 'c'], ['b', 'c']
 * ```
 * This test will pass.
 */

export includesAll := (
		value: any,
		expected: any
		): void =>

	assert Array.isArray(value), "not an array: #{value}"
	assert Array.isArray(expected), "not an array: #{expected}"
	name := getTestName()
	DBG "includesAll ?, #{stringify(expected)} (#{name})"
	Deno.test name, () => assertArrayIncludes(value, expected)
	return

# ---------------------------------------------------------------------------

export getSymbolsFromType := (typeStr: string): string[] =>

	if lMatches := typeStr.match(///^
			([A-Za-z][A-Za-z0-9+]*)
			(?:
				\<
				([A-Za-z][A-Za-z0-9+]*)
				\>
				)?
			$///)
		[_, type, subtype] := lMatches
		return nonEmpty(subtype) ? [type, subtype] : [type]
	else if lMatches := typeStr.match(///^
			\( \)                         # ()
			\s*
			\= \>                         # =>
			\s*
			([A-Za-z][A-Za-z0-9+]*)       # an identifier
			$///)
		return [lMatches[1]]
	else
		return []

# ---------------------------------------------------------------------------

export getImportCode := (
		typeStr: string
		): string =>

	DBG "CALL getImportCode()"
	lSymbols := getSymbolsFromType(typeStr)
	DBGVALUE 'lSymbols', lSymbols
	if nonEmpty(lSymbols)
		lStmts := getNeededImportStmts(lSymbols)
		DBGVALUE 'lStmts', lStmts
		return lStmts.join('\n')
	else
		return ''

# ---------------------------------------------------------------------------

type splitResult = [string[], string]

export splitFuncStr := (
		valueStr: string
		): splitResult? =>

	if lMatches := valueStr.match(///^
			\(
			([^\)]*)
			\) \s* [\=\-]\>
			\s*
			(.*)
			$///)
		[_, strParms, strBody] := lMatches
		if isEmpty(strParms)
			return [[], strBody]
		else
			return [
				strParms.split(',').map((x) => x.trim())
				strBody
				]
	else
		return undef

# ---------------------------------------------------------------------------
# --- We need to add ':any' to any function parameters
#     that don't have an explicit type

export getTsCode := (
		typeStr: string
		valueStr: string
		): string =>

	DBGVALUE 'typeStr', typeStr
	DBGVALUE 'valueStr', valueStr
	assert defined(typeStr), "typeStr is undef"
	assert defined(valueStr), "valueStr is undef"
	result := splitFuncStr(valueStr)
	if defined(result)
		[lParms, body] := result
		addType := (parm: string) =>
			if (parm.indexOf(':') >= 0)
				return parm
			else
				return "#{parm}: any"
		parmStr := lParms.map(addType).join(', ')
		return "const x: #{typeStr} = (#{parmStr}) => #{body}"
	else
		return "const x: #{typeStr} = #{valueStr}"

# ---------------------------------------------------------------------------

export checkType := (
		value: any
		typeStr: string
		expectSuccess: boolean=true
		): string[] =>

	DBG "CALL checkType():", INDENT

	valueStr := stringify(value)

	tsCode := getTsCode typeStr, valueStr
	DBGVALUE 'tsCode', tsCode

	# --- check if we need to import the type
	importCode := getImportCode(typeStr)
	DBGVALUE 'importCode', importCode

	code := "#{importCode}\n#{tsCode}"
	lDiagnostics := typeCheck(code)
	if expectSuccess && nonEmpty(lDiagnostics)
		LOG "typeCheck FAILED:"
		LOG "CODE:"
		LOG code
		LOGVALUE 'lDiagnostics', lDiagnostics
	else if not expectSuccess && isEmpty(lDiagnostics)
		LOG "typeCheck SUCCEEDED:"
		LOG "CODE:"
		LOG code
	DBG UNDENT
	return lDiagnostics || []

# ---------------------------------------------------------------------------

/**
 * In a unit test, tests if a value is of a given type.
 * Relies on a .symbols file being correctly set up, and
 * it containing the type we're testing when testing
 * a non-buildin type
 *
 * @param {string} typeStr - a type as a string
 * @param {any} value - any JavaScript value
 * @returns {void} - nothing
 *
 * @example
 * ```js
 * isType 'string', 'abc'
 * ```
 * This test will pass.
 *
 * @example
 * ```js
 * isType 'number', 'abc'
 * ```
 * This test will fail.
 */

export isType := (
		typeStr: string
		value: any
		isOfType: Function?=undef
		): void =>

	name := getTestName()
	if defined(isOfType)
		DBG "Using type guard"
		Deno.test name, () => assert isOfType(value)
	else
		DBG INDENT
		lDiagnostics := checkType(value, typeStr, true)
		DBG UNDENT
		Deno.test name, () => assert isEmpty(lDiagnostics)
	return

# ---------------------------------------------------------------------------

/**
 * In a unit test, tests if a value is not of a given type.
 *
 * @param {string} typeStr - a type as a string
 * @param {any} value - any JavaScript value
 * @returns {void} - nothing
 *
 * @example
 * ```js
 * notType 'string', 'abc'
 * ```
 * This test will fail.
 *
 * @example
 * ```js
 * notType 'number', 'abc'
 * ```
 * This test will pass.
 */

export notType := (
		typeStr: string
		value: any
		isOfType: Function?=undef
		) =>

	name := getTestName()
	if defined(isOfType)
		DBG "Using type guard"
		Deno.test name, () => assert not isOfType(value)
	else
		DBG INDENT
		lDiagnostics := checkType(value, typeStr, false)
		DBG UNDENT
		Deno.test name, () => assert nonEmpty(lDiagnostics)
	return
