"use strict";
// to-nice.lib.civet

import {sep, centered} from 'base-utils'
import {
	assert, croak, undef, defined, notdefined, hash, hashof,
	isString, isArray, isClass, isRegExp, isObject, isPrimitive,
	isEmpty, nonEmpty,
	symbolName, className, functionName, regexpDef,
	} from 'datatypes'
import {
	getOptions, escapeStr, o, toBlock, spaces, mapEachLine,
	} from 'llutils'

export type TCompareFunc = (a: string, b: string) => number
export type TMapFunc = (key: string, x: unknown) => hashof<unknown>

// ---------------------------------------------------------------------------

export const alphaCompare: TCompareFunc = (
		a: string,
		b: string
		): number => {

	return (a < b) ? -1 : (a > b) ? 1 : 0
}

// ---------------------------------------------------------------------------
// --- any leading digit must be preceded by a single '\'

export const toNiceString = (str: string): string => {

	// --- escape spaces and \t, \n or \r

	const str1 = escapeStr(str)

	// --- precede with '\' if starts with digit, '.' or '-'

	const str2 = str1.match(/^[\d.-]/) ? `\\${str1}` : str1
	const str3 = str2.match(/^[^Ë³\s]+:/) ? `\\${str2}` : str2

	// --- check for leading or trailing spaces
	//     (TABs and NEWLINEs have already been escaped)
	//     (regex always matches)

	return str3
}

// ---------------------------------------------------------------------------

const pathadd = (
		path: string,
		key: string | number
		): string => {

	const newkey = (
		  (typeof key === 'number')
		? `[${key.toString()}]`
		: `/${key}`
		)
	return (path === '/') ? newkey : `${path}${newkey}`
}

// ---------------------------------------------------------------------------

// --- Returns a function that:
//        compares 2 strings based on their position in lSortKeys
//        else compares alphabetically

const getCompareFunc = (
		lSortKeys: string[]
		): TCompareFunc => {

	// --- Create map of key to number
	const h: hashof<number> = {}
	let i1 = 0;for (const key of lSortKeys) {const i = i1++;
		h[key] = i+1
	}

	return function(a: string, b: string): number {
		const aVal = h[a]
		const bVal = h[b]

		if (defined(aVal)) {
			if (defined(bVal)) {
				// --- compare numerically
				return (aVal < bVal) ? -1 : (aVal > bVal) ? 1 : 0
			}
			else {
				return -1
			}
		}
		else {
			if (defined(bVal)) {
				return 1
			}
			else {
				return alphaCompare(a, b)
			}
		}
	}
}

// ---------------------------------------------------------------------------

const indented = (block: string, oneIndent: string) => {

	return mapEachLine(block, (line) => oneIndent + line)
}

// ---------------------------------------------------------------------------

export const toNice = (
		x: unknown,
		hOptions: hash={},
		mapVisited: Map<object, string> = new Map<object, string>(),
		path: string = '/'
		): string => {

	// --- When recoverable, classes and functions
	//     include their definitions,
	//     with escaped chars

	type opt = {
		compact: boolean
		recoverable: boolean
		ignoreEmptyValues: boolean
		sortKeys: boolean
		sortFunc: (TCompareFunc | undefined)
		mapFunc: TMapFunc
		lInclude: ((string[]) | undefined)
		lExclude: ((string[]) | undefined)
		oneIndent: string
		}
	const {		compact,
			recoverable,
			ignoreEmptyValues,
			sortKeys,
			sortFunc,
			mapFunc,
			lInclude,
			lExclude,
			oneIndent
		} = getOptions<opt>(hOptions, {
		compact: false,
		recoverable: false,
		ignoreEmptyValues: false,
		sortKeys: false,
		sortFunc: undef,
		mapFunc: (key: string, x: unknown) => { return {[key]: x} },
		lInclude: undef,
		lExclude: undef,
		oneIndent: spaces(3)
		})

	// --- You can provide sortKeys or a sortFunc, but not both
	assert(!(sortKeys && defined(sortFunc)), "Bad options")

	switch(typeof x) {
		case 'undefined': {
			return '.undef.'
		}

		case 'boolean': {
			return x ? '.true.' : '.false.'
		}

		case 'number': {
			return (
				  Number.isNaN(x)    ? '.NaN.'
				: Number.isFinite(x) ? x.toString()
				: ((x < 0) ? '.neginfinity.' : '.infinity.')
				)
		}

		case 'bigint': {
			return x.toString() + 'n'
		}

		case 'string': {
			return toNiceString(x)
		}

		case 'symbol': {
			const name = symbolName(x)
			return name ? `.symbol ${name}.` : '.symbol.'
		}

		case 'function': {
			if (isClass(x)) {
				return `.class ${className(x)}.`
			}
			else {
				return `.function ${functionName(x)}.`
			}
		}

		case 'object': {
			if (x === null) {
				return '.null.'
			}

			if (isRegExp(x)) {
				return `.regexp ${escapeStr(regexpDef(x))}.`
			}

			// --- Check if object was previously visited
			const prevpath = mapVisited.get(x)
			if (prevpath) {
				return `.REF ${prevpath}.`
			}

			if (isArray(x)) {
				if (x.length === 0) {
					return '.[].'
				}

				mapVisited.set(x, path)
				const lLines = []
				let i2 = 0;for (const val of x) {const i = i2++;
					const block = toNice(
							val,
							hOptions,
							mapVisited,
							pathadd(path, i)
							)
					if (compact) {
						lLines.push(block)
					}
					else if (isPrimitive(val) || block.startsWith('.')) {
						lLines.push(`- ${block}`)
					}
					else {
						lLines.push('-')
						lLines.push(indented(block, oneIndent))
					}
				}
				if (compact) {
					return '[' + lLines.join(' ') + ']'
				}
				else {
					return toBlock(lLines)
				}
			}

			const lKeys = Object.keys(x)
			if (lKeys.length === 0) {
				return '.{}.'
			}

			const func: (TCompareFunc | undefined) = (
				  defined(sortFunc) ? sortFunc
				: defined(lInclude) ? getCompareFunc(lInclude)
				: sortKeys          ? alphaCompare
				:                     undef
				)

			const useKey = (key: unknown): boolean => {
				if (typeof key !== 'string') {
					return false
				}
				if (defined(lExclude) && lExclude.includes(key)) {
					return false
				}
				if (defined(lInclude) && !lInclude.includes(key)) {
					return false
				}
				return true
			}

			mapVisited.set(x, path)

			const lLines = []
			for (const key of (defined(func) ? lKeys.sort(func) : lKeys)) {
				const value = (x as hashof<unknown>)[key]
				if (useKey(key) && (!ignoreEmptyValues || nonEmpty(value))) {
					const hMapped = mapFunc(key, value)
					for (const [newkey, val] of Object.entries(hMapped)) {
						const block = toNice(
								val,
								hOptions,
								mapVisited,
								pathadd(path, key)
								)
						if (compact || isPrimitive(val) || block.startsWith('.')) {
							lLines.push(`${newkey}: ${block}`)
						}
						else {
							lLines.push(`${newkey}:`)
							lLines.push(indented(block, oneIndent))
						}
					}
				}
			}
			if (compact) {
				return '{' + lLines.join(' ') + '}'
			}
			else {
				return toBlock(lLines)
			}
		}
	}

	return `<Unknown object ${x}>`
}

// ---------------------------------------------------------------------------

export const OL = (x: unknown): string => {

	return toNice(x, {compact: true})
}

// ---------------------------------------------------------------------------

export const ML = (x: unknown): string => {

	return toNice(x, {compact: false})
}

// ---------------------------------------------------------------------------

export const DUMP = (
		x: unknown,
		label: (string | undefined) = undef,
		hOptions: hash = {},
		width: number = 64
		): void => {

	if (isEmpty(label)) {
		console.log(sep(width))
	}
	else if (defined(label)) {
		console.log(centered(label, width, '-'))
	}
	if (isString(x)) {
		console.log(x)
	}
	else {
		console.log(toNice(x, hOptions))
	}
	console.log(sep(width))
	return
}

//# sourceMappingURL=data:application/json;base64,