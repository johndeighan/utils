"use strict";
// to-nice.lib.civet

import {cyan, blue} from "@std/fmt/colors"

import {sep} from 'base-utils'
import {
	assert, croak, undef, defined, notdefined, hash, hashof,
	isString, isArray, isClass, isRegExp, isPrimitive,
	isEmpty, nonEmpty, assertIsHash, integer,
	symbolName, className, functionName, regexpDef,
	} from 'datatypes'
import {
	getOptions, escapeStr, o, toBlock, spaces, mapEachLine,
	} from 'llutils'

export type TCompareFunc = (a: string, b: string) => number

// ---------------------------------------------------------------------------

export const alphaCompare: TCompareFunc = (
		a: string,
		b: string
		): number => {

	return (a < b) ? -1 : (a > b) ? 1 : 0
}

// ---------------------------------------------------------------------------
// --- any leading digit must be preceded by a single '\'

export const toNiceString = (str: string): string => {

	// --- escape spaces and \t, \n or \r with unicode chars

	const str1 = escapeStr(str)

	// --- precede with '\' if starts with digit, '.' or '-'
	//                      or looks like a label

	const str2 = str1.match(/^[\d.-]/) ? `\\${str1}` : str1
	const str3 = str2.match(/^[^˳\s]+:/) ? `\\${str2}` : str2
	return str3
}

// ---------------------------------------------------------------------------

// --- Returns a function that:
//        compares 2 strings based on their position in lSortKeys
//        else compares alphabetically

const getCompareFunc = (
		lSortKeys: string[]
		): TCompareFunc => {

	// --- Create map of key to number
	const h: hashof<number> = {}
	let i1 = 0;for (const key of lSortKeys) {const i = i1++;
		h[key] = i+1
	}

	return function(a: string, b: string): number {
		const aVal = h[a]
		const bVal = h[b]

		if (defined(aVal)) {
			if (defined(bVal)) {
				// --- compare numerically
				return (aVal < bVal) ? -1 : (aVal > bVal) ? 1 : 0
			}
			else {
				return -1
			}
		}
		else {
			if (defined(bVal)) {
				return 1
			}
			else {
				return alphaCompare(a, b)
			}
		}
	}
}

// ---------------------------------------------------------------------------

export const rotpos = <T,>(lArray: T[], i: integer): T => {

	return lArray[i % lArray.length]
}

// ---------------------------------------------------------------------------

const indented = (block: string, oneIndent: string) => {

	return mapEachLine(block, (line) => oneIndent + line)
}

// ---------------------------------------------------------------------------

export type TPathIndex = string | number

export const buildPath = (lPath: TPathIndex[]): string => {

	let str = 'root'
	for (const item of lPath) {
		if (isString(item)) {
			str += `.${item}`
		}
		else {
			str += `[${item.toString()}]`
		}
	}
	return str
}

// ---------------------------------------------------------------------------

export type TMapFunc = (
	key: string,
	value: unknown,
	hParent: hash
	) => unknown

export const emptyMapFunc = (
		key: string,
		value: unknown,
		hParent: hash
		): unknown => {
	return undef
}

export const toNice = (
		x: unknown,
		hOptions: hash={},
		mapVisited: Map<object, string> = new Map<object, string>(),
		lPath: TPathIndex[] = []
		): string => {

	// --- When recoverable, classes and functions
	//     include their definitions,
	//     with escaped chars

	type opt = {
		compact: boolean
		recoverable: boolean
		ignoreEmptyValues: boolean
		sortKeys: boolean
		sortFunc: (TCompareFunc | undefined)
		mapFunc: TMapFunc
		lInclude: ((string[]) | undefined)
		lExclude: ((string[]) | undefined)
		lIndents: string[]
		}
	const {		compact,
			recoverable,
			ignoreEmptyValues,
			sortKeys,
			sortFunc,
			mapFunc,
			lInclude,
			lExclude,
			lIndents
		} = getOptions<opt>(hOptions, {
		compact: false,
		recoverable: false,
		ignoreEmptyValues: false,
		sortKeys: false,
		sortFunc: undef,
		mapFunc: emptyMapFunc,
		lInclude: undef,
		lExclude: undef,
		lIndents: ['   ', '❘  ']
		})

	// --- You can provide sortKeys or a sortFunc, but not both
	assert(!(sortKeys && defined(sortFunc)), "Bad options")

	switch(typeof x) {
		case 'undefined': {
			return '.undef'
		}

		case 'boolean': {
			return x ? '.true' : '.false'
		}

		case 'number': {
			return (
				  Number.isNaN(x)    ? '.NaN'
				: Number.isFinite(x) ? x.toString()
				: ((x < 0) ? '.neginf' : '.inf')
				)
		}

		case 'bigint': {
			return x.toString() + 'n'
		}

		case 'string': {
			return toNiceString(x)
		}

		case 'symbol': {
			const name = symbolName(x)
			return name ? `.symbol ${name}` : '.symbol'
		}

		case 'function': {
			if (isClass(x)) {
				return `.class ${className(x)}`
			}
			else {
				return `.function ${functionName(x)}`
			}
		}

		case 'object': {
			if (x === null) {
				return '.null'
			}

			if (isRegExp(x)) {
				return `.regexp ${escapeStr(regexpDef(x))}`
			}

			// --- Check if object was previously visited
			const prevpath = mapVisited.get(x)
			if (prevpath) {
				return `.ref ${prevpath}`
			}

			if (isArray(x)) {
				if (x.length === 0) {
					return '[]'
				}

				mapVisited.set(x, buildPath(lPath))
				const lLines = []
				let i2 = 0;for (const val of x) {const i = i2++;
					const block = toNice(
							val,
							hOptions,
							mapVisited,
							[...lPath, i]
							)
					if (compact) {
						lLines.push(block)
					}
					else if (isPrimitive(val) || block.startsWith('.') || isEmpty(val)) {
						lLines.push(`- ${block}`)
					}
					else {
						lLines.push('-')
						const oneIndent = rotpos<string>(lIndents, lPath.length)
						lLines.push(indented(block, oneIndent))
					}
				}
				if (compact) {
					return '[' + lLines.join(' ') + ']'
				}
				else {
					return toBlock(lLines)
				}
			}

			// --- It's an object
			if (x instanceof Set) {
				const results=[];for (const key of x.keys()) {
					results.push(toNice(key))
				};const lKeys =results
				return (
					  (lKeys.length === 0)
					? ".emptySet"
					: `.set ${lKeys.join(' ')}`
					)
			}

			if (x instanceof Map) {
				const results1=[];for (const [key, val] of x.entries()) {
					results1.push(`${toNice(key)}:: ${toNice(val)}`)
				};const lLines =results1
				return lLines.join('\n')
			}

			const lKeys = Object.keys(x)
			if (lKeys.length === 0) {
				return '{}'
			}

			const func: (TCompareFunc | undefined) = (
				  defined(sortFunc) ? sortFunc
				: defined(lInclude) ? getCompareFunc(lInclude)
				: sortKeys          ? alphaCompare
				:                     undef
				)

			const useKey = (key: unknown): boolean => {
				if (typeof key !== 'string') {
					return false
				}
				if (defined(lExclude) && lExclude.includes(key)) {
					return false
				}
				if (defined(lInclude) && !lInclude.includes(key)) {
					return false
				}
				return true
			}

			mapVisited.set(x, buildPath(lPath))

			assertIsHash(x)    // --- will allow us to index with any string

			const lLines = []
			for (const key of (defined(func) ? lKeys.sort(func) : lKeys).filter(useKey)) {
				const val = x[key]
				if (!ignoreEmptyValues || nonEmpty(val)) {
					const mapped = recoverable ? undef : mapFunc(key, val, x)
					const newval = mapped || val
					const block = isString(mapped) ? mapped : toNice(
							newval,
							hOptions,
							mapVisited,
							[...lPath, key]
							)
					if (
								compact
							|| (defined(newval) && isPrimitive(newval))
							|| block.startsWith('.')
							|| isEmpty(newval)
							) {
						lLines.push(`${key}: ${block}`)
					}
					else {
						lLines.push(`${key}:`)
						const oneIndent = rotpos<string>(lIndents, lPath.length)
						lLines.push(indented(block, oneIndent))
					}
				}
			}
			if (compact) {
				return '{' + lLines.join(' ') + '}'
			}
			else {
				return toBlock(lLines)
			}
		}
	}

	return `<Unknown object ${x}>`
}

// ---------------------------------------------------------------------------

export const OL = (x: unknown): string => {

	return toNice(x, {compact: true})
}

// ---------------------------------------------------------------------------

export const ML = (x: unknown): string => {

	return toNice(x, {compact: false})
}

// ---------------------------------------------------------------------------

export const DUMP = (
		x: unknown,
		label: (string | undefined) = undef,
		hOptions: hash = {}
		): void => {

	type opt = {
		width: number
		char: string
		}
	const {width, char} = getOptions<opt>(hOptions, {
		width: 64,
		char: '-'
		})

	console.log(sep(label, char, width))
	if (isString(x)) {
		if (nonEmpty(x)) {
			console.log(x)
		}
	}
	else {
		console.log(toNice(x, hOptions))
	}
	console.log(sep(undef, char, width))
	return
}

//# sourceMappingURL=data:application/json;base64,