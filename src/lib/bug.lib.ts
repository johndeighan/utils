"use strict";
// walker.lib.civet

// ---------------------------------------------------------------------------

export type TNodeInfo<T> = {
	node: T
	level: number
	parent: (T | undefined)
	}

type TConstructor<T> = new (...args: any[]) => T

// ---------------------------------------------------------------------------

export class Walker<T extends object = object> {

	// --- Keep track of nodes visited to avoid infinite loops

	setVisited: WeakSet<T> = new WeakSet<T>()

	// --- If constructor is provided, only objects with that
	//     constuctor will be yielded

	nodeConstructor: (TConstructor<T> | undefined)

	// ..........................................................

	constructor(nodeConstructor1: (TConstructor<T> | undefined) = undefined){this.nodeConstructor = nodeConstructor1;}

	// ..........................................................

	isNode(x: object): x is T {

		return (
			(typeof x === 'object')
				&& (
						!this.nodeConstructor
					|| (x instanceof this.nodeConstructor)
					)
			)
	}

	// ..........................................................

	useNode(x: object): boolean {

		return this.isNode(x)
	}

	// ..........................................................
	// GENERATOR

	*walk(
			item: unknown,
			parent: (T | undefined) = undefined,
			level: number = 0
			): Generator<TNodeInfo<T>, void, void> {

		if ((typeof item === 'object') && (item !== null) && this.useNode(item)) {
			yield {
				node: item as T,
				parent,
				level
				}
		}

		if (Array.isArray(item)) {
			for (const x of item) {
				yield* this.walk(x, parent, level+1)
			}
		}
		else if ((typeof item === 'object') && (item !== null)) {
			for (const x of Object.values(item)) {
				yield* this.walk(x, (this.isNode(item) ? item : parent), level+1)
			}
		}
	}
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQzpcXFVzZXJzXFxqb2huZFxcdXRpbHNcXHNyY1xcbGliXFxidWcubGliLmNpdmV0LnRzeCIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxqb2huZFxcdXRpbHNcXHNyY1xcbGliXFxidWcubGliLmNpdmV0Il0sIm1hcHBpbmdzIjoiO0FBQUEsbUJBQWtCO0FBQ2xCLEFBQUE7QUFDQSxBQUFBLDhFQUE2RTtBQUM3RSxBQUFBO0FBQ0EsQUFBQSxNQUFNLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUM1QixBQUFBLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztBQUNSLEFBQUEsQ0FBQyxLQUFLLENBQUMsQ0FBQyxNQUFNO0FBQ2QsQUFBQSxDQUFDLE1BQU0sQyxDLENBQUMsQUFBQyxDLFksQ0FBRTtBQUNYLENBQUMsQ0FBQztBQUNGLEFBQUE7QUFDQSxBQUFBLEFBQUEsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7QUFDaEQsQUFBQTtBQUNBLEFBQUEsOEVBQTZFO0FBQzdFLEFBQUE7QUFDQSxBQUFBLEFBQUEsTUFBTSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxNQUFNLEMsQ0FBRSxDQUFDLE1BQU0sQ0FBQyxDQUFBLENBQUE7QUFDOUMsQUFBQTtBQUNBLEFBQUEsQ0FBQywwREFBeUQ7QUFDMUQsQUFBQTtBQUNBLEFBQUEsQ0FBQyxVQUFVLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUMxQyxBQUFBO0FBQ0EsQUFBQSxDQUFDLHlEQUF3RDtBQUN6RCxBQUFBLENBQUMsaUNBQWdDO0FBQ2pDLEFB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SSxDQUFDLEdBQUcsQ0FBQSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRSxDQUFDLFFBQVEsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFFLENBQUMsSUFBSSxDQUFDLENBQUEsQ0FBQSxDQUFBO0FBQ3JELEFBQUEsR0FBRyxHQUFHLENBQUMsQ0FBQSxNQUFBLENBQUMsQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQSxDQUFBLENBQUE7QUFDL0IsQUFBQSxJQUFJLEtBQUssQ0FBQyxDQUFDLEksQ0FBQyxJQUFJLENBQUEsQUFBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDO0dBQUEsQztFQUFBLEM7Q0FBQSxDO0FBQUEsQ0FBQTtBQUM1RCIsIm5hbWVzIjpbXSwic291cmNlc0NvbnRlbnQiOlsiIyB3YWxrZXIubGliLmNpdmV0XHJcblxyXG4jIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cclxuZXhwb3J0IHR5cGUgVE5vZGVJbmZvPFQ+ID0ge1xyXG5cdG5vZGU6IFRcclxuXHRsZXZlbDogbnVtYmVyXHJcblx0cGFyZW50OiBUP1xyXG5cdH1cclxuXHJcbnR5cGUgVENvbnN0cnVjdG9yPFQ+ID0gbmV3ICguLi5hcmdzOiBhbnlbXSkgPT4gVFxyXG5cclxuIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuXHJcbmV4cG9ydCBjbGFzcyBXYWxrZXI8VCBleHRlbmRzIG9iamVjdCA9IG9iamVjdD5cclxuXHJcblx0IyAtLS0gS2VlcCB0cmFjayBvZiBub2RlcyB2aXNpdGVkIHRvIGF2b2lkIGluZmluaXRlIGxvb3BzXHJcblxyXG5cdHNldFZpc2l0ZWQ6IFdlYWtTZXQ8VD4gPSBuZXcgV2Vha1NldDxUPigpXHJcblxyXG5cdCMgLS0tIElmIGNvbnN0cnVjdG9yIGlzIHByb3ZpZGVkLCBvbmx5IG9iamVjdHMgd2l0aCB0aGF0XHJcblx0IyAgICAgY29uc3R1Y3RvciB3aWxsIGJlIHlpZWxkZWRcclxuXHJcblx0bm9kZUNvbnN0cnVjdG9yOiBUQ29uc3RydWN0b3I8VD4/XHJcblxyXG5cdCMgLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLlxyXG5cclxuXHRjb25zdHJ1Y3RvcihAbm9kZUNvbnN0cnVjdG9yOiBUQ29uc3RydWN0b3I8VD4/ID0gdW5kZWZpbmVkKVxyXG5cclxuXHQjIC4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi5cclxuXHJcblx0aXNOb2RlKHg6IG9iamVjdCk6IHggaXMgVFxyXG5cclxuXHRcdHJldHVybiAoXHJcblx0XHRcdCh0eXBlb2YgeCA9PSAnb2JqZWN0JylcclxuXHRcdFx0XHQmJiAoXHJcblx0XHRcdFx0XHRcdG5vdCBAbm9kZUNvbnN0cnVjdG9yXHJcblx0XHRcdFx0XHR8fCAoeCBpbnN0YW5jZW9mIEBub2RlQ29uc3RydWN0b3IpXHJcblx0XHRcdFx0XHQpXHJcblx0XHRcdClcclxuXHJcblx0IyAuLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uXHJcblxyXG5cdHVzZU5vZGUoeDogb2JqZWN0KTogYm9vbGVhblxyXG5cclxuXHRcdHJldHVybiBAaXNOb2RlKHgpXHJcblxyXG5cdCMgLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLlxyXG5cdCMgR0VORVJBVE9SXHJcblxyXG5cdHdhbGsoXHJcblx0XHRcdGl0ZW06IHVua25vd25cclxuXHRcdFx0cGFyZW50OiBUPyA9IHVuZGVmaW5lZFxyXG5cdFx0XHRsZXZlbDogbnVtYmVyID0gMFxyXG5cdFx0XHQpOiBHZW5lcmF0b3I8VE5vZGVJbmZvPFQ+LCB2b2lkLCB2b2lkPlxyXG5cclxuXHRcdGlmICh0eXBlb2YgaXRlbSA9PSAnb2JqZWN0JykgJiYgKGl0ZW0gIT0gbnVsbCkgJiYgQHVzZU5vZGUgaXRlbVxyXG5cdFx0XHR5aWVsZCB7XHJcblx0XHRcdFx0bm9kZTogaXRlbSBhcyBUXHJcblx0XHRcdFx0cGFyZW50XHJcblx0XHRcdFx0bGV2ZWxcclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0aWYgQXJyYXkuaXNBcnJheSBpdGVtXHJcblx0XHRcdGZvciB4IG9mIGl0ZW1cclxuXHRcdFx0XHR5aWVsZCogQHdhbGsgeCwgcGFyZW50LCBsZXZlbCsxXHJcblx0XHRlbHNlIGlmICh0eXBlb2YgaXRlbSA9PSAnb2JqZWN0JykgJiYgKGl0ZW0gIT0gbnVsbClcclxuXHRcdFx0Zm9yIHggb2YgT2JqZWN0LnZhbHVlcyhpdGVtKVxyXG5cdFx0XHRcdHlpZWxkKiBAd2FsayB4LCAoQGlzTm9kZShpdGVtKSA/IGl0ZW0gOiBwYXJlbnQpLCBsZXZlbCsxXHJcbiJdfQ==