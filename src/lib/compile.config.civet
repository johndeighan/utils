# compile.config.civet - default compiler configuration

import {compile as compileSvelte} from 'npm:svelte/compiler'

import {o} from 'llutils'
import {LOG, LOGVALUE, DBG, DBGVALUE} from 'logger'
import {
	withExt, rmFile, slurp, barf, patchFirstLine,
	TPathInfo, parsePath,
	} from 'fsys'
import {cmdSucceeds, execCmdSync} from 'exec'
import {civet2tsFile} from 'civet'
import {cielo2civetFile} from 'cielo'
import {installCmd, runUnitTestsFor} from 'compile'

# ---------------------------------------------------------------------------
# --- NOTES:
#        1. compiler doesn't need to check if the file exists
#        2. compiler doesn't need to check the file extension

export default new Object {

	hCompilers: {
		# --- keys are file extensions
		#     NOTE: compilers must be synchronous!!!

		'.svelte': {
			getOutPaths: (path: string) => [withExt(path, '.js')]
			tester: () => return true
			compiler: (path: string) =>
				jsPath := withExt(path, '.js')
				rmFile jsPath
				{js, warnings} := compileSvelte slurp(path), {
					customElement: true
					runes: true
					}
				{code, map} := js
				barf jsPath, code
				return 'compiled'
			}
		'.dot': {
			getOutPaths: (path: string) => [withExt(path, '.svg')]
			tester: () => cmdSucceeds('dot', ['--version'], o'quiet')
			compiler: (path: string) =>
				svgPath := withExt(path, '.svg')
				rmFile svgPath
				execCmdSync 'dot', ['-Tsvg', path]
				return 'compiled'
			}
		'.cielo': {
			# --- We produce an intermediate .civet file,
			#     but give it a purpose of 'temp'
			#     so it won't get compiled by the compile script
			getOutPaths: (path: string) => [withExt(path, '.ts')]
			tester: () =>
				# --- we need civet to be installed
				return cmdSucceeds('civet', ['--version'], o'quiet')
			compiler: (path: string) =>
				{fileName} := parsePath path

				civetPath := withExt(path, '.temp.civet')
				civetName := withExt(fileName, '.temp.civet')
				tsPath := withExt(path, '.ts')
				tsName := withExt(fileName, '.ts')

				rmFile civetPath    # --- needed?
				rmFile tsPath       # --- needed?

				cielo2civetFile path, civetPath
				civet2tsFile civetPath, tsPath

				patchFirstLine civetPath, fileName, civetName
				patchFirstLine tsPath, fileName, tsName

				return 'compiled'
			}
		'.civet': {
			getOutPaths: (path: string) => [withExt(path, '.ts')]
			tester: () =>
				return cmdSucceeds('civet', ['--version'], o'quiet')
			compiler: (path: string) =>
				{purpose, fileName} := parsePath path
				if defined(purpose) && ['temp','debug'].includes(purpose)
					return 'temp'

				tsPath := withExt(path, '.ts')
				tsName := withExt(fileName, '.ts')

				civet2tsFile path, tsPath
				patchFirstLine tsPath, fileName, tsName
				return 'compiled'
			}
		}

	hPostProcessors: {
		# --- Keys are a purpose

		'test': (path: string): void =>
			return

		'lib': (path: string): void =>
			{stub} := parsePath path
			if defined(stub)
				for {success} of runUnitTestsFor(stub)
					if not success
						WARN "Unit test #{path} failed"
			return

		'cmd': (path: string): void =>
			LOG "- installing command #{path}"
			installCmd path
			return
		}
	}
