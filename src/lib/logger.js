// logger.civet

import {assert} from '@std/assert'
import pathLib from 'path'
import {sprintf} from '@std/fmt/printf'
import {
	ConsoleHandler, FileHandler, setup, getLogger,
	} from "@std/log"

const defined = (x) => (x !== undefined) && (x !== null)

// ---------------------------------------------------------------------------

export const logFileName = "./logs/logs.txt"

export const sepdash = '-'.repeat(32)
export const sepeq   = '='.repeat(32)
const isSep = (str) => (str === sepdash) || (str === sepeq)

let indent = 0
const prefix = () => '   '.repeat(indent)

// --- Used when current logger is 'profile'
let prevMS = 0
let prevFileMS = 0
let headerOutput = false
let fileHeaderOutput = false

const hFileLabel = {
	DEBUG: 'D ',
	INFO:  'I ',
	WARN:  'W ',
	ERROR: 'ERROR: '
	}

const hConsoleLabel = {
	DEBUG: '',
	INFO:  '',
	WARN:  '',
	ERROR: ''
	}

// ---------------------------------------------------------------------------

export const hLoggerConfig = {
	handlers: {

		profile: new ConsoleHandler('DEBUG', {
			formatter: ((rec) => {
				const {datetime, msg, levelName} = rec
				const msStr = sprintf("%5d", datetime - prevMS)
				prevMS = datetime
				const label = hConsoleLabel[levelName]
				if (!headerOutput) {
					headerOutput = true
					return `ms\n-----\n${msStr} ${label}${prefix()}${msg}`
				}
				else {
					return `${msStr} ${label}${prefix()}${msg}`
				}
			}
				)
			}),

		pfile: new FileHandler('DEBUG', {
			filename: pathLib.resolve(logFileName),
			mode: 'a',
			useColors: false,
			formatter: (rec) => {
				const {datetime, msg, levelName} = rec
				const msStr = sprintf("%5d", datetime - prevFileMS)
				prevFileMS = datetime
				const label = hFileLabel[levelName]
				if (!fileHeaderOutput) {
					fileHeaderOutput = true
					return `ms\n-----\n${msStr} ${label}${prefix()}${msg}`
				}
				else {
					return `${msStr} ${label}${prefix()}${msg}`
				}
			}
			}),

		console: new ConsoleHandler('DEBUG', {
			formatter: ((rec) => {
				const {levelName, msg} = rec
				const label = hConsoleLabel[levelName]
				assert(defined(label), `No label for ${levelName}`)
				return `${label}${prefix()}${msg}`
			}
				)
			}),

		file: new FileHandler('DEBUG', {
			filename: logFileName,
			mode: 'a',
			useColors: false,
			formatter: (rec) => {
				const {levelName, msg} = rec
				if (isSep(msg)) {
					return msg
				}
				else {
					const label = hFileLabel[levelName]
					assert(defined(label), `No label for ${levelName}`)
					return `${label}${prefix()}${msg}`
				}
			}
				}),
	},

	// --- assign handlers to loggers
	//     must include:
	//        'profile', 'debug', 'info', 'warn', 'error', 'file' and 'silent'
	loggers: {
		profile: {
			level: "DEBUG",
			num: 1,
			handlers: ["profile", "pfile"]
			},
		debug: {
			level: "DEBUG",
			num: 2,
			handlers: ["console", "file"]
			},
		info: {
			level: "INFO",
			num: 3,
			handlers: ["console", "file"]
			},
		warn: {
			level: "WARN",
			num: 4,
			handlers: ["console", "file"]
			},
		error: {
			level: "ERROR",
			num: 5,
			handlers: ["console", "file"]
			},
		file: {
			level: "DEBUG",
			num: 6,
			handlers: ["file"]
			},
		silent: {
			level: "ERROR",
			num: 7,
			handlers: []
			}
		}
	}

await setup(hLoggerConfig)

export const INDENT = 'MOKaHenzkyZNbNWmUYijCNoqmIrIemFh'
export const UNDENT = 'MXrveSEaCkCfQjEgPdMIaEDFMIWMtHqz'
export const CLEAR  = '2EYCEu1v7xs0i4L3o5rAV1ZNLFkQYNHh'

// ---------------------------------------------------------------------------
// levels: profile, debug, info, warn, error, file, silent

class LoggerEx {

	constructor() {
		this.hConfig = hLoggerConfig
		const hLoggers = this.hConfig.loggers;this.hLoggers = hLoggers;
		const defLevel = Deno.env.get('DEFAULT_LOGGER') || 'info'
		this.check(defLevel)
		const lLoggerStack = [defLevel];this.lLoggerStack = lLoggerStack;
		let silent1 = false
	}

	curLevel() {
		return this.lLoggerStack.at(-1)
	}

	levelChanged() {
		switch(this.curLevel()) {
			case 'profile': {
				// --- NOTE: These are package global variables
				prevMS = prevFileMS = Date.now()
				headerOutput = false
				fileHeaderOutput = false;break;
			}
		}
		return
	}

	setLevel(level) {
		this.check(level)
		this.lLoggerStack[this.lLoggerStack.length-1] = level
		this.levelChanged()
		return
	}

	pushLevel(level) {
		this.check(level)
		this.lLoggerStack.push(level)
		this.levelChanged()
		return
	}

	popLevel() {
		assert((this.lLoggerStack.length > 0), "Empty logger stack")
		const level = this.lLoggerStack.pop()
		this.levelChanged()
		return level
	}

	isActive(level) {
		this.check(level)
		const curNum = this.hLoggers[this.curLevel()].num
		const lvlNum = this.hLoggers[level].num
		return (lvlNum >= curNum)
	}

	output(level, lItems) {
		if (this.isActive(level)) {
			for (const item of lItems) {
				switch(item) {
					case INDENT: {
						indent += 1;break;
					}
					case UNDENT: {
						indent = (indent===0) ? 0 : indent-1;break;
					}
					case CLEAR: {
						this.clearLog();break;
					}
					default: {
						getLogger(this.curLevel())[level](item)
					}
				}
			}
		}
		return
	}

	flush() {
		this.hConfig.handlers.file.flush()
		this.hConfig.handlers.pfile.flush()
		return
	}

	clearLog() {
		this.flush()
		Deno.writeTextFile(logFileName, '')
		prevMS = prevFileMS = Date.now()
		return
	}

	getLog() {
		this.flush()
		return Deno.readTextFileSync(logFileName).trim()
	}

	check(level) {
		assert(this.hLoggers[level], `Bad logger level: '${level}'`)
	}
}

export const logger = new LoggerEx()

// ---------------------------------------------------------------------------

export const DBG  = (...lItems) => logger.output('debug', lItems)
export const LOG  = (...lItems) => logger.output('info', lItems)
export const WARN = (...lItems) => logger.output('warn', lItems)
export const ERR  = (...lItems) => logger.output('error', lItems)

export const curLogLevel  = () => { return logger.curLevel() }
export const setLogLevel  = (level) => logger.setLevel(level)
export const pushLogLevel = (level) => logger.pushLevel(level)
export const popLogLevel  = () => { return logger.popLevel() }
export const clearLog     = () => { return logger.clearLog() }
export const getLog       = () => { return logger.getLog() }
export const flushLog     = () => logger.flush()

//# sourceMappingURL=data:application/json;charset=utf-8;base64,