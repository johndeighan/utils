"use strict";
// llutils.civet

type AutoPromise<T> = T extends Promise<unknown> ? T : Promise<T>;
import {sprintf} from "jsr:@std/fmt/printf"

import {
	undef, defined, notdefined,
	isHash, isArray, isNonEmptyString,
	isEmpty, nonEmpty, isString, isObject,
	integer, hash, voidFunc, optionspec,
	} from './datatypes.ts'

export const llutilsLoadTime: integer = Date.now()

// ---------------------------------------------------------------------------

export const sinceLoad = (datetime: integer=Date.now()) => {

	return (datetime - llutilsLoadTime)
}

// ---------------------------------------------------------------------------

export const sinceLoadStr = (datetime: (integer | undefined)=undef) => {

	return sprintf("%6d", sinceLoad(datetime))
}

// ---------------------------------------------------------------------------

/**
 * throws an exception with the provided message
 */

export const croak = (msg: string): never => {

	throw new Error(msg)
}

// ---------------------------------------------------------------------------

/**
 * Asserts that `cond` is true. If it isn't, an exception is
 * thrown with the given `msg`
 */

export const assert = (cond: boolean, msg: string="An error occurred"): void => {

	if (!cond) {
		croak(msg)
	}
	return
}

// ---------------------------------------------------------------------------

/**
 * Asserts that `cond` is true. If it isn't, an exception is
 * thrown with the given `msg`
 */

export const throwsError = (func: voidFunc, msg: string="Unexpected success"): void => {

	try {
		func()
		throw new Error(msg)
	}
	catch (err) {
		return
	}
}    // ignore error - it was expected

// ---------------------------------------------------------------------------

/**
 * Calling pass() does nothing
 */

export var pass = (): void => {}    // do nothing

// ---------------------------------------------------------------------------

export const deeplyEquals = (a: any, b: any): boolean => {

	if (a === b) {
		return true
	}

	if ((typeof a !== 'object') || (a === null) || (typeof b !== 'object') || (b === null)) {
		return false
	}

	const keysA = Object.keys(a)
	const keysB = Object.keys(b)

	if (keysA.length !== keysB.length) {
		return false
	}

	for (const key of keysA) {
		if (!b.hasOwnProperty(key) || !deeplyEquals(a[key], b[key])) {
			return false
		}
	}
	return true
}


// ---------------------------------------------------------------------------

/**
 * JSON stringifies x on one line
 * but displays both undefined and null as 'undef'
 */

export const OL = (x: any): string => {

	if (x === undef) {
		return 'undef'
	}
	else if (x === null) {
		return 'null'
	}
	else {
		return JSON.stringify(x)
	}
}

// ---------------------------------------------------------------------------

export const ML = (x: any): string => {

	if (x === undef) {
		return 'undef'
	}
	else if (x === null) {
		return 'null'
	}
	else {
		return JSON.stringify(x, null, 3)
	}
}

// ---------------------------------------------------------------------------

/**
 * Converts the given string to a hash
 * <word> becomes a key with a true value
 * !<word> becomes a keys with a false value
 * <word>=<string> becomes a key with value <string>
 *    - <string> must be quoted if it contains whitespace
 */

export const strToHash = (str: string): hash => {

	assert(isNonEmptyString(str), `Bad string: ${OL(str)}`)
	const h: hash = {}
	for (const word of str.split(/\s+/)) {
		let ref: string[] | null;if ((ref = word.match(/^(\!)?([A-Za-z][A-Za-z_0-9]*)(?:(=)(.*))?$/))) {const lMatches: string[] | null = ref;
			const [_, neg, ident, eqSign, str] = lMatches
			if (isNonEmptyString(eqSign)) {
				assert(notdefined(neg) || (neg === ''),
						"negation with string value")

				// --- check if str is a valid number
				const num = parseFloat(str)
				if (Number.isNaN(num)) {
					// --- TO DO: interpret backslash escapes
					h[ident] = str
				}
				else {
					h[ident] = num
				}
			}
			else if (neg) {
				h[ident] = false
			}
			else {
				h[ident] = true
			}
		}
		else {
			croak(`Invalid word ${OL(word)}`)
		}
	}
	return h
}

// ---------------------------------------------------------------------------

/**
 * Adds any keys in hDefaults that are missing in hOptions
 * to hOptions with their given values
 */

export const addDefaults = (hOptions: hash, hDefaults: hash): hash => {

	assert(isObject(hOptions), `hOptions not an object: ${OL(hOptions)}`)
	assert(isObject(hDefaults), `hDefaults not an object: ${OL(hDefaults)}`)

	// --- Fill in defaults for missing values
	for (const key of Object.keys(hDefaults)) {
		const value = hDefaults[key]
		if (!hOptions.hasOwnProperty(key) && defined(value)) {
			hOptions[key] = value
		}
	}
	return hOptions
}

// ---------------------------------------------------------------------------

/**
 * returns a hash of options with their values, using options
 * if it's a hash, or parsing options using strToHash() if
 * it's a string - adding any default values from hDefaults
 * if they're missing in the resulting hash
 */

export const getOptions = (options: optionspec={}, hDefaults: hash={}): hash => {

	const hOptions: hash = isString(options) ? strToHash(options) : options
	return addDefaults(hOptions, hDefaults)
}

// ---------------------------------------------------------------------------

/**
 * remove all keys from a hash that have either an empty name
 * or an empty value
 */

export const removeEmptyKeys = (h: hash): hash => {

	const hResult: hash = {}
	for (const key of keys(h)) {
		if (nonEmpty(key) && nonEmpty(h[key])) {
			hResult[key] = h[key]
		}
	}
	return hResult
}

// ---------------------------------------------------------------------------

/**
 * return an array of all own keys in a hash
 */

export const keys = (obj: hash, hOptions: optionspec={}): string[] => {

	const h = getOptions(hOptions, {
		except: []
		})

	let except = h.except

	if (isString(except)) {
		except = [except]
	}
	const lKeys: string[] = []
	for (const key of Object.keys(obj)) {
		if (!except.includes(key)) {
			lKeys.push(key)
		}
	}
	return lKeys
}

// ---------------------------------------------------------------------------

/**
 * returns true if either `h` is not defined, or if `h` is
 * a hash that includes all the keys provided
 */

export const hasKey = (h: hash, ...lKeys: string[]): boolean => {

	if (notdefined(h)) {
		return false
	}
	assert(isHash(h), `h not a hash: ${OL(h)}`)
	for (const key of lKeys) {
		assert(isString(key), `key not a string: ${OL(key)}`)
		if (!h.hasOwnProperty(key)) {
			return false
		}
	}
	return true
}

export const hasKeys = hasKey

// ---------------------------------------------------------------------------

/**
 * merges the provided objects into a new object
 * NOTE: none of the provided arguments are modified
 */

export const merge = (...lObjects: hash[]): hash => {

	return Object.assign({}, ...lObjects)
}

// ---------------------------------------------------------------------------

export const hit = (pct: number = 50): boolean => {

	return (100 * Math.random() < pct)
}

// ---------------------------------------------------------------------------
// --- ASYNC !

export const sleep = async (sec: number): AutoPromise<void> => {

	await new Promise((r) => setTimeout(r, 1000 * sec))
	return
}

// ---------------------------------------------------------------------------

/**
 * returns a string consisting of the given number
 * of space characters
 */

export const spaces = (n: number): string => {

	return " ".repeat(n)
}

// ---------------------------------------------------------------------------

/**
 * returns a string consisting of the given number
 * of TAB characters
 */

export const tabs = (n: number): string => {

	return "\t".repeat(n)
}

// ---------------------------------------------------------------------------

/**
 * rtrim - strip trailing whitespace
 */

export const rtrim = (line: string): string => {

	assert(isString(line), `not a string: ${typeof line}`)
	const lMatches = line.match(/^(.*?)\s+$/)
	return (lMatches === null) ? line : lMatches[1]
}

// ---------------------------------------------------------------------------

/**
 * Count the number of a specific character in a string
 */

export var countChars = (str: string, ch: string): number => {

	let count = 0
	let pos = -1
	while ((pos = str.indexOf(ch, pos+1)) !== -1) {
		count += 1
	}
	return count
}

// ---------------------------------------------------------------------------

/**
 * convert a multi-line string to an array
 * of single line strings
 */

export var blockToArray = (block: string): string[] => {

	assert(isString(block), `block is: ${OL(block)}`)
	if (isEmpty(block)) {
		return []
	}
	else {
		return block.split(/\r?\n/)
	}
}

// ---------------------------------------------------------------------------

/**
 * A string or string array
 */

export type blockSpec = string | string[]

/**
 * return an array as is, convert a multi-line string
 * to an array of single line strings
 */

export var toArray = (strOrArray: blockSpec): string[] => {

	if (Array.isArray(strOrArray)) {
		return strOrArray
	}
	else {
		return blockToArray(strOrArray)
	}
}

// ---------------------------------------------------------------------------

/**
 * convert an array of strings to a single multi-line string
 */

export var arrayToBlock = (lLines: string[]): string => {

	assert(isArray(lLines), `lLines is not an array: ${OL(lLines)}`)
	return lLines.filter((line) => defined(line)).join("\n")
}

// ---------------------------------------------------------------------------

/**
 * return a string as is, convert an array of strings
 * to a single multi-line string
 */

export var toBlock = (strOrArray: blockSpec): string => {

	if (isString(strOrArray)) {
		return strOrArray
	}
	else {
		return arrayToBlock(strOrArray)
	}
}

// ---------------------------------------------------------------------------

/**
 * replace these characters with single unicode chars:
 *    carriage return
 *    newline
 *    TAB
 *    space
 * Optionally, add a character to indicate a particular
 * position in the string
 * Valid options:
 *    offset - indicate position of offset
 *    poschar - char to use to indicate position
 */

export const escapeStr = (
	str: (string | undefined),
	hReplace: hash = {
		"\r": '←',
		"\n": '↓',
		"\t": '→',
		" ": '˳'
		},
	hOptions: optionspec = {}
	): string => {

	if (notdefined(str)) {
		return '<undefined>'
	}
	const {offset, poschar} = getOptions(hOptions, {
		offset: undef,
		poschar: '┊'
		})

	const lParts = []
	let i1 = 0;for (const ch of str.split('')) {const i = i1++;
		if (defined(offset) && (i === offset)) {
			lParts.push(poschar)
		}
		const newch = hReplace[ch]
		if (defined(newch)) {
			lParts.push(newch)
		}
		else {
			lParts.push(ch)
		}
	}
	if (offset === str.length) {
		lParts.push(poschar)
	}
	return lParts.join('')
}

// ---------------------------------------------------------------------------

/**
 * replace these characters with single unicode chars:
 *    carriage return
 *    TAB
 *    space
 * Optionally, add a character to indicate a particular
 * position in the string
 */

export var escapeBlock = (
	block: string,
	hReplace: hash = {
		"\r": '←',
		"\t": '→',
		" ": '˳'
		},
	hOptions: optionspec = {}
	): string => {

	return escapeStr(block, hReplace, hOptions)
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,