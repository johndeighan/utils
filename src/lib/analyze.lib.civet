# analyze.lib.civet

import {
	undef, allLinesIn, LOG, LOGVALUE, DBG, OL, DBGVALUE, croak,
	defined, notdefined, isEmpty, nonEmpty, assert, words, hashof,
	hash, isHash, integer, TextTable, hasKey, hasKeys, allMatches,
	} from './utils.lib.ts'

# ---------------------------------------------------------------------------

export type symbolKind = 'const'|'var'|'function'|'type'|'interface'|'enum'|'class'

export isSymbolKind := (x: any): x is symbolKind =>

	return ['const','var','function','type','interface','enum','class'].includes(x)

export type symbolDesc = {
	kind: symbolKind
	name: string
	guardFor?: string   # for functions
	numTests?: integer
	status?: string
	}

export isSymbolDesc := (x: any): x is symbolDesc =>

	if not isHash(x)
		return false
	if not hasKeys(x, 'name', 'kind', 'numTests')
		return false
	return (x.numTests >= 0)

export type testDesc = {
	kind: symbolKind
	name: string
	numTests: integer
	}

# ---------------------------------------------------------------------------

/**
 * parses line that begins with 'export',
 * except 'export {' or 'export type {'
 * returns a symbolDesc
 */

export parseExportLine := (
	line: string
	): symbolDesc? =>

	if line.match(///^
			export
			(?: \s+ type)?
			\s*
			\{
			///)
		DBG "ignoring line #{OL(line)}"
		return undef

	# --- check for functions
	if lMatches := line.match(///^
			export
			\s+
			([A-Za-z][A-Za-z0-9_]*)
			\s*
			(?:
				\:
				\s*
				[A-Za-z][A-Za-z0-9_]*
				\s*
				)?
			(\:? \=)
			\s*
			\(
			(.*)
			$///)
		[_, name, sym, rest] := lMatches
		if (sym == '=')
			LOG "WARNING: function #{name} uses '=', not ':='"
		if lGuard := rest.match(///
				\s
				is
				\s
				( [A-Za-z][A-Za-z0-9_]* (?: \[ \])? )
				///)
			return {
				name
				kind: 'function'
				guardFor: lGuard[1]
				}
		else
			return {
				name
				kind: 'function'
				}

	else if lMatches := line.match(///^
			export             # the word 'export'
			\s+                # whitespace
			(?:
				(let | var | const | type | function | interface | enum | class)
				\s+
				)?
			(
				[A-Za-z0-9_]+   # an identifier
				(?:
					\< [A-Za-z]+ \>
					)?
				)
			(.*)
			$///)
		DBG "LINE: #{OL(line)}"
		[_, knd, name, tail] := lMatches
		kind := (
			  notdefined(knd) ? 'const'
			: (knd == 'let')  ? 'var'
			:                  knd
			)
		if isSymbolKind(kind)
			lTailMatches := tail.match(///
						\s*             # optional whitespace
						\:? \=          # :=
						\s*             # optional whitespace
						\(              # start of arg list
							([A-Za-z0-9_]+)
							\:
							\s*
							any
							\)
						:
						\s*
						([A-Za-z0-9_]+)
						\s+ is \s+
						( [A-Za-z0-9_]+ (?: \[ \])? )
						///)
			if defined(lTailMatches)
				[_, var1, var2, typeName] := lTailMatches
				assert (var1 == var2),
						"var name mismatch in type guard"
				DBG "   EXPORT: #{OL(name)}, kind = #{kind}, guard = #{name}"
				return {
					name
					kind
					}
			else
				DBG "   EXPORT: #{OL(name)}, kind = #{kind}"
				return {
					name
					kind
					}
		else
			croak "Bad kind: #{kind}"
	else
		return undef

# ---------------------------------------------------------------------------
# ASYNC GENERATOR

/**
 * yields symbolDesc objects for a civet file
 */

export allExportsIn := (
		path: string
		): AsyncGenerator<symbolDesc,void,void> ->

	DBG "CALL allExportsIn()"

	# --- There might be multiple lines like 'export function X'
	#     due to function overloading

	setYielded := new Set()

	for await line of allLinesIn(path)
		h := parseExportLine(line)
		if defined(h) && not setYielded.has(h.name)
			yield h
			setYielded.add(h.name)
	return

# ---------------------------------------------------------------------------
# ASYNC GENERATOR

export allUnitTestsIn := (
		path: string
		): AsyncGenerator<testDesc,void,void> ->

	let lCurSymbols: testDesc[] = []
	let lineNum = 0
	for await line of allLinesIn(path)
		lineNum += 1
		if (line.indexOf('DBG ') == 0)

			DBG "LINE: '#{line}'"

			# --- Yield all current symbols, then reset array
			for sym of lCurSymbols
				yield sym
			lCurSymbols = []

			# --- process all quoted strings on line
			for [_, lq, desc, rq] of allMatches(line, ///
					(["'])
					([^"']*)
					(["'])
					///)
				assert (lq == rq), "Mismatched quotes"
				DBGVALUE 'desc', desc
				errMsg := "Bad unit test header #{OL(desc)} at #{path}:#{lineNum}"
				lMatches := desc.trim().match(///^
						(?:
							(
								  type
								| const
								| interface
								| enum
								| class
								| function
								)
							\s+
							)?
						([A-Za-z0-9_]+)   # an identifier
						(
							\(             # argument list
							.*
							\)
							)?
						(
							\<             # subtypes
							T
							\>
							)?
						(.*)
						$///)
				DBGVALUE "lMatches", lMatches
				if defined(lMatches)
					[_, knd, name, funcArgs, subTypes, rest] := lMatches
					assert isEmpty(rest),
								"#{errMsg} - nonempty rest"
					if isEmpty(funcArgs)
						assert nonEmpty(knd),
								"#{errMsg} - no kind or funcArgs"
					else
						assert (isEmpty(knd) || (knd == 'function')),
								"#{errMsg} - funcArgs + nonempty kind but not 'function'"
					kind := knd || 'function'
					fullName := defined(subTypes) ? "#{name}<T>" : name
					if isSymbolKind(kind)
						lCurSymbols.push {
							name: fullName
							kind
							numTests: 0
							}
					else
						croak "Bad kind: #{kind}"
				else
					LOG "#{errMsg} - no match"
		else
			if lMatches2 := line.match(///
					\b
					(
						  equal
						| truthy
						| falsy
						| fails
						| succeeds
						| matches
						| like
						| listLike
						| includes
						| includesAll
						| isType
						| notType
						)
					\b
					///)
				DBG "      - unit test #{lMatches2[1]}"
				for h of lCurSymbols
					h.numTests += 1

	# --- Yield any remaining symbols
	for sym of lCurSymbols
		yield sym
	return

# ---------------------------------------------------------------------------

/**
 * Returns an array of symbolDesc objects, including:
 * 	- objects in lExports that don't appear in lTests
 * 		with status = 'missing'
 * 	- objects in lTests that don't appear in lExports
 * 		with status = 'extra'
 */

export mergeAnalyses := (
		lExports: symbolDesc[],
		lTests: testDesc[]
		): symbolDesc[] =>

	# --- Keep track of all type guard names so we can
	#     remove those functions from the returned list

	lResult: symbolDesc[] := for sym of lExports
		{name, kind} := sym

		# --- find the corresponding testDesc, if any

		utsym := lTests.find((h) => (h.name == sym.name))
		if defined(utsym)
			{
				name
				kind
				numTests: utsym.numTests
				status: (utsym.numTests == 0) ? 'missing' : 'ok'
				}
		else
			{
				name
				kind
				numTests: 0
				status: 'missing'
				}

	# --- find tested symbols, not exported from library
	for sym of lTests
		{name, kind, numTests} := sym
		exsym := lExports.find((h) => (h.name == sym.name))
		if notdefined(exsym)
			lResult.push {
				name
				kind
				numTests
				status: 'extra'
				}

	# --- Filter out any functions which are type guards
	return lResult

# ---------------------------------------------------------------------------

/**
 * logs a table of number of unit tests for each symbol
 * returns number of missing tests
 */

export dumpSymbols := (
		label: string,
		lSymbols: symbolDesc[]
		): integer =>

	table := new TextTable('l l l r%d')
	table.title label
	table.fullsep()
	table.labels ['name','kind','guardFor','# tests']
	table.sep()
	let numMissing = 0
	for {name, kind, guardFor, numTests} of lSymbols
		if (numTests == 0)
			numMissing += 1
		if (kind == 'function')
			table.data [name, kind, guardFor, numTests || 'missing']
		else
			table.data [name, kind, guardFor, numTests || 'missing']
	console.log table.asString()
	return numMissing
