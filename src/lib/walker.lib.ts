"use strict";
// walker.lib.civet

import {
	undef, defined, notdefined, integer,
	isArray, isObject, isPrimitive,
	} from 'datatypes'
import {DBG} from 'logger'

// ---------------------------------------------------------------------------

type TIndex = string | number

export type TNodeInfo<T> = {
	node: T
	level: integer
	parent: (T | undefined)
	index?: TIndex
	}

// ---------------------------------------------------------------------------

export class Walker<T extends object = object> {

	// --- Keep track of nodes visited to avoid infinite loops
	setVisited: WeakSet<T> = new WeakSet<T>()

	// --- No constructor needed

	useNode(x: unknown): boolean {

		// --- false for null, array, RegExp, String, Number, Boolean
		return isObject(x)
	}

	isNode(x: unknown): x is T {

		return this.useNode(x)
	}

	filter(h: TNodeInfo<T>): boolean {

		// --- filter() is only called if isNode(h.node) is true
		return true
	}

	*walk(
			item: unknown,
			parent: (T | undefined) = undef,
			level: number = 0,
			index: ((string | number) | undefined) = undef
			): Generator<TNodeInfo<T>, void, void> {

		if (notdefined(item) || isPrimitive(item)) {
			return
		}

		if (this.isNode(item)) {
			DBG("NODE")
			yield {
				node: item,
				parent,
				level
				}
		}
		if (isArray(item)) {
			DBG("ARRAY")
			let i1 = 0;for (const x of item) {const i = i1++;
				yield* this.walk(x, (this.isNode(item) ? item : parent), level+1, i)
			}
		}
		else if (isObject(item)) {
			DBG("OBJECT")
			for (const [key, x] of Object.entries(item)) {
				yield* this.walk(x, (this.isNode(item) ? item : parent), level+1, key)
			}
		}
	}
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQzpcXFVzZXJzXFxqb2huZFxcdXRpbHNcXHNyY1xcbGliXFx3YWxrZXIubGliLmNpdmV0LnRzeCIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxqb2huZFxcdXRpbHNcXHNyY1xcbGliXFx3YWxrZXIubGliLmNpdmV0Il0sIm1hcHBpbmdzIjoiO0FBQUEsbUJBQWtCO0FBQ2xCLEFBQUE7QUFDQSxBQUFBLE1BQU0sQ0FBQyxDQUFDO0FBQ1IsQ0FBQyxLQUFLLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxPQUFPLENBQUM7QUFDckMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxXQUFXLENBQUM7QUFDaEMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFdBQVc7QUFDbkIsQUFBQSxBQUFBLE1BQU0sQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxRQUFRO0FBQzFCLEFBQUE7QUFDQSxBQUFBLDhFQUE2RTtBQUM3RSxBQUFBO0FBQ0EsQUFBQSxBQUFBLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsTUFBTTtBQUM3QixBQUFBO0FBQ0EsQUFBQSxBQUFBLE1BQU0sQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQzVCLEFBQUEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO0FBQ1IsQUFBQSxDQUFDLEtBQUssQ0FBQyxDQUFDLE9BQU87QUFDZixBQUFBLENBQUMsTUFBTSxDLEMsQ0FBQyxBQUFDLEMsWSxDQUFFO0FBQ1gsQUFBQSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsTUFBTTtBQUNmLENBQUMsQ0FBQztBQUNGLEFBQUE7QUFDQSxBQUFBLDhFQUE2RTtBQUM3RSxBQUFBO0FBQ0EsQUFBQSxBQUFBLE1BQU0sQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsTUFBTSxDLENBQUUsQ0FB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Q0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQztHQUFBLEM7RUFBQSxDQUFBO0FBQy9ELEFBQUEsRUFBRSxJQUFJLENBQUMsR0FBRyxDQUFBLFFBQVEsQ0FBQSxBQUFDLElBQUksQ0FBQSxDQUFBLENBQUEsQ0FBQTtBQUN2QixBQUFBLEdBQUcsR0FBRyxDQUFBLEFBQUMsUUFBUSxDQUFBO0FBQ2YsQUFBQSxHQUFHLEdBQUcsQ0FBQyxDQUFBLE1BQUEsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQSxDQUFBLENBQUE7QUFDdkMsQUFBQSxJQUFJLEtBQUssQ0FBQyxDQUFDLEksQ0FBQyxJQUFJLENBQUEsQUFBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDO0dBQUEsQztFQUFBLEM7Q0FBQSxDO0FBQUEsQ0FBQTtBQUNqRSIsIm5hbWVzIjpbXSwic291cmNlc0NvbnRlbnQiOlsiIyB3YWxrZXIubGliLmNpdmV0XG5cbmltcG9ydCB7XG5cdHVuZGVmLCBkZWZpbmVkLCBub3RkZWZpbmVkLCBpbnRlZ2VyLFxuXHRpc0FycmF5LCBpc09iamVjdCwgaXNQcmltaXRpdmUsXG5cdH0gZnJvbSAnZGF0YXR5cGVzJ1xuaW1wb3J0IHtEQkd9IGZyb20gJ2xvZ2dlcidcblxuIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxudHlwZSBUSW5kZXggPSBzdHJpbmcgfCBudW1iZXJcblxuZXhwb3J0IHR5cGUgVE5vZGVJbmZvPFQ+ID0ge1xuXHRub2RlOiBUXG5cdGxldmVsOiBpbnRlZ2VyXG5cdHBhcmVudDogVD9cblx0aW5kZXg/OiBUSW5kZXhcblx0fVxuXG4jIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG5leHBvcnQgY2xhc3MgV2Fsa2VyPFQgZXh0ZW5kcyBvYmplY3QgPSBvYmplY3Q+XG5cblx0IyAtLS0gS2VlcCB0cmFjayBvZiBub2RlcyB2aXNpdGVkIHRvIGF2b2lkIGluZmluaXRlIGxvb3BzXG5cdHNldFZpc2l0ZWQ6IFdlYWtTZXQ8VD4gPSBuZXcgV2Vha1NldDxUPigpXG5cblx0IyAtLS0gTm8gY29uc3RydWN0b3IgbmVlZGVkXG5cblx0dXNlTm9kZSh4OiB1bmtub3duKTogYm9vbGVhblxuXG5cdFx0IyAtLS0gZmFsc2UgZm9yIG51bGwsIGFycmF5LCBSZWdFeHAsIFN0cmluZywgTnVtYmVyLCBCb29sZWFuXG5cdFx0cmV0dXJuIGlzT2JqZWN0KHgpXG5cblx0aXNOb2RlKHg6IHVua25vd24pOiB4IGlzIFRcblxuXHRcdHJldHVybiBAdXNlTm9kZSB4XG5cblx0ZmlsdGVyKGg6IFROb2RlSW5mbzxUPik6IGJvb2xlYW5cblxuXHRcdCMgLS0tIGZpbHRlcigpIGlzIG9ubHkgY2FsbGVkIGlmIGlzTm9kZShoLm5vZGUpIGlzIHRydWVcblx0XHRyZXR1cm4gdHJ1ZVxuXG5cdHdhbGsoXG5cdFx0XHRpdGVtOiB1bmtub3duXG5cdFx0XHRwYXJlbnQ6IFQ/ID0gdW5kZWZcblx0XHRcdGxldmVsOiBudW1iZXIgPSAwXG5cdFx0XHRpbmRleDogKHN0cmluZyB8IG51bWJlcik/ID0gdW5kZWZcblx0XHRcdCk6IEdlbmVyYXRvcjxUTm9kZUluZm88VD4sIHZvaWQsIHZvaWQ+XG5cblx0XHRpZiBub3RkZWZpbmVkKGl0ZW0pIHx8IGlzUHJpbWl0aXZlKGl0ZW0pXG5cdFx0XHRyZXR1cm5cblxuXHRcdGlmIEBpc05vZGUgaXRlbVxuXHRcdFx0REJHIFwiTk9ERVwiXG5cdFx0XHR5aWVsZCB7XG5cdFx0XHRcdG5vZGU6IGl0ZW1cblx0XHRcdFx0cGFyZW50XG5cdFx0XHRcdGxldmVsXG5cdFx0XHRcdH1cblx0XHRpZiBpc0FycmF5KGl0ZW0pXG5cdFx0XHREQkcgXCJBUlJBWVwiXG5cdFx0XHRmb3IgeCxpIG9mIGl0ZW1cblx0XHRcdFx0eWllbGQqIEB3YWxrIHgsIChAaXNOb2RlKGl0ZW0pID8gaXRlbSA6IHBhcmVudCksIGxldmVsKzEsIGlcblx0XHRlbHNlIGlmIGlzT2JqZWN0IGl0ZW1cblx0XHRcdERCRyBcIk9CSkVDVFwiXG5cdFx0XHRmb3IgW2tleSwgeF0gb2YgT2JqZWN0LmVudHJpZXMoaXRlbSlcblx0XHRcdFx0eWllbGQqIEB3YWxrIHgsIChAaXNOb2RlKGl0ZW0pID8gaXRlbSA6IHBhcmVudCksIGxldmVsKzEsIGtleVxuIl19