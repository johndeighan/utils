"use strict";
// walker.lib.civet

import {
	undef, defined, notdefined, integer,
	isArray, isObject, isPrimitive,
	} from 'datatypes'
import {OL} from 'llutils'
import {DBG} from 'logger'

// ---------------------------------------------------------------------------

type TIndex = string | number

export type TNodeInfo<T> = {
	node: T
	level: integer
	parent: (T | undefined)
	index?: TIndex
	}

// ---------------------------------------------------------------------------

export class Walker<T extends object = object> {

	// --- Keep track of nodes visited to avoid infinite loops
	setVisited: WeakSet<T> = new WeakSet<T>()

	// --- If className is provided, only objects with that
	//     constuctor name will be returned

	className: (string | undefined)

	// ..........................................................

	constructor(className1: (string | undefined) = undef){this.className = className1;}

	// ..........................................................

	isNode(x: object): x is T {

		return (
			isObject(x)  // not undef, null, regex, array
				&& (
						!this.className
					|| (x?.constructor?.name === this.className)
					)
			)
	}

	// ..........................................................

	useNode(x: object): boolean {

		return this.isNode(x)
	}

	// ..........................................................

	filter(h: TNodeInfo<T>): boolean {

		// --- filter() is only called if isNode(h.node) is true
		return true
	}

	// ..........................................................

	*walk(
			item: unknown,
			parent: (T | undefined) = undef,
			level: number = 0,
			index: ((string | number) | undefined) = undef
			): Generator<TNodeInfo<T>, void, void> {

		if (isObject(item) && this.useNode(item)) {
			DBG(`NODE: ${OL(item)}`)
			yield {
				node: item as T,
				parent,
				level,
				index
				}
		}

		if (isArray(item)) {
			DBG("ARRAY")
			let i1 = 0;for (const x of item) {const i = i1++;
				yield* this.walk(x, parent, level+1, i)
			}
		}
		else if (isObject(item)) {
			DBG("OBJECT")
			for (const [key, x] of Object.entries(item)) {
				yield* this.walk(x, (this.isNode(item) ? item : parent), level+1, key)
			}
		}
	}
}

//# sourceMappingURL=data:application/json;base64,