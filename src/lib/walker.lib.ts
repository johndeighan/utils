"use strict";
// walker.lib.civet

import {
	undef, defined, notdefined, integer, hash, array,
	isArray, isHash, isPrimitive, assert, croak, isEmpty,
	assertIsString, assertIsArray,
	} from 'datatypes'
import {extract} from 'extract'
import {OL} from 'to-nice'
import {DBG} from 'logger'

// ---------------------------------------------------------------------------

const hasChildren = (x: unknown) => {
	return isHash(x) || isArray(x)
}

export class Walker<T extends object = hash> {

	// --- Keep track of nodes visited to avoid infinite loops
	setVisited: WeakSet<hash | array> = new WeakSet<hash | array>()

	lNodeStack: T[] = []

	// ..........................................................

	get level(): integer {

		return this.lNodeStack.length
	}

	// ..........................................................

	parent(n: integer = 1): T {

		const len = this.lNodeStack.length
		assert((n >= 0) && (n < len), `Bad index: ${n} of ${len}`)
		return this.lNodeStack[len-n-1]
	}

	// ..........................................................

	isNode(x: unknown): x is T {

		return true
	}

	// ..........................................................

	filter(node: T): boolean {

		return true
	}

	// ..........................................................

	extract(dspath: string): (unknown | undefined) {

		DBG(`dspath = '${dspath}'`)
		const lMatches = dspath.match(/^(\^*)(.*)$/)
		if (defined(lMatches)) {
			const [_, goUpStr, mainStr] = lMatches
			return extract(this.parent(goUpStr.length), mainStr)
		}
		else {
			croak(`Bad dspath: ${dspath}`)
		}
	}

	// ..........................................................

	getString(dspath: string): string {

		const str = this.extract(dspath)
		assertIsString(str)
		return str
	}

	// ..........................................................

	getArray(dspath: string): unknown[] {

		const lItems = this.extract(dspath)
		assertIsArray(lItems)
		return lItems
	}

	// ..........................................................
	// GENERATOR

	*walk(x: unknown): Generator<T, void, void> {

		if (hasChildren(x)) {
			this.setVisited = new WeakSet<hash | array>()
			yield* this.walkItem(x)
		}
		return
	}

	// ..........................................................
	// GENERATOR

	*walkItem(item: hash | array): Generator<T, void, void> {

		if (this.setVisited.has(item)) {
			return
		}

		if (this.isNode(item)) {
			// --- type narrowing ensures that item is a T
			if (this.filter(item)) {
				DBG(`YIELD NODE: ${OL(item)}`)
				yield item
				this.setVisited.add(item)
			}

			this.lNodeStack.push(item)
		}    // --- item is parent of yielded items

		if (isArray(item)) {
			let i1 = 0;for (const x of item) {const i = i1++;
				if (isHash(x) || isArray(x)) {
					yield* this.walkItem(x)
				}
			}
		}
		else {
			for (const [key,x] of Object.entries(item)) {
				if (isHash(x) || isArray(x)) {
					yield* this.walkItem(x)
				}
			}
		}
		if (this.isNode(item)) {
			this.lNodeStack.pop()
		}
		return
	}
}

//# sourceMappingURL=data:application/json;base64,