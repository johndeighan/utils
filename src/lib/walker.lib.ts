"use strict";
// walker.lib.civet

import {
	undef, defined, notdefined, integer, TConstructor,
	isArray, isObject, isPrimitive, hash, croak, isEmpty,
	assertIsString, assertIsArray,
	} from 'datatypes'
import {extract} from 'llutils'
import {OL} from 'to-nice'
import {DBG} from 'logger'

// ---------------------------------------------------------------------------

export class Walker<T extends object = hash> {

	// --- Keep track of nodes visited to avoid infinite loops
	setVisited: WeakSet<T> = new WeakSet<T>()

	lNodeStack: T[] = []

	// ..........................................................

	get level() {

		return this.lNodeStack.length - 1
	}

	// ..........................................................

	parent(n: number = 1): T {

		if (n < 0) {
			croak(`Bad index: ${n}`)
		}
		const pos = this.lNodeStack.length - n - 1
		if (pos < 0) {
			croak(`Bad index: ${n}, stack has ${this.lNodeStack.length} items`)
		}
		return this.lNodeStack[pos]
	}

	// ..........................................................

	isNode(x: object): x is T {

		return true
	}

	// ..........................................................

	filter(node: T): boolean {

		// --- filter() is only called if isNode(node) is true
		return true
	}

	// ..........................................................

	extract(dspath: string): (unknown | undefined) {

		DBG(`dspath = '${dspath}'`)
		const lMatches = dspath.match(/^(\^*)(.*)$/)
		if (defined(lMatches)) {
			const [_, goUpStr, mainStr] = lMatches
			return extract(this.parent(goUpStr.length), mainStr)
		}
		else {
			croak(`Bad dspath: ${dspath}`)
		}
	}

	// ..........................................................

	getString(dspath: string): string {

		const str = this.extract(dspath)
		assertIsString(str)
		return str
	}

	// ..........................................................

	getArray(dspath: string): unknown[] {

		const lItems = this.extract(dspath)
		assertIsArray(lItems)
		return lItems
	}

	// ..........................................................
	// GENERATOR

	*walk(item: unknown): Generator<T, void, void> {

		if (isObject(item) && this.isNode(item)) {
			if (this.setVisited.has(item)) {
				return
			}
			DBG(`YIELD NODE: ${OL(item)}`)
			this.lNodeStack.push(item)
			yield item
			this.setVisited.add(item)
			for (const x of Object.values(item)) {
				yield* this.walk(x)
			}
			this.lNodeStack.pop()
		}
		else if (isArray(item)) {
			DBG("ARRAY")
			for (const x of item) {
				yield* this.walk(x)
			}
		}
		else if (isObject(item)) {
			DBG("OBJECT")
			for (const x of Object.values(item)) {
				yield* this.walk(x)
			}
		}
		return
	}
}
//# sourceMappingURL=data:application/json;base64,