"use strict";
// walker.lib.civet

import {
	undef, defined, notdefined, integer,
	isArray, isObject, isPrimitive,
	} from 'datatypes'
import {DBG} from 'logger'

// ---------------------------------------------------------------------------

type TIndex = string | number

export type TNodeInfo<T> = {
	node: T
	level: integer
	parent: (T | undefined)
	index?: TIndex
	}

// ---------------------------------------------------------------------------

export class Walker<T extends object = object> {

	// --- Keep track of nodes visited to avoid infinite loops
	setVisited: WeakSet<T> = new WeakSet<T>()

	// --- No constructor needed

	useNode(x: unknown): boolean {

		// --- false for null, array, RegExp, String, Number, Boolean
		return isObject(x)
	}

	isNode(x: unknown): x is T {

		return this.useNode(x)
	}

	filter(h: TNodeInfo<T>): boolean {

		// --- filter() is only called if isNode(h.node) is true
		return true
	}

	*walk(
			item: unknown,
			parent: (T | undefined) = undef,
			level: number = 0,
			index: ((string | number) | undefined) = undef
			): Generator<TNodeInfo<T>, void, void> {

		if (notdefined(item) || isPrimitive(item)) {
			return
		}

		if (this.isNode(item)) {
			DBG("NODE")
			yield {
				node: item,
				parent,
				level,
				index
				}
		}
		if (isArray(item)) {
			DBG("ARRAY")
			let i1 = 0;for (const x of item) {const i = i1++;
				yield* this.walk(x, (this.isNode(item) ? item : parent), level+1, i)
			}
		}
		else if (isObject(item)) {
			DBG("OBJECT")
			for (const [key, x] of Object.entries(item)) {
				yield* this.walk(x, (this.isNode(item) ? item : parent), level+1, key)
			}
		}
	}
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQzpcXFVzZXJzXFxqb2huZFxcdXRpbHNcXHNyY1xcbGliXFx3YWxrZXIubGliLmNpdmV0LnRzeCIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxqb2huZFxcdXRpbHNcXHNyY1xcbGliXFx3YWxrZXIubGliLmNpdmV0Il0sIm1hcHBpbmdzIjoiO0FBQUEsbUJBQWtCO0FBQ2xCLEFBQUE7QUFDQSxBQUFBLE1BQU0sQ0FBQyxDQUFDO0FBQ1IsQ0FBQyxLQUFLLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxPQUFPLENBQUM7QUFDckMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxXQUFXLENBQUM7QUFDaEMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFdBQVc7QUFDbkIsQUFBQSxBQUFBLE1BQU0sQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxRQUFRO0FBQzFCLEFBQUE7QUFDQSxBQUFBLDhFQUE2RTtBQUM3RSxBQUFBO0FBQ0EsQUFBQSxBQUFBLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsTUFBTTtBQUM3QixBQUFBO0FBQ0EsQUFBQSxBQUFBLE1BQU0sQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQzVCLEFBQUEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO0FBQ1IsQUFBQSxDQUFDLEtBQUssQ0FBQyxDQUFDLE9BQU87QUFDZixBQUFBLENBQUMsTUFBTSxDLEMsQ0FBQyxBQUFDLEMsWSxDQUFFO0FBQ1gsQUFBQSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsTUFBTTtBQUNmLENBQUMsQ0FBQztBQUNGLEFBQUE7QUFDQSxBQUFBLDhFQUE2RTtBQUM3RSxBQUFBO0FBQ0EsQUFBQSxBQUFBLE1BQU0sQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsTUFBTSxDLENBQUUsQ0FBQyxNQUFNLENBQUMsQ0FBQSxDQUFBO0FBQzlDLEFBQUE7QUFDQSxBQUFBLENBQUMsMERBQXlEO0FBQzFELEFBQUEsQ0FBQyxVQUFVLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUMxQyxBQUFBO0FBQ0EsQUFBQSxDQUFDLDRCQUEyQjtBQUM1QixBQUFBO0FBQ0EsQUFBQSxDLE9BQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQSxDQUFBO0FBQzdCLEFBQUE7QUFDQSxBQUFBLEVBQUUsNkRBQTREO0FBQzlELEFBQUEsRUFBRSxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUMsQztDQUFDLENBQUE7QUFDcEIsQUFBQTtBQUNBLEFBQUEsQyxNQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQSxDQUFBO0FBQzNCLEFBQUE7QUFDQSxBQUFBLEVBQUUsTUFBTSxDQUFDLEksQ0FBQyxPQUFPLENBQUEsQUFBQyxDQUFDLEM7Q0FBQSxDQUFBO0FBQ25CLEFBQUE7QUFDQSxBQUFBLEMsTUFBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFBLENBQUE7QUFDakMsQUFBQTtBQUNBLEFBQUEsRUFBRSx3REFBdUQ7QUFDekQsQUFBQSxFQUFFLE1BQU0sQ0FBQyxJO0NBQUksQ0FBQTtBQUNiLEFBQUE7QUFDQSxBQUFBLEMsQyxJQUFLLENBQUM7QUFDTixBQUFBLEdBQUcsSUFBSSxDQUFDLENBQUMsT0FBTyxDQUFBO0FBQ2hCLEFBQUEsR0FBRyxNQUFNLEMsQyxDQUFDLEFBQUMsQyxZLENBQUUsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFBO0FBQ3JCLEFBQUEsR0FBRyxLQUFLLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQTtBQUNwQixBQUFBLEdBQUcsS0FBSyxDLEMsQ0FBQyxBQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxNQUFNLEMsWSxDQUFFLENBQUMsQ0FBQyxDQUFDLEtBQUs7QUFDcEMsR0FBRyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUEsQ0FBQTtBQUN6QyxBQUFBO0FBQ0EsQUFBQSxFQUFFLEdBQUcsQ0FBQSxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsQ0FBQSxDQUFBLENBQUE7QUFDMUMsQUFBQSxHQUFHLE07RUFBTSxDQUFBO0FBQ1QsQUFBQTtBQUNBLEFBQUEsRUFBRSxHQUFHLENBQUEsSSxDQUFDLE1BQU0sQ0FBQSxBQUFDLElBQUksQ0FBQSxDQUFBLENBQUEsQ0FBQTtBQUNqQixBQUFBLEdBQUcsR0FBRyxDQUFBLEFBQUMsTUFBTSxDQUFBO0FBQ2IsQUFBQSxHQUFHLEtBQUssQ0FBQyxDQUFDO0FBQ1YsQUFBQSxJQUFJLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQTtBQUNkLEFBQUEsSUFBSSxNQUFNLENBQUE7QUFDVixBQUFBLElBQUksS0FBSyxDQUFBO0FBQ1QsQUFBQSxJQUFJLEtBQUs7QUFDVCxJQUFJLEM7RUFBQyxDQUFBO0FBQ0wsQUFBQSxFQUFFLEdBQUcsQ0FBQSxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUEsQ0FBQSxDQUFBO0FBQ2xCLEFBQUEsR0FBRyxHQUFHLENBQUEsQUFBQyxPQUFPLENBQUE7QUFDZCxBQUFBLEcsSSxFLEksQ0FBRyxHQUFHLENBQUMsQ0FBQSxNQUFBLENBQUcsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFBLENBQUEsQ0FBVCxNQUFBLEMsRyxFLEUsQ0FBUztBQUNsQixBQUFBLElBQUksS0FBSyxDQUFDLENBQUMsSSxDQUFDLElBQUksQ0FBQSxBQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEM7R0FBQSxDO0VBQUEsQ0FBQTtBQUMvRCxBQUFBLEVBQUUsSUFBSSxDQUFDLEdBQUcsQ0FBQSxRQUFRLENBQUEsQUFBQyxJQUFJLENBQUEsQ0FBQSxDQUFBLENBQUE7QUFDdkIsQUFBQSxHQUFHLEdBQUcsQ0FBQSxBQUFDLFFBQVEsQ0FBQTtBQUNmLEFBQUEsR0FBRyxHQUFHLENBQUMsQ0FBQSxNQUFBLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUEsQ0FBQSxDQUFBO0FBQ3ZDLEFBQUEsSUFBSSxLQUFLLENBQUMsQ0FBQyxJLENBQUMsSUFBSSxDQUFBLEFBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQztHQUFBLEM7RUFBQSxDO0NBQUEsQztBQUFBLENBQUE7QUFDakUiLCJuYW1lcyI6W10sInNvdXJjZXNDb250ZW50IjpbIiMgd2Fsa2VyLmxpYi5jaXZldFxyXG5cclxuaW1wb3J0IHtcclxuXHR1bmRlZiwgZGVmaW5lZCwgbm90ZGVmaW5lZCwgaW50ZWdlcixcclxuXHRpc0FycmF5LCBpc09iamVjdCwgaXNQcmltaXRpdmUsXHJcblx0fSBmcm9tICdkYXRhdHlwZXMnXHJcbmltcG9ydCB7REJHfSBmcm9tICdsb2dnZXInXHJcblxyXG4jIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cclxudHlwZSBUSW5kZXggPSBzdHJpbmcgfCBudW1iZXJcclxuXHJcbmV4cG9ydCB0eXBlIFROb2RlSW5mbzxUPiA9IHtcclxuXHRub2RlOiBUXHJcblx0bGV2ZWw6IGludGVnZXJcclxuXHRwYXJlbnQ6IFQ/XHJcblx0aW5kZXg/OiBUSW5kZXhcclxuXHR9XHJcblxyXG4jIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cclxuZXhwb3J0IGNsYXNzIFdhbGtlcjxUIGV4dGVuZHMgb2JqZWN0ID0gb2JqZWN0PlxyXG5cclxuXHQjIC0tLSBLZWVwIHRyYWNrIG9mIG5vZGVzIHZpc2l0ZWQgdG8gYXZvaWQgaW5maW5pdGUgbG9vcHNcclxuXHRzZXRWaXNpdGVkOiBXZWFrU2V0PFQ+ID0gbmV3IFdlYWtTZXQ8VD4oKVxyXG5cclxuXHQjIC0tLSBObyBjb25zdHJ1Y3RvciBuZWVkZWRcclxuXHJcblx0dXNlTm9kZSh4OiB1bmtub3duKTogYm9vbGVhblxyXG5cclxuXHRcdCMgLS0tIGZhbHNlIGZvciBudWxsLCBhcnJheSwgUmVnRXhwLCBTdHJpbmcsIE51bWJlciwgQm9vbGVhblxyXG5cdFx0cmV0dXJuIGlzT2JqZWN0KHgpXHJcblxyXG5cdGlzTm9kZSh4OiB1bmtub3duKTogeCBpcyBUXHJcblxyXG5cdFx0cmV0dXJuIEB1c2VOb2RlIHhcclxuXHJcblx0ZmlsdGVyKGg6IFROb2RlSW5mbzxUPik6IGJvb2xlYW5cclxuXHJcblx0XHQjIC0tLSBmaWx0ZXIoKSBpcyBvbmx5IGNhbGxlZCBpZiBpc05vZGUoaC5ub2RlKSBpcyB0cnVlXHJcblx0XHRyZXR1cm4gdHJ1ZVxyXG5cclxuXHR3YWxrKFxyXG5cdFx0XHRpdGVtOiB1bmtub3duXHJcblx0XHRcdHBhcmVudDogVD8gPSB1bmRlZlxyXG5cdFx0XHRsZXZlbDogbnVtYmVyID0gMFxyXG5cdFx0XHRpbmRleDogKHN0cmluZyB8IG51bWJlcik/ID0gdW5kZWZcclxuXHRcdFx0KTogR2VuZXJhdG9yPFROb2RlSW5mbzxUPiwgdm9pZCwgdm9pZD5cclxuXHJcblx0XHRpZiBub3RkZWZpbmVkKGl0ZW0pIHx8IGlzUHJpbWl0aXZlKGl0ZW0pXHJcblx0XHRcdHJldHVyblxyXG5cclxuXHRcdGlmIEBpc05vZGUgaXRlbVxyXG5cdFx0XHREQkcgXCJOT0RFXCJcclxuXHRcdFx0eWllbGQge1xyXG5cdFx0XHRcdG5vZGU6IGl0ZW1cclxuXHRcdFx0XHRwYXJlbnRcclxuXHRcdFx0XHRsZXZlbFxyXG5cdFx0XHRcdGluZGV4XHJcblx0XHRcdFx0fVxyXG5cdFx0aWYgaXNBcnJheShpdGVtKVxyXG5cdFx0XHREQkcgXCJBUlJBWVwiXHJcblx0XHRcdGZvciB4LGkgb2YgaXRlbVxyXG5cdFx0XHRcdHlpZWxkKiBAd2FsayB4LCAoQGlzTm9kZShpdGVtKSA/IGl0ZW0gOiBwYXJlbnQpLCBsZXZlbCsxLCBpXHJcblx0XHRlbHNlIGlmIGlzT2JqZWN0IGl0ZW1cclxuXHRcdFx0REJHIFwiT0JKRUNUXCJcclxuXHRcdFx0Zm9yIFtrZXksIHhdIG9mIE9iamVjdC5lbnRyaWVzKGl0ZW0pXHJcblx0XHRcdFx0eWllbGQqIEB3YWxrIHgsIChAaXNOb2RlKGl0ZW0pID8gaXRlbSA6IHBhcmVudCksIGxldmVsKzEsIGtleVxyXG4iXX0=