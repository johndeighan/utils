"use strict";
// compile.lib.civet

type AutoPromise<T> = Promise<Awaited<T>>;
import {compile as compileSvelte} from 'npm:svelte/compiler'

import {
	undef, defined, notdefined, assert, hash, hashof, isHash,
	nonEmptyString, isNonEmptyString,
	} from './datatypes.lib.ts'
import {
	croak, pass, keys, hasKey, hasKeys, missingKeys,
	OL, o, getOptions,
	} from './llutils.lib.ts'
import {
	DBG, LOG, WARN, ERR, LOGVALUE, DBGVALUE,
	INDENT, UNDENT, CLEAR,
	pushLogLevel, popLogLevel,
	} from './logger.lib.ts'
import {
	isFile, isDir, fileExt, withExt, rmFile, mkpath, parsePath,
	relpath, newerDestFileExists, slurp, barf, isStub,
	allFilesMatching,
	TPathInfo,
	} from './fs.lib.ts'
import {
	execCmd, execCmdSync, cmdSucceeds,
	} from './exec.lib.ts'
import {cielo2civetFile} from './cielo.lib.ts'
import {civet2tsFile} from './civet.lib.ts'

/**
 * @module compile.lib - configuring the compiler
 */

// ---------------------------------------------------------------------------
//    TYPES
// ---------------------------------------------------------------------------

export type testerFunc = () => boolean

export type compilerFunc = (path: string) => void
export const isCompilerFunc = (f: any): boolean => {
	try {
		assert((typeof f === 'function'), `GOT ${OL(f)}`)
		return true
	}
	catch (err: any) {
		ERR(err.message)
		return false
	}
}

export type postProcessor = (hInfo: TPathInfo) => void
export const isPostProcessor = (f: any): boolean => {
	try {
		assert((typeof f === 'function'), `GOT ${OL(f)}`)
		return true
	}
	catch (err: any) {
		ERR(err.message)
		return false
	}
}

export type TCompilerInfo = {
	tester: testerFunc
	compiler: compilerFunc
	getOutPath: (path: string) => string
	}
export const isCompilerInfo = (h: any): boolean => {
	return hasKeys(h, 'tester', 'compiler', 'getOutPath')
}

export type TCompilerConfig = {
	hCompilers: hashof<TCompilerInfo>         // <string>: <TCompilerInfo>
	hPostProcessors: hashof<postProcessor>   // <string>: <postProcessor>
	}

export const isConfigHash = (h: any): h is TCompilerConfig => {

	try {
		assert(isHash(h), `GOT not a hash: ${OL(h)}`)
		const lNeeded = ['hCompilers', 'hPostProcessors']
		assert(hasKeys(h, ...lNeeded), `Bad config hash: ${OL(h)},
missing ${missingKeys(h, ...lNeeded)}`)
		const hCompilers: hashof<hash> = h.hCompilers
		for (const ext of keys(hCompilers)) {
			assert(ext.startsWith('.'), `Bad key ${OL(ext)} in hCompilers`)
			const lNeeded2 = ['getOutPath', 'tester', 'compiler']
			const h = hCompilers[ext]
			assert(hasKeys(h, ...lNeeded2), `Bad TCompilerInfo for ${ext},
missing ${missingKeys(h, ...lNeeded2)}`)
		}
		const hPostProcessors: hashof<hash> = h.hPostProcessors
		for (const purp of keys(hPostProcessors)) {
			assert(isPostProcessor(hPostProcessors[purp]), `Bad postProcessor for ${purp},
Not a post processor`)
		}

		return true
	}
	catch (err: any) {
		ERR(err.message)
		return false
	}
}

// ---------------------------------------------------------------------------
// --- NOTES:
//        1. compiler doesn't need to check if the file exists
//        2. compiler doesn't need to check the file extension

export const hDefaultConfig: TCompilerConfig = {

	hCompilers: {
		// --- keys are file extensions
		//     NOTE: compilers must be synchronous!!!

		'.svelte': {
			getOutPath: (path: string) => withExt(path, '.js'),
			tester: () => { return true },
			compiler: (path: string) => {
				const jsPath = withExt(path, '.js')
				rmFile(jsPath)
				const {js, warnings} = compileSvelte(slurp(path), {
					customElement: true,
					runes: true
					})
				const {code, map} = js
				barf(jsPath, code)
				return
			}
			},
		'.dot': {
			getOutPath: (path: string) => withExt(path, '.svg'),
			tester: () => cmdSucceeds('dot', ['--version'], o`quiet`),
			compiler: (path: string) => {
				const svgPath = withExt(path, '.svg')
				rmFile(svgPath)
				execCmdSync('dot', ['-Tsvg', path])
				return
			}
			},
		'.cielo': {
			getOutPath: (path: string) => withExt(path, '.temp.civet'),
			tester: () => {
				return true
			},
			compiler: (path: string) => {
				const civetPath = withExt(path, '.temp.civet')
				rmFile(civetPath)
				cielo2civetFile(path, civetPath)
				civet2tsFile(civetPath)
				return
			}
			},
		'.civet': {
			getOutPath: (path: string) => withExt(path, '.ts'),
			tester: () => {
				return cmdSucceeds('civet', ['--version'], o`quiet`)
			},
			compiler: (path: string) => {
				civet2tsFile(path)
				return
			}
			}
		},

	hPostProcessors: {
		// --- Keys are a purpose

		'test': (hInfo: TPathInfo): void => {
			const {path, stub} = hInfo
			if (stub === undef) {
				return
			}
			pass()
		},

		'lib': (hInfo: TPathInfo): void => {
			const {path, stub} = hInfo
			if (stub === undef) {
				return
			}
			for (const {success} of runUnitTestsFor(stub)) {
				if (!success) {
					WARN(`Unit test ${path} failed`)
				}
			}
		},

		'cmd': (hInfo: TPathInfo): void => {
			const {path} = hInfo
			LOG(`- installing command ${path}`)
			installCmd(path)
			return
		}
		}
	}

// ---------------------------------------------------------------------------
// --- ASYNC !!!

/**
 * loadCompilerConfig() - Load compiler configuration from a file
 */

export const loadCompilerConfig = async (
	path: string
	): AutoPromise<TCompilerConfig> => {

	assert(isFile(path), `No such compile config file: ${OL(path)}`)
	DBG(`load compiler config from ${path}`)
	const module = await import(`file:///${mkpath(path)}`)
	const h = module.default as TCompilerConfig
	assert(isConfigHash(h), "Bad user config hash")

	// --- Remove any compilers for which the actual compiler
	//     has not been installed

	const hCompilers = h.hCompilers
	for (const ext of keys(hCompilers)) {
		const {tester} = hCompilers[ext]
		pushLogLevel('silent')
		const works = tester()
		popLogLevel()

		if (!works) {
			DBG(`Deleting compiler for ext ${OL(ext)}`)
			delete hCompilers[ext]
		}
	}
	return h
}

// ---------------------------------------------------------------------------
// ASYNC

export const installCmd = async (path: string, name: (string | undefined)=undef): AutoPromise<void> => {

	if (notdefined(name)) {
		await execCmd('deno', [
			'install',
			'-fgA',
			'--config',
			'deno.jsonc',
			path
			])
	}
	else {
		await execCmd('deno', [
			'install',
			'-fgA',
			'-n',
			name,
			'--config',
			'deno.jsonc',
			path
			])
	}
	return
}

// ---------------------------------------------------------------------------
// ASYNC

export const uninstallCmd = async (path: string, name: (string | undefined)=undef): AutoPromise<void> => {

	if (notdefined(name)) {
		await execCmd('deno', [
			'uninstall',
			'-g',
			path
			])
	}
	else {
		await execCmd('deno', [
			'uninstall',
			'-g',
			'-n',
			name,
			path
			])
	}
	return
}

// ---------------------------------------------------------------------------
// --- returns a compilerFunc or undef

export const getCompilerInfo = (ext: string): (TCompilerInfo | undefined) => {

	const hInfo = hCompilerConfig.hCompilers[ext]
	if (notdefined(hInfo)) {
		DBG(`No compiler for ${ext} files`)
		return undef
	}
	return hInfo
}

// ---------------------------------------------------------------------------

export const getPostProcessor = (purpose: string): (postProcessor | undefined) => {

	const pp = hCompilerConfig.hPostProcessors[purpose]
	if (notdefined(pp)) {
		DBG(`No post processor for ${purpose} files`)
		return undef
	}
	return pp
}

// ---------------------------------------------------------------------------
// --- src can be a full path or [dirspec, stub, purpose]
//        where dirspec can be 'lib', 'bin' or 'test'
//     throws error if file does not exist
//
//     Possible status values:
//        'temp'       - it was a temp file, not compiled
//        'nocompiler' - has no compiler, not compiled
//        'exists'     - newer compiled file already exists
//        'failed'     - compiling failed
//        'compiled'   - successfully compiled

export type TCompileStatus = 'nofile' |
	'temp' | 'nocompiler' |
	'exists' | 'failed' | 'compiled'

export type TCompileResult = {
	status: TCompileStatus
	path: string
	relPath?: string
	outPath?: string
	}

export const compileFile = (
	path: string,
	hOptions: hash={}
	): TCompileResult => {

	DBG(`COMPILE: ${OL(path)}`, INDENT)

	const {nopp} = getOptions(hOptions, {
		nopp: false
		})

	// --- hPathInfo is needed for post processing
	const hPathInfo = parsePath(path)
	if (hPathInfo.type === 'missing') {
		return {
			status: 'nofile',
			path
			}
	}
	const {relPath, stub, purpose, ext} = hPathInfo

	if ((purpose === 'temp') || (purpose === 'debug')) {
		DBG(`Not compiling ${purpose} file ${OL(path)}`, UNDENT)
		return {
			status: 'temp',
			path,
			relPath
			}
	}

	if (notdefined(ext)) {
		DBG(`Not compiling - no file extension in ${OL(path)}`, UNDENT)
		return {
			status: 'nocompiler',
			path,
			relPath
			}
	}

	const hInfo = getCompilerInfo(ext)
	if (notdefined(hInfo)) {
		DBG(`Not compiling - no compiler for ${OL(ext)}`, UNDENT)
		return {
			status: 'nocompiler',
			path,
			relPath,
			outPath: undef
			}
	}

	const {compiler, getOutPath} = hInfo
	const outPath = getOutPath(relPath)
	if (newerDestFileExists(relPath, outPath)) {
		DBG(`Not compiling, newer ${OL(outPath)} exists`, UNDENT)
		return {
			status: 'exists',
			path,
			relPath,
			outPath
			}
	}

	DBG("No newer dest file exists")
	if (isFile(outPath)) {
		DBG(`removing older ${OL(outPath)}`)
		rmFile(outPath)
	}

	DBG(`compiling ${OL(path)}`)
	compiler(relPath)     // produces file outPath, may throw exception

	if (isFile(outPath)) {
		// --- If first line is a file name,
		//     change it to outPath
		const contents = Deno.readTextFileSync(outPath)
		const lLines = contents.split("\n")
		lLines[0].replace(path, outPath)
		Deno.writeTextFileSync(outPath, lLines.join("\n"))
	}
	else {
		ERR(`Output file ${relpath(outPath)} not produced`, UNDENT)
		return {
			status: 'failed',
			path,
			relPath,
			outPath
			}
	}

	// --- If there's a post-processor, run it
	if (isNonEmptyString(purpose)) {
		const postProc = getPostProcessor(purpose)
		if (notdefined(postProc)) {
			pass()
		}
		else {
			DBG("post-processing file")
			postProc(hPathInfo)
		}
	}

	DBG(UNDENT)
	return {
		status: 'compiled',
		path,
		relPath,
		outPath
		}
}

// ---------------------------------------------------------------------------

export const getCompilerGlobPattern = (root: string='**'): string => {

	const lKeys = keys(hCompilerConfig.hCompilers)
	const pattern = (
		(lKeys.length === 1) ? `${root}/*${lKeys[0]}`
		                    : `${root}/*{${lKeys.join(',')}}`
		)
	DBG(`compiler glob: ${OL(pattern)}`)
	return pattern
}

// ---------------------------------------------------------------------------
// --- GENERATOR

export const allCompilableFiles = function*(
		hOptions: hash={}
		): Generator<TPathInfo, void, void> {

	const {root, filter} = getOptions(hOptions, {
		root: '**'
		})
	const pattern = getCompilerGlobPattern(root)
	DBG(`pattern = ${pattern}`)
	for (const hFileInfo of allFilesMatching(pattern, {filter})) {
		yield hFileInfo
	}
	return
}

// ---------------------------------------------------------------------------

type unitTestResult = {
	stub: string
	success: boolean
	msg?: string
	code?: number
	signal?: string
	}

// --- a generator

export const runUnitTestsFor = function*(
	stub: nonEmptyString,
	hOptions: hash={}
	): Generator<unitTestResult, void, void> {

	const {verbose} = getOptions(hOptions, {
		verbose: false
		})

	DBG(`Running unit tests for ${stub}`)
	if (!verbose) {
		pushLogLevel('silent')
	}

	// --- Ensure that matching lib & cmd files are compiled
	//     (no error if there is no compiler for the file)
	for (const {path} of allFilesMatching(`**/${stub}.*`)) {
		const {status} = compileFile(path, o`nopp`)
		assert((status !== 'failed'), `compile of ${path} failed`)
	}

	// --- Compile and run all unit tests for stub
	for (const {path} of allFilesMatching(`**/${stub}*.test.*`)) {
		const {status, outPath} = compileFile(path, o`nopp`)
		assert((status !== 'failed'),
				`compile of ${path} failed, status == 'failed'`)
		if (notdefined(outPath)) {
			continue
		}
		assert(isFile(outPath), `File ${outPath} not found`)

		// --- Compile all files in subdir if it exists
		if (isDir(`test/${stub}`)) {
			for (const {path} of allFilesMatching(`test/${stub}/*`)) {
				const {status, outPath} = compileFile(path)
				assert((status !== 'failed'), `Compile of ${path} failed`)
				if (notdefined(outPath)) {
					WARN(`File ${OL(path)} not compiled to ${outPath}`)
				}
			}
		}

		// --- Run the unit test, return return code
		// --- Return value has keys success, code, signal
		const {success, code, signal} = execCmdSync('deno', [
				'test',
				'-qA',
				outPath
				])
		yield {stub, success, code, signal}
	}
	if (!verbose) {
		popLogLevel()
	}
	return
}

// ---------------------------------------------------------------------------
// --- a generator

export const runAllUnitTests = function*(
		): Generator<unitTestResult, void, void> {

	DBG("Running all unit tests")

	const hGlobOptions = {
		exclude: ['node_modules/**', '.git/**']
		}

	const pattern = '**/*.{lib,cmd}.ts'
	DBG(`pattern = ${OL(pattern)}`)
	for (const {path, stub} of allFilesMatching(pattern, hGlobOptions)) {
		if (stub === undef) {
			WARN(`No stub found in ${OL(path)}`)
		}
		else {
			DBG(`UNIT TEST: ${path}`)
			for (const hResult of runUnitTestsFor(stub)) {
				yield hResult
			}
		}
	}
	return
}

// ---------------------------------------------------------------------------

// --- userConfigPath resolves '.' to current working directory,
//     not the current file location

export const userConfigPath: string = mkpath('./compiler.config.ts')

// ---------------------------------------------------------------------------

export const hCompilerConfig = (
	(isFile(userConfigPath)?
		(await loadCompilerConfig(userConfigPath))
	:
		hDefaultConfig)
	)
DBGVALUE('hCompilerConfig', hCompilerConfig)

//# sourceMappingURL=data:application/json;charset=utf-8;base64,