"use strict";
// compile.lib.civet

type AutoPromise<T> = Promise<Awaited<T>>;
import {
	undef, defined, notdefined, assert, hash, hashof, isHash,
	nonEmptyString, isNonEmptyString, nonEmpty,
	} from './datatypes.lib.ts'
import {
	croak, pass, keys, hasKey, hasKeys, missingKeys,
	OL, o, getOptions, getOneOption,
	} from './llutils.lib.ts'
import {
	DBG, LOG, WARN, ERR, LOGVALUE, DBGVALUE,
	INDENT, UNDENT,
	pushLogLevel, popLogLevel,
	} from './logger.lib.ts'
import {
	isFile, isDir, fileExt, withExt, rmFile, mkpath, parsePath,
	relpath, newerDestFileExists, slurp, barf, isStub,
	allFilesMatching, TPathInfo,
	patchFirstLine, configFromFile,
	} from './fs.lib.ts'
import {
	execCmd, execCmdSync, cmdSucceeds,
	} from './exec.lib.ts'

/**
 * @module compile.lib - compile files
 */

// ---------------------------------------------------------------------------
//   TYPES
// ---------------------------------------------------------------------------

// --- A function to test if compiling a file is even possible
export type TTesterFunc = () => boolean

export type TCompileStatus =
	'temp'       |    // --- it's an intermediate file, not compiled
	'nocompiler' |    //     no compiler configured for this file
	'exists'     |    //     newer output files exist, not compiled
	'failed'     |    //     compiling failed
	'compiled'        //     compiling succeeded, output file exists

export type TCompilerFunc = (path: string) => TCompileStatus
export type TPostProcessor = (path: string) => void

export type TCompilerInfo = {
	tester: TTesterFunc
	compiler: TCompilerFunc
	getOutPaths: (path: string) => string[]
	}

export type TCompilerConfig = {
	hCompilers: hashof<TCompilerInfo>         // <string>: <TCompilerInfo>
	hPostProcessors: hashof<TPostProcessor>   // <string>: <TPostProcessor>
	}

export const isCompilerInfo = (x: any): x is TCompilerInfo => {
	return isHash(x) && hasKeys(x, 'tester', 'compiler', 'getOutPaths')
}

export const isCompilerConfig = (x: any): x is TCompilerConfig => {
	return isHash(x) && hasKeys(x, 'hCompilers', 'hPostProcessors')
}

export type TCompileResult = {
	status: TCompileStatus
	path: string
	lOutPaths?: string[]
	postProcStatus?: any
	}

export type TUnitTestResult = {
	stub: string
	success: boolean
	msg?: string
	code?: number
	signal?: string
	}

// ---------------------------------------------------------------------------

let hCompilerConfig: (TCompilerConfig | undefined) = undef   // --- loaded when needed

const getConfig = (): TCompilerConfig => {

	if (defined(hCompilerConfig)) {
		return hCompilerConfig
	}
	else {
		return getCompilerConfig()
	}
}

// ---------------------------------------------------------------------------

/**
 * getCompilerConfig(path) - return compiler configuration from a file
 */

export const getCompilerConfig = (
	path: string = 'src/lib/compile.config.civet'
	): TCompilerConfig => {

	assert(isFile(path), `No such compile config file: ${OL(path)}`)
	DBG(`load compiler config from ${path}`)
	const hConfig = configFromFile(path)
	DBGVALUE('hConfig', hConfig)
	if (isCompilerConfig(hConfig)) {

		// --- Remove any compilers for which the actual compiler
		//     has not been installed

		const hCompilers = hConfig.hCompilers
		for (const ext of keys(hCompilers)) {
			const {tester} = hCompilers[ext]
			pushLogLevel('silent')
			const works = tester()
			popLogLevel()

			if (!works) {
				DBG(`Deleting compiler for ext ${OL(ext)}`)
				delete hCompilers[ext]
			}
		}
		return hConfig
	}
	else {
		return {
			hCompilers: {},
			hPostProcessors: {}
			}
	}
}

// ---------------------------------------------------------------------------
// --- returns a TCompilerInfo or undef

export const getCompilerInfo = (
		ext: string
		): (TCompilerInfo | undefined) => {

	const hConfig = getConfig()
	const hInfo = hConfig.hCompilers[ext]
	if (defined(hInfo)) {
		return hInfo
	}
	else {
		DBG(`No compiler for ${ext} files`)
		return undef
	}
}

// ---------------------------------------------------------------------------

export const getPostProcessor = (purpose: string): (TPostProcessor | undefined) => {

	const hConfig = getConfig()
	const pp = hConfig.hPostProcessors[purpose]
	if (defined(pp)) {
		return pp
	}
	else {
		DBG(`No post processor for ${purpose} files`)
		return undef
	}
}

// ---------------------------------------------------------------------------
// --- src can be a full or relative path
//     throws error if file does not exist
//
//     Possible status values:
//        'temp'       - it was a temp file, not compiled
//        'nocompiler' - has no compiler, not compiled
//        'exists'     - newer compiled file already exists
//        'failed'     - compiling failed
//        'compiled'   - successfully compiled

export const compileFile = (
	path: string,
	hOptions: hash={}
	): TCompileResult => {

	assert(isFile(path), `No such file: ${OL(path)}`)
	DBG(`COMPILE: ${OL(path)}`, INDENT)

	const hPathInfo = parsePath(path)
	const {relPath, stub, purpose, ext} = hPathInfo

	if (notdefined(ext)) {
		DBG(`Not compiling - no file extension in ${OL(path)}`, UNDENT)
		return {status: 'nocompiler', path: relPath}
	}

	const hCompilerInfo = getCompilerInfo(ext)
	if (notdefined(hCompilerInfo)) {
		DBG(`Not compiling - no compiler for ${OL(ext)}`, UNDENT)
		return {status: 'nocompiler', path: relPath}
	}

	const {compiler, getOutPaths} = hCompilerInfo
	const lOutPaths = getOutPaths(relPath)
	DBG(`lOutPaths = ${OL(lOutPaths)}`)

	let allNewer = true
	for (const outPath of lOutPaths) {
		if (!newerDestFileExists(relPath, outPath)) {
			allNewer = false
			break
		}
	}
	if (allNewer) {
		DBG(`Not compiling, newer ${OL(lOutPaths)} exist`, UNDENT)
		return {status: 'exists', path: relPath, lOutPaths}
	}

	DBG(`compiling ${OL(path)} to ${OL(lOutPaths)}`)
	const status = compiler(path)
	const nopp = getOneOption(hOptions, 'nopp', false)
	let postProcStatus: (any | undefined) = undef
	if ((status === 'compiled') && defined(purpose) && !nopp) {
		const postProc = getPostProcessor(purpose)
		if (defined(postProc)) {
			DBG("post-processing file")
			try {
				postProc(path)
			}
			catch (err) {
				postProcStatus = err
			}
		}
	}
	DBG(UNDENT)
	if (defined(postProcStatus)) {
		return {status, path: relPath, lOutPaths, postProcStatus}
	}
	else {
		return {status, path: relPath, lOutPaths}
	}
}

// ---------------------------------------------------------------------------

export const getCompilerGlobPattern = (root: string='**'): string => {

	const hConfig = getConfig()
	const lKeys = keys(hConfig.hCompilers)
	const pattern = (
		(lKeys.length === 1) ? `${root}/*${lKeys[0]}`
		                    : `${root}/*{${lKeys.join(',')}}`
		)
	DBG(`compiler glob: ${OL(pattern)}`)
	return pattern
}

// ---------------------------------------------------------------------------
// --- GENERATOR

export const allCompilableFiles = function*(
		hOptions: hash={}
		): Generator<TPathInfo, void, void> {

	const {root, filter} = getOptions(hOptions, {
		root: '**'
		})
	const pattern = getCompilerGlobPattern(root)
	DBG(`pattern = ${pattern}`)
	for (const hFileInfo of allFilesMatching(pattern, {filter})) {
		yield hFileInfo
	}
	return
}

// ---------------------------------------------------------------------------

// --- a generator

export const runUnitTestsFor = function*(
	stub: nonEmptyString,
	hOptions: hash={}
	): Generator<TUnitTestResult, void, void> {

	const {verbose} = getOptions(hOptions, {
		verbose: false
		})

	DBG(`Running unit tests for ${stub}`)
	if (!verbose) {
		pushLogLevel('silent')
	}

	// --- Ensure that matching lib & cmd files are compiled
	//     (no error if there is no compiler for the file)
	for (const {path} of allFilesMatching(`**/${stub}.*`)) {
		const {status} = compileFile(path, o`nopp`)
		assert((status !== 'failed'), `compile of ${path} failed`)
	}

	// --- Compile and run all unit tests for stub
	for (const {path} of allFilesMatching(`**/${stub}*.test.*`)) {
		const {status, lOutPaths} = compileFile(path, o`nopp`)
		assert((status !== 'failed'), `compile of ${path} failed`)
		if (notdefined(lOutPaths)) {
			continue
		}
		for (const outPath of lOutPaths) {
			assert(isFile(outPath), `File ${OL(outPath)} not found`)
		}

		// --- Compile all files in subdir if it exists
		if (isDir(`test/${stub}`)) {
			for (const {path} of allFilesMatching(`test/${stub}/*`)) {
				const {status, lOutPaths} = compileFile(path)
				assert((status !== 'failed'), `Compile of ${path} failed`)
				if (notdefined(lOutPaths)) {
					WARN(`File ${OL(path)} not compiled to ${OL(lOutPaths)}`)
				}
			}
		}

		// --- Run the unit tests, yield results
		for (const outPath of lOutPaths) {
			const {success, code, signal} = execCmdSync('deno', [
					'test',
					'-qA',
					outPath
					])
			yield {stub, success, code, signal}
		}
	}
	if (!verbose) {
		popLogLevel()
	}
	return
}

// ---------------------------------------------------------------------------
// --- a generator

export const runAllUnitTests = function*(
		): Generator<TUnitTestResult, void, void> {

	DBG("Running all unit tests")

	const hGlobOptions = {
		exclude: ['node_modules/**', '.git/**']
		}

	const pattern = '**/*.{lib,cmd}.ts'
	DBG(`pattern = ${OL(pattern)}`)
	for (const {path, stub} of allFilesMatching(pattern, hGlobOptions)) {
		if (stub === undef) {
			WARN(`No stub found in ${OL(path)}`)
		}
		else {
			DBG(`UNIT TEST: ${path}`)
			for (const hResult of runUnitTestsFor(stub)) {
				yield hResult
			}
		}
	}
	return
}

// ---------------------------------------------------------------------------

// --- userConfigPath resolves '.' to current working directory,
//     not the current file location

export const userConfigPath: string = mkpath('./compiler.config.ts')

// ---------------------------------------------------------------------------
// ASYNC

export const installCmd = async (path: string, name: (string | undefined)=undef): AutoPromise<void> => {

	if (notdefined(name)) {
		await execCmd('deno', [
			'install',
			'-fgA',
			'--config',
			'deno.jsonc',
			path
			])
	}
	else {
		await execCmd('deno', [
			'install',
			'-fgA',
			'-n',
			name,
			'--config',
			'deno.jsonc',
			path
			])
	}
	return
}

// ---------------------------------------------------------------------------
// ASYNC

export const uninstallCmd = async (path: string, name: (string | undefined)=undef): AutoPromise<void> => {

	if (notdefined(name)) {
		await execCmd('deno', [
			'uninstall',
			'-g',
			path
			])
	}
	else {
		await execCmd('deno', [
			'uninstall',
			'-g',
			'-n',
			name,
			path
			])
	}
	return
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3JjL2xpYi9jb21waWxlLmxpYi5jaXZldC50c3giLCJzb3VyY2VzIjpbInNyYy9saWIvY29tcGlsZS5saWIuY2l2ZXQiXSwibWFwcGluZ3MiOiI7QUFBQSxvQkFBbUI7QUFDbkIsQUFBQTtBQUNBLEssVyx5QjtBQUFBLE1BQU0sQ0FBQyxDQUFDO0FBQ1IsQ0FBQyxLQUFLLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxNQUFNLENBQUM7QUFDMUQsQ0FBQyxjQUFjLENBQUMsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLFFBQVEsQ0FBQztBQUM1QyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsb0JBQW9CO0FBQzVCLEFBQUEsQUFBQSxNQUFNLENBQUMsQ0FBQztBQUNSLENBQUMsS0FBSyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsV0FBVyxDQUFDO0FBQ2pELENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsWUFBWSxDQUFDO0FBQ2pDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxrQkFBa0I7QUFDMUIsQUFBQSxBQUFBLE1BQU0sQ0FBQyxDQUFDO0FBQ1IsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxRQUFRLENBQUM7QUFDekMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxNQUFNLENBQUM7QUFDaEIsQ0FBQyxZQUFZLENBQUMsQ0FBQyxXQUFXLENBQUM7QUFDM0IsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLGlCQUFpQjtBQUN6QixBQUFBLEFBQUEsTUFBTSxDQUFDLENBQUM7QUFDUixDQUFDLE1BQU0sQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLE9B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dFxuXG5pbXBvcnQge1xuXHR1bmRlZiwgZGVmaW5lZCwgbm90ZGVmaW5lZCwgYXNzZXJ0LCBoYXNoLCBoYXNob2YsIGlzSGFzaCxcblx0bm9uRW1wdHlTdHJpbmcsIGlzTm9uRW1wdHlTdHJpbmcsIG5vbkVtcHR5LFxuXHR9IGZyb20gJy4vZGF0YXR5cGVzLmxpYi50cydcbmltcG9ydCB7XG5cdGNyb2FrLCBwYXNzLCBrZXlzLCBoYXNLZXksIGhhc0tleXMsIG1pc3NpbmdLZXlzLFxuXHRPTCwgbywgZ2V0T3B0aW9ucywgZ2V0T25lT3B0aW9uLFxuXHR9IGZyb20gJy4vbGx1dGlscy5saWIudHMnXG5pbXBvcnQge1xuXHREQkcsIExPRywgV0FSTiwgRVJSLCBMT0dWQUxVRSwgREJHVkFMVUUsXG5cdElOREVOVCwgVU5ERU5ULFxuXHRwdXNoTG9nTGV2ZWwsIHBvcExvZ0xldmVsLFxuXHR9IGZyb20gJy4vbG9nZ2VyLmxpYi50cydcbmltcG9ydCB7XG5cdGlzRmlsZSwgaXNEaXIsIGZpbGVFeHQsIHdpdGhFeHQsIHJtRmlsZSwgbWtwYXRoLCBwYXJzZVBhdGgsXG5cdHJlbHBhdGgsIG5ld2VyRGVzdEZpbGVFeGlzdHMsIHNsdXJwLCBiYXJmLCBpc1N0dWIsXG5cdGFsbEZpbGVzTWF0Y2hpbmcsIFRQYXRoSW5mbyxcblx0cGF0Y2hGaXJzdExpbmUsIGNvbmZpZ0Zyb21GaWxlLFxuXHR9IGZyb20gJy4vZnMubGliLnRzJ1xuaW1wb3J0IHtcblx0ZXhlY0NtZCwgZXhlY0NtZFN5bmMsIGNtZFN1Y2NlZWRzLFxuXHR9IGZyb20gJy4vZXhlYy5saWIudHMnXG5cbi8qKlxuICogQG1vZHVsZSBjb21waWxlLmxpYiAtIGNvbXBpbGUgZmlsZXNcbiAqL1xuXG4jIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuIyAgIFRZUEVTXG4jIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4jIC0tLSBBIGZ1bmN0aW9uIHRvIHRlc3QgaWYgY29tcGlsaW5nIGEgZmlsZSBpcyBldmVuIHBvc3NpYmxlXG5leHBvcnQgdHlwZSBUVGVzdGVyRnVuYyA9ICgpID0+IGJvb2xlYW5cblxuZXhwb3J0IHR5cGUgVENvbXBpbGVTdGF0dXMgPVxuXHQndGVtcCcgICAgICAgfCAgICAjIC0tLSBpdCdzIGFuIGludGVybWVkaWF0ZSBmaWxlLCBub3QgY29tcGlsZWRcblx0J25vY29tcGlsZXInIHwgICAgIyAgICAgbm8gY29tcGlsZXIgY29uZmlndXJlZCBmb3IgdGhpcyBmaWxlXG5cdCdleGlzdHMnICAgICB8ICAgICMgICAgIG5ld2VyIG91dHB1dCBmaWxlcyBleGlzdCwgbm90IGNvbXBpbGVkXG5cdCdmYWlsZWQnICAgICB8ICAgICMgICAgIGNvbXBpbGluZyBmYWlsZWRcblx0J2NvbXBpbGVkJyAgICAgICAgIyAgICAgY29tcGlsaW5nIHN1Y2NlZWRlZCwgb3V0cHV0IGZpbGUgZXhpc3RzXG5cbmV4cG9ydCB0eXBlIFRDb21waWxlckZ1bmMgPSAocGF0aDogc3RyaW5nKSA9PiBUQ29tcGlsZVN0YXR1c1xuZXhwb3J0IHR5cGUgVFBvc3RQcm9jZXNzb3IgPSAocGF0aDogc3RyaW5nKSA9PiB2b2lkXG5cbmV4cG9ydCB0eXBlIFRDb21waWxlckluZm8gPSB7XG5cdHRlc3RlcjogVFRlc3RlckZ1bmNcblx0Y29tcGlsZXI6IFRDb21waWxlckZ1bmNcblx0Z2V0T3V0UGF0aHM6IChwYXRoOiBzdHJpbmcpID0+IHN0cmluZ1tdXG5cdH1cblxuZXhwb3J0IHR5cGUgVENvbXBpbGVyQ29uZmlnID0ge1xuXHRoQ29tcGlsZXJzOiBoYXNob2Y8VENvbXBpbGVySW5mbz4gICAgICAgICAjIDxzdHJpbmc+OiA8VENvbXBpbGVySW5mbz5cblx0aFBvc3RQcm9jZXNzb3JzOiBoYXNob2Y8VFBvc3RQcm9jZXNzb3I+ICAgIyA8c3RyaW5nPjogPFRQb3N0UHJvY2Vzc29yPlxuXHR9XG5cbmV4cG9ydCBpc0NvbXBpbGVySW5mbyA6PSAoeDogYW55KTogeCBpcyBUQ29tcGlsZXJJbmZvID0+XG5cdHJldHVybiBpc0hhc2goeCkgJiYgaGFzS2V5cyh4LCAndGVzdGVyJywgJ2NvbXBpbGVyJywgJ2dldE91dFBhdGhzJylcblxuZXhwb3J0IGlzQ29tcGlsZXJDb25maWcgOj0gKHg6IGFueSk6IHggaXMgVENvbXBpbGVyQ29uZmlnID0+XG5cdHJldHVybiBpc0hhc2goeCkgJiYgaGFzS2V5cyh4LCAnaENvbXBpbGVycycsICdoUG9zdFByb2Nlc3NvcnMnKVxuXG5leHBvcnQgdHlwZSBUQ29tcGlsZVJlc3VsdCA9IHtcblx0c3RhdHVzOiBUQ29tcGlsZVN0YXR1c1xuXHRwYXRoOiBzdHJpbmdcblx0bE91dFBhdGhzPzogc3RyaW5nW11cblx0cG9zdFByb2NTdGF0dXM/OiBhbnlcblx0fVxuXG5leHBvcnQgdHlwZSBUVW5pdFRlc3RSZXN1bHQgPSB7XG5cdHN0dWI6IHN0cmluZ1xuXHRzdWNjZXNzOiBib29sZWFuXG5cdG1zZz86IHN0cmluZ1xuXHRjb2RlPzogbnVtYmVyXG5cdHNpZ25hbD86IHN0cmluZ1xuXHR9XG5cbiMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbmxldCBoQ29tcGlsZXJDb25maWc6IFRDb21waWxlckNvbmZpZz8gPSB1bmRlZiAgICMgLS0tIGxvYWRlZCB3aGVuIG5lZWRlZFxuXG5nZXRDb25maWcgOj0gKCk6IFRDb21waWxlckNvbmZpZyA9PlxuXG5cdGlmIGRlZmluZWQoaENvbXBpbGVyQ29uZmlnKVxuXHRcdHJldHVybiBoQ29tcGlsZXJDb25maWdcblx0ZWxzZVxuXHRcdHJldHVybiBnZXRDb21waWxlckNvbmZpZygpXG5cbiMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbi8qKlxuICogZ2V0Q29tcGlsZXJDb25maWcocGF0aCkgLSByZXR1cm4gY29tcGlsZXIgY29uZmlndXJhdGlvbiBmcm9tIGEgZmlsZVxuICovXG5cbmV4cG9ydCBnZXRDb21waWxlckNvbmZpZyA6PSAoXG5cdHBhdGg6IHN0cmluZyA9ICdzcmMvbGliL2NvbXBpbGUuY29uZmlnLmNpdmV0J1xuXHQpOiBUQ29tcGlsZXJDb25maWcgPT5cblxuXHRhc3NlcnQgaXNGaWxlKHBhdGgpLCBcIk5vIHN1Y2ggY29tcGlsZSBjb25maWcgZmlsZTogI3tPTChwYXRoKX1cIlxuXHREQkcgXCJsb2FkIGNvbXBpbGVyIGNvbmZpZyBmcm9tICN7cGF0aH1cIlxuXHRoQ29uZmlnIDo9IGNvbmZpZ0Zyb21GaWxlKHBhdGgpXG5cdERCR1ZBTFVFICdoQ29uZmlnJywgaENvbmZpZ1xuXHRpZiBpc0NvbXBpbGVyQ29uZmlnKGhDb25maWcpXG5cblx0XHQjIC0tLSBSZW1vdmUgYW55IGNvbXBpbGVycyBmb3Igd2hpY2ggdGhlIGFjdHVhbCBjb21waWxlclxuXHRcdCMgICAgIGhhcyBub3QgYmVlbiBpbnN0YWxsZWRcblxuXHRcdGhDb21waWxlcnMgOj0gaENvbmZpZy5oQ29tcGlsZXJzXG5cdFx0Zm9yIGV4dCBvZiBrZXlzKGhDb21waWxlcnMpXG5cdFx0XHR7dGVzdGVyfSA6PSBoQ29tcGlsZXJzW2V4dF1cblx0XHRcdHB1c2hMb2dMZXZlbCAnc2lsZW50J1xuXHRcdFx0d29ya3MgOj0gdGVzdGVyKClcblx0XHRcdHBvcExvZ0xldmVsKClcblxuXHRcdFx0aWYgbm90IHdvcmtzXG5cdFx0XHRcdERCRyBcIkRlbGV0aW5nIGNvbXBpbGVyIGZvciBleHQgI3tPTChleHQpfVwiXG5cdFx0XHRcdGRlbGV0ZSBoQ29tcGlsZXJzW2V4dF1cblx0XHRyZXR1cm4gaENvbmZpZ1xuXHRlbHNlXG5cdFx0cmV0dXJuIHtcblx0XHRcdGhDb21waWxlcnM6IHt9XG5cdFx0XHRoUG9zdFByb2Nlc3NvcnM6IHt9XG5cdFx0XHR9XG5cbiMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4jIC0tLSByZXR1cm5zIGEgVENvbXBpbGVySW5mbyBvciB1bmRlZlxuXG5leHBvcnQgZ2V0Q29tcGlsZXJJbmZvIDo9IChcblx0XHRleHQ6IHN0cmluZ1xuXHRcdCk6IFRDb21waWxlckluZm8/ID0+XG5cblx0aENvbmZpZyA6PSBnZXRDb25maWcoKVxuXHRoSW5mbyA6PSBoQ29uZmlnLmhDb21waWxlcnNbZXh0XVxuXHRpZiBkZWZpbmVkKGhJbmZvKVxuXHRcdHJldHVybiBoSW5mb1xuXHRlbHNlXG5cdFx0REJHIFwiTm8gY29tcGlsZXIgZm9yICN7ZXh0fSBmaWxlc1wiXG5cdFx0cmV0dXJuIHVuZGVmXG5cbiMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbmV4cG9ydCBnZXRQb3N0UHJvY2Vzc29yIDo9IChwdXJwb3NlOiBzdHJpbmcpOiBUUG9zdFByb2Nlc3Nvcj8gPT5cblxuXHRoQ29uZmlnIDo9IGdldENvbmZpZygpXG5cdHBwIDo9IGhDb25maWcuaFBvc3RQcm9jZXNzb3JzW3B1cnBvc2VdXG5cdGlmIGRlZmluZWQocHApXG5cdFx0cmV0dXJuIHBwXG5cdGVsc2Vcblx0XHREQkcgXCJObyBwb3N0IHByb2Nlc3NvciBmb3IgI3twdXJwb3NlfSBmaWxlc1wiXG5cdFx0cmV0dXJuIHVuZGVmXG5cbiMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4jIC0tLSBzcmMgY2FuIGJlIGEgZnVsbCBvciByZWxhdGl2ZSBwYXRoXG4jICAgICB0aHJvd3MgZXJyb3IgaWYgZmlsZSBkb2VzIG5vdCBleGlzdFxuI1xuIyAgICAgUG9zc2libGUgc3RhdHVzIHZhbHVlczpcbiMgICAgICAgICd0ZW1wJyAgICAgICAtIGl0IHdhcyBhIHRlbXAgZmlsZSwgbm90IGNvbXBpbGVkXG4jICAgICAgICAnbm9jb21waWxlcicgLSBoYXMgbm8gY29tcGlsZXIsIG5vdCBjb21waWxlZFxuIyAgICAgICAgJ2V4aXN0cycgICAgIC0gbmV3ZXIgY29tcGlsZWQgZmlsZSBhbHJlYWR5IGV4aXN0c1xuIyAgICAgICAgJ2ZhaWxlZCcgICAgIC0gY29tcGlsaW5nIGZhaWxlZFxuIyAgICAgICAgJ2NvbXBpbGVkJyAgIC0gc3VjY2Vzc2Z1bGx5IGNvbXBpbGVkXG5cbmV4cG9ydCBjb21waWxlRmlsZSA6PSAoXG5cdHBhdGg6IHN0cmluZyxcblx0aE9wdGlvbnM6IGhhc2g9e31cblx0KTogVENvbXBpbGVSZXN1bHQgPT5cblxuXHRhc3NlcnQgaXNGaWxlKHBhdGgpLCBcIk5vIHN1Y2ggZmlsZTogI3tPTChwYXRoKX1cIlxuXHREQkcgXCJDT01QSUxFOiAje09MKHBhdGgpfVwiLCBJTkRFTlRcblxuXHRoUGF0aEluZm8gOj0gcGFyc2VQYXRoIHBhdGhcblx0e3JlbFBhdGgsIHN0dWIsIHB1cnBvc2UsIGV4dH0gOj0gaFBhdGhJbmZvXG5cblx0aWYgbm90ZGVmaW5lZChleHQpXG5cdFx0REJHIFwiTm90IGNvbXBpbGluZyAtIG5vIGZpbGUgZXh0ZW5zaW9uIGluICN7T0wocGF0aCl9XCIsIFVOREVOVFxuXHRcdHJldHVybiB7c3RhdHVzOiAnbm9jb21waWxlcicsIHBhdGg6IHJlbFBhdGh9XG5cblx0aENvbXBpbGVySW5mbyA6PSBnZXRDb21waWxlckluZm8oZXh0KVxuXHRpZiBub3RkZWZpbmVkKGhDb21waWxlckluZm8pXG5cdFx0REJHIFwiTm90IGNvbXBpbGluZyAtIG5vIGNvbXBpbGVyIGZvciAje09MKGV4dCl9XCIsIFVOREVOVFxuXHRcdHJldHVybiB7c3RhdHVzOiAnbm9jb21waWxlcicsIHBhdGg6IHJlbFBhdGh9XG5cblx0e2NvbXBpbGVyLCBnZXRPdXRQYXRoc30gOj0gaENvbXBpbGVySW5mb1xuXHRsT3V0UGF0aHMgOj0gZ2V0T3V0UGF0aHMocmVsUGF0aClcblx0REJHIFwibE91dFBhdGhzID0gI3tPTChsT3V0UGF0aHMpfVwiXG5cblx0bGV0IGFsbE5ld2VyID0gdHJ1ZVxuXHRmb3Igb3V0UGF0aCBvZiBsT3V0UGF0aHNcblx0XHRpZiBub3QgbmV3ZXJEZXN0RmlsZUV4aXN0cyhyZWxQYXRoLCBvdXRQYXRoKVxuXHRcdFx0YWxsTmV3ZXIgPSBmYWxzZVxuXHRcdFx0YnJlYWtcblx0aWYgYWxsTmV3ZXJcblx0XHREQkcgXCJOb3QgY29tcGlsaW5nLCBuZXdlciAje09MKGxPdXRQYXRocyl9IGV4aXN0XCIsIFVOREVOVFxuXHRcdHJldHVybiB7c3RhdHVzOiAnZXhpc3RzJywgcGF0aDogcmVsUGF0aCwgbE91dFBhdGhzfVxuXG5cdERCRyBcImNvbXBpbGluZyAje09MKHBhdGgpfSB0byAje09MKGxPdXRQYXRocyl9XCJcblx0c3RhdHVzIDo9IGNvbXBpbGVyIHBhdGhcblx0bm9wcCA6PSBnZXRPbmVPcHRpb24gaE9wdGlvbnMsICdub3BwJywgZmFsc2Vcblx0bGV0IHBvc3RQcm9jU3RhdHVzOiBhbnk/ID0gdW5kZWZcblx0aWYgKHN0YXR1cyA9PSAnY29tcGlsZWQnKSAmJiBkZWZpbmVkKHB1cnBvc2UpICYmIG5vdCBub3BwXG5cdFx0cG9zdFByb2MgOj0gZ2V0UG9zdFByb2Nlc3NvcihwdXJwb3NlKVxuXHRcdGlmIGRlZmluZWQocG9zdFByb2MpXG5cdFx0XHREQkcgXCJwb3N0LXByb2Nlc3NpbmcgZmlsZVwiXG5cdFx0XHR0cnlcblx0XHRcdFx0cG9zdFByb2MgcGF0aFxuXHRcdFx0Y2F0Y2ggZXJyXG5cdFx0XHRcdHBvc3RQcm9jU3RhdHVzID0gZXJyXG5cdERCRyBVTkRFTlRcblx0aWYgZGVmaW5lZChwb3N0UHJvY1N0YXR1cylcblx0XHRyZXR1cm4ge3N0YXR1cywgcGF0aDogcmVsUGF0aCwgbE91dFBhdGhzLCBwb3N0UHJvY1N0YXR1c31cblx0ZWxzZVxuXHRcdHJldHVybiB7c3RhdHVzLCBwYXRoOiByZWxQYXRoLCBsT3V0UGF0aHN9XG5cbiMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbmV4cG9ydCBnZXRDb21waWxlckdsb2JQYXR0ZXJuIDo9IChyb290OiBzdHJpbmc9JyoqJyk6IHN0cmluZyA9PlxuXG5cdGhDb25maWcgOj0gZ2V0Q29uZmlnKClcblx0bEtleXMgOj0ga2V5cyhoQ29uZmlnLmhDb21waWxlcnMpXG5cdHBhdHRlcm4gOj0gKFxuXHRcdChsS2V5cy5sZW5ndGggPT0gMSkgPyBcIiN7cm9vdH0vKiN7bEtleXNbMF19XCJcblx0XHQgICAgICAgICAgICAgICAgICAgIDogXCIje3Jvb3R9Lyp7I3tsS2V5cy5qb2luKCcsJyl9fVwiXG5cdFx0KVxuXHREQkcgXCJjb21waWxlciBnbG9iOiAje09MKHBhdHRlcm4pfVwiXG5cdHJldHVybiBwYXR0ZXJuXG5cbiMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4jIC0tLSBHRU5FUkFUT1JcblxuZXhwb3J0IGFsbENvbXBpbGFibGVGaWxlcyA6PSAoXG5cdFx0aE9wdGlvbnM6IGhhc2g9e31cblx0XHQpOiBHZW5lcmF0b3I8VFBhdGhJbmZvLCB2b2lkLCB2b2lkPiAtPlxuXG5cdHtyb290LCBmaWx0ZXJ9IDo9IGdldE9wdGlvbnMgaE9wdGlvbnMsIHtcblx0XHRyb290OiAnKionXG5cdFx0fVxuXHRwYXR0ZXJuIDo9IGdldENvbXBpbGVyR2xvYlBhdHRlcm4ocm9vdClcblx0REJHIFwicGF0dGVybiA9ICN7cGF0dGVybn1cIlxuXHRmb3IgaEZpbGVJbmZvIG9mIGFsbEZpbGVzTWF0Y2hpbmcocGF0dGVybiwge2ZpbHRlcn0pXG5cdFx0eWllbGQgaEZpbGVJbmZvXG5cdHJldHVyblxuXG4jIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4jIC0tLSBhIGdlbmVyYXRvclxuXG5leHBvcnQgcnVuVW5pdFRlc3RzRm9yIDo9IChcblx0c3R1Yjogbm9uRW1wdHlTdHJpbmdcblx0aE9wdGlvbnM6IGhhc2g9e31cblx0KTogR2VuZXJhdG9yPFRVbml0VGVzdFJlc3VsdCwgdm9pZCwgdm9pZD4gLT5cblxuXHR7dmVyYm9zZX0gOj0gZ2V0T3B0aW9ucyBoT3B0aW9ucywge1xuXHRcdHZlcmJvc2U6IGZhbHNlXG5cdFx0fVxuXG5cdERCRyBcIlJ1bm5pbmcgdW5pdCB0ZXN0cyBmb3IgI3tzdHVifVwiXG5cdGlmIG5vdCB2ZXJib3NlXG5cdFx0cHVzaExvZ0xldmVsICdzaWxlbnQnXG5cblx0IyAtLS0gRW5zdXJlIHRoYXQgbWF0Y2hpbmcgbGliICYgY21kIGZpbGVzIGFyZSBjb21waWxlZFxuXHQjICAgICAobm8gZXJyb3IgaWYgdGhlcmUgaXMgbm8gY29tcGlsZXIgZm9yIHRoZSBmaWxlKVxuXHRmb3Ige3BhdGh9IG9mIGFsbEZpbGVzTWF0Y2hpbmcoXCIqKi8je3N0dWJ9LipcIilcblx0XHR7c3RhdHVzfSA6PSBjb21waWxlRmlsZSBwYXRoLCBvJ25vcHAnXG5cdFx0YXNzZXJ0IChzdGF0dXMgIT0gJ2ZhaWxlZCcpLCBcImNvbXBpbGUgb2YgI3twYXRofSBmYWlsZWRcIlxuXG5cdCMgLS0tIENvbXBpbGUgYW5kIHJ1biBhbGwgdW5pdCB0ZXN0cyBmb3Igc3R1YlxuXHRmb3Ige3BhdGh9IG9mIGFsbEZpbGVzTWF0Y2hpbmcoXCIqKi8je3N0dWJ9Ki50ZXN0LipcIilcblx0XHR7c3RhdHVzLCBsT3V0UGF0aHN9IDo9IGNvbXBpbGVGaWxlIHBhdGgsIG8nbm9wcCdcblx0XHRhc3NlcnQgKHN0YXR1cyAhPSAnZmFpbGVkJyksIFwiY29tcGlsZSBvZiAje3BhdGh9IGZhaWxlZFwiXG5cdFx0aWYgbm90ZGVmaW5lZChsT3V0UGF0aHMpXG5cdFx0XHRjb250aW51ZVxuXHRcdGZvciBvdXRQYXRoIG9mIGxPdXRQYXRoc1xuXHRcdFx0YXNzZXJ0IGlzRmlsZShvdXRQYXRoKSwgXCJGaWxlICN7T0wob3V0UGF0aCl9IG5vdCBmb3VuZFwiXG5cblx0XHQjIC0tLSBDb21waWxlIGFsbCBmaWxlcyBpbiBzdWJkaXIgaWYgaXQgZXhpc3RzXG5cdFx0aWYgaXNEaXIoXCJ0ZXN0LyN7c3R1Yn1cIilcblx0XHRcdGZvciB7cGF0aH0gb2YgYWxsRmlsZXNNYXRjaGluZyhcInRlc3QvI3tzdHVifS8qXCIpXG5cdFx0XHRcdHtzdGF0dXMsIGxPdXRQYXRoc30gOj0gY29tcGlsZUZpbGUgcGF0aFxuXHRcdFx0XHRhc3NlcnQgKHN0YXR1cyAhPSAnZmFpbGVkJyksIFwiQ29tcGlsZSBvZiAje3BhdGh9IGZhaWxlZFwiXG5cdFx0XHRcdGlmIG5vdGRlZmluZWQobE91dFBhdGhzKVxuXHRcdFx0XHRcdFdBUk4gXCJGaWxlICN7T0wocGF0aCl9IG5vdCBjb21waWxlZCB0byAje09MKGxPdXRQYXRocyl9XCJcblxuXHRcdCMgLS0tIFJ1biB0aGUgdW5pdCB0ZXN0cywgeWllbGQgcmVzdWx0c1xuXHRcdGZvciBvdXRQYXRoIG9mIGxPdXRQYXRoc1xuXHRcdFx0e3N1Y2Nlc3MsIGNvZGUsIHNpZ25hbH0gOj0gZXhlY0NtZFN5bmMgJ2Rlbm8nLCBbXG5cdFx0XHRcdFx0J3Rlc3QnLFxuXHRcdFx0XHRcdCctcUEnLFxuXHRcdFx0XHRcdG91dFBhdGhcblx0XHRcdFx0XHRdXG5cdFx0XHR5aWVsZCB7c3R1Yiwgc3VjY2VzcywgY29kZSwgc2lnbmFsfVxuXHRpZiBub3QgdmVyYm9zZVxuXHRcdHBvcExvZ0xldmVsKClcblx0cmV0dXJuXG5cbiMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4jIC0tLSBhIGdlbmVyYXRvclxuXG5leHBvcnQgcnVuQWxsVW5pdFRlc3RzIDo9IChcblx0XHQpOiBHZW5lcmF0b3I8VFVuaXRUZXN0UmVzdWx0LCB2b2lkLCB2b2lkPiAtPlxuXG5cdERCRyBcIlJ1bm5pbmcgYWxsIHVuaXQgdGVzdHNcIlxuXG5cdGhHbG9iT3B0aW9ucyA6PSB7XG5cdFx0ZXhjbHVkZTogWydub2RlX21vZHVsZXMvKionLCAnLmdpdC8qKiddXG5cdFx0fVxuXG5cdHBhdHRlcm4gOj0gJyoqLyoue2xpYixjbWR9LnRzJ1xuXHREQkcgXCJwYXR0ZXJuID0gI3tPTChwYXR0ZXJuKX1cIlxuXHRmb3Ige3BhdGgsIHN0dWJ9IG9mIGFsbEZpbGVzTWF0Y2hpbmcocGF0dGVybiwgaEdsb2JPcHRpb25zKVxuXHRcdGlmIChzdHViID09IHVuZGVmKVxuXHRcdFx0V0FSTiBcIk5vIHN0dWIgZm91bmQgaW4gI3tPTChwYXRoKX1cIlxuXHRcdGVsc2Vcblx0XHRcdERCRyBcIlVOSVQgVEVTVDogI3twYXRofVwiXG5cdFx0XHRmb3IgaFJlc3VsdCBvZiBydW5Vbml0VGVzdHNGb3Ioc3R1Yilcblx0XHRcdFx0eWllbGQgaFJlc3VsdFxuXHRyZXR1cm5cblxuIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuIyAtLS0gdXNlckNvbmZpZ1BhdGggcmVzb2x2ZXMgJy4nIHRvIGN1cnJlbnQgd29ya2luZyBkaXJlY3RvcnksXG4jICAgICBub3QgdGhlIGN1cnJlbnQgZmlsZSBsb2NhdGlvblxuXG5leHBvcnQgdXNlckNvbmZpZ1BhdGg6IHN0cmluZyA6PSBta3BhdGgoJy4vY29tcGlsZXIuY29uZmlnLnRzJylcblxuIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiMgQVNZTkNcblxuZXhwb3J0IGluc3RhbGxDbWQgOj0gKHBhdGg6IHN0cmluZywgbmFtZTogc3RyaW5nPz11bmRlZik6IHZvaWQgPT5cblxuXHRpZiBub3RkZWZpbmVkKG5hbWUpXG5cdFx0YXdhaXQgZXhlY0NtZCAnZGVubycsIFtcblx0XHRcdCdpbnN0YWxsJ1xuXHRcdFx0Jy1mZ0EnXG5cdFx0XHQnLS1jb25maWcnXG5cdFx0XHQnZGVuby5qc29uYydcblx0XHRcdHBhdGhcblx0XHRcdF1cblx0ZWxzZVxuXHRcdGF3YWl0IGV4ZWNDbWQgJ2Rlbm8nLCBbXG5cdFx0XHQnaW5zdGFsbCdcblx0XHRcdCctZmdBJ1xuXHRcdFx0Jy1uJ1xuXHRcdFx0bmFtZVxuXHRcdFx0Jy0tY29uZmlnJ1xuXHRcdFx0J2Rlbm8uanNvbmMnXG5cdFx0XHRwYXRoXG5cdFx0XHRdXG5cdHJldHVyblxuXG4jIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuIyBBU1lOQ1xuXG5leHBvcnQgdW5pbnN0YWxsQ21kIDo9IChwYXRoOiBzdHJpbmcsIG5hbWU6IHN0cmluZz89dW5kZWYpOiB2b2lkID0+XG5cblx0aWYgbm90ZGVmaW5lZChuYW1lKVxuXHRcdGF3YWl0IGV4ZWNDbWQgJ2Rlbm8nLCBbXG5cdFx0XHQndW5pbnN0YWxsJ1xuXHRcdFx0Jy1nJ1xuXHRcdFx0cGF0aFxuXHRcdFx0XVxuXHRlbHNlXG5cdFx0YXdhaXQgZXhlY0NtZCAnZGVubycsIFtcblx0XHRcdCd1bmluc3RhbGwnXG5cdFx0XHQnLWcnXG5cdFx0XHQnLW4nXG5cdFx0XHRuYW1lXG5cdFx0XHRwYXRoXG5cdFx0XHRdXG5cdHJldHVyblxuIl19