"use strict";
// compile.lib.civet

type AutoPromise<T> = Promise<Awaited<T>>;
import {compile as compileSvelte} from 'npm:svelte/compiler'

import {
	undef, defined, notdefined, assert, hash, hashof,
	isString, isHash, isArray, nonEmpty,
	nonEmptyString, isNonEmptyString,
	} from './datatypes.lib.ts'
import {
	croak, pass, keys, hasKey, hasKeys, missingKeys,
	OL, o, getOptions,
	} from './llutils.lib.ts'
import {
	LogCmd, DBG, LOG, WARN, ERR, LOGVALUE, DBGVALUE,
	pushLogLevel, popLogLevel,
	} from './logger.lib.ts'
import {
	isFile, isDir, fileExt, withExt, rmFile, mkpath, parsePath,
	relpath, newerDestFileExists, slurp, barf, isStub,
	allFilesMatching,
	pathInfo,
	} from './fs.lib.ts'
import {
	execCmd, execCmdSync, cmdSucceeds,
	} from './exec.lib.ts'
import {cielo2civetFile} from './cielo.lib.ts'

/**
 * @module compile.lib - configuring the compiler
 */

// ---------------------------------------------------------------------------
//    TYPES
// ---------------------------------------------------------------------------

export type testerFunc = () => boolean

export type compilerFunc = (path: string) => void
export const isCompilerFunc = (f: any): boolean => {
	try {
		assert((typeof f === 'function'), `GOT ${OL(f)}`)
		return true
	}
	catch (err: any) {
		ERR(err.message)
		return false
	}
}

export type postProcessor = (hInfo: pathInfo) => void
export const isPostProcessor = (f: any): boolean => {
	try {
		assert((typeof f === 'function'), `GOT ${OL(f)}`)
		return true
	}
	catch (err: any) {
		ERR(err.message)
		return false
	}
}

export type compilerInfo = {
	tester: testerFunc
	compiler: compilerFunc
	getOutPath: (path: string) => string
	}
export const isCompilerInfo = (h: any): boolean => {
	return hasKeys(h, 'tester', 'compiler', 'getOutPath')
}

export type compilerConfigHash = {
	hCompilers: hashof<compilerInfo>         // <string>: <compilerInfo>
	hPostProcessors: hashof<postProcessor>   // <string>: <postProcessor>
	}

export const isConfigHash = (h: any): h is compilerConfigHash => {

	try {
		assert(isHash(h), `GOT not a hash: ${OL(h)}`)
		const lNeeded = ['hCompilers', 'hPostProcessors']
		assert(hasKeys(h, ...lNeeded), `Bad config hash: ${OL(h)},
missing ${missingKeys(h, ...lNeeded)}`)
		const hCompilers: hashof<hash> = h.hCompilers
		for (const ext of keys(hCompilers)) {
			assert(ext.startsWith('.'), `Bad key ${OL(ext)} in hCompilers`)
			const lNeeded2 = ['getOutPath', 'tester', 'compiler']
			const h = hCompilers[ext]
			assert(hasKeys(h, ...lNeeded2), `Bad compilerInfo for ${ext},
missing ${missingKeys(h, ...lNeeded2)}`)
		}
		const hPostProcessors: hashof<hash> = h.hPostProcessors
		for (const purp of keys(hPostProcessors)) {
			assert(isPostProcessor(hPostProcessors[purp]), `Bad postProcessor for ${purp},
Not a post processor`)
		}

		return true
	}
	catch (err: any) {
		ERR(err.message)
		return false
	}
}

// ---------------------------------------------------------------------------
// --- NOTES:
//        1. compiler doesn't need to check if the file exists
//        2. compiler doesn't need to check the file extension

export const hDefaultConfig: compilerConfigHash = {

	hCompilers: {
		// --- keys are file extensions
		//     NOTE: compilers must be synchronous!!!

		'.svelte': {
			getOutPath: (path: string) => withExt(path, '.js'),
			tester: () => { return true },
			compiler: (path: string) => {
				const jsPath = withExt(path, '.js')
				rmFile(jsPath)
				const {js, warnings} = compileSvelte(slurp(path), {
					customElement: true,
					runes: true
					})
				const {code, map} = js
				barf(jsPath, code)
				return
			}
			},
		'.dot': {
			getOutPath: (path: string) => withExt(path, '.svg'),
			tester: () => cmdSucceeds('dot', ['--version'], o`quiet`),
			compiler: (path: string) => {
				const svgPath = withExt(path, '.svg')
				rmFile(svgPath)
				execCmdSync('dot', ['-Tsvg', path])
				return
			}
			},
		'.cielo': {
			getOutPath: (path: string) => withExt(path, '.temp.civet'),
			tester: () => {
				return true
			},
			compiler: (path: string) => {
				const civetPath = withExt(path, '.temp.civet')
				rmFile(civetPath)
				cielo2civetFile(path, civetPath)
				civet2tsFile(civetPath)
				return
			}
			},
		'.civet': {
			getOutPath: (path: string) => withExt(path, '.ts'),
			tester: () => {
				return cmdSucceeds('civet', ['--version'], o`quiet`)
			},
			compiler: (path: string) => {
				civet2tsFile(path)
				return
			}
			}
		},

	hPostProcessors: {
		// --- Keys are a purpose

		'test': (hInfo: pathInfo): void => {
			const {path, stub} = hInfo
			if (stub === undef) {
				return
			}
			pass()
		},

		'lib': (hInfo: pathInfo): void => {
			const {path, stub} = hInfo
			if (stub === undef) {
				return
			}
			for (const {success} of runUnitTestsFor(stub)) {
				if (!success) {
					WARN(`Unit test ${path} failed`)
				}
			}
		},

		'cmd': (hInfo: pathInfo): void => {
			const {path} = hInfo
			LOG(`- installing command ${path}`)
			installCmd(path)
			return
		}
		}
	}

// ---------------------------------------------------------------------------
// --- ASYNC !!!

/**
 * loadCompilerConfig() - Load compiler configuration from a file
 */

export const loadCompilerConfig = async (
	path: string
	): AutoPromise<compilerConfigHash> => {

	assert(isFile(path), `No such compile config file: ${OL(path)}`)
	DBG(`load compiler config from ${path}`)
	const module = await import(`file:///${mkpath(path)}`)
	const h = module.default as compilerConfigHash
	assert(isConfigHash(h), "Bad user config hash")

	// --- Remove any compilers for which the actual compiler
	//     has not been installed

	const hCompilers = h.hCompilers
	for (const ext of keys(hCompilers)) {
		const {tester} = hCompilers[ext]
		pushLogLevel('silent')
		const works = tester()
		popLogLevel()

		if (!works) {
			DBG(`Deleting compiler for ext ${OL(ext)}`)
			delete hCompilers[ext]
		}
	}
	return h
}

// ---------------------------------------------------------------------------

const civet2tsFile = (path: string): void => {

	assert(isFile(path), `No such file: ${OL(path)} (civet2tsFile)`)
	assert((fileExt(path) === '.civet'), `Not a civet file: ${OL(path)}`)

	const tsPath = withExt(path, '.ts')
	execCmdSync('civet', [
		'--inline-map',
		'-o',
		tsPath,
		'-c',
		path
		])

	assert(isFile(tsPath), `File not created: ${OL(tsPath)}`)
	return
}

// ---------------------------------------------------------------------------
// ASYNC

export const installCmd = async (path: string, name: (string | undefined)=undef): AutoPromise<void> => {

	if (notdefined(name)) {
		await execCmd('deno', [
			'install',
			'-fgA',
			'--config',
			'deno.jsonc',
			path
			])
	}
	else {
		await execCmd('deno', [
			'install',
			'-fgA',
			'-n',
			name,
			'--config',
			'deno.jsonc',
			path
			])
	}
	return
}

// ---------------------------------------------------------------------------
// ASYNC

export const uninstallCmd = async (path: string, name: (string | undefined)=undef): AutoPromise<void> => {

	if (notdefined(name)) {
		await execCmd('deno', [
			'uninstall',
			'-g',
			path
			])
	}
	else {
		await execCmd('deno', [
			'uninstall',
			'-g',
			'-n',
			name,
			path
			])
	}
	return
}

// ---------------------------------------------------------------------------
// --- returns a compilerFunc or undef

export const getCompilerInfo = (ext: string): (compilerInfo | undefined) => {

	const hInfo = hCompilerConfig.hCompilers[ext]
	if (notdefined(hInfo)) {
		DBG(`No compiler for ${ext} files`)
		return undef
	}
	return hInfo
}

// ---------------------------------------------------------------------------

export const getPostProcessor = (purpose: string): (postProcessor | undefined) => {

	const pp = hCompilerConfig.hPostProcessors[purpose]
	if (notdefined(pp)) {
		DBG(`No post processor for ${purpose} files`)
		return undef
	}
	return pp
}

// ---------------------------------------------------------------------------
// --- src can be a full path or [dirspec, stub, purpose]
//        where dirspec can be 'lib', 'bin' or 'test'
//     throws error if file does not exist
//
//     Possible status values:
//        'temp'       - it was a temp file, not compiled
//        'nocompiler' - has no compiler, not compiled
//        'exists'     - newer compiled file already exists
//        'failed'     - compiling failed
//        'compiled'   - successfully compiled

export type compileStatus = 'nofile' |
	'temp' | 'nocompiler' |
	'exists' | 'failed' | 'compiled'

export type compileResult = {
	status: compileStatus
	path: string
	relPath?: (string | undefined)
	outPath?: (string | undefined)
	}

export const compileFile = (
	path: string,
	hOptions: hash={}
	): compileResult => {

	DBG(`COMPILE: ${OL(path)}`, LogCmd.INDENT)

	const {nopp} = getOptions(hOptions, {
		nopp: false
		})

	// --- hPathInfo is needed for post processing
	const hPathInfo = parsePath(path)
	const {relPath, stub, purpose, ext} = hPathInfo

	if ((purpose === 'temp') || (purpose === 'debug')) {
		DBG(`Not compiling ${purpose} file ${OL(path)}`, LogCmd.UNDENT)
		return {
			status: 'temp',
			path,
			relPath,
			outPath: undef
			}
	}

	if (notdefined(ext)) {
		DBG(`Not compiling - no file extension in ${OL(path)}`, LogCmd.UNDENT)
		return {
			status: 'nocompiler',
			path,
			relPath,
			outPath: undef
			}
	}

	const hInfo = getCompilerInfo(ext)
	if (notdefined(hInfo)) {
		DBG(`Not compiling - no compiler for ${OL(ext)}`, LogCmd.UNDENT)
		return {
			status: 'nocompiler',
			path,
			relPath,
			outPath: undef
			}
	}

	const {compiler, getOutPath} = hInfo
	const outPath = getOutPath(relPath)
	if (newerDestFileExists(relPath, outPath)) {
		DBG(`Not compiling, newer ${OL(outPath)} exists`, LogCmd.UNDENT)
		return {
			status: 'exists',
			path,
			relPath,
			outPath
			}
	}

	DBG("No newer dest file exists")
	if (isFile(outPath)) {
		DBG(`removing older ${OL(outPath)}`)
		rmFile(outPath)
	}

	DBG(`compiling ${OL(path)}`)
	compiler(relPath)     // produces file outPath, may throw exception

	if (isFile(outPath)) {
		// --- If first line is a file name,
		//     change it to outPath
		const contents = Deno.readTextFileSync(outPath)
		const lLines = contents.split("\n")
		lLines[0].replace(path, outPath)
		Deno.writeTextFileSync(outPath, lLines.join("\n"))
	}
	else {
		ERR(`Output file ${relpath(outPath)} not produced`, LogCmd.UNDENT)
		return {
			status: 'failed',
			path,
			relPath,
			outPath
			}
	}

	// --- If there's a post-processor, run it
	if (isNonEmptyString(purpose)) {
		const postProc = getPostProcessor(purpose)
		if (notdefined(postProc)) {
			pass()
		}
		else {
			DBG("post-processing file")
			postProc(hPathInfo)
		}
	}

	DBG(LogCmd.UNDENT)
	return {
		status: 'compiled',
		path,
		relPath,
		outPath
		}
}

// ---------------------------------------------------------------------------

export const getCompilerGlobPattern = (root: string='**'): string => {

	const lKeys = keys(hCompilerConfig.hCompilers)
	const pattern = (
		(lKeys.length === 1) ? `${root}/*${lKeys[0]}`
		                    : `${root}/*{${lKeys.join(',')}}`
		)
	DBG(`compiler glob: ${OL(pattern)}`)
	return pattern
}

// ---------------------------------------------------------------------------
// --- GENERATOR

export const allCompilableFiles = function*(
		hOptions: hash={}
		): Generator<pathInfo, void, void> {

	const {root, filter} = getOptions(hOptions, {
		root: '**'
		})
	const pattern = getCompilerGlobPattern(root)
	DBG(`pattern = ${pattern}`)
	for (const hFileInfo of allFilesMatching(pattern, {filter})) {
		yield hFileInfo
	}
	return
}

// ---------------------------------------------------------------------------

type unitTestResult = {
	stub: string
	success: boolean
	msg?: string
	code?: number
	signal?: string
	}

// --- a generator

export const runUnitTestsFor = function*(
	stub: nonEmptyString,
	hOptions: hash={}
	): Generator<unitTestResult, void, void> {

	const {verbose} = getOptions(hOptions, {
		verbose: false
		})

	DBG(`Running unit tests for ${stub}`)
	if (!verbose) {
		pushLogLevel('silent')
	}

	// --- Ensure that matching lib & cmd files are compiled
	//     (no error if there is no compiler for the file)
	for (const {path} of allFilesMatching(`**/${stub}.*`)) {
		const {status} = compileFile(path, o`nopp`)
		assert((status !== 'failed'), `compile of ${path} failed`)
	}

	// --- Compile and run all unit tests for stub
	for (const {path} of allFilesMatching(`**/${stub}*.test.*`)) {
		const {status, outPath} = compileFile(path, o`nopp`)
		assert((status !== 'failed'),
				`compile of ${path} failed, status == 'failed'`)
		if (notdefined(outPath)) {
			continue
		}
		assert(isFile(outPath), `File ${outPath} not found`)

		// --- Compile all files in subdir if it exists
		if (isDir(`test/${stub}`)) {
			for (const {path} of allFilesMatching(`test/${stub}/*`)) {
				const {status, outPath} = compileFile(path)
				assert((status !== 'failed'), `Compile of ${path} failed`)
				if (notdefined(outPath)) {
					WARN(`File ${OL(path)} not compiled to ${outPath}`)
				}
			}
		}

		// --- Run the unit test, return return code
		// --- Return value has keys success, code, signal
		const {success, code, signal} = execCmdSync('deno', [
				'test',
				'-qA',
				outPath
				])
		yield {stub, success, code, signal}
	}
	if (!verbose) {
		popLogLevel()
	}
	return
}

// ---------------------------------------------------------------------------
// --- a generator

export const runAllUnitTests = function*(
		): Generator<unitTestResult, void, void> {

	DBG("Running all unit tests")

	const hGlobOptions = {
		exclude: ['node_modules/**', '.git/**']
		}

	const pattern = '**/*.{lib,cmd}.ts'
	DBG(`pattern = ${OL(pattern)}`)
	for (const {path, stub} of allFilesMatching(pattern, hGlobOptions)) {
		if (stub === undef) {
			WARN(`No stub found in ${OL(path)}`)
		}
		else {
			DBG(`UNIT TEST: ${path}`)
			for (const hResult of runUnitTestsFor(stub)) {
				yield hResult
			}
		}
	}
	return
}

// ---------------------------------------------------------------------------

// --- userConfigPath resolves '.' to current working directory,
//     not the current file location

export const userConfigPath: string = mkpath('./compiler.config.ts')

// ---------------------------------------------------------------------------

export const hCompilerConfig = (
	(isFile(userConfigPath)?
		(await loadCompilerConfig(userConfigPath))
	:
		hDefaultConfig)
	)
DBGVALUE('hCompilerConfig', hCompilerConfig)

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3JjL2xpYi9jb21waWxlLmxpYi5jaXZldC50c3giLCJzb3VyY2VzIjpbInNyYy9saWIvY29tcGlsZS5saWIuY2l2ZXQiXSwibWFwcGluZ3MiOiI7QUFBQSxvQkFBbUI7QUFDbkIsQUFBQTtBQUNBLEssVyx5QjtBQUFBLE1BQU0sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsYUFBYSxDQUFDLENBQUMsSUFBSSxDQUFDLHFCQUFxQjtBQUM1RCxBQUFBO0FBQ0EsQUFBQSxBQUFBLE1BQU0sQ0FBQyxDQUFDO0FBQ1IsQ0FBQyxLQUFLLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxNQUFNLENBQUM7QUFDbEQsQ0FBQyxRQUFRLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxRQUFRLENBQUM7QUFDckMsQ0FBQyxjQUFjLENBQUMsQ0FBQyxnQkFBZ0IsQ0FBQztBQUNsQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsb0JBQW9CO0FBQzVCLEFBQUEsQUFBQSxNQUFNLENBQUMsQ0FBQztBQUNSLENBQUMsS0FBSyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsV0FBVyxDQUFDO0FBQ2pELENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDO0FBQ25CLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxrQkFBa0I7QUFDMUIsQUFBQSxBQUFBLE1BQU0sQ0FBQyxDQUFDO0FBQ1IsQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxRQUFRLENBQUM7QUFDakQsQ0FBQyxZQUFZLENBQUMsQ0FBQyxXQUFXLENBQUM7QUFDM0IsQ0FBQyxDQUFDLENB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QUF1QixNQUF0QixjQUFjLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBRSxDQUFDLE1BQU0sQ0FBQyxzQkFBc0IsQ0FBQztBQUMvRCxBQUFBO0FBQ0EsQUFBQSw4RUFBNkU7QUFDN0UsQUFBQTtBQUNBLEFBQUEsQUFBQSxNQUFNLENBQWdCLE1BQWYsZUFBZSxDQUFDLENBQUUsQ0FBQyxDQUFDO0FBQzNCLEFBQUEsQ0FBSSxDQUFBLE1BQU0sQ0FBQSxBQUFDLGNBQWMsQyxDQUFBO0FBQ3pCLEFBQUEsRSxDQUFFLEtBQUssQ0FBQyxrQkFBa0IsQ0FBQyxjQUFjLEMsQ0FBQztBQUMxQyxBQUFBLEMsQ0FBSztBQUNMLEFBQUEsRUFBRSxjQUh1QixDQUdUO0FBQ2hCLENBQUMsQ0FBQztBQUNGLEFBQUEsQUFBQSxRQUFRLENBQUEsQUFBQyxpQkFBaUIsQ0FBQyxDQUFDLGVBQWUsQ0FBQTtBQUMzQyIsIm5hbWVzIjpbXSwic291cmNlc0NvbnRlbnQiOlsiIyBjb21waWxlLmxpYi5jaXZldFxuXG5pbXBvcnQge2NvbXBpbGUgYXMgY29tcGlsZVN2ZWx0ZX0gZnJvbSAnbnBtOnN2ZWx0ZS9jb21waWxlcidcblxuaW1wb3J0IHtcblx0dW5kZWYsIGRlZmluZWQsIG5vdGRlZmluZWQsIGFzc2VydCwgaGFzaCwgaGFzaG9mLFxuXHRpc1N0cmluZywgaXNIYXNoLCBpc0FycmF5LCBub25FbXB0eSxcblx0bm9uRW1wdHlTdHJpbmcsIGlzTm9uRW1wdHlTdHJpbmcsXG5cdH0gZnJvbSAnLi9kYXRhdHlwZXMubGliLnRzJ1xuaW1wb3J0IHtcblx0Y3JvYWssIHBhc3MsIGtleXMsIGhhc0tleSwgaGFzS2V5cywgbWlzc2luZ0tleXMsXG5cdE9MLCBvLCBnZXRPcHRpb25zLFxuXHR9IGZyb20gJy4vbGx1dGlscy5saWIudHMnXG5pbXBvcnQge1xuXHRMb2dDbWQsIERCRywgTE9HLCBXQVJOLCBFUlIsIExPR1ZBTFVFLCBEQkdWQUxVRSxcblx0cHVzaExvZ0xldmVsLCBwb3BMb2dMZXZlbCxcblx0fSBmcm9tICcuL2xvZ2dlci5saWIudHMnXG5pbXBvcnQge1xuXHRpc0ZpbGUsIGlzRGlyLCBmaWxlRXh0LCB3aXRoRXh0LCBybUZpbGUsIG1rcGF0aCwgcGFyc2VQYXRoLFxuXHRyZWxwYXRoLCBuZXdlckRlc3RGaWxlRXhpc3RzLCBzbHVycCwgYmFyZiwgaXNTdHViLFxuXHRhbGxGaWxlc01hdGNoaW5nLFxuXHRwYXRoSW5mbyxcblx0fSBmcm9tICcuL2ZzLmxpYi50cydcbmltcG9ydCB7XG5cdGV4ZWNDbWQsIGV4ZWNDbWRTeW5jLCBjbWRTdWNjZWVkcyxcblx0fSBmcm9tICcuL2V4ZWMubGliLnRzJ1xuaW1wb3J0IHtjaWVsbzJjaXZldEZpbGV9IGZyb20gJy4vY2llbG8ubGliLnRzJ1xuXG4vKipcbiAqIEBtb2R1bGUgY29tcGlsZS5saWIgLSBjb25maWd1cmluZyB0aGUgY29tcGlsZXJcbiAqL1xuXG4jIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuIyAgICBUWVBFU1xuIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuZXhwb3J0IHR5cGUgdGVzdGVyRnVuYyA9ICgpID0+IGJvb2xlYW5cblxuZXhwb3J0IHR5cGUgY29tcGlsZXJGdW5jID0gKHBhdGg6IHN0cmluZykgPT4gdm9pZFxuZXhwb3J0IGlzQ29tcGlsZXJGdW5jIDo9IChmOiBhbnkpOiBib29sZWFuID0+XG5cdHRyeVxuXHRcdGFzc2VydCAodHlwZW9mIGYgPT0gJ2Z1bmN0aW9uJyksIFwiR09UICN7T0woZil9XCJcblx0XHRyZXR1cm4gdHJ1ZVxuXHRjYXRjaCBlcnI6IGFueVxuXHRcdEVSUiBlcnIubWVzc2FnZVxuXHRcdHJldHVybiBmYWxzZVxuXG5leHBvcnQgdHlwZSBwb3N0UHJvY2Vzc29yID0gKGhJbmZvOiBwYXRoSW5mbykgPT4gdm9pZFxuZXhwb3J0IGlzUG9zdFByb2Nlc3NvciA6PSAoZjogYW55KTogYm9vbGVhbiA9PlxuXHR0cnlcblx0XHRhc3NlcnQgKHR5cGVvZiBmID09ICdmdW5jdGlvbicpLCBcIkdPVCAje09MKGYpfVwiXG5cdFx0cmV0dXJuIHRydWVcblx0Y2F0Y2ggZXJyOiBhbnlcblx0XHRFUlIgZXJyLm1lc3NhZ2Vcblx0XHRyZXR1cm4gZmFsc2VcblxuZXhwb3J0IHR5cGUgY29tcGlsZXJJbmZvID0ge1xuXHR0ZXN0ZXI6IHRlc3RlckZ1bmNcblx0Y29tcGlsZXI6IGNvbXBpbGVyRnVuY1xuXHRnZXRPdXRQYXRoOiAocGF0aDogc3RyaW5nKSA9PiBzdHJpbmdcblx0fVxuZXhwb3J0IGlzQ29tcGlsZXJJbmZvIDo9IChoOiBhbnkpOiBib29sZWFuID0+XG5cdHJldHVybiBoYXNLZXlzKGgsICd0ZXN0ZXInLCAnY29tcGlsZXInLCAnZ2V0T3V0UGF0aCcpXG5cbmV4cG9ydCB0eXBlIGNvbXBpbGVyQ29uZmlnSGFzaCA9IHtcblx0aENvbXBpbGVyczogaGFzaG9mPGNvbXBpbGVySW5mbz4gICAgICAgICAjIDxzdHJpbmc+OiA8Y29tcGlsZXJJbmZvPlxuXHRoUG9zdFByb2Nlc3NvcnM6IGhhc2hvZjxwb3N0UHJvY2Vzc29yPiAgICMgPHN0cmluZz46IDxwb3N0UHJvY2Vzc29yPlxuXHR9XG5cbmV4cG9ydCBpc0NvbmZpZ0hhc2ggOj0gKGg6IGFueSk6IGggaXMgY29tcGlsZXJDb25maWdIYXNoID0+XG5cblx0dHJ5XG5cdFx0YXNzZXJ0IGlzSGFzaChoKSwgXCJHT1Qgbm90IGEgaGFzaDogI3tPTChoKX1cIlxuXHRcdGxOZWVkZWQgOj0gWydoQ29tcGlsZXJzJywgJ2hQb3N0UHJvY2Vzc29ycyddXG5cdFx0YXNzZXJ0IGhhc0tleXMoaCwgbE5lZWRlZC4uLiksIFwiXCJcIlxuXHRcdFx0XHRCYWQgY29uZmlnIGhhc2g6ICN7T0woaCl9LFxuXHRcdFx0XHRtaXNzaW5nICN7bWlzc2luZ0tleXMoaCwgbE5lZWRlZC4uLil9XG5cdFx0XHRcdFwiXCJcIlxuXHRcdGhDb21waWxlcnM6IGhhc2hvZjxoYXNoPiA6PSBoLmhDb21waWxlcnNcblx0XHRmb3IgZXh0IG9mIGtleXMoaENvbXBpbGVycylcblx0XHRcdGFzc2VydCBleHQuc3RhcnRzV2l0aCgnLicpLCBcIkJhZCBrZXkgI3tPTChleHQpfSBpbiBoQ29tcGlsZXJzXCJcblx0XHRcdGxOZWVkZWQyIDo9IFsnZ2V0T3V0UGF0aCcsICd0ZXN0ZXInLCAnY29tcGlsZXInXVxuXHRcdFx0aCA6PSBoQ29tcGlsZXJzW2V4dF1cblx0XHRcdGFzc2VydCBoYXNLZXlzKGgsIGxOZWVkZWQyLi4uKSwgXCJcIlwiXG5cdFx0XHRcdFx0QmFkIGNvbXBpbGVySW5mbyBmb3IgI3tleHR9LFxuXHRcdFx0XHRcdG1pc3NpbmcgI3ttaXNzaW5nS2V5cyhoLCBsTmVlZGVkMi4uLil9XG5cdFx0XHRcdFx0XCJcIlwiXG5cdFx0aFBvc3RQcm9jZXNzb3JzOiBoYXNob2Y8aGFzaD4gOj0gaC5oUG9zdFByb2Nlc3NvcnNcblx0XHRmb3IgcHVycCBvZiBrZXlzKGhQb3N0UHJvY2Vzc29ycylcblx0XHRcdGFzc2VydCBpc1Bvc3RQcm9jZXNzb3IoaFBvc3RQcm9jZXNzb3JzW3B1cnBdKSwgXCJcIlwiXG5cdFx0XHRcdEJhZCBwb3N0UHJvY2Vzc29yIGZvciAje3B1cnB9LFxuXHRcdFx0XHROb3QgYSBwb3N0IHByb2Nlc3NvclxuXHRcdFx0XHRcIlwiXCJcblxuXHRcdHJldHVybiB0cnVlXG5cdGNhdGNoIGVycjogYW55XG5cdFx0RVJSIGVyci5tZXNzYWdlXG5cdFx0cmV0dXJuIGZhbHNlXG5cbiMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4jIC0tLSBOT1RFUzpcbiMgICAgICAgIDEuIGNvbXBpbGVyIGRvZXNuJ3QgbmVlZCB0byBjaGVjayBpZiB0aGUgZmlsZSBleGlzdHNcbiMgICAgICAgIDIuIGNvbXBpbGVyIGRvZXNuJ3QgbmVlZCB0byBjaGVjayB0aGUgZmlsZSBleHRlbnNpb25cblxuZXhwb3J0IGhEZWZhdWx0Q29uZmlnOiBjb21waWxlckNvbmZpZ0hhc2ggOj0ge1xuXG5cdGhDb21waWxlcnM6IHtcblx0XHQjIC0tLSBrZXlzIGFyZSBmaWxlIGV4dGVuc2lvbnNcblx0XHQjICAgICBOT1RFOiBjb21waWxlcnMgbXVzdCBiZSBzeW5jaHJvbm91cyEhIVxuXG5cdFx0Jy5zdmVsdGUnOiB7XG5cdFx0XHRnZXRPdXRQYXRoOiAocGF0aDogc3RyaW5nKSA9PiB3aXRoRXh0KHBhdGgsICcuanMnKVxuXHRcdFx0dGVzdGVyOiAoKSA9PiByZXR1cm4gdHJ1ZVxuXHRcdFx0Y29tcGlsZXI6IChwYXRoOiBzdHJpbmcpID0+XG5cdFx0XHRcdGpzUGF0aCA6PSB3aXRoRXh0KHBhdGgsICcuanMnKVxuXHRcdFx0XHRybUZpbGUganNQYXRoXG5cdFx0XHRcdHtqcywgd2FybmluZ3N9IDo9IGNvbXBpbGVTdmVsdGUgc2x1cnAocGF0aCksIHtcblx0XHRcdFx0XHRjdXN0b21FbGVtZW50OiB0cnVlXG5cdFx0XHRcdFx0cnVuZXM6IHRydWVcblx0XHRcdFx0XHR9XG5cdFx0XHRcdHtjb2RlLCBtYXB9IDo9IGpzXG5cdFx0XHRcdGJhcmYganNQYXRoLCBjb2RlXG5cdFx0XHRcdHJldHVyblxuXHRcdFx0fVxuXHRcdCcuZG90Jzoge1xuXHRcdFx0Z2V0T3V0UGF0aDogKHBhdGg6IHN0cmluZykgPT4gd2l0aEV4dChwYXRoLCAnLnN2ZycpXG5cdFx0XHR0ZXN0ZXI6ICgpID0+IGNtZFN1Y2NlZWRzKCdkb3QnLCBbJy0tdmVyc2lvbiddLCBvJ3F1aWV0Jylcblx0XHRcdGNvbXBpbGVyOiAocGF0aDogc3RyaW5nKSA9PlxuXHRcdFx0XHRzdmdQYXRoIDo9IHdpdGhFeHQocGF0aCwgJy5zdmcnKVxuXHRcdFx0XHRybUZpbGUgc3ZnUGF0aFxuXHRcdFx0XHRleGVjQ21kU3luYyAnZG90JywgWyctVHN2ZycsIHBhdGhdXG5cdFx0XHRcdHJldHVyblxuXHRcdFx0fVxuXHRcdCcuY2llbG8nOiB7XG5cdFx0XHRnZXRPdXRQYXRoOiAocGF0aDogc3RyaW5nKSA9PiB3aXRoRXh0KHBhdGgsICcudGVtcC5jaXZldCcpXG5cdFx0XHR0ZXN0ZXI6ICgpID0+XG5cdFx0XHRcdHJldHVybiB0cnVlXG5cdFx0XHRjb21waWxlcjogKHBhdGg6IHN0cmluZykgPT5cblx0XHRcdFx0Y2l2ZXRQYXRoIDo9IHdpdGhFeHQocGF0aCwgJy50ZW1wLmNpdmV0Jylcblx0XHRcdFx0cm1GaWxlIGNpdmV0UGF0aFxuXHRcdFx0XHRjaWVsbzJjaXZldEZpbGUgcGF0aCwgY2l2ZXRQYXRoXG5cdFx0XHRcdGNpdmV0MnRzRmlsZSBjaXZldFBhdGhcblx0XHRcdFx0cmV0dXJuXG5cdFx0XHR9XG5cdFx0Jy5jaXZldCc6IHtcblx0XHRcdGdldE91dFBhdGg6IChwYXRoOiBzdHJpbmcpID0+IHdpdGhFeHQocGF0aCwgJy50cycpXG5cdFx0XHR0ZXN0ZXI6ICgpID0+XG5cdFx0XHRcdHJldHVybiBjbWRTdWNjZWVkcygnY2l2ZXQnLCBbJy0tdmVyc2lvbiddLCBvJ3F1aWV0Jylcblx0XHRcdGNvbXBpbGVyOiAocGF0aDogc3RyaW5nKSA9PlxuXHRcdFx0XHRjaXZldDJ0c0ZpbGUgcGF0aFxuXHRcdFx0XHRyZXR1cm5cblx0XHRcdH1cblx0XHR9XG5cblx0aFBvc3RQcm9jZXNzb3JzOiB7XG5cdFx0IyAtLS0gS2V5cyBhcmUgYSBwdXJwb3NlXG5cblx0XHQndGVzdCc6IChoSW5mbzogcGF0aEluZm8pOiB2b2lkID0+XG5cdFx0XHR7cGF0aCwgc3R1Yn0gOj0gaEluZm9cblx0XHRcdGlmIChzdHViID09IHVuZGVmKVxuXHRcdFx0XHRyZXR1cm5cblx0XHRcdHBhc3MoKVxuXG5cdFx0J2xpYic6IChoSW5mbzogcGF0aEluZm8pOiB2b2lkID0+XG5cdFx0XHR7cGF0aCwgc3R1Yn0gOj0gaEluZm9cblx0XHRcdGlmIChzdHViID09IHVuZGVmKVxuXHRcdFx0XHRyZXR1cm5cblx0XHRcdGZvciB7c3VjY2Vzc30gb2YgcnVuVW5pdFRlc3RzRm9yKHN0dWIpXG5cdFx0XHRcdGlmIG5vdCBzdWNjZXNzXG5cdFx0XHRcdFx0V0FSTiBcIlVuaXQgdGVzdCAje3BhdGh9IGZhaWxlZFwiXG5cblx0XHQnY21kJzogKGhJbmZvOiBwYXRoSW5mbyk6IHZvaWQgPT5cblx0XHRcdHtwYXRofSA6PSBoSW5mb1xuXHRcdFx0TE9HIFwiLSBpbnN0YWxsaW5nIGNvbW1hbmQgI3twYXRofVwiXG5cdFx0XHRpbnN0YWxsQ21kIHBhdGhcblx0XHRcdHJldHVyblxuXHRcdH1cblx0fVxuXG4jIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuIyAtLS0gQVNZTkMgISEhXG5cbi8qKlxuICogbG9hZENvbXBpbGVyQ29uZmlnKCkgLSBMb2FkIGNvbXBpbGVyIGNvbmZpZ3VyYXRpb24gZnJvbSBhIGZpbGVcbiAqL1xuXG5leHBvcnQgbG9hZENvbXBpbGVyQ29uZmlnIDo9IChcblx0cGF0aDogc3RyaW5nXG5cdCk6IGNvbXBpbGVyQ29uZmlnSGFzaCA9PlxuXG5cdGFzc2VydCBpc0ZpbGUocGF0aCksIFwiTm8gc3VjaCBjb21waWxlIGNvbmZpZyBmaWxlOiAje09MKHBhdGgpfVwiXG5cdERCRyBcImxvYWQgY29tcGlsZXIgY29uZmlnIGZyb20gI3twYXRofVwiXG5cdG1vZHVsZSA6PSBhd2FpdCBpbXBvcnQoXCJmaWxlOi8vLyN7bWtwYXRoKHBhdGgpfVwiKVxuXHRoIDo9IG1vZHVsZS5kZWZhdWx0IGFzIGNvbXBpbGVyQ29uZmlnSGFzaFxuXHRhc3NlcnQgaXNDb25maWdIYXNoKGgpLCBcIkJhZCB1c2VyIGNvbmZpZyBoYXNoXCJcblxuXHQjIC0tLSBSZW1vdmUgYW55IGNvbXBpbGVycyBmb3Igd2hpY2ggdGhlIGFjdHVhbCBjb21waWxlclxuXHQjICAgICBoYXMgbm90IGJlZW4gaW5zdGFsbGVkXG5cblx0aENvbXBpbGVycyA6PSBoLmhDb21waWxlcnNcblx0Zm9yIGV4dCBvZiBrZXlzKGhDb21waWxlcnMpXG5cdFx0e3Rlc3Rlcn0gOj0gaENvbXBpbGVyc1tleHRdXG5cdFx0cHVzaExvZ0xldmVsICdzaWxlbnQnXG5cdFx0d29ya3MgOj0gdGVzdGVyKClcblx0XHRwb3BMb2dMZXZlbCgpXG5cblx0XHRpZiBub3Qgd29ya3Ncblx0XHRcdERCRyBcIkRlbGV0aW5nIGNvbXBpbGVyIGZvciBleHQgI3tPTChleHQpfVwiXG5cdFx0XHRkZWxldGUgaENvbXBpbGVyc1tleHRdXG5cdHJldHVybiBoXG5cbiMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbmNpdmV0MnRzRmlsZSA6PSAocGF0aDogc3RyaW5nKTogdm9pZCA9PlxuXG5cdGFzc2VydCBpc0ZpbGUocGF0aCksIFwiTm8gc3VjaCBmaWxlOiAje09MKHBhdGgpfSAoY2l2ZXQydHNGaWxlKVwiXG5cdGFzc2VydCAoZmlsZUV4dChwYXRoKSA9PSAnLmNpdmV0JyksIFwiTm90IGEgY2l2ZXQgZmlsZTogI3tPTChwYXRoKX1cIlxuXG5cdHRzUGF0aCA6PSB3aXRoRXh0KHBhdGgsICcudHMnKVxuXHRleGVjQ21kU3luYyAnY2l2ZXQnLCBbXG5cdFx0Jy0taW5saW5lLW1hcCcsXG5cdFx0Jy1vJyxcblx0XHR0c1BhdGgsXG5cdFx0Jy1jJyxcblx0XHRwYXRoXG5cdFx0XVxuXG5cdGFzc2VydCBpc0ZpbGUodHNQYXRoKSwgXCJGaWxlIG5vdCBjcmVhdGVkOiAje09MKHRzUGF0aCl9XCJcblx0cmV0dXJuXG5cbiMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4jIEFTWU5DXG5cbmV4cG9ydCBpbnN0YWxsQ21kIDo9IChwYXRoOiBzdHJpbmcsIG5hbWU6IHN0cmluZz89dW5kZWYpOiB2b2lkID0+XG5cblx0aWYgbm90ZGVmaW5lZChuYW1lKVxuXHRcdGF3YWl0IGV4ZWNDbWQgJ2Rlbm8nLCBbXG5cdFx0XHQnaW5zdGFsbCdcblx0XHRcdCctZmdBJ1xuXHRcdFx0Jy0tY29uZmlnJ1xuXHRcdFx0J2Rlbm8uanNvbmMnXG5cdFx0XHRwYXRoXG5cdFx0XHRdXG5cdGVsc2Vcblx0XHRhd2FpdCBleGVjQ21kICdkZW5vJywgW1xuXHRcdFx0J2luc3RhbGwnXG5cdFx0XHQnLWZnQSdcblx0XHRcdCctbidcblx0XHRcdG5hbWVcblx0XHRcdCctLWNvbmZpZydcblx0XHRcdCdkZW5vLmpzb25jJ1xuXHRcdFx0cGF0aFxuXHRcdFx0XVxuXHRyZXR1cm5cblxuIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiMgQVNZTkNcblxuZXhwb3J0IHVuaW5zdGFsbENtZCA6PSAocGF0aDogc3RyaW5nLCBuYW1lOiBzdHJpbmc/PXVuZGVmKTogdm9pZCA9PlxuXG5cdGlmIG5vdGRlZmluZWQobmFtZSlcblx0XHRhd2FpdCBleGVjQ21kICdkZW5vJywgW1xuXHRcdFx0J3VuaW5zdGFsbCdcblx0XHRcdCctZydcblx0XHRcdHBhdGhcblx0XHRcdF1cblx0ZWxzZVxuXHRcdGF3YWl0IGV4ZWNDbWQgJ2Rlbm8nLCBbXG5cdFx0XHQndW5pbnN0YWxsJ1xuXHRcdFx0Jy1nJ1xuXHRcdFx0Jy1uJ1xuXHRcdFx0bmFtZVxuXHRcdFx0cGF0aFxuXHRcdFx0XVxuXHRyZXR1cm5cblxuIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiMgLS0tIHJldHVybnMgYSBjb21waWxlckZ1bmMgb3IgdW5kZWZcblxuZXhwb3J0IGdldENvbXBpbGVySW5mbyA6PSAoZXh0OiBzdHJpbmcpOiBjb21waWxlckluZm8/ID0+XG5cblx0aEluZm8gOj0gaENvbXBpbGVyQ29uZmlnLmhDb21waWxlcnNbZXh0XVxuXHRpZiBub3RkZWZpbmVkKGhJbmZvKVxuXHRcdERCRyBcIk5vIGNvbXBpbGVyIGZvciAje2V4dH0gZmlsZXNcIlxuXHRcdHJldHVybiB1bmRlZlxuXHRyZXR1cm4gaEluZm9cblxuIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuZXhwb3J0IGdldFBvc3RQcm9jZXNzb3IgOj0gKHB1cnBvc2U6IHN0cmluZyk6IHBvc3RQcm9jZXNzb3I/ID0+XG5cblx0cHAgOj0gaENvbXBpbGVyQ29uZmlnLmhQb3N0UHJvY2Vzc29yc1twdXJwb3NlXVxuXHRpZiBub3RkZWZpbmVkKHBwKVxuXHRcdERCRyBcIk5vIHBvc3QgcHJvY2Vzc29yIGZvciAje3B1cnBvc2V9IGZpbGVzXCJcblx0XHRyZXR1cm4gdW5kZWZcblx0cmV0dXJuIHBwXG5cbiMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4jIC0tLSBzcmMgY2FuIGJlIGEgZnVsbCBwYXRoIG9yIFtkaXJzcGVjLCBzdHViLCBwdXJwb3NlXVxuIyAgICAgICAgd2hlcmUgZGlyc3BlYyBjYW4gYmUgJ2xpYicsICdiaW4nIG9yICd0ZXN0J1xuIyAgICAgdGhyb3dzIGVycm9yIGlmIGZpbGUgZG9lcyBub3QgZXhpc3RcbiNcbiMgICAgIFBvc3NpYmxlIHN0YXR1cyB2YWx1ZXM6XG4jICAgICAgICAndGVtcCcgICAgICAgLSBpdCB3YXMgYSB0ZW1wIGZpbGUsIG5vdCBjb21waWxlZFxuIyAgICAgICAgJ25vY29tcGlsZXInIC0gaGFzIG5vIGNvbXBpbGVyLCBub3QgY29tcGlsZWRcbiMgICAgICAgICdleGlzdHMnICAgICAtIG5ld2VyIGNvbXBpbGVkIGZpbGUgYWxyZWFkeSBleGlzdHNcbiMgICAgICAgICdmYWlsZWQnICAgICAtIGNvbXBpbGluZyBmYWlsZWRcbiMgICAgICAgICdjb21waWxlZCcgICAtIHN1Y2Nlc3NmdWxseSBjb21waWxlZFxuXG5leHBvcnQgdHlwZSBjb21waWxlU3RhdHVzID0gJ25vZmlsZScgfFxuXHQndGVtcCcgfCAnbm9jb21waWxlcicgfFxuXHQnZXhpc3RzJyB8ICdmYWlsZWQnIHwgJ2NvbXBpbGVkJ1xuXG5leHBvcnQgdHlwZSBjb21waWxlUmVzdWx0ID0ge1xuXHRzdGF0dXM6IGNvbXBpbGVTdGF0dXNcblx0cGF0aDogc3RyaW5nXG5cdHJlbFBhdGg/OiBzdHJpbmc/XG5cdG91dFBhdGg/OiBzdHJpbmc/XG5cdH1cblxuZXhwb3J0IGNvbXBpbGVGaWxlIDo9IChcblx0cGF0aDogc3RyaW5nLFxuXHRoT3B0aW9uczogaGFzaD17fVxuXHQpOiBjb21waWxlUmVzdWx0ID0+XG5cblx0REJHIFwiQ09NUElMRTogI3tPTChwYXRoKX1cIiwgTG9nQ21kLklOREVOVFxuXG5cdHtub3BwfSA6PSBnZXRPcHRpb25zIGhPcHRpb25zLCB7XG5cdFx0bm9wcDogZmFsc2Vcblx0XHR9XG5cblx0IyAtLS0gaFBhdGhJbmZvIGlzIG5lZWRlZCBmb3IgcG9zdCBwcm9jZXNzaW5nXG5cdGhQYXRoSW5mbyA6PSBwYXJzZVBhdGggcGF0aFxuXHR7cmVsUGF0aCwgc3R1YiwgcHVycG9zZSwgZXh0fSA6PSBoUGF0aEluZm9cblxuXHRpZiAocHVycG9zZSA9PSAndGVtcCcpIHx8IChwdXJwb3NlID09ICdkZWJ1ZycpXG5cdFx0REJHIFwiTm90IGNvbXBpbGluZyAje3B1cnBvc2V9IGZpbGUgI3tPTChwYXRoKX1cIiwgTG9nQ21kLlVOREVOVFxuXHRcdHJldHVybiB7XG5cdFx0XHRzdGF0dXM6ICd0ZW1wJ1xuXHRcdFx0cGF0aFxuXHRcdFx0cmVsUGF0aFxuXHRcdFx0b3V0UGF0aDogdW5kZWZcblx0XHRcdH1cblxuXHRpZiBub3RkZWZpbmVkKGV4dClcblx0XHREQkcgXCJOb3QgY29tcGlsaW5nIC0gbm8gZmlsZSBleHRlbnNpb24gaW4gI3tPTChwYXRoKX1cIiwgTG9nQ21kLlVOREVOVFxuXHRcdHJldHVybiB7XG5cdFx0XHRzdGF0dXM6ICdub2NvbXBpbGVyJ1xuXHRcdFx0cGF0aFxuXHRcdFx0cmVsUGF0aFxuXHRcdFx0b3V0UGF0aDogdW5kZWZcblx0XHRcdH1cblxuXHRoSW5mbyA6PSBnZXRDb21waWxlckluZm8oZXh0KVxuXHRpZiBub3RkZWZpbmVkKGhJbmZvKVxuXHRcdERCRyBcIk5vdCBjb21waWxpbmcgLSBubyBjb21waWxlciBmb3IgI3tPTChleHQpfVwiLCBMb2dDbWQuVU5ERU5UXG5cdFx0cmV0dXJuIHtcblx0XHRcdHN0YXR1czogJ25vY29tcGlsZXInXG5cdFx0XHRwYXRoXG5cdFx0XHRyZWxQYXRoXG5cdFx0XHRvdXRQYXRoOiB1bmRlZlxuXHRcdFx0fVxuXG5cdHtjb21waWxlciwgZ2V0T3V0UGF0aH0gOj0gaEluZm9cblx0b3V0UGF0aCA6PSBnZXRPdXRQYXRoKHJlbFBhdGgpXG5cdGlmIG5ld2VyRGVzdEZpbGVFeGlzdHMocmVsUGF0aCwgb3V0UGF0aClcblx0XHREQkcgXCJOb3QgY29tcGlsaW5nLCBuZXdlciAje09MKG91dFBhdGgpfSBleGlzdHNcIiwgTG9nQ21kLlVOREVOVFxuXHRcdHJldHVybiB7XG5cdFx0XHRzdGF0dXM6ICdleGlzdHMnXG5cdFx0XHRwYXRoXG5cdFx0XHRyZWxQYXRoXG5cdFx0XHRvdXRQYXRoXG5cdFx0XHR9XG5cblx0REJHIFwiTm8gbmV3ZXIgZGVzdCBmaWxlIGV4aXN0c1wiXG5cdGlmIGlzRmlsZShvdXRQYXRoKVxuXHRcdERCRyBcInJlbW92aW5nIG9sZGVyICN7T0wob3V0UGF0aCl9XCJcblx0XHRybUZpbGUgb3V0UGF0aFxuXG5cdERCRyBcImNvbXBpbGluZyAje09MKHBhdGgpfVwiXG5cdGNvbXBpbGVyIHJlbFBhdGggICAgICMgcHJvZHVjZXMgZmlsZSBvdXRQYXRoLCBtYXkgdGhyb3cgZXhjZXB0aW9uXG5cblx0aWYgaXNGaWxlKG91dFBhdGgpXG5cdFx0IyAtLS0gSWYgZmlyc3QgbGluZSBpcyBhIGZpbGUgbmFtZSxcblx0XHQjICAgICBjaGFuZ2UgaXQgdG8gb3V0UGF0aFxuXHRcdGNvbnRlbnRzIDo9IERlbm8ucmVhZFRleHRGaWxlU3luYyBvdXRQYXRoXG5cdFx0bExpbmVzIDo9IGNvbnRlbnRzLnNwbGl0IFwiXFxuXCJcblx0XHRsTGluZXNbMF0ucmVwbGFjZSBwYXRoLCBvdXRQYXRoXG5cdFx0RGVuby53cml0ZVRleHRGaWxlU3luYyBvdXRQYXRoLCBsTGluZXMuam9pbihcIlxcblwiKVxuXHRlbHNlXG5cdFx0RVJSIFwiT3V0cHV0IGZpbGUgI3tyZWxwYXRoKG91dFBhdGgpfSBub3QgcHJvZHVjZWRcIiwgTG9nQ21kLlVOREVOVFxuXHRcdHJldHVybiB7XG5cdFx0XHRzdGF0dXM6ICdmYWlsZWQnXG5cdFx0XHRwYXRoXG5cdFx0XHRyZWxQYXRoXG5cdFx0XHRvdXRQYXRoXG5cdFx0XHR9XG5cblx0IyAtLS0gSWYgdGhlcmUncyBhIHBvc3QtcHJvY2Vzc29yLCBydW4gaXRcblx0aWYgaXNOb25FbXB0eVN0cmluZyhwdXJwb3NlKVxuXHRcdHBvc3RQcm9jIDo9IGdldFBvc3RQcm9jZXNzb3IocHVycG9zZSlcblx0XHRpZiBub3RkZWZpbmVkKHBvc3RQcm9jKVxuXHRcdFx0cGFzcygpXG5cdFx0ZWxzZVxuXHRcdFx0REJHIFwicG9zdC1wcm9jZXNzaW5nIGZpbGVcIlxuXHRcdFx0cG9zdFByb2MgaFBhdGhJbmZvXG5cblx0REJHIExvZ0NtZC5VTkRFTlRcblx0cmV0dXJuIHtcblx0XHRzdGF0dXM6ICdjb21waWxlZCdcblx0XHRwYXRoXG5cdFx0cmVsUGF0aFxuXHRcdG91dFBhdGhcblx0XHR9XG5cbiMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbmV4cG9ydCBnZXRDb21waWxlckdsb2JQYXR0ZXJuIDo9IChyb290OiBzdHJpbmc9JyoqJyk6IHN0cmluZyA9PlxuXG5cdGxLZXlzIDo9IGtleXMoaENvbXBpbGVyQ29uZmlnLmhDb21waWxlcnMpXG5cdHBhdHRlcm4gOj0gKFxuXHRcdChsS2V5cy5sZW5ndGggPT0gMSkgPyBcIiN7cm9vdH0vKiN7bEtleXNbMF19XCJcblx0XHQgICAgICAgICAgICAgICAgICAgIDogXCIje3Jvb3R9Lyp7I3tsS2V5cy5qb2luKCcsJyl9fVwiXG5cdFx0KVxuXHREQkcgXCJjb21waWxlciBnbG9iOiAje09MKHBhdHRlcm4pfVwiXG5cdHJldHVybiBwYXR0ZXJuXG5cbiMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4jIC0tLSBHRU5FUkFUT1JcblxuZXhwb3J0IGFsbENvbXBpbGFibGVGaWxlcyA6PSAoXG5cdFx0aE9wdGlvbnM6IGhhc2g9e31cblx0XHQpOiBHZW5lcmF0b3I8cGF0aEluZm8sIHZvaWQsIHZvaWQ+IC0+XG5cblx0e3Jvb3QsIGZpbHRlcn0gOj0gZ2V0T3B0aW9ucyBoT3B0aW9ucywge1xuXHRcdHJvb3Q6ICcqKidcblx0XHR9XG5cdHBhdHRlcm4gOj0gZ2V0Q29tcGlsZXJHbG9iUGF0dGVybihyb290KVxuXHREQkcgXCJwYXR0ZXJuID0gI3twYXR0ZXJufVwiXG5cdGZvciBoRmlsZUluZm8gb2YgYWxsRmlsZXNNYXRjaGluZyhwYXR0ZXJuLCB7ZmlsdGVyfSlcblx0XHR5aWVsZCBoRmlsZUluZm9cblx0cmV0dXJuXG5cbiMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbnR5cGUgdW5pdFRlc3RSZXN1bHQgPSB7XG5cdHN0dWI6IHN0cmluZ1xuXHRzdWNjZXNzOiBib29sZWFuXG5cdG1zZz86IHN0cmluZ1xuXHRjb2RlPzogbnVtYmVyXG5cdHNpZ25hbD86IHN0cmluZ1xuXHR9XG5cbiMgLS0tIGEgZ2VuZXJhdG9yXG5cbmV4cG9ydCBydW5Vbml0VGVzdHNGb3IgOj0gKFxuXHRzdHViOiBub25FbXB0eVN0cmluZ1xuXHRoT3B0aW9uczogaGFzaD17fVxuXHQpOiBHZW5lcmF0b3I8dW5pdFRlc3RSZXN1bHQsIHZvaWQsIHZvaWQ+IC0+XG5cblx0e3ZlcmJvc2V9IDo9IGdldE9wdGlvbnMgaE9wdGlvbnMsIHtcblx0XHR2ZXJib3NlOiBmYWxzZVxuXHRcdH1cblxuXHREQkcgXCJSdW5uaW5nIHVuaXQgdGVzdHMgZm9yICN7c3R1Yn1cIlxuXHRpZiBub3QgdmVyYm9zZVxuXHRcdHB1c2hMb2dMZXZlbCAnc2lsZW50J1xuXG5cdCMgLS0tIEVuc3VyZSB0aGF0IG1hdGNoaW5nIGxpYiAmIGNtZCBmaWxlcyBhcmUgY29tcGlsZWRcblx0IyAgICAgKG5vIGVycm9yIGlmIHRoZXJlIGlzIG5vIGNvbXBpbGVyIGZvciB0aGUgZmlsZSlcblx0Zm9yIHtwYXRofSBvZiBhbGxGaWxlc01hdGNoaW5nKFwiKiovI3tzdHVifS4qXCIpXG5cdFx0e3N0YXR1c30gOj0gY29tcGlsZUZpbGUgcGF0aCwgbydub3BwJ1xuXHRcdGFzc2VydCAoc3RhdHVzICE9ICdmYWlsZWQnKSwgXCJjb21waWxlIG9mICN7cGF0aH0gZmFpbGVkXCJcblxuXHQjIC0tLSBDb21waWxlIGFuZCBydW4gYWxsIHVuaXQgdGVzdHMgZm9yIHN0dWJcblx0Zm9yIHtwYXRofSBvZiBhbGxGaWxlc01hdGNoaW5nKFwiKiovI3tzdHVifSoudGVzdC4qXCIpXG5cdFx0e3N0YXR1cywgb3V0UGF0aH0gOj0gY29tcGlsZUZpbGUgcGF0aCwgbydub3BwJ1xuXHRcdGFzc2VydCAoc3RhdHVzICE9ICdmYWlsZWQnKSxcblx0XHRcdFx0XCJjb21waWxlIG9mICN7cGF0aH0gZmFpbGVkLCBzdGF0dXMgPT0gJ2ZhaWxlZCdcIlxuXHRcdGlmIG5vdGRlZmluZWQob3V0UGF0aClcblx0XHRcdGNvbnRpbnVlXG5cdFx0YXNzZXJ0IGlzRmlsZShvdXRQYXRoKSwgXCJGaWxlICN7b3V0UGF0aH0gbm90IGZvdW5kXCJcblxuXHRcdCMgLS0tIENvbXBpbGUgYWxsIGZpbGVzIGluIHN1YmRpciBpZiBpdCBleGlzdHNcblx0XHRpZiBpc0RpcihcInRlc3QvI3tzdHVifVwiKVxuXHRcdFx0Zm9yIHtwYXRofSBvZiBhbGxGaWxlc01hdGNoaW5nKFwidGVzdC8je3N0dWJ9LypcIilcblx0XHRcdFx0e3N0YXR1cywgb3V0UGF0aH0gOj0gY29tcGlsZUZpbGUgcGF0aFxuXHRcdFx0XHRhc3NlcnQgKHN0YXR1cyAhPSAnZmFpbGVkJyksIFwiQ29tcGlsZSBvZiAje3BhdGh9IGZhaWxlZFwiXG5cdFx0XHRcdGlmIG5vdGRlZmluZWQob3V0UGF0aClcblx0XHRcdFx0XHRXQVJOIFwiRmlsZSAje09MKHBhdGgpfSBub3QgY29tcGlsZWQgdG8gI3tvdXRQYXRofVwiXG5cblx0XHQjIC0tLSBSdW4gdGhlIHVuaXQgdGVzdCwgcmV0dXJuIHJldHVybiBjb2RlXG5cdFx0IyAtLS0gUmV0dXJuIHZhbHVlIGhhcyBrZXlzIHN1Y2Nlc3MsIGNvZGUsIHNpZ25hbFxuXHRcdHtzdWNjZXNzLCBjb2RlLCBzaWduYWx9IDo9IGV4ZWNDbWRTeW5jICdkZW5vJywgW1xuXHRcdFx0XHQndGVzdCcsXG5cdFx0XHRcdCctcUEnLFxuXHRcdFx0XHRvdXRQYXRoXG5cdFx0XHRcdF1cblx0XHR5aWVsZCB7c3R1Yiwgc3VjY2VzcywgY29kZSwgc2lnbmFsfVxuXHRpZiBub3QgdmVyYm9zZVxuXHRcdHBvcExvZ0xldmVsKClcblx0cmV0dXJuXG5cbiMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4jIC0tLSBhIGdlbmVyYXRvclxuXG5leHBvcnQgcnVuQWxsVW5pdFRlc3RzIDo9IChcblx0XHQpOiBHZW5lcmF0b3I8dW5pdFRlc3RSZXN1bHQsIHZvaWQsIHZvaWQ+IC0+XG5cblx0REJHIFwiUnVubmluZyBhbGwgdW5pdCB0ZXN0c1wiXG5cblx0aEdsb2JPcHRpb25zIDo9IHtcblx0XHRleGNsdWRlOiBbJ25vZGVfbW9kdWxlcy8qKicsICcuZ2l0LyoqJ11cblx0XHR9XG5cblx0cGF0dGVybiA6PSAnKiovKi57bGliLGNtZH0udHMnXG5cdERCRyBcInBhdHRlcm4gPSAje09MKHBhdHRlcm4pfVwiXG5cdGZvciB7cGF0aCwgc3R1Yn0gb2YgYWxsRmlsZXNNYXRjaGluZyhwYXR0ZXJuLCBoR2xvYk9wdGlvbnMpXG5cdFx0aWYgKHN0dWIgPT0gdW5kZWYpXG5cdFx0XHRXQVJOIFwiTm8gc3R1YiBmb3VuZCBpbiAje09MKHBhdGgpfVwiXG5cdFx0ZWxzZVxuXHRcdFx0REJHIFwiVU5JVCBURVNUOiAje3BhdGh9XCJcblx0XHRcdGZvciBoUmVzdWx0IG9mIHJ1blVuaXRUZXN0c0ZvcihzdHViKVxuXHRcdFx0XHR5aWVsZCBoUmVzdWx0XG5cdHJldHVyblxuXG4jIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4jIC0tLSB1c2VyQ29uZmlnUGF0aCByZXNvbHZlcyAnLicgdG8gY3VycmVudCB3b3JraW5nIGRpcmVjdG9yeSxcbiMgICAgIG5vdCB0aGUgY3VycmVudCBmaWxlIGxvY2F0aW9uXG5cbmV4cG9ydCB1c2VyQ29uZmlnUGF0aDogc3RyaW5nIDo9IG1rcGF0aCgnLi9jb21waWxlci5jb25maWcudHMnKVxuXG4jIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG5leHBvcnQgaENvbXBpbGVyQ29uZmlnIDo9IChcblx0aWYgaXNGaWxlIHVzZXJDb25maWdQYXRoXG5cdFx0YXdhaXQgbG9hZENvbXBpbGVyQ29uZmlnKHVzZXJDb25maWdQYXRoKVxuXHRlbHNlXG5cdFx0aERlZmF1bHRDb25maWdcblx0KVxuREJHVkFMVUUgJ2hDb21waWxlckNvbmZpZycsIGhDb21waWxlckNvbmZpZ1xuIl19