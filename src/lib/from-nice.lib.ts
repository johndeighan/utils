"use strict";
// from-nice.lib.civet

import {
	undef, defined, notdefined, assert, croak, hash, hashof,
	isArray, isFunction, isBoolean, isString, isNonPrimitive,
	isClass, isArrayOfStrings, isEmpty, nonEmpty,
	className, functionName, symbolName,
	classDef, functionDef, regexpDef,
	} from 'datatypes'
import {
	getOptions, escapeStr, unescapeStr,
	keys, toBlock, o, rtrim, Fetcher,
	} from 'llutils'
import {OL} from 'to-nice'
import {indented} from 'indent'
import {toNice} from 'to-nice'
import {
	TPLLToken, tkEOF, tkIndent, tkUndent,
	TTokenGenerator, allTokensInBlock,
	} from 'pll'

// ---------------------------------------------------------------------------

export const niceSplitter: TTokenGenerator = function*(
		str: string
		) {
	let ref;let ref1;if ((ref = str.match(/^-(.*)$/))) {let lMatches = ref;
		const tail = lMatches[1].trim()
		if (tail) {
			yield {
				kind: 'list-item',
				str,
				value: getPrimitive(tail)
				}
		}
		else {
			yield {
				kind: 'list-head',
				name: str,
				str: ''
				}
		}
	}
	else if ((ref1 = str.match(/^([A-Za-z][A-Za-z0-9_]*):(.*)$/))) {let lMatches = ref1;
		const name = lMatches[1]
		const tail = lMatches[2].trim()
		if (tail) {
			yield {
				kind: 'hash-item',
				str,
				name,
				value: getPrimitive(tail)
				}
		}
		else {
			yield {
				kind: 'hash-head',
				name,
				str
				}
		}
	}
	else {
		yield {
			kind: 'primitive',
			str,
			value: getPrimitive(str)
			}
	}
}

// ---------------------------------------------------------------------------

export const allNiceTokens = function*(
		block: string,
		): Generator<TPLLToken, void, void> {

	for (const h of allTokensInBlock(block, niceSplitter)) {
		yield h
	}
	return
}

// ---------------------------------------------------------------------------

export const fromNice = (
		str: string,
		): unknown => {

	// --- Create a Fetcher, then use
	//     recursive descent parsing

	const fetcher = new Fetcher<TPLLToken>(allNiceTokens(str), tkEOF)

	const parseObj = (): unknown => {
		const {kind, str} = fetcher.peek()
		if(kind === 'list-item' || kind === 'list-head') {
				return parseList()}
else if(kind === 'hash-item' || kind === 'hash-head') {
				return parseHash()}
else if(kind === 'eof') {
				return undef}
else  {
				fetcher.skip()
				if (defined(str)) {
					return getPrimitive(str)
				}
			}
	}

	const parseList = (): unknown[] => {
		const lItems: unknown[] = []
		let {kind} = fetcher.peek()
		while (['list-item', 'list-head'].includes(kind)) {
			if (kind === 'list-head') {
				lItems.push(parseListNest())
			}
			else {
				lItems.push(fetcher.get().value)
			}
			kind = fetcher.peek().kind
		}
		return lItems
	}

	const parseListNest = (): unknown[] => {
		fetcher.get({kind: 'list-head', str: ''})
		fetcher.get({kind: 'indent', str: ''})
		const value = parseObj()
		fetcher.get({kind: 'undent', str: ''})
		return [value]
	}

	const parseHash = (): hash => {
		const hItems: hash = {}
		let {kind, name} = fetcher.peek()
		if (kind === 'hash-head') {
			fetcher.skip()
			fetcher.get({kind: 'indent', str: ''})
			const value = parseObj()
			if (defined(name)) {
				hItems[name] = value
			}
			fetcher.get({kind: 'undent', str: ''})
		}
		else {
			while (kind === 'hash-item') {
				const {name, value} = fetcher.get()
				if (defined(name)) {
					hItems[name] = value
				};
				({kind} = fetcher.peek())
			}
		}
		return hItems
	}

	debugger
	return parseObj()
}

// ---------------------------------------------------------------------------

export const getPrimitive = (
		str: string,
		): unknown => {

	str = str.trim()
	let ref2;if ((ref2 = str.match(/^\.(.*)\.$/))) {const lMatches = ref2;
		const s = lMatches[1].trim()
		if(s === 'undef') { return undef}
else if(s === 'null') { return null}
else if(s === 'true') { return true}
else if(s === 'false') { return false}
else if(s === 'NaN') { return NaN}
else if(s === 'infinity') { return Infinity}
else if(s === 'neginfinity') { return -Infinity}
else if(s === 'symbol') { return Symbol()}
else if(s === '[]') { return []}
else if(s === '{}') { return {}}
else if(typeof s === 'string' && /^symbol\s+(.+)$/.test(s)) {
				const lMatches = s.match(/^symbol\s+(.+)$/)
				if (defined(lMatches)) {
					const name = lMatches[1]
					return Symbol(name)
				}
				else {
					return Symbol()
				}}
else if(typeof s === 'string' && /^regexp\s+(.+)$/.test(s)) {
				const lMatches = s.match(/^regexp\s+(.+)$/)
				if (defined(lMatches)) {
					const name = lMatches[1]
					return new RegExp(name)
				}
				else {
					return new RegExp('^$')
				}}
else  {
				croak("Not Implemented")
			}
	}
	else if (str.match(/^\d+$/)) {
		return parseInt(str, 10)
	}
	else if (str.match(/^\d+\.\d*$/)) {
		return parseFloat(str)
	}
	else {
		return unescapeStr(str, o`purpose=C`)
	}
}

//# sourceMappingURL=data:application/json;base64,