"use strict";
// unit-test.lib.civet

import {
	assert, assertEquals, assertStrictEquals, assertNotEquals,
	assertObjectMatch,
	assertStringIncludes, assertMatch, assertArrayIncludes,
	} from '@std/assert'

import {
	undef, defined, notdefined, isEmpty, nonEmpty,
	array, arrayof, isArray, isHash, isString, hash,
	hashof, isIterable, deepEqual, hashLike,
	TObjCompareFunc, TObjLikeFunc, TToStringFunc,
	normalizeCode, voidFunc,
	} from 'datatypes'
import {
	pass, stringify, OL, keys,
	} from 'llutils'
import {
	pushLogLevel, popLogLevel,
	DBG, LOG, LOGVALUE, DBGVALUE, INDENT, UNDENT,
	} from 'logger'
import {typeCheck, checkType} from 'typescript'
import {getMyOutsideCaller} from 'v8-stack'
import {
	sourceLib, getNeededImportStmts,
	} from 'symbols'

// ---------------------------------------------------------------------------

/**
 * Generate a test name using the source line number
 */

const getTestName = (): string => {

	pushLogLevel('silent')
	const frame = getMyOutsideCaller()
	const line = (frame === undef) ? 0 : frame.line
	popLogLevel()
	DBG(`TEST NAME: line ${line}`)
	return `line ${line}`
}

// ---------------------------------------------------------------------------

/**
 * In a unit test, checks if  value is deeply equal to
 * the expected value. Reports line number of the test.
 *
 * @param {any} value - any JavaScript value
 * @param {any} expected - any JavaScript value
 * @returns {void} - nothing
 *
 * @example
 * ```js
 * equal 2+2, 4
 * ```
 * This test will pass.
 */

export const equal = (value: unknown, expected: unknown) : void => {

	const name = getTestName()
	DBG(`equal ?, ${stringify(expected)} (${name})`)
	Deno.test(name, () => assertEquals(value, expected))
	return
}

// ---------------------------------------------------------------------------

export const same = (value: unknown, expected: unknown) : void => {

	const name = getTestName()
	DBG(`same ?, ${stringify(expected)} (${name})`)
	Deno.test(name, () => assertStrictEquals(value, expected))
	return
}

// ---------------------------------------------------------------------------

/**
 * In a unit test, tests if value is truthy
 * Reports line number of the test.

 * @param {any} value - any JavaScript value
 * @returns {void} - nothing
 *
 * @example
 * ```js
 * truthy isString('abc')
 * ```
 * This test will pass.
 */

export const truthy = (value: unknown): void => {

	const name = getTestName()
	DBG(`truthy ${stringify(value)} (${name})`)
	Deno.test(name, () => assert(value))
	return
}

// ---------------------------------------------------------------------------

/**
 * In a unit test, tests if value is falsy
 * Reports line number of the test.
 *
 * @param {any} value - any JavaScript value
 * @returns {void} - nothing
 *
 * @example
 * ```js
 * falsy isString(42)
 * ```
 * This test will pass.
 */

export const falsy = (value: unknown): void => {

	const name = getTestName()
	DBG(`falsy ${stringify(value)} (${name})`)
	Deno.test(name, () => assert((!value)))
	return
}

// ---------------------------------------------------------------------------

/**
 * In a unit test, tests if calling the provided function
 * throws an exception. Reports line number of the test.
 *
 * @param {any => any} func - any JavaScript function
 * @returns {void} - nothing
 *
 * @example
 * ```js
 * fails () => throw new Error('bad')
 * ```
 * This test will pass.
 */

export const fails = (func: voidFunc): void => {

	pushLogLevel('silent')    // --- silence any errors generated
	const name = getTestName()
	DBG(`fails <func> (${name})`)
	Deno.test(name, () => {
		try {
			func()
			popLogLevel()
			throw new Error("Test Failure - function succeeds!!!")
		}
		catch (err) {
			popLogLevel()
		}
	})

	return
}

// ---------------------------------------------------------------------------

/**
 * In a unit test, tests if calling the provided function
 * runs without throwing an exception.
 * Reports line number of the test.
 *
 * @param {any => any} func - any JavaScript function
 * @returns {void} - nothing
 *
 * @example
 * ```js
 * succeeds () => return 42
 * ```
 * This test will pass.
 */

export const succeeds = (func: voidFunc): void => {

	assert((typeof func === 'function'), "test succeeds() passed non-function")
	const name = getTestName()
	DBG(`succeeds <func> (${name})`)
	Deno.test(name, () => {
		try {
			func()
		}
		catch (err) {
			// @ts-ignore
			const msg = err.message
			throw new Error(`FAIL - func throws (${msg})`)
		}
	})
	return
}

// ---------------------------------------------------------------------------

export const iterEqual = (iter: Iterable<unknown>, expected: unknown[]) => {

	const name = getTestName()
	DBG(`iterEqual ?, ${stringify(expected)} (${name})`)
	Deno.test(name, () => assertEquals(Array.from(iter), expected))
	return
}

// ---------------------------------------------------------------------------

export const iterLike = (iter: Iterable<hash>, expected: hash[]) => {

	const name = getTestName()
	DBG(`iterEqual ?, ${stringify(expected)} (${name})`)

	const lItems = Array.from(iter)
	const len = lItems.length
	Deno.test(`${name}/len`, () => assertEquals(len, expected.length))
	for (let end = (len-1), i1 = 0; i1 <= end; ++i1) {const i = i1;
		// @ts-ignore
		Deno.test(`${name}/${i}`, () => assertObjectMatch(lItems[i], expected[i]))
	}
	return
}

// ---------------------------------------------------------------------------

/**
 * In a unit test, tests a value, which must be a string,
 * matches either a substring or a regular expression.
 * Reports line number of the test.
 *
 * @param {any} value - any JavaScript value
 * @param {any} expected - any JavaScript value
 * @returns {void} - nothing
 *
 * @example
 * ```js
 * matches 'abcde', 'bce'
 * ```
 * This test will pass.
 *
 * @example
 * ```js
 * matches 'aabbcc', /a+b+c+/
 * ```
 * This test will pass.
 */

export const matches = (value: unknown, expected: unknown) => {

	assert(isString(value), `Not a string: ${value}`)
	const name = getTestName()
	DBG(`matches ?, ${stringify(expected)} (${name})`)
	if (isString(expected)) {
		Deno.test(name, () => assertStringIncludes(value, expected))
	}
	else if (expected instanceof RegExp) {
		Deno.test(name, () => assertMatch(value, expected))
	}
	else {
		Deno.test(name, () => assert(false))
	}
	return
}

// ---------------------------------------------------------------------------

/**
 * In a unit test, tests if one hash matches another hash.
 * the first hash must have all the properties in the second hash,
 * but extra properties are allowed.
 * Reports line number of the test.
 *
 * @param {hash} value - any JavaScript object
 * @param {hash} expected - any JavaScript object
 * @returns {void} - nothing
 *
 * @example
 * ```js
 * like {a:1, b:2, c:3}, {a:1, c:3}
 * ```
 * This test will pass.
 */

export const like = (value: (object | undefined), expected: hash): void => {

	const name = getTestName()
	DBG(`like ?, ${stringify(expected)} (${name})`)
	if (notdefined(value)) {
		Deno.test(name, () => assertEquals(value, undef))
	}
	else {
		Deno.test(name, () => assertObjectMatch(value, expected))
	}
	return
}

// ---------------------------------------------------------------------------

export const codeLike = (value: string, expected: string): void => {

	const name = getTestName()
	DBG(`codeLike ?, ${stringify(expected)} (${name})`)
	Deno.test(name, () => {
		assertEquals(normalizeCode(value), normalizeCode(expected))
	})
	return
}

// ---------------------------------------------------------------------------

export const strListLike = (
		value: string[],
		expected: string[]
		): void => {

	const name = getTestName()
	DBG(`strListLike ?, ${stringify(expected, {trunc: 64})}`)

	const len = value.length
	Deno.test(`${name}/len`, () => assertEquals(len, expected.length))

	if (len === 0) {
		return
	}

	const lValues = value.toSorted()
	const lExpected = expected.toSorted()
	for (let end1 = (len-1), i2 = 0; i2 <= end1; ++i2) {const i = i2;
		const val = lValues[i]
		const exp = lExpected[i]
		// @ts-ignore
		Deno.test(`${name}/${i}`, () => assertEquals(val, exp))
	}
	return
}

// ---------------------------------------------------------------------------

/**
 * In a unit test, tests if each Object in an array matches
 * each object in another array. The 2 arrays must be of the
 * same length. If a function is passed as the 3rd parameter,
 * then each array is first sorted by using the function to
 * convert each object to a string, then sorting the array
 * using those strings.
 * A matching function can also be provided as the 4th argument.
 * By default, the function hashLike (from llutils.lib) is used.
 * Reports line number of the test.
 *
 * @param {array | object} value - any JavaScript value
 * @param {array | object} expected - any JavaScript value
 * @returns {void} - nothing
 *
 * @example
 * ```js
 * like {a:1, b:2, c:3}, {a:1, c:3}
 * ```
 * This test will pass.
 *
 * @example
 * ```js
 * like [{a:1, b:2, c:3}, {a:3, b:5, c:23}], [{a:1, b:2}]
 * ```
 * This test will pass.
 */

export const objListLike = (
		value: hash[],
		expected: hash[],
		strFunc: (TToStringFunc | undefined) = undef,     // used for sorting if defined
		likeFunc: TObjLikeFunc = hashLike   // used for comparison
		): void => {

	const name = getTestName()
	DBG(`objListLike ?, ${stringify(expected, {trunc: 64})}`)
	DBG(`strFunc is ${OL(strFunc)}`)

	const len = value.length
	Deno.test(`${name}/len`, () => assertEquals(len, expected.length))

	if (len === 0) {
		return
	}

	// --- create the arrays to actually be compared
	let lVals: hash[] = value

	if (defined(strFunc)) {
		const compareFunc: TObjCompareFunc = (a: hash, b: hash) => {
			const str1 = strFunc(a)
			const str2 = strFunc(b)
			return (str1 < str2) ? -1 : (str1 > str2) ? 1 : 0
		}
		lVals = value.toSorted(compareFunc)
	}

	const nVals = lVals.length
	DBG(`lVals is array of length ${nVals}`)

	let lExp: hash[] = value
	if (defined(strFunc)) {
		DBG("strFunc defined")
		const compareFunc: TObjCompareFunc = (a: hash, b: hash) => {
			const str1 = strFunc(a)
			const str2 = strFunc(b)
			return (str1 < str2) ? -1 : (str1 > str2) ? 1 : 0
		}
		lExp = expected.toSorted(compareFunc)
	}

	const nExp = lExp.length
	DBG(`lExp is array of length ${nExp}`)

	for (let end2 = (len-1), i3 = 0; i3 <= end2; ++i3) {const i = i3;
		// @ts-ignore
		Deno.test(`${name}/${i}`, () => assert(likeFunc(lVals[i], lExp[i])))
	}
	return
}

// ---------------------------------------------------------------------------

/**
 * In a unit test, tests a value, which must be an array,
 * includes the expected value.
 * Reports line number of the test
 *
 * @param {Array<any>} value - an array
 * @param {any} expected - any JavaScript value
 * @returns {void} - nothing
 *
 * @example
 * ```js
 * includes ['a', 'b', 'c'], 'b'
 * ```
 * This test will pass.
 */

export const includes = (
		value: unknown,
		expected: unknown
		): void => {

	assert(Array.isArray(value), `not an array: ${value}`)
	const name = getTestName()
	DBG(`includes ?, ${stringify(expected)} (${name})`)
	Deno.test(name, () => assertArrayIncludes(value, [expected]))
	return
}

// ---------------------------------------------------------------------------

/**
 * In a unit test, tests a value, which must be an array,
 * includes all of the items in the expected array.
 * Reports line number of the test
 *
 * @param {Array<any>} value - an array
 * @param {Array<any>} expected - an array
 * @returns {void} - nothing
 *
 * @example
 * ```js
 * includesAll ['a', 'b', 'c'], ['b', 'c']
 * ```
 * This test will pass.
 */

export const includesAll = (
		value: unknown,
		expected: unknown
		): void => {

	assert(Array.isArray(value), `not an array: ${value}`)
	assert(Array.isArray(expected), `not an array: ${expected}`)
	const name = getTestName()
	DBG(`includesAll ?, ${stringify(expected)} (${name})`)
	Deno.test(name, () => assertArrayIncludes(value, expected))
	return
}

// ---------------------------------------------------------------------------

/**
 * In a unit test, tests if a value is of a given type.
 * Relies on a .symbols file being correctly set up, and
 * it containing the type we're testing when testing
 * a non-buildin type
 *
 * @param {string} typeStr - a type as a string
 * @param {any} value - any JavaScript value
 * @returns {void} - nothing
 *
 * @example
 * ```js
 * isType 'string', 'abc'
 * ```
 * This test will pass.
 *
 * @example
 * ```js
 * isType 'number', 'abc'
 * ```
 * This test will fail.
 */

export const isType = (
		typeStr: string,
		value: unknown,
		isOfType: (Function | undefined)=undef
		): void => {

	const name = getTestName()
	if (defined(isOfType)) {
		DBG("Using type guard")
		Deno.test(name, () => assert(isOfType(value)))
	}
	else {
		DBG(INDENT)
		const lDiagnostics = checkType(value, typeStr, true)
		if (defined(lDiagnostics)) {
			for (const msg of lDiagnostics) {
				console.log(msg)
			}
		}
		DBG(UNDENT)
		Deno.test(name, () => assert(isEmpty(lDiagnostics)))
	}
	return
}

// ---------------------------------------------------------------------------

/**
 * In a unit test, tests if a value is not of a given type.
 *
 * @param {string} typeStr - a type as a string
 * @param {any} value - any JavaScript value
 * @returns {void} - nothing
 *
 * @example
 * ```js
 * notType 'string', 'abc'
 * ```
 * This test will fail.
 *
 * @example
 * ```js
 * notType 'number', 'abc'
 * ```
 * This test will pass.
 */

export const notType = (
		typeStr: string,
		value: unknown,
		isOfType: (Function | undefined)=undef
		) => {

	const name = getTestName()
	if (defined(isOfType)) {
		DBG("Using type guard")
		Deno.test(name, () => assert(!isOfType(value)))
	}
	else {
		DBG(INDENT)
		const lDiagnostics = checkType(value, typeStr, false)
		DBG(UNDENT)
		Deno.test(name, () => assert(nonEmpty(lDiagnostics)))
	}
	return
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,