"use strict";
// datatypes.lib.civet

import {minify} from 'npm:uglify-js'
import deepEqual from 'npm:fast-deep-equal'

export {deepEqual}

/**
 * @module datatypes - TypeScript datatype checking
 */

// ---------------------------------------------------------------------------

/**
 * a function that takes no arguments and returns nothing
 * [unit tests](../test/datatypes.test.civet#:~:text=DBG,voidFunc)
 */

export type voidFunc = () => void

export type TFilterFunc = (item: unknown) => boolean
export type TStringifier = (item: unknown) => string
export type TStringParser = (str: string) => unknown

export type TStringGenerator = Generator<string, void, void>

// ---------------------------------------------------------------------------

/**
 * An alias for JavaScript's `undefined`
 * [unit tests](../test/datatypes.test.civet#:~:text=DBG,undef)
 */

export const undef = undefined

// ---------------------------------------------------------------------------

/**
 * returns true if the provided value is defined
 * (i.e. not null or undefined), else returns false
 * [unit tests](../test/datatypes.test.civet#:~:text=DBG,defined)
 */

export type TObject = {
	[key: string]: unknown
	[sym: symbol]: unknown
	}
export type TDefined = NonNullable<unknown>

export const defined = (x: unknown): x is TDefined => {

	return (x !== undef) && (x !== null)
}

// ---------------------------------------------------------------------------

/**
 * Returns true if the value provided is not defined
 * (i.e. either null or undefined), else returns false
 * [unit tests](../test/datatypes.test.civet#:~:text=DBG,notdefined)
 */

export const notdefined = (x: unknown): x is undefined => {

	return (x === undef) || (x === null)
}

// ---------------------------------------------------------------------------

/**
 * throws an exception with the provided message
 */

export const croak = (msg: string): never => {

	throw new Error(msg)
}

// ---------------------------------------------------------------------------

/**
 * Asserts that `cond` is true. If it isn't, an exception is
 * thrown with the given `msg`
 */

export type TAssertFunc = (
		cond: unknown,
		msg?: string
		) => asserts cond

export const assert: TAssertFunc = (
		cond: unknown,
		msg: string = "An error occurred"
		) => {

	if (!cond) {
		throw new Error(msg)
	}
	return
}

// ---------------------------------------------------------------------------

export const isSymbol = (x: unknown): boolean => {

	return (typeof x === 'symbol')
}

// ---------------------------------------------------------------------------

export const symbolName = (x: unknown): string => {

	if (typeof x === 'symbol') {
		return x.description || ''
	}
	throw new Error("Not a symbol")
}

// ---------------------------------------------------------------------------

export const functionName = (x: Function): string => {

	return x.name || ''
}

// ---------------------------------------------------------------------------

export const functionDef = (x: Function): string => {

	return normalizeExpr(x.toString())
}

// ---------------------------------------------------------------------------

export const regexpDef = (x: unknown): string => {

	if ((typeof x === 'object') && (x instanceof RegExp)) {
		return x.source
	}
	croak("Not a RegExp")
	return ''
}      // --- TypeScript bug

// ---------------------------------------------------------------------------

export const classDef = (x: unknown): string => {

	if ((typeof x === 'function') && x.toString().startsWith('class')) {
		return normalizeCode(x.toString())
	}
	croak("Not a class")
	return ''
}      // --- TypeScript bug

// ---------------------------------------------------------------------------

export var className = (x: unknown): (string | undefined) => {
	// --- item can be a class or an object

	if ((typeof x === 'function') && x.toString().startsWith('class')) {
		return x.name || ''
	}
	if ((typeof x === 'object') && (x !== null)) {
		return x.constructor.name || ''
	}
	croak("Not a class")
	return ''
}      // --- TypeScript bug

// ---------------------------------------------------------------------------

/**
 * An array containing anything
 * [unit tests](../test/datatypes.test.civet#:~:text=DBG,array)
 */

export type array = unknown[]
export type arrayof<T> = T[]

/**
 * Test if something is an array
 * [unit tests](../test/datatypes.test.civet#:~:text=DBG,isArray)
 */

export const isArray = (x: unknown): x is array => {

	return Array.isArray(x)
}

// ---------------------------------------------------------------------------

/**
 * An alias for TypeScript type 'object' with string keys
 * [unit tests](../test/datatypes.test.civet#:~:text=DBG,hash)
 */

export interface hash {
	[key: string | symbol]: unknown
}

export interface hashof<T> {
	[key: string | symbol]: T
}

// ---------------------------------------------------------------------------

/**
 * Test if something is a hash
 * [unit tests](../test/datatypes.test.civet#:~:text=DBG,isHash)
 */

export const isHash = (x: unknown): x is hash => {

	return (
		   (x !== null)
		&& !Array.isArray(x)
		&& (x?.constructor?.name === 'Object')
		)
}

// ---------------------------------------------------------------------------

export type TObjCompareFunc = (h1: hash, h2: hash) => number
export type TObjLikeFunc = (h: hash, hPat: hash) => boolean
export type TToStringFunc = (h: hash) => string

export const hashLike = (h: hash, hPat: hash): boolean => {

	const lHashKeys = Object.keys(h)
	for (const key of Object.keys(hPat)) {
		if (lHashKeys.includes(key)) {
			const patVal = hPat[key]
			if (defined(patVal) && !deepEqual(h[key], patVal)) {
				return false
			}
		}
		else {
			return false
		}
	}
	return true
}

// ---------------------------------------------------------------------------

/**
 * returns true if (typeof item == 'string') or item instanceof String
 * [unit tests](../test/datatypes.test.civet#:~:text=DBG,isString)
 */

export const isString = (x: unknown): x is string => {

	return (typeof x === 'string') || (x instanceof String)
}

export const assertIsString = (x: unknown): asserts x is string => {

	assert(isString(x), `Not a string: ${typeof x}`)
}

// ---------------------------------------------------------------------------

export type char = string

export const isChar = (x: unknown): x is char => {

	return isString(x) && (x.length === 1)
}

// ---------------------------------------------------------------------------

export type nonEmptyString = string

/**
 * Test if something is a non-empty string,
 * i.e. isn't all whitespace
 * [unit tests](../test/datatypes.test.civet#:~:text=DBG,isNonEmptyString)
 */

export const isNonEmptyString = (x: unknown): x is nonEmptyString => {

	// --- must contain non-whitespace character
	return isString(x) && defined(x.match(/\S/))
}

// ---------------------------------------------------------------------------

/**
 * Test if something is a boolean
 * [unit tests](../test/datatypes.test.civet#:~:text=DBG,isBoolean)
 */

export const isBoolean = (x: unknown): x is boolean => {

	return (typeof x === 'boolean') || (x instanceof Boolean)
}

// ---------------------------------------------------------------------------

/**
 * Test if something is a number
 * [unit tests](../test/datatypes.test.civet#:~:text=DBG,isNumber)
 */

export const isNumber = (x: unknown): x is number => {

	return (
		   (typeof x === 'bigint')
		|| (typeof x === 'number')
		|| (x instanceof Number)
		)
}

// ---------------------------------------------------------------------------

export const isPrimitive = (x: unknown): boolean => {

	return isString(x) || isNumber(x) || isBoolean(x) || isSymbol(x)
}

// ---------------------------------------------------------------------------

export const isNonPrimitive = (x: unknown): boolean => {

	return (
		   (typeof x === 'object')
		&& (x !== null)
		&& !(x instanceof String)
		&& !(x instanceof Number)
		&& !(x instanceof Boolean)
		)
}

// ---------------------------------------------------------------------------

/**
 * Type integer
 */

export type integer = number

/**
 * Test if something is an integer
 * [unit tests](../test/datatypes.test.civet#:~:text=DBG,isInteger)
 */

export const isInteger = (x: unknown): x is integer => {

	return isNumber(x) && Number.isInteger(x.valueOf())
}

// ---------------------------------------------------------------------------

/**
 * Type intArray
 */

export type intArray = integer[]

export const isArrayOfIntegers = (x: unknown): x is intArray => {

	if (!Array.isArray(x)) {
		return false
	}
	for (const item of x) {
		if (!isInteger(item)) {
			return false
		}
	}
	return true
}

// ---------------------------------------------------------------------------

/**
 * Test if something is an array of strings
 * [unit tests](../test/datatypes.test.civet#:~:text=DBG,isArrayOfStrings)
 */

export const isArrayOfStrings = (x: unknown): x is string[] => {

	if (!Array.isArray(x)) {
		return false
	}
	for (const item of x) {
		if (!isString(item)) {
			return false
		}
	}
	return true
}

// ---------------------------------------------------------------------------

/**
 * Type regexp - a regular expression
 * [unit tests](../test/datatypes.test.civet#:~:text=DBG,regexp)
 */

export type regexp = RegExp

/**
 * Test if something is a regular expression
 * [unit tests](../test/datatypes.test.civet#:~:text=DBG,isRegExp)
 */

export const isRegExp = (item: unknown): item is regexp => {

	return (item instanceof RegExp)
}

// ---------------------------------------------------------------------------

/**
 * Test if something is an object
 * [unit tests](../test/datatypes.test.civet#:~:text=DBG,isObject)
 */

export const isObject = (x: unknown): x is object => {

	return (
		  (typeof x === 'object')
		&& (x !== null)
		&& !Array.isArray(x)
		&& (!(x instanceof RegExp))
		&& (!(x instanceof String))
		&& (!(x instanceof Number))
		&& (!(x instanceof Boolean))
		)
}

// ---------------------------------------------------------------------------

/**
 * Test if something is a function
 * [unit tests](../test/datatypes.test.civet#:~:text=DBG,isFunction)
 */

export const isFunction = (item: unknown): item is Function => {

	return (typeof item === 'function')
}

// ---------------------------------------------------------------------------

/**
 * returns true if any of these is true:
 * 	- x is null or undef
 * 	- x is a string consisting of only whitespace
 * 	- x is an array of length 0
 * 	- x is a hash that has no keys
 * else returns false
 * [unit tests](../test/datatypes.test.civet#:~:text=DBG,isEmpty)
 */

export const isEmpty = (x: unknown): boolean => {

	if ((x === undef) || (x === null)) {
		return true
	}
	if (isString(x)) {
		return (x.match(/^\s*$/) !== null)
	}
	if (isArray(x)) {
		return (x.length === 0)
	}
	if (typeof x === 'object') {
		return (Object.keys(x).length === 0)
	}
	else {
		return false
	}
}

// ---------------------------------------------------------------------------

/**
 * returns not isEmpty(x)
 * [unit tests](../test/datatypes.test.civet#:~:text=DBG,nonEmpty)
 */

export const nonEmpty = (x: unknown): boolean => {

	return !isEmpty(x)
}

// ---------------------------------------------------------------------------

export const lMark = '⸂'    // --- U+2E02
export const rMark = '⸃'    // --- U+2E03

export const hide = (str: string): string => {

	return lMark + str + rMark
}

// ---------------------------------------------------------------------------

export const unhide = (str: string): string => {

	const lParts: string[] = []
	let pos = 0
	let start = str.indexOf('"'+lMark, pos)
	while (start >= 0) {
		const end = str.indexOf(rMark+'"', start)
		if (end === -1) {
			break
		}
		else {
			lParts.push(str.substring(pos, start))
			lParts.push(str.substring(start+2, end))
			pos = end+2
		}
		start = str.indexOf('"'+lMark, pos)
	}
	lParts.push(str.substring(pos))
	return lParts.join('')
}

// ---------------------------------------------------------------------------

export const isClass = (x: unknown): boolean => {

	if (typeof x !== 'function') {
		return false
	}
	return x.toString().startsWith('class')
}

// ---------------------------------------------------------------------------

export const isPromise = (x: unknown): boolean => {

	return (
		(typeof x === 'object')
		&& (x !== null)
		&& ('then' in x)
		&& (typeof x.then === 'function')
		)
}

// ---------------------------------------------------------------------------
// --- NOTE: An '&' preceding a key name indicates
//           that it should be a function

export const isClassInstance = (
		x: unknown,
		lReqKeys: string[]=[]
		): boolean => {

	if ((typeof x !== 'object') || isArray(x) || isPromise(x)) {
		return false
	}

	if (notdefined(x?.constructor?.name)) {
		return false
	}

	if (isHash(x) && (x !== null)) {
		for (const key of lReqKeys) {
			let type = undef
			let ref;if ((ref = key.match(/^(\&)(.*)$/))) {const lMatches = ref;
				const [_, type, key] = lMatches
			}

			if (key in x) {
				const item: unknown = x[key]
				if (nonEmpty(item)) {
					if ((type === '&') && (typeof item !== 'function')) {
						return false
					}
				}
				else {
					return false
				}
			}
			else {
				return false
			}
		}
	}
	return true
}

// ---------------------------------------------------------------------------

export const isIterable = (x: unknown): boolean => {

	if ((typeof x === 'object') && (x !== null)) {
//		return (typeof x[Symbol.iterator] == 'function')
		return Symbol.iterator in x
	}
	return false
}

// ---------------------------------------------------------------------------
// --- Functions to normalize JavaScript code & expressions
// ---------------------------------------------------------------------------

export const addFunctionNames = (code: string): string => {

	// --- The names we add will look like: '__dummy99' where
	//     '99' can be any sequence of digits
	//     to make it trivial to remove them later

	let id = 99
	const re = /function\s*(\*)?\s*\(/g
	const replaceFunc = (match: string, ast: (string | undefined)) => {
		const n = id
		id += 1
		return (
			  (ast === undefined)
			? `function __dummy${n.toString()}(`
			: `function* __dummy${n.toString()}(`
			)
	}
	return code.replaceAll(re, replaceFunc)
}

// ---------------------------------------------------------------------------

export const removeFunctionNames = (code: string): string => {

	return code.replaceAll(/__dummy\d+/g, '')
}

// ---------------------------------------------------------------------------

export const normalizeCode = (
		code: string,
		): string => {

	// --- Due to a bug in JavaScript, we have to make sure
	//     that all function names (even in generators)
	//     have a name, which we must remove after minimization

	const newCode = addFunctionNames(code)

	// --- Remove extra whitespace
	//     Remove extra parens from '(str)=>return'
	//     Remove comments
	const hOptions = {
		annotations: false,
		mangle: false,
		compress: undefined,
		keep_fargs: true,
		keep_fnames: true,
		warnings: true
		}
	const hResult = minify(newCode, hOptions)
	if (hResult.error) {
		throw new Error(hResult.error.message)
	}
	else if (hResult.code) {
		return removeFunctionNames(hResult.code)
	}
	else {
		throw new Error("Unknown error in normalizeCode()")
	}
}

// ---------------------------------------------------------------------------

export const normalizeExpr = (
		code: string,
		): string => {

	const str = normalizeCode(code)
	const len = str.length
	if (str[len-1] === ';') {
		return str.substring(0, len-1)
	}
	else {
		return str
	}
}

// ---------------------------------------------------------------------------

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQzpcXFVzZXJzXFxqb2huZFxcdXRpbHNcXHNyY1xcbGliXFxkYXRhdHlwZXMubGliLmNpdmV0LnRzeCIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxqb2huZFxcdXRpbHNcXHNyY1xcbGliXFxkYXRhdHlwZXMubGliLmNpdmV0Il0sIm1hcHBpbmdzIjoiO0FBQUEsc0JBQXFCO0FBQ3JCLEFBQUE7QUFDQSxBQUFBLE1BQU0sQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxlQUFlO0FBQ3BDLEFBQUEsQUFBQSxNQUFNLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxxQkFBcUI7QUFDM0MsQUFBQTtBQUNBLEFBQUEsQUFBQSxNQUFNLENBQUMsQ0FBQyxTQUFTLENBQUM7QUFDbEIsQUFBQTtBQUNBLEFBQUE7QUFDQTtBQUNBLEdBQUc7QUFDSCxBQUFBO0FBQ0EsQUFBQSw4RUFBNkU7QUFDN0UsQUFBQTtBQUNBLEFBQUE7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNILEFBQUE7QUFDQSxBQUFBLEFBQUEsTUFBTSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxJQUFJO0FBQ2pDLEFBQUE7QUFDQSxBQUFBLEFBQUEsTUFBTSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsRUFBRSxDQUFDLE9BQU87QUFDcEQsQUFBQSxBQUFBLE1BQU0sQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxNQUFNO0FBQ3BELEFBQUEsQUFBQSxNQUFNLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTztBQUNwRCxBQUFBO0FBQ0EsQUFBQSxBQUFBLE1B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LENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsTUFBTTtBQUM1RCxBQUFBLEFBQUEsTUFBTSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLE9BQU87QUFDM0QsQUFBQSxBQUFBLE1BQU0sQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxNQUFNO0FBQy9DLEFBQUE7QUFDQSxBQUFBLEFBQUEsTUFBTSxDQUFTLE1BQVIsUUFBUSxDQUFDLENBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQSxDQUFBO0FBQ3BELEFBQUE7QUFDQSxBQUFBLENBQVUsTUFBVCxTQUFTLENBQUMsQ0FBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO0FBQzVCLEFBQUEsQ0FBQyxHQUFHLENBQUMsQ0FBQSxNQUFBLEdBQUcsQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQSxDQUFBLENBQUE7QUFDN0IsQUFBQSxFQUFFLEdBQUcsQ0FBQSxTQUFTLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFBLENBQUEsQ0FBQTtBQUM1QixBQUFBLEdBQVMsTUFBTixNQUFNLENBQUMsQ0FBRSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUM7QUFDdEIsQUFBQSxHQUFHLEdBQUcsQ0FBQSxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUksU0FBUyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFBLENBQUEsQ0FBQTtBQUN0RCxBQUFBLElBQUks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O0FBQ0EsQUFBQSxDQUFDLE1BQU0sQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRSxDQUFDLFNBQVMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsT0FBTyxDO0FBQUMsQ0FBQTtBQUN6RCxBQUFBO0FBQ0EsQUFBQSw4RUFBNkU7QUFDN0UsQUFBQTtBQUNBLEFBQUE7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNILEFBQUE7QUFDQSxBQUFBLEFBQUEsTUFBTSxDQUFTLE1BQVIsUUFBUSxDQUFDLENBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFBLENBQUE7QUFDL0MsQUFBQTtBQUNBLEFBQUEsQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUNULEFBQUEsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRSxDQUFDLFFBQVEsQ0FBQztBQUMzQixBQUFBLEVBQUUsRUFBRSxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFFLENBQUMsUUFBUSxDQUFDO0FBQzNCLEFBQUEsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQztBQUMxQixFQUFFLEM7QUFBQyxDQUFBO0FBQ0gsQUFBQTtBQUNBLEFBQUEsOEVBQTZFO0FBQzdFLEFBQUE7QUFDQSxBQUFBLEFBQUEsTUFBTSxDQUFZLE1BQVgsV0FBVyxDQUFDLENBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQSxDQUFBO0FBQzlDLEFBQUE7QUFDQSxBQUFBLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLFFBQVEsQ0FB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QUFBLENBQWlCLE1BQWhCLE1BQU0sQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBRSxDQUFDLENBQUMsQ0FBQztBQUN2QixBQUFBLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNaLEFBQUEsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxHQUFHLENBQUM7QUFDeEMsQUFBQSxDQUFDLEtBQUssQ0FBQyxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUEsQ0FBQTtBQUNuQixBQUFBLEVBQUssTUFBSCxHQUFHLENBQUMsQ0FBRSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEtBQUssQ0FBQztBQUN0QyxBQUFBLEVBQUUsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQSxDQUFBO0FBQ2hCLEFBQUEsR0FBRyxLO0VBQUssQ0FBQTtBQUNSLEFBQUEsRUFBRSxJQUFJLENBQUEsQ0FBQTtBQUNOLEFBQUEsR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFBLEFBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQTtBQUN4QyxBQUFBLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQSxBQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFBO0FBQzFDLEFBQUEsR0FBRyxHQUFHLEMsQ0FBRSxDQUFDLEdBQUcsQ0FBQyxDO0VBQUMsQ0FBQTtBQUNkLEFBQUEsRUFBRSxLQUFLLEMsQ0FBRSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDLEdBQUcsQztDQUFDLENBQUE7QUFDckMsQUFBQSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUEsQUFBQyxHQUFHLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxDQUFBO0FBQy9CLEFBQUEsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxFQUFFLEM7QUFBQyxDQUFBO0FBQ3ZCLEFBQUE7QUFDQSxBQUFBLDhFQUE2RTtBQUM3RSxBQUFBO0FBQ0EsQUFBQSxBQUFBLE1BQU0sQ0FBUSxNQUFQLE9BQU8sQ0FBQyxDQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUEsQ0FBQTtBQUMxQyxBQUFBO0FBQ0EsQUFBQSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUUsQ0FBQyxVQUFVLENBQUMsQ0FBQSxDQUFBO0FBQzVCLEFBQUEsRUFBRSxNQUFNLENBQUMsSztDQUFLLENBQUE7QUFDZCxBQUFBLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxPQUFPLEM7QUFBQyxDQUFBO0FBQ3hDLEFBQUE7QUFDQSxBQUFBLDhFQUE2RTtBQUM3RSxBQUFBO0FBQ0EsQUFBQSxBQUFBLE1BQU0sQ0FBVSxNQUFULFNBQVMsQ0FBQyxDQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUEsQ0FBQTtBQUM1QyxBQUFBO0FBQ0EsQUFBQSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQ1QsQUFBQSxFQUFFLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFFLENBQUMsUUFBUSxDQUFDO0FBQ3hCLEFBQUEsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRSxDQUFDLElBQUksQ0FBQztBQUNoQixBQUFBLEVBQUUsRUFBRSxDQUFDLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7QUFDbEIsQUFBQSxFQUFFLEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUUsQ0FBQyxVQUFVLENBQUM7QUFDbEMsRUFBRSxDO0FBQUMsQ0FBQTtBQUNILEFBQUE7QUFDQSxBQUFBLDhFQUE2RTtBQUM3RSxBQUFBLGtEQUFpRDtBQUNqRCxBQUFBLHlDQUF3QztBQUN4QyxBQUFBO0FBQ0EsQUFBQSxBQUFBLE1BQU0sQ0FBZ0IsTUFBZixlQUFlLENBQUMsQ0FBRSxDQUFDLENBQUM7QUFDM0IsQUFBQSxFQUFFLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQztBQUNiLEFBQUEsRUFBRSxRQUFRLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUN2QixFQUFFLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUEsQ0FBQTtBQUNmLEFBQUE7QUFDQSxBQUFBLENBQUMsR0FBRyxDQUFBLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFFLENBQUMsUUFBUSxDQUFDLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFBLENBQUEsQ0FBQTtBQUN4RCxBQUFBLEVBQUUsTUFBTSxDQUFDLEs7Q0FBSyxDQUFBO0FBQ2QsQUFBQTtBQUNBLEFBQUEsQ0FBQyxHQUFHLENBQUEsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFBLENBQUEsQ0FBQTtBQUNwQyxBQUFBLEVBQUUsTUFBTSxDQUFDLEs7Q0FBSyxDQUFBO0FBQ2QsQUFBQTtBQUNBLEFBQUEsQ0FBQyxHQUFHLENBQUEsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFFLENBQUMsSUFBSSxDQUFDLENBQUEsQ0FBQSxDQUFBO0FBQzVCLEFBQUEsRUFBRSxHQUFHLENBQUMsQ0FBQSxNQUFBLEdBQUcsQ0FBQyxFQUFFLENBQUMsUUFBUSxDQUFBLENBQUEsQ0FBQTtBQUNyQixBQUFBLEdBQUcsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSztBQUNuQixBQUFBLEcsSSxHLENBQUcsR0FBRyxDLEMsR0FBUSxDQUFDLENBQUUsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUcsQ0FBQyxBQUFDLENBQUMsRUFBRSxDQUFDLEFBQUMsSUFBSSxBQUFDLENBQUMsQ0FBRyxDLENBQUMsQ0FBQSxDQUFBLENBQWxDLE1BQVIsUSxHLEcsQ0FBMEM7QUFDaEQsQUFBQSxJQUFrQixNQUFkLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBRSxDQUFDLFE7R0FBUSxDQUFBO0FBQzlCLEFBQUE7QUFDQSxBQUFBLEdBQUcsR0FBRyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUEsQ0FBQTtBQUNoQixBQUFBLElBQWlCLE1BQWIsSUFBSSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDO0FBQzNCLEFBQUEsSUFBSSxHQUFHLENBQUEsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFBLENBQUEsQ0FBQTtBQUNyQixBQUFBLEtBQUssR0FBRyxDQUFBLENBQUMsSUFBSSxDQUFDLEdBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUUsQ0FBQyxVQUFVLENBQUMsQ0FBQSxDQUFBLENBQUE7QUFDcEQsQUFBQSxNQUFNLE1BQU0sQ0FBQyxLO0tBQUssQztJQUFBLENBQUE7QUFDbEIsQUFBQSxJQUFJLElBQUksQ0FBQSxDQUFBO0FBQ1IsQUFBQSxLQUFLLE1BQU0sQ0FBQyxLO0lBQUssQztHQUFBLENBQUE7QUFDakIsQUFBQSxHQUFHLElBQUksQ0FBQSxDQUFBO0FBQ1AsQUFBQSxJQUFJLE1BQU0sQ0FBQyxLO0dBQUssQztFQUFBLEM7Q0FBQSxDQUFBO0FBQ2hCLEFBQUEsQ0FBQyxNQUFNLENBQUMsSTtBQUFJLENBQUE7QUFDWixBQUFBO0FBQ0EsQUFBQSw4RUFBNkU7QUFDN0UsQUFBQTtBQUNBLEFBQUEsQUFBQSxNQUFNLENBQVcsTUFBVixVQUFVLENBQUMsQ0FBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFBLENBQUE7QUFDN0MsQUFBQTtBQUNBLEFBQUEsQ0FBQyxHQUFHLENBQUEsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUUsQ0FBQyxRQUFRLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRSxDQUFDLElBQUksQ0FBQyxDQUFBLENBQUEsQ0FBQTtBQUN6QyxBQUFBLG9EQUFtRDtBQUNuRCxBQUFBLEVBQUUsTUFBTSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLEM7Q0FBQyxDQUFBO0FBQzdCLEFBQUEsQ0FBQyxNQUFNLENBQUMsSztBQUFLLENBQUE7QUFDYixBQUFBO0FBQ0EsQUFBQSw4RUFBNkU7QUFDN0UsQUFBQSwyREFBMEQ7QUFDMUQsQUFBQSw4RUFBNkU7QUFDN0UsQUFBQTtBQUNBLEFBQUEsQUFBQSxNQUFNLENBQWlCLE1BQWhCLGdCQUFnQixDQUFDLENBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQSxDQUFBO0FBQ3BELEFBQUE7QUFDQSxBQUFBLENBQUMseURBQXdEO0FBQ3pELEFBQUEsQ0FBQyx5Q0FBd0M7QUFDekMsQUFBQSxDQUFDLDhDQUE2QztBQUM5QyxBQUFBO0FBQ0EsQUFBQSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUU7QUFDWixBQUFBLENBQUcsTUFBRixFQUFFLENBQUMsQ0FBRSxDQUFDLENBQUcsQUFDUCxRQUFRLEFBQU8sQUFBb0IsQUFDbkMsRUFBRSxDQUFDLEFBQVksQUFBcUIsQUFDcEMsQ0FBQyxBQUFDLEVBQUUsQUFBQyxDQUFDLEFBQUMsQ0FBQyxBQUFPLEFBQWMsQUFDN0IsRUFBRSxDQUFDLEFBQVksQUFBcUIsQUFDcEMsRUFBRSxBQUNGLEMsQ0FBSTtBQUNQLEFBQUEsQ0FBWSxNQUFYLFdBQVcsQ0FBQyxDQUFFLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHLEMsQyxDQUFDLEFBQUMsTSxZLENBQU8sQ0FBQyxDQUFDLEVBQUUsQ0FBQSxDQUFBO0FBQ2hELEFBQUEsRUFBRyxNQUFELENBQUMsQ0FBQyxDQUFFLENBQUMsRUFBRTtBQUNULEFBQUEsRUFBRSxFQUFFLEMsRUFBRyxDQUFDLENBQUM7QUFDVCxBQUFBLEVBQUUsTUFBTSxDQUFDLENBQUM7QUFDVixBQUFBLEtBQUssQ0FBQyxHQUFHLENBQUMsR0FBRSxDQUFDLFNBQVMsQ0FBQztBQUN2QixBQUFBLEdBQUcsQ0FBQyxDQUFDLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ3ZDLEFBQUEsR0FBRyxDQUFDLENBQUMsQ0FBQyxpQkFBaUIsRUFBRSxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDeEMsR0FBRyxDO0NBQUMsQ0FBQTtBQUNKLEFBQUEsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxXQUFXLEM7QUFBQyxDQUFBO0FBQ3hDLEFBQUE7QUFDQSxBQUFBLDhFQUE2RTtBQUM3RSxBQUFBO0FBQ0EsQUFBQSxBQUFBLE1BQU0sQ0FBb0IsTUFBbkIsbUJBQW1CLENBQUMsQ0FBRSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFBLENBQUE7QUFDdkQsQUFBQTtBQUNBLEFBQUEsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxhQUFhLENBQUMsQ0FBQyxFQUFFLEM7QUFBQyxDQUFBO0FBQzFDLEFBQUE7QUFDQSxBQUFBLDhFQUE2RTtBQUM3RSxBQUFBO0FBQ0EsQUFBQSxBQUFBLE1BQU0sQ0FBYyxNQUFiLGFBQWEsQ0FBQyxDQUFFLENBQUMsQ0FBQztBQUN6QixBQUFBLEVBQUUsSUFBSSxDQUFDLENBQUMsTUFBTSxDQUFDO0FBQ2YsRUFBRSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFBLENBQUE7QUFDZCxBQUFBO0FBQ0EsQUFBQSxDQUFDLHVEQUFzRDtBQUN2RCxBQUFBLENBQUMsbURBQWtEO0FBQ25ELEFBQUEsQ0FBQywyREFBMEQ7QUFDM0QsQUFBQTtBQUNBLEFBQUEsQ0FBUSxNQUFQLE9BQU8sQ0FBQyxDQUFFLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDO0FBQ2xDLEFBQUE7QUFDQSxBQUFBLENBQUMsOEJBQTZCO0FBQzlCLEFBQUEsQ0FBQywrQ0FBOEM7QUFDL0MsQUFBQSxDQUFDLHNCQUFxQjtBQUN0QixBQUFBLENBQVMsTUFBUixRQUFRLENBQUMsQ0FBRSxDQUFDLENBQUM7QUFDZCxBQUFBLEVBQUUsV0FBVyxDQUFDLENBQUMsS0FBSyxDQUFBO0FBQ3BCLEFBQUEsRUFBRSxNQUFNLENBQUMsQ0FBQyxLQUFLLENBQUE7QUFDZixBQUFBLEVBQUUsUUFBUSxDQUFDLENBQUMsU0FBUyxDQUFBO0FBQ3JCLEFBQUEsRUFBRSxVQUFVLENBQUMsQ0FBQyxJQUFJLENBQUE7QUFDbEIsQUFBQSxFQUFFLFdBQVcsQ0FBQyxDQUFDLElBQUksQ0FBQTtBQUNuQixBQUFBLEVBQUUsUUFBUSxDQUFDLENBQUMsSUFBSTtBQUNoQixFQUFFLENBQUM7QUFDSCxBQUFBLENBQVEsTUFBUCxPQUFPLENBQUMsQ0FBRSxDQUFDLE1BQU0sQ0FBQSxBQUFDLE9BQU8sQ0FBQyxDQUFDLFFBQVEsQ0FBQTtBQUNwQyxBQUFBLENBQUMsR0FBRyxDQUFBLE9BQU8sQ0FBQyxLQUFLLENBQUEsQ0FBQSxDQUFBO0FBQ2pCLEFBQUEsRUFBRSxLQUFLLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLE9BQU8sQztDQUFDLENBQUE7QUFDeEMsQUFBQSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUEsT0FBTyxDQUFDLElBQUksQ0FBQSxDQUFBLENBQUE7QUFDckIsQUFBQSxFQUFFLE1BQU0sQ0FBQyxtQkFBbUIsQ0FBQyxPQUFPLENBQUMsSUFBSSxDO0NBQUMsQ0FBQTtBQUMxQyxBQUFBLENBQUMsSUFBSSxDQUFBLENBQUE7QUFDTCxBQUFBLEVBQUUsS0FBSyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsa0NBQWtDLEM7Q0FBQyxDO0FBQUEsQ0FBQTtBQUNyRCxBQUFBO0FBQ0EsQUFBQSw4RUFBNkU7QUFDN0UsQUFBQTtBQUNBLEFBQUEsQUFBQSxNQUFNLENBQWMsTUFBYixhQUFhLENBQUMsQ0FBRSxDQUFDLENBQUM7QUFDekIsQUFBQSxFQUFFLElBQUksQ0FBQyxDQUFDLE1BQU0sQ0FBQztBQUNmLEVBQUUsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQSxDQUFBO0FBQ2QsQUFBQTtBQUNBLEFBQUEsQ0FBSSxNQUFILEdBQUcsQ0FBQyxDQUFFLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQztBQUMzQixBQUFBLENBQUksTUFBSCxHQUFHLENBQUMsQ0FBRSxDQUFDLEdBQUcsQ0FBQyxNQUFNO0FBQ2xCLEFBQUEsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFFLENBQUMsR0FBRyxDQUFDLENBQUEsQ0FBQTtBQUN2QixBQUFBLEVBQUUsTUFBTSxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQztDQUFDLENBQUE7QUFDaEMsQUFBQSxDQUFDLElBQUksQ0FBQSxDQUFBO0FBQ0wsQUFBQSxFQUFFLE1BQU0sQ0FBQyxHO0NBQUcsQztBQUFBLENBQUE7QUFDWjtBQUNBLEFBQUEsOEVBQTZFO0FBQzdFIiwibmFtZXMiOltdLCJzb3VyY2VzQ29udGVudCI6WyIjIGRhdGF0eXBlcy5saWIuY2l2ZXRcblxuaW1wb3J0IHttaW5pZnl9IGZyb20gJ25wbTp1Z2xpZnktanMnXG5pbXBvcnQgZGVlcEVxdWFsIGZyb20gJ25wbTpmYXN0LWRlZXAtZXF1YWwnXG5cbmV4cG9ydCB7ZGVlcEVxdWFsfVxuXG4vKipcbiAqIEBtb2R1bGUgZGF0YXR5cGVzIC0gVHlwZVNjcmlwdCBkYXRhdHlwZSBjaGVja2luZ1xuICovXG5cbiMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbi8qKlxuICogYSBmdW5jdGlvbiB0aGF0IHRha2VzIG5vIGFyZ3VtZW50cyBhbmQgcmV0dXJucyBub3RoaW5nXG4gKiBbdW5pdCB0ZXN0c10oLi4vdGVzdC9kYXRhdHlwZXMudGVzdC5jaXZldCM6fjp0ZXh0PURCRyx2b2lkRnVuYylcbiAqL1xuXG5leHBvcnQgdHlwZSB2b2lkRnVuYyA9ICgpID0+IHZvaWRcblxuZXhwb3J0IHR5cGUgVEZpbHRlckZ1bmMgPSAoaXRlbTogdW5rbm93bikgPT4gYm9vbGVhblxuZXhwb3J0IHR5cGUgVFN0cmluZ2lmaWVyID0gKGl0ZW06IHVua25vd24pID0+IHN0cmluZ1xuZXhwb3J0IHR5cGUgVFN0cmluZ1BhcnNlciA9IChzdHI6IHN0cmluZykgPT4gdW5rbm93blxuXG5leHBvcnQgdHlwZSBUU3RyaW5nR2VuZXJhdG9yID0gR2VuZXJhdG9yPHN0cmluZywgdm9pZCwgdm9pZD5cblxuIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuLyoqXG4gKiBBbiBhbGlhcyBmb3IgSmF2YVNjcmlwdCdzIGB1bmRlZmluZWRgXG4gKiBbdW5pdCB0ZXN0c10oLi4vdGVzdC9kYXRhdHlwZXMudGVzdC5jaXZldCM6fjp0ZXh0PURCRyx1bmRlZilcbiAqL1xuXG5leHBvcnQgdW5kZWYgOj0gdW5kZWZpbmVkXG5cbiMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbi8qKlxuICogcmV0dXJucyB0cnVlIGlmIHRoZSBwcm92aWRlZCB2YWx1ZSBpcyBkZWZpbmVkXG4gKiAoaS5lLiBub3QgbnVsbCBvciB1bmRlZmluZWQpLCBlbHNlIHJldHVybnMgZmFsc2VcbiAqIFt1bml0IHRlc3RzXSguLi90ZXN0L2RhdGF0eXBlcy50ZXN0LmNpdmV0Izp+OnRleHQ9REJHLGRlZmluZWQpXG4gKi9cblxuZXhwb3J0IHR5cGUgVE9iamVjdCA9IHtcblx0W2tleTogc3RyaW5nXTogdW5rbm93blxuXHRbc3ltOiBzeW1ib2xdOiB1bmtub3duXG5cdH1cbmV4cG9ydCB0eXBlIFREZWZpbmVkID0gTm9uTnVsbGFibGU8dW5rbm93bj5cblxuZXhwb3J0IGRlZmluZWQgOj0gKHg6IHVua25vd24pOiB4IGlzIFREZWZpbmVkID0+XG5cblx0cmV0dXJuICh4ICE9IHVuZGVmKSAmJiAoeCAhPSBudWxsKVxuXG4jIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgdmFsdWUgcHJvdmlkZWQgaXMgbm90IGRlZmluZWRcbiAqIChpLmUuIGVpdGhlciBudWxsIG9yIHVuZGVmaW5lZCksIGVsc2UgcmV0dXJucyBmYWxzZVxuICogW3VuaXQgdGVzdHNdKC4uL3Rlc3QvZGF0YXR5cGVzLnRlc3QuY2l2ZXQjOn46dGV4dD1EQkcsbm90ZGVmaW5lZClcbiAqL1xuXG5leHBvcnQgbm90ZGVmaW5lZCA6PSAoeDogdW5rbm93bik6IHggaXMgdW5kZWZpbmVkID0+XG5cblx0cmV0dXJuICh4ID09IHVuZGVmKSB8fCAoeCA9PSBudWxsKVxuXG4jIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4vKipcbiAqIHRocm93cyBhbiBleGNlcHRpb24gd2l0aCB0aGUgcHJvdmlkZWQgbWVzc2FnZVxuICovXG5cbmV4cG9ydCBjcm9hayA6PSAobXNnOiBzdHJpbmcpOiBuZXZlciA9PlxuXG5cdHRocm93IG5ldyBFcnJvcihtc2cpXG5cbiMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbi8qKlxuICogQXNzZXJ0cyB0aGF0IGBjb25kYCBpcyB0cnVlLiBJZiBpdCBpc24ndCwgYW4gZXhjZXB0aW9uIGlzXG4gKiB0aHJvd24gd2l0aCB0aGUgZ2l2ZW4gYG1zZ2BcbiAqL1xuXG5leHBvcnQgdHlwZSBUQXNzZXJ0RnVuYyA9IChcblx0XHRjb25kOiB1bmtub3duLFxuXHRcdG1zZz86IHN0cmluZ1xuXHRcdCkgPT4gYXNzZXJ0cyBjb25kXG5cbmV4cG9ydCBhc3NlcnQ6IFRBc3NlcnRGdW5jIDo9IChcblx0XHRjb25kOiB1bmtub3duLFxuXHRcdG1zZzogc3RyaW5nID0gXCJBbiBlcnJvciBvY2N1cnJlZFwiXG5cdFx0KSA9PlxuXG5cdGlmIG5vdCBjb25kXG5cdFx0dGhyb3cgbmV3IEVycm9yKG1zZylcblx0cmV0dXJuXG5cbiMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbmV4cG9ydCBpc1N5bWJvbCA6PSAoeDogdW5rbm93bik6IGJvb2xlYW4gPT5cblxuXHRyZXR1cm4gKHR5cGVvZiB4ID09ICdzeW1ib2wnKVxuXG4jIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG5leHBvcnQgc3ltYm9sTmFtZSA6PSAoeDogdW5rbm93bik6IHN0cmluZyA9PlxuXG5cdGlmICh0eXBlb2YgeCA9PSAnc3ltYm9sJylcblx0XHRyZXR1cm4geC5kZXNjcmlwdGlvbiB8fCAnJ1xuXHR0aHJvdyBuZXcgRXJyb3IoXCJOb3QgYSBzeW1ib2xcIilcblxuIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuZXhwb3J0IGZ1bmN0aW9uTmFtZSA6PSAoeDogRnVuY3Rpb24pOiBzdHJpbmcgPT5cblxuXHRyZXR1cm4geC5uYW1lIHx8ICcnXG5cbiMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbmV4cG9ydCBmdW5jdGlvbkRlZiA6PSAoeDogRnVuY3Rpb24pOiBzdHJpbmcgPT5cblxuXHRyZXR1cm4gbm9ybWFsaXplRXhwcih4LnRvU3RyaW5nKCkpXG5cbiMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbmV4cG9ydCByZWdleHBEZWYgOj0gKHg6IHVua25vd24pOiBzdHJpbmcgPT5cblxuXHRpZiAodHlwZW9mIHggPT0gJ29iamVjdCcpICYmICh4IGluc3RhbmNlb2YgUmVnRXhwKVxuXHRcdHJldHVybiB4LnNvdXJjZVxuXHRjcm9hayBcIk5vdCBhIFJlZ0V4cFwiXG5cdHJldHVybiAnJyAgICAgICMgLS0tIFR5cGVTY3JpcHQgYnVnXG5cbiMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbmV4cG9ydCBjbGFzc0RlZiA6PSAoeDogdW5rbm93bik6IHN0cmluZyA9PlxuXG5cdGlmICh0eXBlb2YgeCA9PSAnZnVuY3Rpb24nKSAmJiB4LnRvU3RyaW5nKCkuc3RhcnRzV2l0aCgnY2xhc3MnKVxuXHRcdHJldHVybiBub3JtYWxpemVDb2RlKHgudG9TdHJpbmcoKSlcblx0Y3JvYWsgXCJOb3QgYSBjbGFzc1wiXG5cdHJldHVybiAnJyAgICAgICMgLS0tIFR5cGVTY3JpcHQgYnVnXG5cbiMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbmV4cG9ydCBjbGFzc05hbWUgPSAoeDogdW5rbm93bik6IHN0cmluZz8gPT5cblx0IyAtLS0gaXRlbSBjYW4gYmUgYSBjbGFzcyBvciBhbiBvYmplY3RcblxuXHRpZiAodHlwZW9mIHggPT0gJ2Z1bmN0aW9uJykgJiYgeC50b1N0cmluZygpLnN0YXJ0c1dpdGgoJ2NsYXNzJylcblx0XHRyZXR1cm4geC5uYW1lIHx8ICcnXG5cdGlmICh0eXBlb2YgeCA9PSAnb2JqZWN0JykgJiYgKHggIT0gbnVsbClcblx0XHRyZXR1cm4geC5jb25zdHJ1Y3Rvci5uYW1lIHx8ICcnXG5cdGNyb2FrIFwiTm90IGEgY2xhc3NcIlxuXHRyZXR1cm4gJycgICAgICAjIC0tLSBUeXBlU2NyaXB0IGJ1Z1xuXG4jIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4vKipcbiAqIEFuIGFycmF5IGNvbnRhaW5pbmcgYW55dGhpbmdcbiAqIFt1bml0IHRlc3RzXSguLi90ZXN0L2RhdGF0eXBlcy50ZXN0LmNpdmV0Izp+OnRleHQ9REJHLGFycmF5KVxuICovXG5cbmV4cG9ydCB0eXBlIGFycmF5ID0gdW5rbm93bltdXG5leHBvcnQgdHlwZSBhcnJheW9mPFQ+ID0gVFtdXG5cbi8qKlxuICogVGVzdCBpZiBzb21ldGhpbmcgaXMgYW4gYXJyYXlcbiAqIFt1bml0IHRlc3RzXSguLi90ZXN0L2RhdGF0eXBlcy50ZXN0LmNpdmV0Izp+OnRleHQ9REJHLGlzQXJyYXkpXG4gKi9cblxuZXhwb3J0IGlzQXJyYXkgOj0gKHg6IHVua25vd24pOiB4IGlzIGFycmF5ID0+XG5cblx0cmV0dXJuIEFycmF5LmlzQXJyYXkoeClcblxuIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuLyoqXG4gKiBBbiBhbGlhcyBmb3IgVHlwZVNjcmlwdCB0eXBlICdvYmplY3QnIHdpdGggc3RyaW5nIGtleXNcbiAqIFt1bml0IHRlc3RzXSguLi90ZXN0L2RhdGF0eXBlcy50ZXN0LmNpdmV0Izp+OnRleHQ9REJHLGhhc2gpXG4gKi9cblxuZXhwb3J0IGludGVyZmFjZSBoYXNoXG5cdFtrZXk6IHN0cmluZyB8IHN5bWJvbF06IHVua25vd25cblxuZXhwb3J0IGludGVyZmFjZSBoYXNob2Y8VD5cblx0W2tleTogc3RyaW5nIHwgc3ltYm9sXTogVFxuXG4jIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4vKipcbiAqIFRlc3QgaWYgc29tZXRoaW5nIGlzIGEgaGFzaFxuICogW3VuaXQgdGVzdHNdKC4uL3Rlc3QvZGF0YXR5cGVzLnRlc3QuY2l2ZXQjOn46dGV4dD1EQkcsaXNIYXNoKVxuICovXG5cbmV4cG9ydCBpc0hhc2ggOj0gKHg6IHVua25vd24pOiB4IGlzIGhhc2ggPT5cblxuXHRyZXR1cm4gKFxuXHRcdCAgICh4ICE9IG51bGwpXG5cdFx0JiYgbm90IEFycmF5LmlzQXJyYXkoeClcblx0XHQmJiAoeD8uY29uc3RydWN0b3I/Lm5hbWUgPT0gJ09iamVjdCcpXG5cdFx0KVxuXG4jIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG5leHBvcnQgdHlwZSBUT2JqQ29tcGFyZUZ1bmMgPSAoaDE6IGhhc2gsIGgyOiBoYXNoKSA9PiBudW1iZXJcbmV4cG9ydCB0eXBlIFRPYmpMaWtlRnVuYyA9IChoOiBoYXNoLCBoUGF0OiBoYXNoKSA9PiBib29sZWFuXG5leHBvcnQgdHlwZSBUVG9TdHJpbmdGdW5jID0gKGg6IGhhc2gpID0+IHN0cmluZ1xuXG5leHBvcnQgaGFzaExpa2UgOj0gKGg6IGhhc2gsIGhQYXQ6IGhhc2gpOiBib29sZWFuID0+XG5cblx0bEhhc2hLZXlzIDo9IE9iamVjdC5rZXlzKGgpXG5cdGZvciBrZXkgb2YgT2JqZWN0LmtleXMoaFBhdClcblx0XHRpZiBsSGFzaEtleXMuaW5jbHVkZXMoa2V5KVxuXHRcdFx0cGF0VmFsIDo9IGhQYXRba2V5XVxuXHRcdFx0aWYgZGVmaW5lZChwYXRWYWwpICYmIG5vdCBkZWVwRXF1YWwoaFtrZXldLCBwYXRWYWwpXG5cdFx0XHRcdHJldHVybiBmYWxzZVxuXHRcdGVsc2Vcblx0XHRcdHJldHVybiBmYWxzZVxuXHRyZXR1cm4gdHJ1ZVxuXG4jIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4vKipcbiAqIHJldHVybnMgdHJ1ZSBpZiAodHlwZW9mIGl0ZW0gPT0gJ3N0cmluZycpIG9yIGl0ZW0gaW5zdGFuY2VvZiBTdHJpbmdcbiAqIFt1bml0IHRlc3RzXSguLi90ZXN0L2RhdGF0eXBlcy50ZXN0LmNpdmV0Izp+OnRleHQ9REJHLGlzU3RyaW5nKVxuICovXG5cbmV4cG9ydCBpc1N0cmluZyA6PSAoeDogdW5rbm93bik6IHggaXMgc3RyaW5nID0+XG5cblx0cmV0dXJuICh0eXBlb2YgeCA9PSAnc3RyaW5nJykgfHwgKHggaW5zdGFuY2VvZiBTdHJpbmcpXG5cbmV4cG9ydCBhc3NlcnRJc1N0cmluZyA6PSAoeDogdW5rbm93bik6IGFzc2VydHMgeCBpcyBzdHJpbmcgPT5cblxuXHRhc3NlcnQgaXNTdHJpbmcoeCksIFwiTm90IGEgc3RyaW5nOiAje3R5cGVvZiB4fVwiXG5cbiMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbmV4cG9ydCB0eXBlIGNoYXIgPSBzdHJpbmdcblxuZXhwb3J0IGlzQ2hhciA6PSAoeDogdW5rbm93bik6IHggaXMgY2hhciA9PlxuXG5cdHJldHVybiBpc1N0cmluZyh4KSAmJiAoeC5sZW5ndGggPT0gMSlcblxuIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuZXhwb3J0IHR5cGUgbm9uRW1wdHlTdHJpbmcgPSBzdHJpbmdcblxuLyoqXG4gKiBUZXN0IGlmIHNvbWV0aGluZyBpcyBhIG5vbi1lbXB0eSBzdHJpbmcsXG4gKiBpLmUuIGlzbid0IGFsbCB3aGl0ZXNwYWNlXG4gKiBbdW5pdCB0ZXN0c10oLi4vdGVzdC9kYXRhdHlwZXMudGVzdC5jaXZldCM6fjp0ZXh0PURCRyxpc05vbkVtcHR5U3RyaW5nKVxuICovXG5cbmV4cG9ydCBpc05vbkVtcHR5U3RyaW5nIDo9ICh4OiB1bmtub3duKTogeCBpcyBub25FbXB0eVN0cmluZyA9PlxuXG5cdCMgLS0tIG11c3QgY29udGFpbiBub24td2hpdGVzcGFjZSBjaGFyYWN0ZXJcblx0cmV0dXJuIGlzU3RyaW5nKHgpICYmIGRlZmluZWQoeC5tYXRjaCgvXFxTLykpXG5cbiMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbi8qKlxuICogVGVzdCBpZiBzb21ldGhpbmcgaXMgYSBib29sZWFuXG4gKiBbdW5pdCB0ZXN0c10oLi4vdGVzdC9kYXRhdHlwZXMudGVzdC5jaXZldCM6fjp0ZXh0PURCRyxpc0Jvb2xlYW4pXG4gKi9cblxuZXhwb3J0IGlzQm9vbGVhbiA6PSAoeDogdW5rbm93bik6IHggaXMgYm9vbGVhbiA9PlxuXG5cdHJldHVybiAodHlwZW9mIHggPT0gJ2Jvb2xlYW4nKSB8fCAoeCBpbnN0YW5jZW9mIEJvb2xlYW4pXG5cbiMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbi8qKlxuICogVGVzdCBpZiBzb21ldGhpbmcgaXMgYSBudW1iZXJcbiAqIFt1bml0IHRlc3RzXSguLi90ZXN0L2RhdGF0eXBlcy50ZXN0LmNpdmV0Izp+OnRleHQ9REJHLGlzTnVtYmVyKVxuICovXG5cbmV4cG9ydCBpc051bWJlciA6PSAoeDogdW5rbm93bik6IHggaXMgbnVtYmVyID0+XG5cblx0cmV0dXJuIChcblx0XHQgICAodHlwZW9mIHggPT0gJ2JpZ2ludCcpXG5cdFx0fHwgKHR5cGVvZiB4ID09ICdudW1iZXInKVxuXHRcdHx8ICh4IGluc3RhbmNlb2YgTnVtYmVyKVxuXHRcdClcblxuIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuZXhwb3J0IGlzUHJpbWl0aXZlIDo9ICh4OiB1bmtub3duKTogYm9vbGVhbiA9PlxuXG5cdHJldHVybiBpc1N0cmluZyh4KSB8fCBpc051bWJlcih4KSB8fCBpc0Jvb2xlYW4oeCkgfHwgaXNTeW1ib2woeClcblxuIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuZXhwb3J0IGlzTm9uUHJpbWl0aXZlIDo9ICh4OiB1bmtub3duKTogYm9vbGVhbiA9PlxuXG5cdHJldHVybiAoXG5cdFx0ICAgKHR5cGVvZiB4ID09ICdvYmplY3QnKVxuXHRcdCYmICh4ICE9IG51bGwpXG5cdFx0JiYgbm90ICh4IGluc3RhbmNlb2YgU3RyaW5nKVxuXHRcdCYmIG5vdCAoeCBpbnN0YW5jZW9mIE51bWJlcilcblx0XHQmJiBub3QgKHggaW5zdGFuY2VvZiBCb29sZWFuKVxuXHRcdClcblxuIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuLyoqXG4gKiBUeXBlIGludGVnZXJcbiAqL1xuXG5leHBvcnQgdHlwZSBpbnRlZ2VyID0gbnVtYmVyXG5cbi8qKlxuICogVGVzdCBpZiBzb21ldGhpbmcgaXMgYW4gaW50ZWdlclxuICogW3VuaXQgdGVzdHNdKC4uL3Rlc3QvZGF0YXR5cGVzLnRlc3QuY2l2ZXQjOn46dGV4dD1EQkcsaXNJbnRlZ2VyKVxuICovXG5cbmV4cG9ydCBpc0ludGVnZXIgOj0gKHg6IHVua25vd24pOiB4IGlzIGludGVnZXIgPT5cblxuXHRyZXR1cm4gaXNOdW1iZXIoeCkgJiYgTnVtYmVyLmlzSW50ZWdlcih4LnZhbHVlT2YoKSlcblxuIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuLyoqXG4gKiBUeXBlIGludEFycmF5XG4gKi9cblxuZXhwb3J0IHR5cGUgaW50QXJyYXkgPSBpbnRlZ2VyW11cblxuZXhwb3J0IGlzQXJyYXlPZkludGVnZXJzIDo9ICh4OiB1bmtub3duKTogeCBpcyBpbnRBcnJheSA9PlxuXG5cdGlmIG5vdCBBcnJheS5pc0FycmF5KHgpXG5cdFx0cmV0dXJuIGZhbHNlXG5cdGZvciBpdGVtIG9mIHhcblx0XHRpZiBub3QgaXNJbnRlZ2VyKGl0ZW0pXG5cdFx0XHRyZXR1cm4gZmFsc2Vcblx0cmV0dXJuIHRydWVcblxuIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuLyoqXG4gKiBUZXN0IGlmIHNvbWV0aGluZyBpcyBhbiBhcnJheSBvZiBzdHJpbmdzXG4gKiBbdW5pdCB0ZXN0c10oLi4vdGVzdC9kYXRhdHlwZXMudGVzdC5jaXZldCM6fjp0ZXh0PURCRyxpc0FycmF5T2ZTdHJpbmdzKVxuICovXG5cbmV4cG9ydCBpc0FycmF5T2ZTdHJpbmdzIDo9ICh4OiB1bmtub3duKTogeCBpcyBzdHJpbmdbXSA9PlxuXG5cdGlmIG5vdCBBcnJheS5pc0FycmF5KHgpXG5cdFx0cmV0dXJuIGZhbHNlXG5cdGZvciBpdGVtIG9mIHhcblx0XHRpZiBub3QgaXNTdHJpbmcoaXRlbSlcblx0XHRcdHJldHVybiBmYWxzZVxuXHRyZXR1cm4gdHJ1ZVxuXG4jIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4vKipcbiAqIFR5cGUgcmVnZXhwIC0gYSByZWd1bGFyIGV4cHJlc3Npb25cbiAqIFt1bml0IHRlc3RzXSguLi90ZXN0L2RhdGF0eXBlcy50ZXN0LmNpdmV0Izp+OnRleHQ9REJHLHJlZ2V4cClcbiAqL1xuXG5leHBvcnQgdHlwZSByZWdleHAgPSBSZWdFeHBcblxuLyoqXG4gKiBUZXN0IGlmIHNvbWV0aGluZyBpcyBhIHJlZ3VsYXIgZXhwcmVzc2lvblxuICogW3VuaXQgdGVzdHNdKC4uL3Rlc3QvZGF0YXR5cGVzLnRlc3QuY2l2ZXQjOn46dGV4dD1EQkcsaXNSZWdFeHApXG4gKi9cblxuZXhwb3J0IGlzUmVnRXhwIDo9IChpdGVtOiB1bmtub3duKTogaXRlbSBpcyByZWdleHAgPT5cblxuXHRyZXR1cm4gKGl0ZW0gaW5zdGFuY2VvZiBSZWdFeHApXG5cbiMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbi8qKlxuICogVGVzdCBpZiBzb21ldGhpbmcgaXMgYW4gb2JqZWN0XG4gKiBbdW5pdCB0ZXN0c10oLi4vdGVzdC9kYXRhdHlwZXMudGVzdC5jaXZldCM6fjp0ZXh0PURCRyxpc09iamVjdClcbiAqL1xuXG5leHBvcnQgaXNPYmplY3QgOj0gKHg6IHVua25vd24pOiB4IGlzIG9iamVjdCA9PlxuXG5cdHJldHVybiAoXG5cdFx0ICAodHlwZW9mIHggPT0gJ29iamVjdCcpXG5cdFx0JiYgKHggIT0gbnVsbClcblx0XHQmJiBub3QgQXJyYXkuaXNBcnJheSh4KVxuXHRcdCYmICh4IG5vdCBpbnN0YW5jZW9mIFJlZ0V4cClcblx0XHQmJiAoeCBub3QgaW5zdGFuY2VvZiBTdHJpbmcpXG5cdFx0JiYgKHggbm90IGluc3RhbmNlb2YgTnVtYmVyKVxuXHRcdCYmICh4IG5vdCBpbnN0YW5jZW9mIEJvb2xlYW4pXG5cdFx0KVxuXG4jIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4vKipcbiAqIFRlc3QgaWYgc29tZXRoaW5nIGlzIGEgZnVuY3Rpb25cbiAqIFt1bml0IHRlc3RzXSguLi90ZXN0L2RhdGF0eXBlcy50ZXN0LmNpdmV0Izp+OnRleHQ9REJHLGlzRnVuY3Rpb24pXG4gKi9cblxuZXhwb3J0IGlzRnVuY3Rpb24gOj0gKGl0ZW06IHVua25vd24pOiBpdGVtIGlzIEZ1bmN0aW9uID0+XG5cblx0cmV0dXJuICh0eXBlb2YgaXRlbSA9PSAnZnVuY3Rpb24nKVxuXG4jIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4vKipcbiAqIHJldHVybnMgdHJ1ZSBpZiBhbnkgb2YgdGhlc2UgaXMgdHJ1ZTpcbiAqIFx0LSB4IGlzIG51bGwgb3IgdW5kZWZcbiAqIFx0LSB4IGlzIGEgc3RyaW5nIGNvbnNpc3Rpbmcgb2Ygb25seSB3aGl0ZXNwYWNlXG4gKiBcdC0geCBpcyBhbiBhcnJheSBvZiBsZW5ndGggMFxuICogXHQtIHggaXMgYSBoYXNoIHRoYXQgaGFzIG5vIGtleXNcbiAqIGVsc2UgcmV0dXJucyBmYWxzZVxuICogW3VuaXQgdGVzdHNdKC4uL3Rlc3QvZGF0YXR5cGVzLnRlc3QuY2l2ZXQjOn46dGV4dD1EQkcsaXNFbXB0eSlcbiAqL1xuXG5leHBvcnQgaXNFbXB0eSA6PSAoeDogdW5rbm93bik6IGJvb2xlYW4gPT5cblxuXHRpZiAoeCA9PSB1bmRlZikgfHwgKHggPT0gbnVsbClcblx0XHRyZXR1cm4gdHJ1ZVxuXHRpZiBpc1N0cmluZyh4KVxuXHRcdHJldHVybiAoeC5tYXRjaCgvXlxccyokLykgIT0gbnVsbClcblx0aWYgaXNBcnJheSh4KVxuXHRcdHJldHVybiAoeC5sZW5ndGggPT0gMClcblx0aWYgKHR5cGVvZiB4ID09ICdvYmplY3QnKVxuXHRcdHJldHVybiAoT2JqZWN0LmtleXMoeCkubGVuZ3RoID09IDApXG5cdGVsc2Vcblx0XHRyZXR1cm4gZmFsc2VcblxuIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuLyoqXG4gKiByZXR1cm5zIG5vdCBpc0VtcHR5KHgpXG4gKiBbdW5pdCB0ZXN0c10oLi4vdGVzdC9kYXRhdHlwZXMudGVzdC5jaXZldCM6fjp0ZXh0PURCRyxub25FbXB0eSlcbiAqL1xuXG5leHBvcnQgbm9uRW1wdHkgOj0gKHg6IHVua25vd24pOiBib29sZWFuID0+XG5cblx0cmV0dXJuIG5vdCBpc0VtcHR5KHgpXG5cbiMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbmV4cG9ydCBsTWFyayA6PSAn4riCJyAgICAjIC0tLSBVKzJFMDJcbmV4cG9ydCByTWFyayA6PSAn4riDJyAgICAjIC0tLSBVKzJFMDNcblxuZXhwb3J0IGhpZGUgOj0gKHN0cjogc3RyaW5nKTogc3RyaW5nID0+XG5cblx0cmV0dXJuIGxNYXJrICsgc3RyICsgck1hcmtcblxuIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuZXhwb3J0IHVuaGlkZSA6PSAoc3RyOiBzdHJpbmcpOiBzdHJpbmcgPT5cblxuXHRsUGFydHM6IHN0cmluZ1tdIDo9IFtdXG5cdGxldCBwb3MgPSAwXG5cdGxldCBzdGFydCA9IHN0ci5pbmRleE9mKCdcIicrbE1hcmssIHBvcylcblx0d2hpbGUgKHN0YXJ0ID49IDApXG5cdFx0ZW5kIDo9IHN0ci5pbmRleE9mKHJNYXJrKydcIicsIHN0YXJ0KVxuXHRcdGlmIChlbmQgPT0gLTEpXG5cdFx0XHRicmVha1xuXHRcdGVsc2Vcblx0XHRcdGxQYXJ0cy5wdXNoIHN0ci5zdWJzdHJpbmcocG9zLCBzdGFydClcblx0XHRcdGxQYXJ0cy5wdXNoIHN0ci5zdWJzdHJpbmcoc3RhcnQrMiwgZW5kKVxuXHRcdFx0cG9zID0gZW5kKzJcblx0XHRzdGFydCA9IHN0ci5pbmRleE9mKCdcIicrbE1hcmssIHBvcylcblx0bFBhcnRzLnB1c2ggc3RyLnN1YnN0cmluZyhwb3MpXG5cdHJldHVybiBsUGFydHMuam9pbignJylcblxuIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuZXhwb3J0IGlzQ2xhc3MgOj0gKHg6IHVua25vd24pOiBib29sZWFuID0+XG5cblx0aWYgKHR5cGVvZiB4ICE9ICdmdW5jdGlvbicpXG5cdFx0cmV0dXJuIGZhbHNlXG5cdHJldHVybiB4LnRvU3RyaW5nKCkuc3RhcnRzV2l0aCgnY2xhc3MnKVxuXG4jIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG5leHBvcnQgaXNQcm9taXNlIDo9ICh4OiB1bmtub3duKTogYm9vbGVhbiA9PlxuXG5cdHJldHVybiAoXG5cdFx0KHR5cGVvZiB4ID09ICdvYmplY3QnKVxuXHRcdCYmICh4ICE9IG51bGwpXG5cdFx0JiYgKCd0aGVuJyBpbiB4KVxuXHRcdCYmICh0eXBlb2YgeC50aGVuID09ICdmdW5jdGlvbicpXG5cdFx0KVxuXG4jIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuIyAtLS0gTk9URTogQW4gJyYnIHByZWNlZGluZyBhIGtleSBuYW1lIGluZGljYXRlc1xuIyAgICAgICAgICAgdGhhdCBpdCBzaG91bGQgYmUgYSBmdW5jdGlvblxuXG5leHBvcnQgaXNDbGFzc0luc3RhbmNlIDo9IChcblx0XHR4OiB1bmtub3duLFxuXHRcdGxSZXFLZXlzOiBzdHJpbmdbXT1bXVxuXHRcdCk6IGJvb2xlYW4gPT5cblxuXHRpZiAodHlwZW9mIHggIT0gJ29iamVjdCcpIHx8IGlzQXJyYXkoeCkgfHwgaXNQcm9taXNlKHgpXG5cdFx0cmV0dXJuIGZhbHNlXG5cblx0aWYgbm90ZGVmaW5lZCh4Py5jb25zdHJ1Y3Rvcj8ubmFtZSlcblx0XHRyZXR1cm4gZmFsc2VcblxuXHRpZiBpc0hhc2goeCkgJiYgKHggIT0gbnVsbClcblx0XHRmb3Iga2V5IG9mIGxSZXFLZXlzXG5cdFx0XHRsZXQgdHlwZSA9IHVuZGVmXG5cdFx0XHRpZiBsTWF0Y2hlcyA6PSBrZXkubWF0Y2goLy8vXiAoXFwmKSAoLiopICQvLy8pXG5cdFx0XHRcdFtfLCB0eXBlLCBrZXldIDo9IGxNYXRjaGVzXG5cblx0XHRcdGlmIChrZXkgaW4geClcblx0XHRcdFx0aXRlbTogdW5rbm93biA6PSB4W2tleV1cblx0XHRcdFx0aWYgbm9uRW1wdHkoaXRlbSlcblx0XHRcdFx0XHRpZiAodHlwZSA9PSAnJicpICYmICh0eXBlb2YgaXRlbSAhPSAnZnVuY3Rpb24nKVxuXHRcdFx0XHRcdFx0cmV0dXJuIGZhbHNlXG5cdFx0XHRcdGVsc2Vcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2Vcblx0XHRcdGVsc2Vcblx0XHRcdFx0cmV0dXJuIGZhbHNlXG5cdHJldHVybiB0cnVlXG5cbiMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbmV4cG9ydCBpc0l0ZXJhYmxlIDo9ICh4OiB1bmtub3duKTogYm9vbGVhbiA9PlxuXG5cdGlmICh0eXBlb2YgeCA9PSAnb2JqZWN0JykgJiYgKHggIT0gbnVsbClcbiNcdFx0cmV0dXJuICh0eXBlb2YgeFtTeW1ib2wuaXRlcmF0b3JdID09ICdmdW5jdGlvbicpXG5cdFx0cmV0dXJuIFN5bWJvbC5pdGVyYXRvciBpbiB4XG5cdHJldHVybiBmYWxzZVxuXG4jIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuIyAtLS0gRnVuY3Rpb25zIHRvIG5vcm1hbGl6ZSBKYXZhU2NyaXB0IGNvZGUgJiBleHByZXNzaW9uc1xuIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuZXhwb3J0IGFkZEZ1bmN0aW9uTmFtZXMgOj0gKGNvZGU6IHN0cmluZyk6IHN0cmluZyA9PlxuXG5cdCMgLS0tIFRoZSBuYW1lcyB3ZSBhZGQgd2lsbCBsb29rIGxpa2U6ICdfX2R1bW15OTknIHdoZXJlXG5cdCMgICAgICc5OScgY2FuIGJlIGFueSBzZXF1ZW5jZSBvZiBkaWdpdHNcblx0IyAgICAgdG8gbWFrZSBpdCB0cml2aWFsIHRvIHJlbW92ZSB0aGVtIGxhdGVyXG5cblx0bGV0IGlkID0gOTlcblx0cmUgOj0gLy8vXG5cdFx0XHRmdW5jdGlvbiAgICAgICAjICdmdW5jdGlvbicga2V5d29yZFxuXHRcdFx0XFxzKiAgICAgICAgICAgICMgb3B0aW9uYWwgd2hpdGVzcGFjZVxuXHRcdFx0KCBcXCogKSA/ICAgICAgICMgb3B0aW9uYWwgJyonXG5cdFx0XHRcXHMqICAgICAgICAgICAgIyBvcHRpb25hbCB3aGl0ZXNwYWNlXG5cdFx0XHRcXChcblx0XHRcdC8vL2dcblx0cmVwbGFjZUZ1bmMgOj0gKG1hdGNoOiBzdHJpbmcsIGFzdDogc3RyaW5nPykgPT5cblx0XHRuIDo9IGlkXG5cdFx0aWQgKz0gMVxuXHRcdHJldHVybiAoXG5cdFx0XHQgIChhc3QgPT0gdW5kZWZpbmVkKVxuXHRcdFx0PyBcImZ1bmN0aW9uIF9fZHVtbXkje24udG9TdHJpbmcoKX0oXCJcblx0XHRcdDogXCJmdW5jdGlvbiogX19kdW1teSN7bi50b1N0cmluZygpfShcIlxuXHRcdFx0KVxuXHRyZXR1cm4gY29kZS5yZXBsYWNlQWxsKHJlLCByZXBsYWNlRnVuYylcblxuIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuZXhwb3J0IHJlbW92ZUZ1bmN0aW9uTmFtZXMgOj0gKGNvZGU6IHN0cmluZyk6IHN0cmluZyA9PlxuXG5cdHJldHVybiBjb2RlLnJlcGxhY2VBbGwoL19fZHVtbXlcXGQrL2csICcnKVxuXG4jIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG5leHBvcnQgbm9ybWFsaXplQ29kZSA6PSAoXG5cdFx0Y29kZTogc3RyaW5nLFxuXHRcdCk6IHN0cmluZyA9PlxuXG5cdCMgLS0tIER1ZSB0byBhIGJ1ZyBpbiBKYXZhU2NyaXB0LCB3ZSBoYXZlIHRvIG1ha2Ugc3VyZVxuXHQjICAgICB0aGF0IGFsbCBmdW5jdGlvbiBuYW1lcyAoZXZlbiBpbiBnZW5lcmF0b3JzKVxuXHQjICAgICBoYXZlIGEgbmFtZSwgd2hpY2ggd2UgbXVzdCByZW1vdmUgYWZ0ZXIgbWluaW1pemF0aW9uXG5cblx0bmV3Q29kZSA6PSBhZGRGdW5jdGlvbk5hbWVzKGNvZGUpXG5cblx0IyAtLS0gUmVtb3ZlIGV4dHJhIHdoaXRlc3BhY2Vcblx0IyAgICAgUmVtb3ZlIGV4dHJhIHBhcmVucyBmcm9tICcoc3RyKT0+cmV0dXJuJ1xuXHQjICAgICBSZW1vdmUgY29tbWVudHNcblx0aE9wdGlvbnMgOj0ge1xuXHRcdGFubm90YXRpb25zOiBmYWxzZVxuXHRcdG1hbmdsZTogZmFsc2Vcblx0XHRjb21wcmVzczogdW5kZWZpbmVkXG5cdFx0a2VlcF9mYXJnczogdHJ1ZVxuXHRcdGtlZXBfZm5hbWVzOiB0cnVlXG5cdFx0d2FybmluZ3M6IHRydWVcblx0XHR9XG5cdGhSZXN1bHQgOj0gbWluaWZ5IG5ld0NvZGUsIGhPcHRpb25zXG5cdGlmIGhSZXN1bHQuZXJyb3Jcblx0XHR0aHJvdyBuZXcgRXJyb3IoaFJlc3VsdC5lcnJvci5tZXNzYWdlKVxuXHRlbHNlIGlmIGhSZXN1bHQuY29kZVxuXHRcdHJldHVybiByZW1vdmVGdW5jdGlvbk5hbWVzKGhSZXN1bHQuY29kZSlcblx0ZWxzZVxuXHRcdHRocm93IG5ldyBFcnJvcihcIlVua25vd24gZXJyb3IgaW4gbm9ybWFsaXplQ29kZSgpXCIpXG5cbiMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbmV4cG9ydCBub3JtYWxpemVFeHByIDo9IChcblx0XHRjb2RlOiBzdHJpbmcsXG5cdFx0KTogc3RyaW5nID0+XG5cblx0c3RyIDo9IG5vcm1hbGl6ZUNvZGUoY29kZSlcblx0bGVuIDo9IHN0ci5sZW5ndGhcblx0aWYgKHN0cltsZW4tMV0gPT0gJzsnKVxuXHRcdHJldHVybiBzdHIuc3Vic3RyaW5nKDAsIGxlbi0xKVxuXHRlbHNlXG5cdFx0cmV0dXJuIHN0clxuXG4jIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuIl19