"use strict";
// datatypes.lib.civet

import {minify} from 'npm:uglify-js'
import deepEqual from 'npm:fast-deep-equal'

export {deepEqual}

/**
 * @module datatypes - TypeScript datatype checking
 */

// ---------------------------------------------------------------------------

/**
 * a function that takes no arguments and returns nothing
 * [unit tests](../test/datatypes.test.civet#:~:text=DBG,voidFunc)
 */

export type voidFunc = () => void

export type TFilterFunc = (item: unknown) => boolean
export type TStringifier = (item: unknown) => string
export type TStringParser = (str: string) => unknown
export type TAssertFunc = (cond: boolean, msg?: string) => void

// ---------------------------------------------------------------------------

/**
 * An alias for JavaScript's `undefined`
 * [unit tests](../test/datatypes.test.civet#:~:text=DBG,undef)
 */

export const undef = undefined

// ---------------------------------------------------------------------------

/**
 * returns true if the provided value is defined
 * (i.e. not null or undefined), else returns false
 * [unit tests](../test/datatypes.test.civet#:~:text=DBG,defined)
 */

export type TObject = {
	[key: string]: unknown
	[sym: symbol]: unknown
	}
export type TDefined = NonNullable<unknown>

export const defined = (x: unknown): x is TDefined => {

	return (x !== undef) && (x !== null)
}

// ---------------------------------------------------------------------------

/**
 * Returns true if the value provided is not defined
 * (i.e. either null or undefined), else returns false
 * [unit tests](../test/datatypes.test.civet#:~:text=DBG,notdefined)
 */

export const notdefined = (x: unknown): x is undefined => {

	return (x === undef) || (x === null)
}

// ---------------------------------------------------------------------------

/**
 * throws an exception with the provided message
 */

export const croak = (msg: string): never => {

	throw new Error(msg)
}

// ---------------------------------------------------------------------------

/**
 * Asserts that `cond` is true. If it isn't, an exception is
 * thrown with the given `msg`
 */

export const assert: TAssertFunc = (
		cond: boolean,
		msg: string="An error occurred"
		): asserts cond => {

	if (!cond) {
		croak(msg)
	}
	return
}

// ---------------------------------------------------------------------------
// --- general JavaScript function to get the type of a value

export const jsType = (x: unknown): string => {

	if (typeof x === 'undefined') {
		return 'undef'
	}

	if (typeof x === 'bigint') {
		return 'integer'
	}

	if (typeof x === 'number') {
		return (
			  Number.isNaN(x)    ? 'NaN'
			: Number.isFinite(x) ? (Number.isInteger(x) ? 'integer' : 'number')
			: ((x < 0) ? 'neginfinity' : 'infinity')
			)
	}

	if (typeof x === 'function') {
		// --- If it's a function whose source code starts with
		//     the "class" keyword, it's a class
		const str = x.toString()
		if (str.startsWith('class')) {
			// --- get name with className(x)
			//     get definition with classDef(x)
			return 'class'
		}
		else {
			return 'function'
		}
	} // get name with functionName(x)

	if (typeof x === 'object') {
		if (x === null) {
			return 'null'
		}
		if (Array.isArray(x)) {
			return 'array'
		}
		if (x instanceof String) {
			return 'string'
		}
		if (x instanceof Boolean) {
			return 'boolean'
		}
		if (x instanceof Number) {
			return Number.isInteger(x) ? 'integer' : 'number'
		}
		if (x instanceof RegExp) {
			// --- get definition with regexpDef(x)
			return 'regexp'
		}
		const className = x?.constructor?.name
		if (className === 'Object') {
			return 'hash'
		}
		else {
			return 'instance'
		}
	}  // get class name with x.constructor.name
	else {
		return (typeof x)
	}
}

// ---------------------------------------------------------------------------

export const isSymbol = (x: unknown): boolean => {

	return (typeof x === 'symbol')
}

// ---------------------------------------------------------------------------

export const symbolName = (x: unknown): string => {

	if (typeof x === 'symbol') {
		return x.description || ''
	}
	throw new Error("Not a symbol")
}

// ---------------------------------------------------------------------------

export const functionName = (x: Function): string => {

	return x.name || ''
}

// ---------------------------------------------------------------------------

export const functionDef = (x: Function): string => {

	return normalizeExpr(x.toString())
}

// ---------------------------------------------------------------------------

export const regexpDef = (x: unknown): string => {

	if ((typeof x === 'object') && (x instanceof RegExp)) {
		return x.source
	}
	croak("Not a RegExp")
	return ''
}      // --- TypeScript bug

// ---------------------------------------------------------------------------

export const classDef = (x: unknown): string => {

	if ((typeof x === 'function') && x.toString().startsWith('class')) {
		return normalizeCode(x.toString())
	}
	croak("Not a class")
	return ''
}      // --- TypeScript bug

// ---------------------------------------------------------------------------

export var className = (x: unknown): (string | undefined) => {
	// --- item can be a class or an object

	if ((typeof x === 'function') && x.toString().startsWith('class')) {
		return x.name || ''
	}
	if ((typeof x === 'object') && (x !== null)) {
		return x.constructor.name || ''
	}
	croak("Not a class")
	return ''
}      // --- TypeScript bug

// ---------------------------------------------------------------------------

/**
 * An array containing anything
 * [unit tests](../test/datatypes.test.civet#:~:text=DBG,array)
 */

export type array = unknown[]
export type arrayof<T> = T[]

/**
 * Test if something is an array
 * [unit tests](../test/datatypes.test.civet#:~:text=DBG,isArray)
 */

export const isArray = (x: unknown): x is array => {

	return Array.isArray(x)
}

// ---------------------------------------------------------------------------

/**
 * An alias for TypeScript type 'object' with string keys
 * [unit tests](../test/datatypes.test.civet#:~:text=DBG,hash)
 */

export interface hash {
	[key: string | symbol]: unknown
}

export interface hashof<T> {
	[key: string | symbol]: T
}

// ---------------------------------------------------------------------------

/**
 * Test if something is a hash
 * [unit tests](../test/datatypes.test.civet#:~:text=DBG,isHash)
 */

export const isHash = (x: unknown): x is hash => {

	return (jsType(x) === 'hash')
}

// ---------------------------------------------------------------------------

export type TObjCompareFunc = (h1: hash, h2: hash) => number
export type TObjLikeFunc = (h: hash, hPat: hash) => boolean
export type TToStringFunc = (h: hash) => string

export const hashLike = (h: hash, hPat: hash): boolean => {

	const lHashKeys = Object.keys(h)
	for (const key of Object.keys(hPat)) {
		if (lHashKeys.includes(key)) {
			const patVal = hPat[key]
			if (defined(patVal) && !deepEqual(h[key], patVal)) {
				return false
			}
		}
		else {
			return false
		}
	}
	return true
}

// ---------------------------------------------------------------------------

/**
 * returns true if (typeof item == 'string') or item instanceof String
 * [unit tests](../test/datatypes.test.civet#:~:text=DBG,isString)
 */

export const isString = (x: unknown): x is string => {

	return (typeof x === 'string') || (x instanceof String)
}

// ---------------------------------------------------------------------------

export type char = string

export const isChar = (x: unknown): x is char => {

	return isString(x) && (x.length === 1)
}

// ---------------------------------------------------------------------------

export type nonEmptyString = string

/**
 * Test if something is a non-empty string,
 * i.e. isn't all whitespace
 * [unit tests](../test/datatypes.test.civet#:~:text=DBG,isNonEmptyString)
 */

export const isNonEmptyString = (x: unknown): x is nonEmptyString => {

	// --- must contain non-whitespace character
	return isString(x) && defined(x.match(/\S/))
}

// ---------------------------------------------------------------------------

/**
 * Test if something is a boolean
 * [unit tests](../test/datatypes.test.civet#:~:text=DBG,isBoolean)
 */

export const isBoolean = (x: unknown): x is boolean => {

	return (typeof x === 'boolean') || (x instanceof Boolean)
}

// ---------------------------------------------------------------------------

/**
 * Test if something is a number
 * [unit tests](../test/datatypes.test.civet#:~:text=DBG,isNumber)
 */

export const isNumber = (x: unknown): x is number => {

	return (
		   (typeof x === 'bigint')
		|| (typeof x === 'number')
		|| (x instanceof Number)
		)
}

// ---------------------------------------------------------------------------

export const isPrimitive = (x: unknown): boolean => {

	return isString(x) || isNumber(x) || isBoolean(x)
}

// ---------------------------------------------------------------------------

export const isNonPrimitive = (x: unknown): boolean => {

	return (x !== null) && (typeof x === 'object')
}

// ---------------------------------------------------------------------------

/**
 * Type integer
 */

export type integer = number

/**
 * Test if something is an integer
 * [unit tests](../test/datatypes.test.civet#:~:text=DBG,isInteger)
 */

export const isInteger = (x: unknown): x is integer => {

	return isNumber(x) && Number.isInteger(x.valueOf())
}

// ---------------------------------------------------------------------------

/**
 * Type intArray
 */

export type intArray = integer[]

export const isArrayOfIntegers = (x: unknown): x is intArray => {

	if (!Array.isArray(x)) {
		return false
	}
	for (const item of x) {
		if (!isInteger(item)) {
			return false
		}
	}
	return true
}

// ---------------------------------------------------------------------------

/**
 * Test if something is an array of strings
 * [unit tests](../test/datatypes.test.civet#:~:text=DBG,isArrayOfStrings)
 */

export const isArrayOfStrings = (x: unknown): x is string[] => {

	if (!Array.isArray(x)) {
		return false
	}
	for (const item of x) {
		if (!isString(item)) {
			return false
		}
	}
	return true
}

// ---------------------------------------------------------------------------

/**
 * Type regexp - a regular expression
 * [unit tests](../test/datatypes.test.civet#:~:text=DBG,regexp)
 */

export type regexp = RegExp

/**
 * Test if something is a regular expression
 * [unit tests](../test/datatypes.test.civet#:~:text=DBG,isRegExp)
 */

export const isRegExp = (item: unknown): item is regexp => {

	return (item instanceof RegExp)
}

// ---------------------------------------------------------------------------

/**
 * Test if something is an object
 * [unit tests](../test/datatypes.test.civet#:~:text=DBG,isObject)
 */

export const isObject = (x: unknown): x is object => {

	return (typeof x === 'object') && (x !== null)
}

// ---------------------------------------------------------------------------

/**
 * Test if something is a function
 * [unit tests](../test/datatypes.test.civet#:~:text=DBG,isFunction)
 */

export const isFunction = (item: unknown): boolean => {

	return (typeof item === 'function')
}

// ---------------------------------------------------------------------------

/**
 * returns true if any of these is true:
 * 	- x is null or undef
 * 	- x is a string consisting of only whitespace
 * 	- x is an array of length 0
 * 	- x is a hash that has no keys
 * else returns false
 * [unit tests](../test/datatypes.test.civet#:~:text=DBG,isEmpty)
 */

export const isEmpty = (x: unknown): boolean => {

	if ((x === undef) || (x === null)) {
		return true
	}
	if (isString(x)) {
		return (x.match(/^\s*$/) !== null)
	}
	if (isArray(x)) {
		return (x.length === 0)
	}
	if (isHash(x)) {
		return (Object.keys(x).length === 0)
	}
	else {
		return false
	}
}

// ---------------------------------------------------------------------------

/**
 * returns not isEmpty(x)
 * [unit tests](../test/datatypes.test.civet#:~:text=DBG,nonEmpty)
 */

export const nonEmpty = (x: unknown): boolean => {

	return !isEmpty(x)
}

// ---------------------------------------------------------------------------

export const lMark = '⸂'    // --- U+2E02
export const rMark = '⸃'    // --- U+2E03

export const hide = (str: string): string => {

	return lMark + str + rMark
}

// ---------------------------------------------------------------------------

export const unhide = (str: string): string => {

	const lParts: string[] = []
	let pos = 0
	let start = str.indexOf('"'+lMark, pos)
	while (start >= 0) {
		const end = str.indexOf(rMark+'"', start)
		if (end === -1) {
			break
		}
		else {
			lParts.push(str.substring(pos, start))
			lParts.push(str.substring(start+2, end))
			pos = end+2
		}
		start = str.indexOf('"'+lMark, pos)
	}
	lParts.push(str.substring(pos))
	return lParts.join('')
}

// ---------------------------------------------------------------------------

export const isClass = (x: unknown): boolean => {

	if (typeof x !== 'function') {
		return false
	}
	return x.toString().startsWith('class')
}

// ---------------------------------------------------------------------------

export const isPromise = (x: unknown): boolean => {

	return (
		(typeof x === 'object')
		&& (x !== null)
		&& ('then' in x)
		&& (typeof x.then === 'function')
		)
}

// ---------------------------------------------------------------------------
// --- NOTE: An '&' preceding a key name indicates
//           that it should be a function

export const isClassInstance = (
		x: unknown,
		lReqKeys: string[]=[]
		): boolean => {

	if (isHash(x)) {
		if (isArray(x) || isPromise(x)) {
			return false
		}
		if (notdefined(x?.constructor?.name)) {
			return false
		}
		for (const key of lReqKeys) {
			let type = undef
			let ref;if ((ref = key.match(/^(\&)(.*)$/))) {const lMatches = ref;
				const [_, type, key] = lMatches
			}
			if (key in x) {
				const item: any = x[key]
				if (nonEmpty(item)) {
					if ((type === '&') && (typeof item !== 'function')) {
						return false
					}
				}
				else {
					return false
				}
			}
			else {
				return false
			}
		}
		return true
	}
	else {
		return false
	}
}

// ---------------------------------------------------------------------------

export const isIterable = (x: unknown): boolean => {

	if (isHash(x)) {
		return (typeof x[Symbol.iterator] === 'function')
	}
	return false
}

// ---------------------------------------------------------------------------
// --- Functions to normalize JavaScript code & expressions
// ---------------------------------------------------------------------------

export const addFunctionNames = (code: string): string => {

	// --- The names we add will look like: '__dummy99' where
	//     '99' can be any sequence of digits
	//     to make it trivial to remove them later

	let id = 99
	const re = /function\s*(\*)?\s*\(/g
	const replaceFunc = (match: string, ast: (string | undefined)) => {
		const n = id
		id += 1
		return (
			  (ast === undefined)
			? `function __dummy${n.toString()}(`
			: `function* __dummy${n.toString()}(`
			)
	}
	return code.replaceAll(re, replaceFunc)
}

// ---------------------------------------------------------------------------

export const removeFunctionNames = (code: string): string => {

	return code.replaceAll(/__dummy\d+/g, '')
}

// ---------------------------------------------------------------------------

export const normalizeCode = (
		code: string,
		): string => {

	// --- Due to a bug in JavaScript, we have to make sure
	//     that all function names (even in generators)
	//     have a name, which we must remove after minimization

	const newCode = addFunctionNames(code)

	// --- Remove extra whitespace
	//     Remove extra parens from '(str)=>return'
	//     Remove comments
	const hOptions = {
		annotations: false,
		mangle: false,
		compress: undefined,
		keep_fargs: true,
		keep_fnames: true,
		warnings: true
		}
	const hResult = minify(newCode, hOptions)
	if (hResult.error) {
		throw new Error(hResult.error.message)
	}
	else if (hResult.code) {
		return removeFunctionNames(hResult.code)
	}
	else {
		throw new Error("Unknown error in normalizeCode()")
	}
}

// ---------------------------------------------------------------------------

export const normalizeExpr = (
		code: string,
		): string => {

	const str = normalizeCode(code)
	const len = str.length
	if (str[len-1] === ';') {
		return str.substring(0, len-1)
	}
	else {
		return str
	}
}

// ---------------------------------------------------------------------------

//# sourceMappingURL=data:application/json;charset=utf-8;base64,