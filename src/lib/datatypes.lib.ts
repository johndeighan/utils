"use strict";
// datatypes.lib.civet

import deepEqual from 'fast-deep-equal'

import {
	normalizeCode, normalizeExpr, truncStr,
	} from './typescript.lib.ts'

export {deepEqual}

/**
 * @module datatypes - TypeScript datatype checking
 */

// ---------------------------------------------------------------------------

/**
 * a function that takes no arguments and returns nothing
 * [unit tests](../test/datatypes.test.civet#:~:text=DBG,voidFunc)
 */

export type voidFunc = () => void

export type TFilterFunc = (item: any) => boolean
export type TStringifier = (item: any) => string
export type TStringParser = (str: string) => any
export type TAssertFunc = (cond: boolean, msg?: string) => void

// ---------------------------------------------------------------------------

/**
 * An alias for JavaScript's `undefined`
 * [unit tests](../test/datatypes.test.civet#:~:text=DBG,undef)
 */

export const undef = undefined

// ---------------------------------------------------------------------------

/**
 * returns true if the provided value is defined
 * (i.e. not null or undefined), else returns false
 * [unit tests](../test/datatypes.test.civet#:~:text=DBG,defined)
 */

export function defined<T extends any>(x: T): x is NonNullable<T> {

	return (x !== undef) && (x !== null)
	}

// ---------------------------------------------------------------------------

/**
 * Returns true if the value provided is not defined
 * (i.e. either null or undefined), else returns false
 * [unit tests](../test/datatypes.test.civet#:~:text=DBG,notdefined)
 */

export const notdefined = (x: any): x is undefined => {

	return (x === undefined) || (x === null)
}

// ---------------------------------------------------------------------------

/**
 * Asserts that `cond` is true. If it isn't, an exception is
 * thrown with the given `msg`
 */

export const assert: TAssertFunc = (
		cond: boolean,
		msg: string="An error occurred"
		): asserts cond => {

	if (!cond) {
		throw new Error(msg)
	}
	return
}

// ---------------------------------------------------------------------------
// --- general JavaScript function to get the type of a value

export const jsType = (x: any): string => {

	const typ = typeof x
	switch(typ) {
		case 'undefined': {
			return 'undef'
		}
		case 'bigint': {
			return 'integer'
		}
		case 'boolean':case 'string':case 'symbol': {
			// --- get symbol name with symbolName(x)
			return typ
		}
		case 'number': {
			return (
				  Number.isNaN(x)    ? 'NaN'
				: Number.isFinite(x) ? (Number.isInteger(x) ? 'integer' : 'number')
				: ((x < 0) ? 'neginfinity' : 'infinity')
				)
		}
		case 'function': {
			// --- If it's a function whose source code starts with
			//     the "class" keyword, it's a class
			const str = x.toString()
			if (str.startsWith('class')) {
				// --- get name with className(x)
				//     get definition with classDef(x)
				return 'class'
			}
			else {
				return 'function'
			}
		} // get name with functionName(x)
		case 'object': {
			if (x === null) {
				return 'null'
			}
			if (Array.isArray(x)) {
				return 'array'
			}
			if (x instanceof String) {
				return 'string'
			}
			if (x instanceof Boolean) {
				return 'boolean'
			}
			if (x instanceof Number) {
				return Number.isInteger(x) ? 'integer' : 'number'
			}
			if (x instanceof RegExp) {
				// --- get definition with regexpDef(x)
				return 'regexp'
			}
			const className = x?.constructor?.name
			if (className === 'Object') {
				return 'hash'
			}
			else {
				return 'instance'
			}
		}
	}  // get class name with x.constructor.name
	return 'unknown'
}

// ---------------------------------------------------------------------------

export const isSymbol = (x: any): boolean => {

	return (typeof x === 'symbol')
}

// ---------------------------------------------------------------------------

export const symbolName = (x: any): string => {

	return x.description || ''
}

// ---------------------------------------------------------------------------

export const functionName = (x: Function): string => {

	return x.name || ''
}

// ---------------------------------------------------------------------------

export const functionDef = (x: Function): string => {

	return normalizeExpr(x.toString())
}

// ---------------------------------------------------------------------------

export const classDef = (x: any): string => {

	return normalizeCode(x.toString())
}

// ---------------------------------------------------------------------------

export const regexpDef = (x: any): string => {

	return x.source
}

// ---------------------------------------------------------------------------

export var className = (x: any): (string | undefined) => {
	// --- item can be a class or an object

	switch(jsType(x)) {
		case 'class': {
			return x.name || ''
		}
		case 'instance': {
			return x.constructor.name || ''
		}
		default: {
			return ''
		}
	}
}

// ---------------------------------------------------------------------------

/**
 * An array containing anything
 * [unit tests](../test/datatypes.test.civet#:~:text=DBG,array)
 */

export type array = any[]
export type arrayof<T> = T[]

/**
 * Test if something is an array
 * [unit tests](../test/datatypes.test.civet#:~:text=DBG,isArray)
 */

export const isArray = (x: any): x is array => {

	return Array.isArray(x)
}

// ---------------------------------------------------------------------------

/**
 * An alias for TypeScript type 'object' with string keys
 * [unit tests](../test/datatypes.test.civet#:~:text=DBG,hash)
 */

export interface hash {
	[key: string | symbol]: any
}

export interface hashof<T> {
	[key: string | symbol]: T
}

// ---------------------------------------------------------------------------

/**
 * Test if something is a hash
 * [unit tests](../test/datatypes.test.civet#:~:text=DBG,isHash)
 */

export const isHash = (x: any): x is hash => {

	return (jsType(x) === 'hash')
}

// ---------------------------------------------------------------------------

export type TObjCompareFunc = (h1: hash, h2: hash) => number
export type TObjLikeFunc = (h: hash, hPat: hash) => boolean
export type TToStringFunc = (h: hash) => string

export const hashLike = (h: hash, hPat: hash): boolean => {

	const lHashKeys = Object.keys(h)
	for (const key of Object.keys(hPat)) {
		if (lHashKeys.includes(key)) {
			const patVal = hPat[key]
			if (defined(patVal) && !deepEqual(h[key], patVal)) {
				return false
			}
		}
		else {
			return false
		}
	}
	return true
}

// ---------------------------------------------------------------------------

/**
 * returns true if (typeof item == 'string') or item instanceof String
 * [unit tests](../test/datatypes.test.civet#:~:text=DBG,isString)
 */

export const isString = (x: any): x is string => {

	return (typeof x === 'string') || (x instanceof String)
}

// ---------------------------------------------------------------------------

export type char = string

export const isChar = (x: any): x is char => {

	return isString(x) && (x.length === 1)
}

// ---------------------------------------------------------------------------

export type nonEmptyString = string

/**
 * Test if something is a non-empty string,
 * i.e. isn't all whitespace
 * [unit tests](../test/datatypes.test.civet#:~:text=DBG,isNonEmptyString)
 */

export const isNonEmptyString = (x: any): x is nonEmptyString => {

	// --- must contain non-whitespace character
	return isString(x) && defined(x.match(/\S/))
}

// ---------------------------------------------------------------------------

/**
 * Test if something is a boolean
 * [unit tests](../test/datatypes.test.civet#:~:text=DBG,isBoolean)
 */

export const isBoolean = (x: any): x is boolean => {

	return (typeof x === 'boolean') || (x instanceof Boolean)
}

// ---------------------------------------------------------------------------

/**
 * Test if something is a number
 * [unit tests](../test/datatypes.test.civet#:~:text=DBG,isNumber)
 */

export const isNumber = (x: any): x is number => {

	return (
		   (typeof x === 'bigint')
		|| (typeof x === 'number')
		|| (x instanceof Number)
		)
}

// ---------------------------------------------------------------------------

export const isPrimitive = (x: any): boolean => {

	return isString(x) || isNumber(x) || isBoolean(x)
}

// ---------------------------------------------------------------------------

export const isNonPrimitive = (x: any): boolean => {

	return (x !== null) && (typeof x === 'object')
}

// ---------------------------------------------------------------------------

/**
 * Type integer
 */

export type integer = number

/**
 * Test if something is an integer
 * [unit tests](../test/datatypes.test.civet#:~:text=DBG,isInteger)
 */

export const isInteger = (x: any): x is integer => {

	return isNumber(x) && Number.isInteger(x.valueOf())
}

// ---------------------------------------------------------------------------

/**
 * Type intArray
 */

export type intArray = integer[]

export const isArrayOfIntegers = (x: any): x is intArray => {

	if (!Array.isArray(x)) {
		return false
	}
	for (const item of x) {
		if (!isInteger(item)) {
			return false
		}
	}
	return true
}

// ---------------------------------------------------------------------------

/**
 * Test if something is an array of strings
 * [unit tests](../test/datatypes.test.civet#:~:text=DBG,isArrayOfStrings)
 */

export const isArrayOfStrings = (x: any): x is string[] => {

	if (!Array.isArray(x)) {
		return false
	}
	for (const item of x) {
		if (!isString(item)) {
			return false
		}
	}
	return true
}

// ---------------------------------------------------------------------------

/**
 * Type regexp - a regular expression
 * [unit tests](../test/datatypes.test.civet#:~:text=DBG,regexp)
 */

export type regexp = RegExp

/**
 * Test if something is a regular expression
 * [unit tests](../test/datatypes.test.civet#:~:text=DBG,isRegExp)
 */

export const isRegExp = (item: any): item is regexp => {

	return (item instanceof RegExp)
}

// ---------------------------------------------------------------------------

/**
 * Test if something is an object
 * [unit tests](../test/datatypes.test.civet#:~:text=DBG,isObject)
 */

export const isObject = (x: any): x is object => {

	return (typeof x === 'object') && (x !== null)
}

// ---------------------------------------------------------------------------

/**
 * Test if something is a function
 * [unit tests](../test/datatypes.test.civet#:~:text=DBG,isFunction)
 */

export const isFunction = (item: any): boolean => {

	return (typeof item === 'function')
}

// ---------------------------------------------------------------------------

/**
 * returns true if any of these is true:
 * 	- x is null or undef
 * 	- x is a string consisting of only whitespace
 * 	- x is an array of length 0
 * 	- x is a hash that has no keys
 * else returns false
 * [unit tests](../test/datatypes.test.civet#:~:text=DBG,isEmpty)
 */

export const isEmpty = (x: any): boolean => {

	if ((x === undef) || (x === null)) {
		return true
	}
	if (isString(x)) {
		return (x.match(/^\s*$/) !== null)
	}
	if (isArray(x)) {
		return (x.length === 0)
	}
	if (isHash(x)) {
		return (Object.keys(x).length === 0)
	}
	else {
		return false
	}
}

// ---------------------------------------------------------------------------

/**
 * returns not isEmpty(x)
 * [unit tests](../test/datatypes.test.civet#:~:text=DBG,nonEmpty)
 */

export const nonEmpty = (x: any): boolean => {

	return !isEmpty(x)
}

// ---------------------------------------------------------------------------

export const lMark = '⸂'    // --- U+2E02
export const rMark = '⸃'    // --- U+2E03

export const hide = (str: string): string => {

	return lMark + str + rMark
}

// ---------------------------------------------------------------------------

export const unhide = (str: string): string => {

	const lParts: string[] = []
	let pos = 0
	let start = str.indexOf('"'+lMark, pos)
	while (start >= 0) {
		const end = str.indexOf(rMark+'"', start)
		if (end === -1) {
			break
		}
		else {
			lParts.push(str.substring(pos, start))
			lParts.push(str.substring(start+2, end))
			pos = end+2
		}
		start = str.indexOf('"'+lMark, pos)
	}
	lParts.push(str.substring(pos))
	return lParts.join('')
}

// ---------------------------------------------------------------------------

export const isClass = (x: any): boolean => {

	if (typeof x !== 'function') {
		return false
	}
	return x.toString().startsWith('class')
}

// ---------------------------------------------------------------------------

export const isPromise = (x: any): boolean => {

	if ((typeof x !== 'object') || (x === null)) {
		return false
	}
	return (typeof x.then === 'function')
}

// ---------------------------------------------------------------------------
// --- NOTE: An '&' preceding a key name indicates
//           that it should be a function

export const isClassInstance = (
		x: any,
		lReqKeys: string[]=[]
		): boolean => {

	const constructorName = x?.constructor?.name
	if (
			   (x === null)
			|| (typeof x !== 'object')
			|| Array.isArray(x)
			|| isPromise(x)
			|| notdefined(constructorName)
			) {
		return false
	}
	for (const key in lReqKeys) {
		let type = undef
		let ref;if ((ref = key.match(/^(\&)(.*)$/))) {const lMatches = ref;
			const [_, type, key] = lMatches
		}
		if (notdefined(x[key])) {
			return false
		}
		if ((type === '&') && (typeof x[key] !== 'function')) {
			return false
		}
	}
	return true
}

// ---------------------------------------------------------------------------

export const isIterable = (x: any): boolean => {

	if (notdefined(x)) {
		return false
	}
	else {
		return (typeof x[Symbol.iterator] === 'function')
	}
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,