"use strict";
// watchFile.civet

// ---------------------------------------------------------------------------

type AutoPromise<T> = Promise<Awaited<T>>;
const debug = true
const DBG = (str: string) => {
	if (debug) {
		console.log(str)
	}
	return
}

export type AnyFunction = (...lArgs: any[]) => any
export type BoolFunction = (...lArgs: any[]) => boolean
export type VoidProcedure = () => void
export type procedure = (...lArgs: any[]) => void

// ---------------------------------------------------------------------------

export const debounce = (
	callback: (...lArgs: any[]) => boolean,
	wait: number,
	onStop: (...lArgs: any[]) => void,
	): procedure => {

	let timeoutId: (number | undefined) = undefined
	return (...lArgs: any[]) => {
		// --- clear any existing timeout
		clearTimeout(timeoutId)
		const func = () => {
			if (callback(...lArgs)) {
				console.log("stopping")
				onStop(...lArgs)
			}
			return
		}
		timeoutId = setTimeout(func, wait)
		return
	}
}

// ---------------------------------------------------------------------------
// ASYNC

// import {debounce} from "https://cdn.skypack.dev/lodash-es?dts"

export const watchFile = async function(
	path: string | string[],
	fileAction: (type: string, path: string) => boolean
	): AutoPromise<void> {

	const func = (evt: Deno.FsEvent): boolean => {
		console.log("func fired")
		const {kind, paths} = evt
		let doStop = false
		for (const path of paths) {
			const result = fileAction(kind, path)
			console.log(`fileAction fired, result = ${result}`)
			doStop = doStop || result
		}
		console.log(`   - return ${doStop} from func`)
		return doStop
	}

	let doStop: boolean = false
	const stopFunc = () => {
		doStop = true
		console.log("in stopFunc")
		return
	}

	const dfunc = debounce(func, 200, stopFunc)

	console.log(`WATCH: ${JSON.stringify(path)}`)
	const watcher = Deno.watchFs(path)
	for await (const event of watcher) {
		if (dfunc === undefined) {}
		console.log("watcher fired")
		const val: any = dfunc(event)
		console.log(`return from dfunc() is ${val}`)
		console.log(`after dfunc: doStop = ${doStop}`)
		if (doStop) {
			console.log("   - stopping watcher")
			watcher.close()
			break
		}
	}
	console.log("returning")
	return
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3JjL2xpYi93YXRjaEZpbGUuY2l2ZXQudHN4Iiwic291cmNlcyI6WyJzcmMvbGliL3dhdGNoRmlsZS5jaXZldCJdLCJtYXBwaW5ncyI6IjtBQUFBLGtCQUFpQjtBQUNqQixBQUFBO0FBQ0EsQUFBQSw4RUFBNkU7QUFDN0UsQUFBQTtBQUNBLEssVyx5QjtBQUFLLE1BQUwsS0FBSyxDQUFDLENBQUUsQ0FBQyxJQUFJO0FBQ2IsQUFBQSxBQUFHLE1BQUgsR0FBRyxDQUFDLENBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQSxDQUFBO0FBQ3ZCLEFBQUEsQ0FBQyxHQUFHLENBQUEsS0FBSyxDQUFBLENBQUEsQ0FBQTtBQUNULEFBQUEsRUFBRSxPQUFPLENBQUMsR0FBRyxDQUFBLEFBQUMsR0FBRyxDO0NBQUEsQ0FBQTtBQUNqQixBQUFBLENBQUMsTTtBQUFNLENBQUE7QUFDUCxBQUFBO0FBQ0EsQUFBQSxBQUFBLE1BQU0sQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHO0FBQ2xELEFBQUEsQUFBQSxNQUFNLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTztBQUN2RCxBQUFBLEFBQUEsTUFBTSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxJQUFJO0FBQ3RDLEFBQUEsQUFBQSxNQUFNLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsSUFBSTtBQUNqRCxBQUFBO0FBQ0EsQUFBQSw4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QUFBLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQSxBQUFDLENBQUMsMkJBQTJCLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQTtBQUNyRCxBQUFBLEdBQUcsTUFBTSxDLENBQUUsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLE07RUFBTSxDQUFBO0FBQzVCLEFBQUEsRUFBRSxPQUFPLENBQUMsR0FBRyxDQUFBLEFBQUMsQ0FBQyxZQUFZLEVBQUUsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFBO0FBQy9DLEFBQUEsRUFBRSxNQUFNLENBQUMsTTtDQUFNLENBQUE7QUFDZixBQUFBO0FBQ0EsQUFBQSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEtBQUs7QUFDNUIsQUFBQSxDQUFTLE1BQVIsUUFBUSxDQUFDLENBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUEsQ0FBQTtBQUNsQixBQUFBLEVBQUUsTUFBTSxDLENBQUUsQ0FBQyxJQUFJO0FBQ2YsQUFBQSxFQUFFLE9BQU8sQ0FBQyxHQUFHLENBQUEsQUFBQyxhQUFhLENBQUE7QUFDM0IsQUFBQSxFQUFFLE07Q0FBTSxDQUFBO0FBQ1IsQUFBQTtBQUNBLEFBQUEsQ0FBTSxNQUFMLEtBQUssQ0FBQyxDQUFFLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLFFBQVEsQ0FBQztBQUN2QyxBQUFBO0FBQ0EsQUFBQSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUEsQUFBQyxDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQTtBQUM3QyxBQUFBLENBQVEsTUFBUCxPQUFPLENBQUMsQ0FBRSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDO0FBQzlCLEFBQUEsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUEsTUFBQSxLQUFLLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQSxDQUFBLENBQUE7QUFDM0IsQUFBQSxFQUFFLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRSxDQUFDLFNBQVMsQ0FBQyxDQUFBLENBQUEsQ0FBQTtBQUN6QixBQUFBLEVBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQSxBQUFDLGVBQWUsQ0FBQTtBQUM3QixBQUFBLEVBQVUsTUFBUixHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBRSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUM7QUFDMUIsQUFBQSxFQUFFLE9BQU8sQ0FBQyxHQUFHLENBQUEsQUFBQyxDQUFDLHVCQUF1QixFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUE7QUFDN0MsQUFBQSxFQUFFLE9BQU8sQ0FBQyxHQUFHLENBQUEsQUFBQyxDQUFDLHNCQUFzQixFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUE7QUFDL0MsQUFBQSxFQUFFLEdBQUcsQ0FBQSxNQUFNLENBQUEsQ0FBQSxDQUFBO0FBQ1gsQUFBQSxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUEsQUFBQyx1QkFBdUIsQ0FBQTtBQUN0QyxBQUFBLEdBQUcsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQ2xCLEFBQUEsR0FBRyxLO0VBQUssQztDQUFBLENBQUE7QUFDUixBQUFBLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQSxBQUFDLFdBQVcsQ0FBQTtBQUN4QixBQUFBLENBQUMsTTtBQUFNLENBQUE7QUFDUCIsIm5hbWVzIjpbXSwic291cmNlc0NvbnRlbnQiOlsiIyB3YXRjaEZpbGUuY2l2ZXRcblxuIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuZGVidWcgOj0gdHJ1ZVxuREJHIDo9IChzdHI6IHN0cmluZykgPT5cblx0aWYgZGVidWdcblx0XHRjb25zb2xlLmxvZyBzdHJcblx0cmV0dXJuXG5cbmV4cG9ydCB0eXBlIEFueUZ1bmN0aW9uID0gKC4uLmxBcmdzOiBhbnlbXSkgPT4gYW55XG5leHBvcnQgdHlwZSBCb29sRnVuY3Rpb24gPSAoLi4ubEFyZ3M6IGFueVtdKSA9PiBib29sZWFuXG5leHBvcnQgdHlwZSBWb2lkUHJvY2VkdXJlID0gKCkgPT4gdm9pZFxuZXhwb3J0IHR5cGUgcHJvY2VkdXJlID0gKC4uLmxBcmdzOiBhbnlbXSkgPT4gdm9pZFxuXG4jIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG5leHBvcnQgZGVib3VuY2UgOj0gKFxuXHRjYWxsYmFjazogKC4uLmxBcmdzOiBhbnlbXSkgPT4gYm9vbGVhbixcblx0d2FpdDogbnVtYmVyLFxuXHRvblN0b3A6ICguLi5sQXJnczogYW55W10pID0+IHZvaWQsXG5cdCk6IHByb2NlZHVyZSA9PlxuXG5cdGxldCB0aW1lb3V0SWQ6IG51bWJlcj8gPSB1bmRlZmluZWRcblx0cmV0dXJuICguLi5sQXJnczogYW55W10pID0+XG5cdFx0IyAtLS0gY2xlYXIgYW55IGV4aXN0aW5nIHRpbWVvdXRcblx0XHRjbGVhclRpbWVvdXQodGltZW91dElkKVxuXHRcdGZ1bmMgOj0gKCkgPT5cblx0XHRcdGlmIGNhbGxiYWNrKC4uLmxBcmdzKVxuXHRcdFx0XHRjb25zb2xlLmxvZyBcInN0b3BwaW5nXCJcblx0XHRcdFx0b25TdG9wKC4uLmxBcmdzKVxuXHRcdFx0cmV0dXJuXG5cdFx0dGltZW91dElkID0gc2V0VGltZW91dChmdW5jLCB3YWl0KVxuXHRcdHJldHVyblxuXG4jIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuIyBBU1lOQ1xuXG4jIGltcG9ydCB7ZGVib3VuY2V9IGZyb20gXCJodHRwczovL2Nkbi5za3lwYWNrLmRldi9sb2Rhc2gtZXM/ZHRzXCJcblxuZXhwb3J0IHdhdGNoRmlsZSA6PSAoXG5cdHBhdGg6IHN0cmluZyB8IHN0cmluZ1tdLFxuXHRmaWxlQWN0aW9uOiAodHlwZTogc3RyaW5nLCBwYXRoOiBzdHJpbmcpID0+IGJvb2xlYW5cblx0KTogdm9pZCAtPlxuXG5cdGZ1bmMgOj0gKGV2dDogRGVuby5Gc0V2ZW50KTogYm9vbGVhbiA9PlxuXHRcdGNvbnNvbGUubG9nIFwiZnVuYyBmaXJlZFwiXG5cdFx0e2tpbmQsIHBhdGhzfSA6PSBldnRcblx0XHRsZXQgZG9TdG9wID0gZmFsc2Vcblx0XHRmb3IgcGF0aCBvZiBwYXRoc1xuXHRcdFx0cmVzdWx0IDo9IGZpbGVBY3Rpb24ga2luZCwgcGF0aFxuXHRcdFx0Y29uc29sZS5sb2cgXCJmaWxlQWN0aW9uIGZpcmVkLCByZXN1bHQgPSAje3Jlc3VsdH1cIlxuXHRcdFx0ZG9TdG9wID0gZG9TdG9wIHx8IHJlc3VsdFxuXHRcdGNvbnNvbGUubG9nIFwiICAgLSByZXR1cm4gI3tkb1N0b3B9IGZyb20gZnVuY1wiXG5cdFx0cmV0dXJuIGRvU3RvcFxuXG5cdGxldCBkb1N0b3A6IGJvb2xlYW4gPSBmYWxzZVxuXHRzdG9wRnVuYyA6PSAoKSA9PlxuXHRcdGRvU3RvcCA9IHRydWVcblx0XHRjb25zb2xlLmxvZyBcImluIHN0b3BGdW5jXCJcblx0XHRyZXR1cm5cblxuXHRkZnVuYyA6PSBkZWJvdW5jZShmdW5jLCAyMDAsIHN0b3BGdW5jKVxuXG5cdGNvbnNvbGUubG9nIFwiV0FUQ0g6ICN7SlNPTi5zdHJpbmdpZnkocGF0aCl9XCJcblx0d2F0Y2hlciA6PSBEZW5vLndhdGNoRnMocGF0aClcblx0Zm9yIGF3YWl0IGV2ZW50IG9mIHdhdGNoZXJcblx0XHRpZiAoZGZ1bmMgPT0gdW5kZWZpbmVkKVxuXHRcdGNvbnNvbGUubG9nIFwid2F0Y2hlciBmaXJlZFwiXG5cdFx0dmFsOiBhbnkgOj0gZGZ1bmMoZXZlbnQpXG5cdFx0Y29uc29sZS5sb2cgXCJyZXR1cm4gZnJvbSBkZnVuYygpIGlzICN7dmFsfVwiXG5cdFx0Y29uc29sZS5sb2cgXCJhZnRlciBkZnVuYzogZG9TdG9wID0gI3tkb1N0b3B9XCJcblx0XHRpZiBkb1N0b3Bcblx0XHRcdGNvbnNvbGUubG9nIFwiICAgLSBzdG9wcGluZyB3YXRjaGVyXCJcblx0XHRcdHdhdGNoZXIuY2xvc2UoKVxuXHRcdFx0YnJlYWtcblx0Y29uc29sZS5sb2cgXCJyZXR1cm5pbmdcIlxuXHRyZXR1cm5cbiJdfQ==