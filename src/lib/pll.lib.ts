"use strict";
// pll.lib.civet

import {
	undef, defined, notdefined, hash, isEmpty, nonEmpty,
	} from 'datatypes'
import {
	getOptions, allLinesInBlock, escapeStr,
	} from 'llutils'
import {DBG, DBGVALUE} from 'logger'
import {
	oneIndent, indentLevel, splitLine,
	} from 'indent'
import {TextTable} from 'text-table'

// ---------------------------------------------------------------------------
// ---------------------------------------------------------------------------
// --- Common token types:
//        'line', 'empty', 'indent', 'undent', 'eof'

export type TPLLToken = {
	kind: string
	str?: string
	name?: string
	value?: unknown
	}

export const tkIndent = {kind: 'indent'}
export const tkUndent = {kind: 'undent'}
export const tkEOF    = {kind: 'eof'}

export const isKind = (tk: TPLLToken, kindStr: string) => {
	return (tk.kind === kindStr)
}

export const tokenWith = (tk: TPLLToken, s: string) => {
	return {...tk, str: s}
}

// ---------------------------------------------------------------------------

export type TTokenGenerator = (
		line: string
		) => Generator<TPLLToken, void, void>

const identTokenGen: TTokenGenerator = function*(line: string) {
	yield {kind: 'line', str: line}
	return
}

export const allTokensIn = function*(
		iterable: Iterable<string>,
		gen: TTokenGenerator = identTokenGen,
		hOptions: hash={}
		): Generator<TPLLToken, void, void> {

	type opt = {
		lTypes: string[]
		}
	const {lTypes} = getOptions<opt>(hOptions, {
		lTypes: ['indent','undent']
		})
	let level = 0
	for (const str of iterable) {
		DBG(`LINE: '${escapeStr(str)}'`)
		if (isEmpty(str)) {
			if (lTypes.includes('empty')) {
				yield {kind: 'empty', str}
			}
		}
		else {
			// --- NOTE: If indent > 0, oneIndent will be set
			const [indent, line] = splitLine(str)
			if (lTypes.includes('indent') && (indent > level)) {
				level += 1
				yield tkIndent
				while (indent > level) {
					level += 1
					yield tkIndent
				}
			}
			if (lTypes.includes('undent') && (indent < level)) {
				level -= 1
				yield tkUndent
				while (indent < level) {
					level -= 1
					yield tkUndent
				}
			}
			for (const tok of gen(line)) {
				yield tok
			}
		}
	}
	if (lTypes.includes('undent')) {
		while (level > 0) {
			yield tkUndent
			level -= 1
		}
	}
	return
}

// ---------------------------------------------------------------------------

export const allTokensInBlock = function*(
		block: string,
		gen: TTokenGenerator = identTokenGen
		): Generator<TPLLToken, void, void> {

	for (const tok of allTokensIn(allLinesInBlock(block), gen)) {
		yield tok
	}
	return
}

// ---------------------------------------------------------------------------

export const tokenTable = (
		lTokens: Iterable<TPLLToken>,
		title='Tokens'
		): string => {

	const table = new TextTable('l l')
	table.fullsep('=')
	table.title(title)
	table.fullsep('=')
	table.labels(['kind', 'str'])
	table.sep()
	for (const tok of lTokens) {
		table.data([tok.kind, tok.str])
	}
	table.fullsep('=')
	return table.asString()
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,