"use strict";
// cielo.lib.civet

import {
	undef, defined, notdefined, assert, croak, hash, isHash,
	} from 'datatypes'
import {
	pass, keys, hasKey, hasKeys, OL, ML, require,
	} from 'llutils'
import {
	isFile, fileExt, withExt, slurp, barf, barfTempFile,
	parsePath,
	} from 'fsys'
import {
	DBG, LOG, WARN, ERR, DBGVALUE,
	pushLogLevel, popLogLevel,
	} from 'logger'
import {
	execCmdSync,
	} from 'exec'
import {civet2ts, civet2tsFile} from 'civet'

// ---------------------------------------------------------------------------

/**
 * cielo2civet() - convert cielo code to civet code
 */

export const cielo2civet = (code: string): string => {

	return code
}

// ---------------------------------------------------------------------------

export const cielo2ts = (code: string): string => {

	return civet2ts(cielo2civet(code))
}

// ---------------------------------------------------------------------------

/**
 * cielo2civetFile(cieloPath, civetPath)
 *    - pre-process the .cielo file to .civet file
 */

export const cielo2civetFile = (
		cieloPath: string,
		civetPath: string = withExt(cieloPath, '.civet')
		): string => {

	assert(isFile(cieloPath), `No such file: ${OL(cieloPath)} (cielo2civet)`)
	assert((fileExt(cieloPath) === '.cielo'), `Not a cielo file: ${OL(cieloPath)}`)
	assert((fileExt(civetPath) === '.civet'), `Not a civet file: ${OL(civetPath)}`)
	const code = slurp(cieloPath)
	barf(civetPath, cielo2civet(code))
	assert(isFile(civetPath), `File not created: ${OL(civetPath)}`)
	return civetPath
}

// ---------------------------------------------------------------------------

/**
 * cielo2tsFile(cieloPath, tsPath)
 *    - pre-process the .cielo file to .ts file
 */

export const cielo2tsFile = (
		cieloPath: string,
		tsPath: string = withExt(cieloPath, '.ts')
		): string => {

	assert(isFile(cieloPath), `No such file: ${OL(cieloPath)} (cielo2ts)`)
	assert((fileExt(cieloPath) === '.cielo'), `Not a cielo file: ${OL(cieloPath)}`)
	assert((fileExt(tsPath) === '.ts'), `Not a ts file: ${OL(tsPath)}`)
	const code = slurp(cieloPath)
	barf(tsPath, cielo2ts(code))
	assert(isFile(tsPath), `File not created: ${OL(tsPath)}`)
	return tsPath
}

// ---------------------------------------------------------------------------

export const configFromFile = (aPath: string): hash => {

	const {path, type, purpose, ext} = parsePath(aPath)
	assert((type === 'file'), `Not a file: ${OL(path)}`)
	assert((purpose === 'config'), `Not a config file: ${OL(path)}`)
	DBG(`GET CONFIG: path = ${OL(path)}`)

	const srcPath = (
		(ext === '.civet'?
			civet2tsFile(path)
		:
			path)
		)
	assert((fileExt(srcPath) === '.ts'),
		`config not a .ts or .civet file: ${OL(path)}`)
	DBGVALUE('srcPath', srcPath)
	const hImported = require(srcPath)
	DBGVALUE('hImported', hImported)
	const hResult = hImported?.default || hImported
	DBGVALUE("hResult", hResult)
	assert(isHash(hResult),
			`Default import in ${OL(srcPath)} not a hash: ${ML(hResult)}`)
	return hResult
}

// ---------------------------------------------------------------------------

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3JjL2xpYi9jaWVsby5saWIuY2l2ZXQudHN4Iiwic291cmNlcyI6WyJzcmMvbGliL2NpZWxvLmxpYi5jaXZldCJdLCJtYXBwaW5ncyI6IjtBQUFBLGtCQUFpQjtBQUNqQixBQUFBO0FBQ0EsQUFBQSxNQUFNLENBQUMsQ0FBQztBQUNSLENBQUMsS0FBSyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsTUFBTSxDQUFDO0FBQ3pELENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxXQUFXO0FBQ25CLEFBQUEsQUFBQSxNQUFNLENBQUMsQ0FBQztBQUNSLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDO0FBQzlDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxTQUFTO0FBQ2pCLEFBQUEsQUFBQSxNQUFNLENBQUMsQ0FBQztBQUNSLENBQUMsTUFBTSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsWUFBWSxDQUFDO0FBQ3JELENBQUMsU0FBUyxDQUFDO0FBQ1gsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU07QUFDZCxBQUFBLEFBQUEsTUFBTSxDQUFDLENBQUM7QUFDUixDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLFFBQVEsQ0FBQztBQUMvQixDQUFDLFlBQVksQ0FBQyxDQUFDLFdBQVcsQ0FBQztBQUMzQixDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUTtBQUNoQixBQUFBLEFBQUEsTUFBTSxDQUFDLENBQUM7QUFDUixDQUFDLFdBQVcsQ0FBQztBQUNiLENBQUMsQ0FB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LENBQUMsT0FBTyxDQUFBO0FBQzVCLEFBQUEsQ0FBVSxNQUFULFNBQVMsQ0FBQyxDQUFFLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQztBQUM5QixBQUFBLENBQUMsUUFBUSxDQUFBLEFBQUMsV0FBVyxDQUFDLENBQUMsU0FBUyxDQUFBO0FBQ2hDLEFBQUEsQ0FBUSxNQUFQLE9BQU8sQ0FBQyxDQUFFLENBQUMsU0FBUyxDQUFDLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxTQUFTO0FBQzNDLEFBQUEsQ0FBQyxRQUFRLENBQUEsQUFBQyxTQUFTLENBQUMsQ0FBQyxPQUFPLENBQUE7QUFDNUIsQUFBQSxDQUFDLE1BQU0sQ0FBQSxBQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQztBQUN4QixBQUFBLEdBQUcsQ0FBQyxrQkFBa0IsRUFBRSxFQUFFLENBQUMsT0FBTyxDQUFDLENBQUMsYUFBYSxFQUFFLEVBQUUsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUE7QUFDaEUsQUFBQSxDQUFDLE1BQU0sQ0FBQyxPO0FBQU8sQ0FBQTtBQUNmO0FBQ0EsQUFBQSw4RUFBNkU7QUFDN0UiLCJuYW1lcyI6W10sInNvdXJjZXNDb250ZW50IjpbIiMgY2llbG8ubGliLmNpdmV0XG5cbmltcG9ydCB7XG5cdHVuZGVmLCBkZWZpbmVkLCBub3RkZWZpbmVkLCBhc3NlcnQsIGNyb2FrLCBoYXNoLCBpc0hhc2gsXG5cdH0gZnJvbSAnZGF0YXR5cGVzJ1xuaW1wb3J0IHtcblx0cGFzcywga2V5cywgaGFzS2V5LCBoYXNLZXlzLCBPTCwgTUwsIHJlcXVpcmUsXG5cdH0gZnJvbSAnbGx1dGlscydcbmltcG9ydCB7XG5cdGlzRmlsZSwgZmlsZUV4dCwgd2l0aEV4dCwgc2x1cnAsIGJhcmYsIGJhcmZUZW1wRmlsZSxcblx0cGFyc2VQYXRoLFxuXHR9IGZyb20gJ2ZzeXMnXG5pbXBvcnQge1xuXHREQkcsIExPRywgV0FSTiwgRVJSLCBEQkdWQUxVRSxcblx0cHVzaExvZ0xldmVsLCBwb3BMb2dMZXZlbCxcblx0fSBmcm9tICdsb2dnZXInXG5pbXBvcnQge1xuXHRleGVjQ21kU3luYyxcblx0fSBmcm9tICdleGVjJ1xuaW1wb3J0IHtjaXZldDJ0cywgY2l2ZXQydHNGaWxlfSBmcm9tICdjaXZldCdcblxuIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuLyoqXG4gKiBjaWVsbzJjaXZldCgpIC0gY29udmVydCBjaWVsbyBjb2RlIHRvIGNpdmV0IGNvZGVcbiAqL1xuXG5leHBvcnQgY2llbG8yY2l2ZXQgOj0gKGNvZGU6IHN0cmluZyk6IHN0cmluZyA9PlxuXG5cdHJldHVybiBjb2RlXG5cbiMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbmV4cG9ydCBjaWVsbzJ0cyA6PSAoY29kZTogc3RyaW5nKTogc3RyaW5nID0+XG5cblx0cmV0dXJuIGNpdmV0MnRzKGNpZWxvMmNpdmV0KGNvZGUpKVxuXG4jIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4vKipcbiAqIGNpZWxvMmNpdmV0RmlsZShjaWVsb1BhdGgsIGNpdmV0UGF0aClcbiAqICAgIC0gcHJlLXByb2Nlc3MgdGhlIC5jaWVsbyBmaWxlIHRvIC5jaXZldCBmaWxlXG4gKi9cblxuZXhwb3J0IGNpZWxvMmNpdmV0RmlsZSA6PSAoXG5cdFx0Y2llbG9QYXRoOiBzdHJpbmdcblx0XHRjaXZldFBhdGg6IHN0cmluZyA9IHdpdGhFeHQoY2llbG9QYXRoLCAnLmNpdmV0Jylcblx0XHQpOiBzdHJpbmcgPT5cblxuXHRhc3NlcnQgaXNGaWxlKGNpZWxvUGF0aCksIFwiTm8gc3VjaCBmaWxlOiAje09MKGNpZWxvUGF0aCl9IChjaWVsbzJjaXZldClcIlxuXHRhc3NlcnQgKGZpbGVFeHQoY2llbG9QYXRoKSA9PSAnLmNpZWxvJyksIFwiTm90IGEgY2llbG8gZmlsZTogI3tPTChjaWVsb1BhdGgpfVwiXG5cdGFzc2VydCAoZmlsZUV4dChjaXZldFBhdGgpID09ICcuY2l2ZXQnKSwgXCJOb3QgYSBjaXZldCBmaWxlOiAje09MKGNpdmV0UGF0aCl9XCJcblx0Y29kZSA6PSBzbHVycCBjaWVsb1BhdGhcblx0YmFyZiBjaXZldFBhdGgsIGNpZWxvMmNpdmV0KGNvZGUpXG5cdGFzc2VydCBpc0ZpbGUoY2l2ZXRQYXRoKSwgXCJGaWxlIG5vdCBjcmVhdGVkOiAje09MKGNpdmV0UGF0aCl9XCJcblx0cmV0dXJuIGNpdmV0UGF0aFxuXG4jIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4vKipcbiAqIGNpZWxvMnRzRmlsZShjaWVsb1BhdGgsIHRzUGF0aClcbiAqICAgIC0gcHJlLXByb2Nlc3MgdGhlIC5jaWVsbyBmaWxlIHRvIC50cyBmaWxlXG4gKi9cblxuZXhwb3J0IGNpZWxvMnRzRmlsZSA6PSAoXG5cdFx0Y2llbG9QYXRoOiBzdHJpbmdcblx0XHR0c1BhdGg6IHN0cmluZyA9IHdpdGhFeHQoY2llbG9QYXRoLCAnLnRzJylcblx0XHQpOiBzdHJpbmcgPT5cblxuXHRhc3NlcnQgaXNGaWxlKGNpZWxvUGF0aCksIFwiTm8gc3VjaCBmaWxlOiAje09MKGNpZWxvUGF0aCl9IChjaWVsbzJ0cylcIlxuXHRhc3NlcnQgKGZpbGVFeHQoY2llbG9QYXRoKSA9PSAnLmNpZWxvJyksIFwiTm90IGEgY2llbG8gZmlsZTogI3tPTChjaWVsb1BhdGgpfVwiXG5cdGFzc2VydCAoZmlsZUV4dCh0c1BhdGgpID09ICcudHMnKSwgXCJOb3QgYSB0cyBmaWxlOiAje09MKHRzUGF0aCl9XCJcblx0Y29kZSA6PSBzbHVycCBjaWVsb1BhdGhcblx0YmFyZiB0c1BhdGgsIGNpZWxvMnRzKGNvZGUpXG5cdGFzc2VydCBpc0ZpbGUodHNQYXRoKSwgXCJGaWxlIG5vdCBjcmVhdGVkOiAje09MKHRzUGF0aCl9XCJcblx0cmV0dXJuIHRzUGF0aFxuXG4jIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG5leHBvcnQgY29uZmlnRnJvbUZpbGUgOj0gKGFQYXRoOiBzdHJpbmcpOiBoYXNoID0+XG5cblx0e3BhdGgsIHR5cGUsIHB1cnBvc2UsIGV4dH0gOj0gcGFyc2VQYXRoKGFQYXRoKVxuXHRhc3NlcnQgKHR5cGUgPT0gJ2ZpbGUnKSwgXCJOb3QgYSBmaWxlOiAje09MKHBhdGgpfVwiXG5cdGFzc2VydCAocHVycG9zZSA9PSAnY29uZmlnJyksIFwiTm90IGEgY29uZmlnIGZpbGU6ICN7T0wocGF0aCl9XCJcblx0REJHIFwiR0VUIENPTkZJRzogcGF0aCA9ICN7T0wocGF0aCl9XCJcblxuXHRzcmNQYXRoIDo9IChcblx0XHRpZiAoZXh0ID09ICcuY2l2ZXQnKVxuXHRcdFx0Y2l2ZXQydHNGaWxlIHBhdGhcblx0XHRlbHNlXG5cdFx0XHRwYXRoXG5cdFx0KVxuXHRhc3NlcnQgKGZpbGVFeHQoc3JjUGF0aCkgPT0gJy50cycpLFxuXHRcdFwiY29uZmlnIG5vdCBhIC50cyBvciAuY2l2ZXQgZmlsZTogI3tPTChwYXRoKX1cIlxuXHREQkdWQUxVRSAnc3JjUGF0aCcsIHNyY1BhdGhcblx0aEltcG9ydGVkIDo9IHJlcXVpcmUoc3JjUGF0aClcblx0REJHVkFMVUUgJ2hJbXBvcnRlZCcsIGhJbXBvcnRlZFxuXHRoUmVzdWx0IDo9IGhJbXBvcnRlZD8uZGVmYXVsdCB8fCBoSW1wb3J0ZWRcblx0REJHVkFMVUUgXCJoUmVzdWx0XCIsIGhSZXN1bHRcblx0YXNzZXJ0IGlzSGFzaChoUmVzdWx0KSxcblx0XHRcdFwiRGVmYXVsdCBpbXBvcnQgaW4gI3tPTChzcmNQYXRoKX0gbm90IGEgaGFzaDogI3tNTChoUmVzdWx0KX1cIlxuXHRyZXR1cm4gaFJlc3VsdFxuXG4jIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuIl19