"use strict";
// cielo.lib.civet

import {pathToFileURL} from "node:url"

import {
	undef, defined, notdefined, assert, croak, hash, isHash,
	} from 'datatypes'
import {pass, keys, require} from 'llutils'
import {OL, ML} from 'to-nice'
import {
	DBG, LOG, WARN, ERR, DBGVALUE, DBGLABELED,
	pushLogLevel, popLogLevel,
	} from 'logger'
import {
	isFile, fileExt, withExt, slurp, barf, barfTempFile,
	parsePath,
	} from 'fsys'
import {civet2ts, civet2tsFile} from 'civet'

// ---------------------------------------------------------------------------

/**
 * cielo2civet() - convert cielo code to civet code
 */

export const cielo2civet = (code: string): string => {

	return code
}

// ---------------------------------------------------------------------------

export const cielo2ts = (code: string): string => {

	return civet2ts(cielo2civet(code))
}

// ---------------------------------------------------------------------------

/**
 * cielo2civetFile(cieloPath, civetPath)
 *    - pre-process the .cielo file to .civet file
 */

export const cielo2civetFile = (
		cieloPath: string,
		civetPath: string = withExt(cieloPath, '.civet')
		): string => {

	assert(isFile(cieloPath), `No such file: ${OL(cieloPath)} (cielo2civet)`)
	assert((fileExt(cieloPath) === '.cielo'), `Not a cielo file: ${OL(cieloPath)}`)
	assert((fileExt(civetPath) === '.civet'), `Not a civet file: ${OL(civetPath)}`)
	const code = slurp(cieloPath)
	barf(civetPath, cielo2civet(code))
	assert(isFile(civetPath), `File not created: ${OL(civetPath)}`)
	return civetPath
}

// ---------------------------------------------------------------------------

/**
 * cielo2tsFile(cieloPath, tsPath)
 *    - pre-process the .cielo file to .ts file
 */

export const cielo2tsFile = (
		cieloPath: string,
		tsPath: string = withExt(cieloPath, '.ts')
		): string => {

	assert(isFile(cieloPath), `No such file: ${OL(cieloPath)} (cielo2ts)`)
	assert((fileExt(cieloPath) === '.cielo'), `Not a cielo file: ${OL(cieloPath)}`)
	assert((fileExt(tsPath) === '.ts'), `Not a ts file: ${OL(tsPath)}`)
	const code = slurp(cieloPath)
	barf(tsPath, cielo2ts(code))
	assert(isFile(tsPath), `File not created: ${OL(tsPath)}`)
	return tsPath
}

// ---------------------------------------------------------------------------

export const configFromFile = (orgPath: string): hash => {

	const {path, type, purpose, ext} = parsePath(orgPath)
	assert((type === 'file'), `Not a file: ${OL(path)}`)
	assert((purpose === 'config'), `Not a config file: ${OL(path)}`)
	DBGLABELED("GET CONFIG", `path = ${OL(path)}`)

	const srcPath = (ext === '.civet') ? civet2tsFile(path) : path
	assert((fileExt(srcPath) === '.ts'),
		`config not a .ts or .civet file: ${OL(path)}`)
	DBGVALUE('srcPath', srcPath)
	const url = pathToFileURL(srcPath)
	DBGVALUE('url', url)
	const hImported = require(srcPath)
	DBGVALUE('hImported', hImported)
	const hResult = hImported?.default || hImported
	DBGVALUE("hResult", hResult)
	assert(isHash(hResult),
			`Default import in ${OL(srcPath)} not a hash: ${ML(hResult)}`)
	return hResult
}

// ---------------------------------------------------------------------------

//# sourceMappingURL=data:application/json;base64,