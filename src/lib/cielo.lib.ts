"use strict";
// cielo.lib.civet

import {
	undef, defined, notdefined, assert,
	} from './datatypes.lib.ts'
import {
	croak, pass, keys, hasKey, hasKeys, OL,
	} from './llutils.lib.ts'
import {
	LogCmd, DBG, LOG, WARN, ERR,
	pushLogLevel, popLogLevel,
	} from './logger.lib.ts'
import {
	isFile, fileExt, withExt, slurp, barf,
	} from './fs.lib.ts'
import {
	execCmdSync,
	} from './exec.lib.ts'

// ---------------------------------------------------------------------------

/**
 * cielo2civet() - convert cielo code to civet code
 */

export const cielo2civet = (code: string): string => {

	return code
}

// ---------------------------------------------------------------------------

/**
 * cielo2civetFile(cieloPath, civetPath)
 *    - pre-process the .cielo file to .civet file
 */

export const cielo2civetFile = (
		cieloPath: string,
		civetPath: (string | undefined)=undef
		): void => {

	assert(isFile(cieloPath), `No such file: ${OL(cieloPath)} (cielo2civet)`)
	assert((fileExt(cieloPath) === '.cielo'), `Not a cielo file: ${OL(cieloPath)}`)
	if (notdefined(civetPath)) {
		civetPath = withExt(cieloPath, '.civet')
	}
	else {
		assert((fileExt(civetPath) === '.civet'), `Not a civet file: ${OL(civetPath)}`)
	}
	const code = slurp(cieloPath)
	barf(civetPath, cielo2civet(code))
	assert(isFile(civetPath), `File not created: ${OL(civetPath)}`)
	return
}

// ---------------------------------------------------------------------------

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3JjL2xpYi9jaWVsby5saWIuY2l2ZXQudHN4Iiwic291cmNlcyI6WyJzcmMvbGliL2NpZWxvLmxpYi5jaXZldCJdLCJtYXBwaW5ncyI6IjtBQUFBLGtCQUFpQjtBQUNqQixBQUFBO0FBQ0EsQUFBQSxNQUFNLENBQUMsQ0FBQztBQUNSLENBQUMsS0FBSyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsTUFBTSxDQUFDO0FBQ3BDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxvQkFBb0I7QUFDNUIsQUFBQSxBQUFBLE1BQU0sQ0FBQyxDQUFDO0FBQ1IsQ0FBQyxLQUFLLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxFQUFFLENBQUM7QUFDeEMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLGtCQUFrQjtBQUMxQixBQUFBLEFBQUEsTUFBTSxDQUFDLENBQUM7QUFDUixDQUFDLE1BQU0sQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQztBQUM3QixDQUFDLFlBQVksQ0FBQyxDQUFDLFdBQVcsQ0FBQztBQUMzQixDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsaUJBQWlCO0FBQ3pCLEFBQUEsQUFBQSxNQUFNLENBQUMsQ0FBQztBQUNSLENBQUMsTUFBTSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsSUFBSSxDQUFDO0FBQ3ZDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxhQUFhO0FBQ3JCLEFBQUEsQUFBQSxNQUFNLENBQUMsQ0FBQztBQUNSLENBQUMsV0FBVyxDQUFDO0FBQ2IsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLGVBQWU7QUFDdkIsQUFBQTtBQUNBLEFBQUEsOEVBQTZFO0FBQzdFLEFBQUE7QUFDQSxBQUFBO0FBQ0E7QUFDQSxHQUFHO0FBQ0gsQUFBQTtBQUNBLEFBQUEsQUFBQSxNQUFNLENBQVksTUFBWCxXQUFXLENBQUMsQ0FBRSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFBLENBQUE7QUFDL0MsQUFBQTtBQUNBLEFBQUEsQ0FBQyxNQUFNLENBQUMsSTtBQUFJLENBQUE7QUFDWixBQUFBO0FBQ0EsQUFBQSw4RUFBNkU7QUFDN0UsQUFBQTtBQUNBLEFBQUE7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNILEFBQUE7QUFDQSxBQUFBLEFBQUEsTUFBTSxDQUFnQixNQUFmLGVBQWUsQ0FBQyxDQUFFLENBQUMsQ0FBQztBQUMzQixBQUFBLEVBQUUsU0FBUyxDQUFDLENBQUMsTUFBTSxDQUFBO0FBQ25CLEFBQUEsRUFBRSxTQUFTLEMsQyxDQUFDLEFBQUMsTSxZLENBQU8sQ0FBQyxLQUFLO0FBQzFCLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQSxDQUFBO0FBQ1osQUFBQTtBQUNBLEFBQUEsQ0FBQyxNQUFNLENBQUEsQUFBQyxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLGNBQWMsRUFBRSxFQUFFLENBQUMsU0FBUyxDQUFDLENBQUMsY0FBYyxDQUFDLENBQUE7QUFDekUsQUFBQSxDQUFDLE1BQU0sQ0FBQSxBQUFDLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDLEdBQUUsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsa0JBQWtCLEVBQUUsRUFBRSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQTtBQUM5RSxBQUFBLENBQUMsR0FBRyxDQUFBLFVBQVUsQ0FBQyxTQUFTLENBQUMsQ0FBQSxDQUFBLENBQUE7QUFDekIsQUFBQSxFQUFFLFNBQVMsQyxDQUFFLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDLFFBQVEsQztDQUFDLENBQUE7QUFDMUMsQUFBQSxDQUFDLElBQUksQ0FBQSxDQUFBO0FBQ0wsQUFBQSxFQUFFLE1BQU0sQ0FBQSxBQUFDLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDLEdBQUUsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsa0JBQWtCLEVBQUUsRUFBRSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQztDQUFBLENBQUE7QUFDL0UsQUFBQSxDQUFLLE1BQUosSUFBSSxDQUFDLENBQUUsQ0FBQyxLQUFLLENBQUEsQUFBQyxTQUFTLENBQUE7QUFDeEIsQUFBQSxDQUFDLElBQUksQ0FBQSxBQUFDLFNBQVMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUNsQyxBQUFBLENBQUMsTUFBTSxDQUFBLEFBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxrQkFBa0IsRUFBRSxFQUFFLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFBO0FBQy9ELEFBQUEsQ0FBQyxNO0FBQU0sQ0FBQTtBQUNQO0FBQ0EsQUFBQSw4RUFBNkU7QUFDN0UiLCJuYW1lcyI6W10sInNvdXJjZXNDb250ZW50IjpbIiMgY2llbG8ubGliLmNpdmV0XG5cbmltcG9ydCB7XG5cdHVuZGVmLCBkZWZpbmVkLCBub3RkZWZpbmVkLCBhc3NlcnQsXG5cdH0gZnJvbSAnLi9kYXRhdHlwZXMubGliLnRzJ1xuaW1wb3J0IHtcblx0Y3JvYWssIHBhc3MsIGtleXMsIGhhc0tleSwgaGFzS2V5cywgT0wsXG5cdH0gZnJvbSAnLi9sbHV0aWxzLmxpYi50cydcbmltcG9ydCB7XG5cdExvZ0NtZCwgREJHLCBMT0csIFdBUk4sIEVSUixcblx0cHVzaExvZ0xldmVsLCBwb3BMb2dMZXZlbCxcblx0fSBmcm9tICcuL2xvZ2dlci5saWIudHMnXG5pbXBvcnQge1xuXHRpc0ZpbGUsIGZpbGVFeHQsIHdpdGhFeHQsIHNsdXJwLCBiYXJmLFxuXHR9IGZyb20gJy4vZnMubGliLnRzJ1xuaW1wb3J0IHtcblx0ZXhlY0NtZFN5bmMsXG5cdH0gZnJvbSAnLi9leGVjLmxpYi50cydcblxuIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuLyoqXG4gKiBjaWVsbzJjaXZldCgpIC0gY29udmVydCBjaWVsbyBjb2RlIHRvIGNpdmV0IGNvZGVcbiAqL1xuXG5leHBvcnQgY2llbG8yY2l2ZXQgOj0gKGNvZGU6IHN0cmluZyk6IHN0cmluZyA9PlxuXG5cdHJldHVybiBjb2RlXG5cbiMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbi8qKlxuICogY2llbG8yY2l2ZXRGaWxlKGNpZWxvUGF0aCwgY2l2ZXRQYXRoKVxuICogICAgLSBwcmUtcHJvY2VzcyB0aGUgLmNpZWxvIGZpbGUgdG8gLmNpdmV0IGZpbGVcbiAqL1xuXG5leHBvcnQgY2llbG8yY2l2ZXRGaWxlIDo9IChcblx0XHRjaWVsb1BhdGg6IHN0cmluZ1xuXHRcdGNpdmV0UGF0aDogc3RyaW5nPz11bmRlZlxuXHRcdCk6IHZvaWQgPT5cblxuXHRhc3NlcnQgaXNGaWxlKGNpZWxvUGF0aCksIFwiTm8gc3VjaCBmaWxlOiAje09MKGNpZWxvUGF0aCl9IChjaWVsbzJjaXZldClcIlxuXHRhc3NlcnQgKGZpbGVFeHQoY2llbG9QYXRoKSA9PSAnLmNpZWxvJyksIFwiTm90IGEgY2llbG8gZmlsZTogI3tPTChjaWVsb1BhdGgpfVwiXG5cdGlmIG5vdGRlZmluZWQoY2l2ZXRQYXRoKVxuXHRcdGNpdmV0UGF0aCA9IHdpdGhFeHQoY2llbG9QYXRoLCAnLmNpdmV0Jylcblx0ZWxzZVxuXHRcdGFzc2VydCAoZmlsZUV4dChjaXZldFBhdGgpID09ICcuY2l2ZXQnKSwgXCJOb3QgYSBjaXZldCBmaWxlOiAje09MKGNpdmV0UGF0aCl9XCJcblx0Y29kZSA6PSBzbHVycCBjaWVsb1BhdGhcblx0YmFyZiBjaXZldFBhdGgsIGNpZWxvMmNpdmV0KGNvZGUpXG5cdGFzc2VydCBpc0ZpbGUoY2l2ZXRQYXRoKSwgXCJGaWxlIG5vdCBjcmVhdGVkOiAje09MKGNpdmV0UGF0aCl9XCJcblx0cmV0dXJuXG5cbiMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4iXX0=