# parser.lib.civet

import {
	undef, defined, notdefined, regexp,
	isString, isFunction, isRegExp,
	} from './datatypes.lib.ts'
import {
	croak,
	} from './llutils.lib.ts'

# ---------------------------------------------------------------------------

type TState = {
	pos: number
	lastPos: number
	stack: any[]
	}

type TRule = ($: TState) => TState
type TLaxRule = (string | RegExp | TRule)   # --- can convet to TRule

export class Parser<T>

	lRules:  TRule[]
	lIgnore: TRule[]

	text: string = ''
	stack: T[] = []

	# ..........................................................

	constructor(
			lLaxRules: TLaxRule[],
			lLaxIgnore: TLaxRule[] = [],
			)
		@lRules = for rule of lLaxRules
			@mkRule(rule)
		@lIgnore = for rule of lLaxIgnore
			@mkRule(rule)

	# ..........................................................

	mkRule(rule: TLaxRule): TRule

		return (
			  (typeof rule == 'string') ? @StringRule(rule)
			: isRegExp(rule)            ? @RegExpRule(rule)
			:                             rule
			)

	# ..........................................................

	Node(
			rule: TRule,
			reducer: ($: TState, $next: TState) => T?
			): TRule =>

		return ($): TState =>
			$next := rule($)
			if ($next == $)
				return $

			# --- We have a match
			node := reducer($, $next)
			if defined(node)
				@lStack.push node
			return $next

	# ..........................................................

	skipIgnored($: TState): TState

		if (@lIgnore.length == 0)
			return $

  toIgnore := state.ignore[state.ignore.length - 1]
  return toIgnore ? toIgnore(state) : state

	# ..........................................................

	parse(str: string): T

		$init := {
			pos: 0,
			lastPos: 0,
			stack: []
			}
		return

	# ..........................................................

	StringRule(str: string): TRule

		return ($) =>
			if (@text.startsWith(str, $.pos))
				return {
					pos: $.pos + str.length
					lastPos: $.lastPos
					stack: $.stack
					}
			else
				$.lastPos = $.pos
				return $

	# ..........................................................

	RegExpRule(re: regexp): TRule

		return ($) =>
			lMatches := @text.substring($.pos).match(re)
			if defined(lMatches)
				return {
					pos: $.pos + lMatches[0].length
					lastPos: $.lastPos
					stack: $.stack
					}
			else
				return $