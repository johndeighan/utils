"use strict";
// exec.lib.civet

type AutoPromise<T> = Promise<Awaited<T>>;
import fs from 'node:fs'
import {stripAnsiCode} from "@std/fmt/colors"
import {
	CompilerOptions, ScriptTarget, ModuleKind, CompilerHost,
	createSourceFile, createProgram, getPreEmitDiagnostics,
	flattenDiagnosticMessageText, createCompilerHost,
	} from "npm:typescript"

import {
	undef, defined, notdefined, assert, hash,
	isString, isArray, isArrayOfStrings, stringify,
	} from './datatypes.lib.ts'
import {
	getOptions, croak, OL, pass, blockToArray,
	} from './llutils.lib.ts'
import {
	barf,
	} from './fs.lib.ts'
import {
	curLogLevel, pushLogLevel, popLogLevel,
	DBG, LOG, WARN, ERR, LOGVALUE,
	INDENT, UNDENT,
	} from './logger.lib.ts'

/**
 * @module exec-utils - utilities for executing external code
 */

const textDecoder = new TextDecoder()

// ---------------------------------------------------------------------------

/**
 * convert ArrayBuffer, Int8Array, etc. to a string
 */

export const mkstr = (item: any): string => {

	if (defined(item)) {
		if (isString(item)) {
			return stripAnsiCode(item)
		}
		else if (isArray(item)) {
			return stripAnsiCode(item.join(''))
		}
		else {
			return stripAnsiCode(textDecoder.decode(item))
		}
	}
	else {
		return ''
	}
}

// ---------------------------------------------------------------------------

/**
 * build a command line from a command name and array of arguments
 */

export const getCmdLine = (cmdName: string, lArgs: string[]): string => {

	assert(isString(cmdName), `cmdName not a string: ${OL(cmdName)}`)
	assert(isArrayOfStrings(lArgs), `not an array of strings: ${OL(lArgs)}`)
	const cmdLine = `${cmdName} ${lArgs.join(' ')}`
	DBG(`cmdLine = ${OL(cmdLine)}`)
	return cmdLine
}

// ---------------------------------------------------------------------------

/**
 * build result hash to be returned by execCmd() or execCmdSync()
 */

export type TExecResult = {
	success: boolean
	code: number
	signal: (string | undefined)
	stdout: (string | undefined)
	stderr: (string | undefined)
	}

const getFinalResult = (
	hResult: hash,
	collect: boolean
	): TExecResult => {

	let ref;if (collect) {
		ref = ({
			success: hResult.success,
			code:    hResult.code,
			signal:  hResult.signal,
			stdout:  mkstr(hResult.stdout),
			stderr:  mkstr(hResult.stderr)
			})
	}
	else {
		ref = ({
			success: hResult.success,
			code:    hResult.code,
			signal:  hResult.signal,
			stdout:  undef,
			stderr:  undef
			})
	};const hRes =ref
	DBG(`hResult = ${OL(hRes)}`)
	return hRes
}

// ---------------------------------------------------------------------------

/**
 * get options to pass to Deno.Command constructor
 * 2nd argument determines whether stdout and stderr are
 * sent to parent process's stdout and stderr or are
 * collected to be returned to the caller
 */

export const getProcOpt = (
	lArgs: string[],
	collect: boolean
	): Deno.CommandOptions => {

	const hEnv: hash = {
		DEFAULT_LOGGER: curLogLevel()
		}

	return (collect?
		({
			args: lArgs,
			env: hEnv,
			stdout: 'piped',
			stderr: 'piped'
			})
	:
		({
			args: lArgs,
			env: hEnv,
			stdout: 'inherit',
			stderr: 'inherit'
			}))
}

// ---------------------------------------------------------------------------
// ASYNC

export const execCmd = async (
	cmdName: string,
	lArgs: string[] = [],
	hOptions: hash = {}
	): AutoPromise<TExecResult> => {

	const {collect, nolog} = getOptions(hOptions, {
		collect: false,
		nolog: false
		})
	if (nolog) {
		pushLogLevel('silent')
	}
	DBG(`EXEC: ${OL(getCmdLine(cmdName, lArgs))}`)
	DBG(INDENT)
	const hProcOpt = getProcOpt(lArgs, collect)
	const child = new Deno.Command(cmdName, hProcOpt)
	DBG(UNDENT)
	const hResult = await child.output()
	const hFinalResult = getFinalResult(hResult, collect)
	if (nolog) {
		popLogLevel()
	}
	return hFinalResult
}

// ---------------------------------------------------------------------------

export const execCmdSync = (
	cmdName: string,
	lArgs: string[] = [],
	hOptions: hash = {}
	): TExecResult => {

	const {collect, nolog} = getOptions(hOptions, {
		collect: false,
		nolog: false
		})
	if (nolog) {
		pushLogLevel('silent')
	}
	DBG(`EXEC SYNC: ${OL(getCmdLine(cmdName, lArgs))}`)
	DBG(INDENT)
	const hProcOpt = getProcOpt(lArgs, collect)
	const child = new Deno.Command(cmdName, hProcOpt)
	DBG(UNDENT)
	const hResult = child.outputSync()
	const hFinalResult = getFinalResult(hResult, collect)
	if (nolog) {
		popLogLevel()
	}
	return hFinalResult
}

// ---------------------------------------------------------------------------

export const cmdSucceeds = (
	cmdName: string,
	lArgs: string[] = [],
	hOptions: hash = {}
	): boolean => {

	const {quiet} = getOptions(hOptions, {
		quiet: true
		})
	try {
		const h = quiet ? {collect: true, nolog: true} : {}
		execCmdSync(cmdName, lArgs, h)
		return true
	}
	catch (err) {
		return false
	}
}

// ---------------------------------------------------------------------------

const getErrorMsgs = (stderr: (string | undefined)): string[] => {

	if (notdefined(stderr)) {
		return ['Unknown error']
	}
	else {
		const lMsgs = (
			(()=>{const results=[];for (const line of blockToArray(stderr)) {
				let ref1;if ((ref1 = line.match(/\[ERROR\]:\s*(.*)$/))) {const lMatches = ref1;
					results.push(lMatches[1])
				}
				else {
					results.push(undef)
				}
			}return results})()
			).filter((x) => defined(x))
		if (lMsgs.length === 0) {
			return ['Unknown error']
		}
		else {
			return lMsgs
		}
	}
}

// ---------------------------------------------------------------------------

/**
 * type checks TypeScript code, and returns
 * an array of diagnostic messages if errors are found
 */

export const typeCheck = (
		tsCode: string
		): ((string[]) | undefined) => {

	// --- We must place the TypeScript file at the project root
	//     so that paths gotten from .symbols resolve correctly

	const path = "./_typecheck_.ts"
	barf(path, tsCode)
	const hResult = execCmdSync('deno', ['check', path], {collect: true})
	const {success, code, stdout, stderr} = hResult
	if (success && (code === 0)) {
		return []
	}
	else {
		return getErrorMsgs(stderr)
	}
}

// ---------------------------------------------------------------------------

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3JjL2xpYi9leGVjLmxpYi5jaXZldC50c3giLCJzb3VyY2VzIjpbInNyYy9saWIvZXhlYy5saWIuY2l2ZXQiXSwibWFwcGluZ3MiOiI7QUFBQSxpQkFBZ0I7QUFDaEIsQUFBQTtBQUNBLEssVyx5QjtBQUFBLE1BQU0sQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLFNBQVM7QUFDeEIsQUFBQSxBQUFBLE1BQU0sQ0FBQyxDQUFDLGFBQWEsQ0FBQyxDQUFDLElBQUksQ0FBQyxpQkFBaUI7QUFDN0MsQUFBQSxBQUFBLE1BQU0sQ0FBQyxDQUFDO0FBQ1IsQ0FBQyxlQUFlLENBQUMsQ0FBQyxZQUFZLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxZQUFZLENBQUM7QUFDekQsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxDQUFDLHFCQUFxQixDQUFDO0FBQ3hELENBQUMsNEJBQTRCLENBQUMsQ0FBQyxrQkFBa0IsQ0FBQztBQUNsRCxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsZ0JBQWdCO0FBQ3hCLEFBQUE7QUFDQSxBQUFBLEFBQUEsTUFBTSxDQUFDLENBQUM7QUFDUixDQUFDLEtBQUssQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQztBQUMxQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLGdCQUFnQixDQUFDLENBQUMsU0FBUyxDQUFDO0FBQ2hELENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxvQkFBb0I7QUFDNUIsQUFBQSxBQUFBLE1BQU0sQ0FBQyxDQUFDO0FBQ1IsQ0FBQyxVQUFVLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxZQUFZLENBQUM7QUFDM0MsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLGtCQUFrQjtBQUMxQixBQUFBLEFBQUEsTUFBTSxDQUFDLENBQUM7QUFDUixDQUFDLElBQUksQ0FBQztBQUNOLENB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QUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUE7QUFDaEUsQUFBQSxDQUFnQyxNQUEvQixDQUFDLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUUsQ0FBQyxPQUFPO0FBQzNDLEFBQUEsQ0FBQyxHQUFHLENBQUEsT0FBTyxDQUFDLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFFLENBQUMsQ0FBQyxDQUFDLENBQUEsQ0FBQSxDQUFBO0FBQzFCLEFBQUEsRUFBRSxNQUFNLENBQUMsQ0FBQyxDO0NBQUMsQ0FBQTtBQUNYLEFBQUEsQ0FBQyxJQUFJLENBQUEsQ0FBQTtBQUNMLEFBQUEsRUFBRSxNQUFNLENBQUMsWUFBWSxDQUFDLE1BQU0sQztDQUFDLEM7QUFBQSxDQUFBO0FBQzdCO0FBQ0EsQUFBQSw4RUFBNkU7QUFDN0UiLCJuYW1lcyI6W10sInNvdXJjZXNDb250ZW50IjpbIiMgZXhlYy5saWIuY2l2ZXRcblxuaW1wb3J0IGZzIGZyb20gJ25vZGU6ZnMnXG5pbXBvcnQge3N0cmlwQW5zaUNvZGV9IGZyb20gXCJAc3RkL2ZtdC9jb2xvcnNcIlxuaW1wb3J0IHtcblx0Q29tcGlsZXJPcHRpb25zLCBTY3JpcHRUYXJnZXQsIE1vZHVsZUtpbmQsIENvbXBpbGVySG9zdCxcblx0Y3JlYXRlU291cmNlRmlsZSwgY3JlYXRlUHJvZ3JhbSwgZ2V0UHJlRW1pdERpYWdub3N0aWNzLFxuXHRmbGF0dGVuRGlhZ25vc3RpY01lc3NhZ2VUZXh0LCBjcmVhdGVDb21waWxlckhvc3QsXG5cdH0gZnJvbSBcIm5wbTp0eXBlc2NyaXB0XCJcblxuaW1wb3J0IHtcblx0dW5kZWYsIGRlZmluZWQsIG5vdGRlZmluZWQsIGFzc2VydCwgaGFzaCxcblx0aXNTdHJpbmcsIGlzQXJyYXksIGlzQXJyYXlPZlN0cmluZ3MsIHN0cmluZ2lmeSxcblx0fSBmcm9tICcuL2RhdGF0eXBlcy5saWIudHMnXG5pbXBvcnQge1xuXHRnZXRPcHRpb25zLCBjcm9haywgT0wsIHBhc3MsIGJsb2NrVG9BcnJheSxcblx0fSBmcm9tICcuL2xsdXRpbHMubGliLnRzJ1xuaW1wb3J0IHtcblx0YmFyZixcblx0fSBmcm9tICcuL2ZzLmxpYi50cydcbmltcG9ydCB7XG5cdGN1ckxvZ0xldmVsLCBwdXNoTG9nTGV2ZWwsIHBvcExvZ0xldmVsLFxuXHREQkcsIExPRywgV0FSTiwgRVJSLCBMT0dWQUxVRSxcblx0SU5ERU5ULCBVTkRFTlQsXG5cdH0gZnJvbSAnLi9sb2dnZXIubGliLnRzJ1xuXG4vKipcbiAqIEBtb2R1bGUgZXhlYy11dGlscyAtIHV0aWxpdGllcyBmb3IgZXhlY3V0aW5nIGV4dGVybmFsIGNvZGVcbiAqL1xuXG50ZXh0RGVjb2RlciA6PSBuZXcgVGV4dERlY29kZXIoKVxuXG4jIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4vKipcbiAqIGNvbnZlcnQgQXJyYXlCdWZmZXIsIEludDhBcnJheSwgZXRjLiB0byBhIHN0cmluZ1xuICovXG5cbmV4cG9ydCBta3N0ciA6PSAoaXRlbTogYW55KTogc3RyaW5nID0+XG5cblx0aWYgZGVmaW5lZChpdGVtKVxuXHRcdGlmIGlzU3RyaW5nKGl0ZW0pXG5cdFx0XHRyZXR1cm4gc3RyaXBBbnNpQ29kZShpdGVtKVxuXHRcdGVsc2UgaWYgaXNBcnJheShpdGVtKVxuXHRcdFx0cmV0dXJuIHN0cmlwQW5zaUNvZGUoaXRlbS5qb2luKCcnKSlcblx0XHRlbHNlXG5cdFx0XHRyZXR1cm4gc3RyaXBBbnNpQ29kZSh0ZXh0RGVjb2Rlci5kZWNvZGUoaXRlbSkpXG5cdGVsc2Vcblx0XHRyZXR1cm4gJydcblxuIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuLyoqXG4gKiBidWlsZCBhIGNvbW1hbmQgbGluZSBmcm9tIGEgY29tbWFuZCBuYW1lIGFuZCBhcnJheSBvZiBhcmd1bWVudHNcbiAqL1xuXG5leHBvcnQgZ2V0Q21kTGluZSA6PSAoY21kTmFtZTogc3RyaW5nLCBsQXJnczogc3RyaW5nW10pOiBzdHJpbmcgPT5cblxuXHRhc3NlcnQgaXNTdHJpbmcoY21kTmFtZSksIFwiY21kTmFtZSBub3QgYSBzdHJpbmc6ICN7T0woY21kTmFtZSl9XCJcblx0YXNzZXJ0IGlzQXJyYXlPZlN0cmluZ3MobEFyZ3MpLCBcIm5vdCBhbiBhcnJheSBvZiBzdHJpbmdzOiAje09MKGxBcmdzKX1cIlxuXHRjbWRMaW5lIDo9IFwiI3tjbWROYW1lfSAje2xBcmdzLmpvaW4oJyAnKX1cIlxuXHREQkcgXCJjbWRMaW5lID0gI3tPTChjbWRMaW5lKX1cIlxuXHRyZXR1cm4gY21kTGluZVxuXG4jIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4vKipcbiAqIGJ1aWxkIHJlc3VsdCBoYXNoIHRvIGJlIHJldHVybmVkIGJ5IGV4ZWNDbWQoKSBvciBleGVjQ21kU3luYygpXG4gKi9cblxuZXhwb3J0IHR5cGUgVEV4ZWNSZXN1bHQgPSB7XG5cdHN1Y2Nlc3M6IGJvb2xlYW5cblx0Y29kZTogbnVtYmVyXG5cdHNpZ25hbDogc3RyaW5nP1xuXHRzdGRvdXQ6IHN0cmluZz9cblx0c3RkZXJyOiBzdHJpbmc/XG5cdH1cblxuZ2V0RmluYWxSZXN1bHQgOj0gKFxuXHRoUmVzdWx0OiBoYXNoLFxuXHRjb2xsZWN0OiBib29sZWFuXG5cdCk6IFRFeGVjUmVzdWx0ID0+XG5cblx0aFJlcyA6PSBpZiBjb2xsZWN0XG5cdFx0e1xuXHRcdFx0c3VjY2VzczogaFJlc3VsdC5zdWNjZXNzXG5cdFx0XHRjb2RlOiAgICBoUmVzdWx0LmNvZGVcblx0XHRcdHNpZ25hbDogIGhSZXN1bHQuc2lnbmFsXG5cdFx0XHRzdGRvdXQ6ICBta3N0cihoUmVzdWx0LnN0ZG91dClcblx0XHRcdHN0ZGVycjogIG1rc3RyKGhSZXN1bHQuc3RkZXJyKVxuXHRcdFx0fVxuXHRlbHNlXG5cdFx0e1xuXHRcdFx0c3VjY2VzczogaFJlc3VsdC5zdWNjZXNzXG5cdFx0XHRjb2RlOiAgICBoUmVzdWx0LmNvZGVcblx0XHRcdHNpZ25hbDogIGhSZXN1bHQuc2lnbmFsXG5cdFx0XHRzdGRvdXQ6ICB1bmRlZlxuXHRcdFx0c3RkZXJyOiAgdW5kZWZcblx0XHRcdH1cblx0REJHIFwiaFJlc3VsdCA9ICN7T0woaFJlcyl9XCJcblx0cmV0dXJuIGhSZXNcblxuIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuLyoqXG4gKiBnZXQgb3B0aW9ucyB0byBwYXNzIHRvIERlbm8uQ29tbWFuZCBjb25zdHJ1Y3RvclxuICogMm5kIGFyZ3VtZW50IGRldGVybWluZXMgd2hldGhlciBzdGRvdXQgYW5kIHN0ZGVyciBhcmVcbiAqIHNlbnQgdG8gcGFyZW50IHByb2Nlc3MncyBzdGRvdXQgYW5kIHN0ZGVyciBvciBhcmVcbiAqIGNvbGxlY3RlZCB0byBiZSByZXR1cm5lZCB0byB0aGUgY2FsbGVyXG4gKi9cblxuZXhwb3J0IGdldFByb2NPcHQgOj0gKFxuXHRsQXJnczogc3RyaW5nW10sXG5cdGNvbGxlY3Q6IGJvb2xlYW5cblx0KTogRGVuby5Db21tYW5kT3B0aW9ucyA9PlxuXG5cdGhFbnY6IGhhc2ggOj0ge1xuXHRcdERFRkFVTFRfTE9HR0VSOiBjdXJMb2dMZXZlbCgpXG5cdFx0fVxuXG5cdHJldHVybiBpZiBjb2xsZWN0XG5cdFx0e1xuXHRcdFx0YXJnczogbEFyZ3MsXG5cdFx0XHRlbnY6IGhFbnZcblx0XHRcdHN0ZG91dDogJ3BpcGVkJ1xuXHRcdFx0c3RkZXJyOiAncGlwZWQnXG5cdFx0XHR9XG5cdGVsc2Vcblx0XHR7XG5cdFx0XHRhcmdzOiBsQXJncyxcblx0XHRcdGVudjogaEVudlxuXHRcdFx0c3Rkb3V0OiAnaW5oZXJpdCdcblx0XHRcdHN0ZGVycjogJ2luaGVyaXQnXG5cdFx0XHR9XG5cbiMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4jIEFTWU5DXG5cbmV4cG9ydCBleGVjQ21kIDo9IChcblx0Y21kTmFtZTogc3RyaW5nLFxuXHRsQXJnczogc3RyaW5nW10gPSBbXSxcblx0aE9wdGlvbnM6IGhhc2ggPSB7fVxuXHQpOiBURXhlY1Jlc3VsdCA9PlxuXG5cdHtjb2xsZWN0LCBub2xvZ30gOj0gZ2V0T3B0aW9ucyBoT3B0aW9ucywge1xuXHRcdGNvbGxlY3Q6IGZhbHNlXG5cdFx0bm9sb2c6IGZhbHNlXG5cdFx0fVxuXHRpZiBub2xvZ1xuXHRcdHB1c2hMb2dMZXZlbCAnc2lsZW50J1xuXHREQkcgXCJFWEVDOiAje09MKGdldENtZExpbmUoY21kTmFtZSwgbEFyZ3MpKX1cIlxuXHREQkcgSU5ERU5UXG5cdGhQcm9jT3B0IDo9IGdldFByb2NPcHQobEFyZ3MsIGNvbGxlY3QpXG5cdGNoaWxkIDo9IG5ldyBEZW5vLkNvbW1hbmQoY21kTmFtZSwgaFByb2NPcHQpXG5cdERCRyBVTkRFTlRcblx0aFJlc3VsdCA6PSBhd2FpdCBjaGlsZC5vdXRwdXQoKVxuXHRoRmluYWxSZXN1bHQgOj0gZ2V0RmluYWxSZXN1bHQoaFJlc3VsdCwgY29sbGVjdClcblx0aWYgbm9sb2dcblx0XHRwb3BMb2dMZXZlbCgpXG5cdHJldHVybiBoRmluYWxSZXN1bHRcblxuIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuZXhwb3J0IGV4ZWNDbWRTeW5jIDo9IChcblx0Y21kTmFtZTogc3RyaW5nLFxuXHRsQXJnczogc3RyaW5nW10gPSBbXSxcblx0aE9wdGlvbnM6IGhhc2ggPSB7fVxuXHQpOiBURXhlY1Jlc3VsdCA9PlxuXG5cdHtjb2xsZWN0LCBub2xvZ30gOj0gZ2V0T3B0aW9ucyBoT3B0aW9ucywge1xuXHRcdGNvbGxlY3Q6IGZhbHNlXG5cdFx0bm9sb2c6IGZhbHNlXG5cdFx0fVxuXHRpZiBub2xvZ1xuXHRcdHB1c2hMb2dMZXZlbCAnc2lsZW50J1xuXHREQkcgXCJFWEVDIFNZTkM6ICN7T0woZ2V0Q21kTGluZShjbWROYW1lLCBsQXJncykpfVwiXG5cdERCRyBJTkRFTlRcblx0aFByb2NPcHQgOj0gZ2V0UHJvY09wdChsQXJncywgY29sbGVjdClcblx0Y2hpbGQgOj0gbmV3IERlbm8uQ29tbWFuZChjbWROYW1lLCBoUHJvY09wdClcblx0REJHIFVOREVOVFxuXHRoUmVzdWx0IDo9IGNoaWxkLm91dHB1dFN5bmMoKVxuXHRoRmluYWxSZXN1bHQgOj0gZ2V0RmluYWxSZXN1bHQoaFJlc3VsdCwgY29sbGVjdClcblx0aWYgbm9sb2dcblx0XHRwb3BMb2dMZXZlbCgpXG5cdHJldHVybiBoRmluYWxSZXN1bHRcblxuIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuZXhwb3J0IGNtZFN1Y2NlZWRzIDo9IChcblx0Y21kTmFtZTogc3RyaW5nLFxuXHRsQXJnczogc3RyaW5nW10gPSBbXSxcblx0aE9wdGlvbnM6IGhhc2ggPSB7fVxuXHQpOiBib29sZWFuID0+XG5cblx0e3F1aWV0fSA6PSBnZXRPcHRpb25zIGhPcHRpb25zLCB7XG5cdFx0cXVpZXQ6IHRydWVcblx0XHR9XG5cdHRyeVxuXHRcdGggOj0gcXVpZXQgPyB7Y29sbGVjdDogdHJ1ZSwgbm9sb2c6IHRydWV9IDoge31cblx0XHRleGVjQ21kU3luYyBjbWROYW1lLCBsQXJncywgaFxuXHRcdHJldHVybiB0cnVlXG5cdGNhdGNoIGVyclxuXHRcdHJldHVybiBmYWxzZVxuXG4jIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG5nZXRFcnJvck1zZ3MgOj0gKHN0ZGVycjogc3RyaW5nPyk6IHN0cmluZ1tdID0+XG5cblx0aWYgbm90ZGVmaW5lZChzdGRlcnIpXG5cdFx0cmV0dXJuIFsnVW5rbm93biBlcnJvciddXG5cdGVsc2Vcblx0XHRsTXNncyA6PSAoXG5cdFx0XHRmb3IgbGluZSBvZiBibG9ja1RvQXJyYXkoc3RkZXJyKVxuXHRcdFx0XHRpZiBsTWF0Y2hlcyA6PSBsaW5lLm1hdGNoKC8vLyBcXFsgRVJST1IgXFxdIDogXFxzKiAoLiopJC8vLylcblx0XHRcdFx0XHRsTWF0Y2hlc1sxXVxuXHRcdFx0XHRlbHNlXG5cdFx0XHRcdFx0dW5kZWZcblx0XHRcdCkuZmlsdGVyKCh4KSA9PiBkZWZpbmVkKHgpKVxuXHRcdGlmIChsTXNncy5sZW5ndGggPT0gMClcblx0XHRcdHJldHVybiBbJ1Vua25vd24gZXJyb3InXVxuXHRcdGVsc2Vcblx0XHRcdHJldHVybiBsTXNnc1xuXG4jIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4vKipcbiAqIHR5cGUgY2hlY2tzIFR5cGVTY3JpcHQgY29kZSwgYW5kIHJldHVybnNcbiAqIGFuIGFycmF5IG9mIGRpYWdub3N0aWMgbWVzc2FnZXMgaWYgZXJyb3JzIGFyZSBmb3VuZFxuICovXG5cbmV4cG9ydCB0eXBlQ2hlY2sgOj0gKFxuXHRcdHRzQ29kZTogc3RyaW5nXG5cdFx0KTogc3RyaW5nW10/ID0+XG5cblx0IyAtLS0gV2UgbXVzdCBwbGFjZSB0aGUgVHlwZVNjcmlwdCBmaWxlIGF0IHRoZSBwcm9qZWN0IHJvb3Rcblx0IyAgICAgc28gdGhhdCBwYXRocyBnb3R0ZW4gZnJvbSAuc3ltYm9scyByZXNvbHZlIGNvcnJlY3RseVxuXG5cdHBhdGggOj0gXCIuL190eXBlY2hlY2tfLnRzXCJcblx0YmFyZiBwYXRoLCB0c0NvZGVcblx0aFJlc3VsdCA6PSBleGVjQ21kU3luYyAnZGVubycsIFsnY2hlY2snLCBwYXRoXSwge2NvbGxlY3Q6IHRydWV9XG5cdHtzdWNjZXNzLCBjb2RlLCBzdGRvdXQsIHN0ZGVycn0gOj0gaFJlc3VsdFxuXHRpZiBzdWNjZXNzICYmIChjb2RlID09IDApXG5cdFx0cmV0dXJuIFtdXG5cdGVsc2Vcblx0XHRyZXR1cm4gZ2V0RXJyb3JNc2dzKHN0ZGVycilcblxuIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiJdfQ==