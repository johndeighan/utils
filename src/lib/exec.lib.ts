"use strict";
// exec.lib.civet

type AutoPromise<T> = Promise<Awaited<T>>;
import fs from 'node:fs'
import {stripAnsiCode} from "@std/fmt/colors"
import {
	CompilerOptions, ScriptTarget, ModuleKind, CompilerHost,
	createSourceFile, createProgram, getPreEmitDiagnostics,
	flattenDiagnosticMessageText, createCompilerHost,
	} from "npm:typescript"

import {
	undef, defined, notdefined, assert, hash,
	isString, isArray, isArrayOfStrings, stringify,
	} from './datatypes.lib.ts'
import {
	getOptions, croak, OL, pass, blockToArray,
	} from './llutils.lib.ts'
import {
	barf,
	} from './fs.lib.ts'
import {
	curLogLevel, pushLogLevel, popLogLevel,
	LogCmd, DBG, LOG, WARN, ERR, LOGVALUE,
	} from './logger.lib.ts'

/**
 * @module exec-utils - utilities for executing external code
 */

const textDecoder = new TextDecoder()

// ---------------------------------------------------------------------------

/**
 * convert ArrayBuffer, Int8Array, etc. to a string
 */

export const mkstr = (item: any): string => {

	if (defined(item)) {
		if (isString(item)) {
			return stripAnsiCode(item)
		}
		else if (isArray(item)) {
			return stripAnsiCode(item.join(''))
		}
		else {
			return stripAnsiCode(textDecoder.decode(item))
		}
	}
	else {
		return ''
	}
}

// ---------------------------------------------------------------------------

/**
 * build a command line from a command name and array of arguments
 */

export const getCmdLine = (cmdName: string, lArgs: string[]): string => {

	assert(isString(cmdName), `cmdName not a string: ${OL(cmdName)}`)
	assert(isArrayOfStrings(lArgs), `not an array of strings: ${OL(lArgs)}`)
	const cmdLine = `${cmdName} ${lArgs.join(' ')}`
	DBG(`cmdLine = ${OL(cmdLine)}`)
	return cmdLine
}

// ---------------------------------------------------------------------------

/**
 * build result hash to be returned by execCmd() or execCmdSync()
 */

export type execCmdResult = {
	success: boolean
	code: number
	signal: (string | undefined)
	stdout: (string | undefined)
	stderr: (string | undefined)
	}

const getFinalResult = (
	hResult: hash,
	collect: boolean
	): execCmdResult => {

	let ref;if (collect) {
		ref = ({
			success: hResult.success,
			code:    hResult.code,
			signal:  hResult.signal,
			stdout:  mkstr(hResult.stdout),
			stderr:  mkstr(hResult.stderr)
			})
	}
	else {
		ref = ({
			success: hResult.success,
			code:    hResult.code,
			signal:  hResult.signal,
			stdout:  undef,
			stderr:  undef
			})
	};const hRes =ref
	DBG(`hResult = ${OL(hRes)}`)
	return hRes
}

// ---------------------------------------------------------------------------

/**
 * get options to pass to Deno.Command constructor
 * 2nd argument determines whether stdout and stderr are
 * sent to parent process's stdout and stderr or are
 * collected to be returned to the caller
 */

export const getProcOpt = (
	lArgs: string[],
	collect: boolean
	): Deno.CommandOptions => {

	const hEnv: hash = {
		DEFAULT_LOGGER: curLogLevel()
		}

	return (collect?
		({
			args: lArgs,
			env: hEnv,
			stdout: 'piped',
			stderr: 'piped'
			})
	:
		({
			args: lArgs,
			env: hEnv,
			stdout: 'inherit',
			stderr: 'inherit'
			}))
}

// ---------------------------------------------------------------------------
// ASYNC

export const execCmd = async (
	cmdName: string,
	lArgs: string[] = [],
	hOptions: hash = {}
	): AutoPromise<execCmdResult> => {

	const {collect, nolog} = getOptions(hOptions, {
		collect: false,
		nolog: false
		})
	if (nolog) {
		pushLogLevel('silent')
	}
	DBG(`EXEC: ${OL(getCmdLine(cmdName, lArgs))}`)
	DBG(LogCmd.INDENT)
	const hProcOpt = getProcOpt(lArgs, collect)
	const child = new Deno.Command(cmdName, hProcOpt)
	DBG(LogCmd.UNDENT)
	const hResult = await child.output()
	const hFinalResult = getFinalResult(hResult, collect)
	if (nolog) {
		popLogLevel()
	}
	return hFinalResult
}

// ---------------------------------------------------------------------------

export const execCmdSync = (
	cmdName: string,
	lArgs: string[] = [],
	hOptions: hash = {}
	): execCmdResult => {

	const {collect, nolog} = getOptions(hOptions, {
		collect: false,
		nolog: false
		})
	if (nolog) {
		pushLogLevel('silent')
	}
	DBG(`EXEC SYNC: ${OL(getCmdLine(cmdName, lArgs))}`)
	DBG(LogCmd.INDENT)
	const hProcOpt = getProcOpt(lArgs, collect)
	const child = new Deno.Command(cmdName, hProcOpt)
	DBG(LogCmd.UNDENT)
	const hResult = child.outputSync()
	const hFinalResult = getFinalResult(hResult, collect)
	if (nolog) {
		popLogLevel()
	}
	return hFinalResult
}

// ---------------------------------------------------------------------------

export const cmdSucceeds = (
	cmdName: string,
	lArgs: string[] = [],
	hOptions: hash = {}
	): boolean => {

	const {quiet} = getOptions(hOptions, {
		quiet: true
		})
	try {
		const h = quiet ? {collect: true, nolog: true} : {}
		execCmdSync(cmdName, lArgs, h)
		return true
	}
	catch (err) {
		return false
	}
}

// ---------------------------------------------------------------------------

const getErrorMsgs = (stderr: (string | undefined)): string[] => {

	if (notdefined(stderr)) {
		return ['Unknown error']
	}
	else {
		const lMsgs = (
			(()=>{const results=[];for (const line of blockToArray(stderr)) {
				let ref1;if ((ref1 = line.match(/\[ERROR\]:\s*(.*)$/))) {const lMatches = ref1;
					results.push(lMatches[1])
				}
				else {
					results.push(undef)
				}
			}return results})()
			).filter((x) => defined(x))
		if (lMsgs.length === 0) {
			return ['Unknown error']
		}
		else {
			return lMsgs
		}
	}
}

// ---------------------------------------------------------------------------

/**
 * type checks TypeScript code, and returns
 * an array of diagnostic messages if errors are found
 */

export const typeCheck = (
		tsCode: string
		): ((string[]) | undefined) => {

	// --- We must place the TypeScript file at the project root
	//     so that paths gotten from .symbols resolve correctly

	const path = "./_typecheck_.ts"
	barf(path, tsCode)
	const hResult = execCmdSync('deno', ['check', path], {collect: true})
	const {success, code, stdout, stderr} = hResult
	if (success && (code === 0)) {
		return []
	}
	else {
		return getErrorMsgs(stderr)
	}
}

// ---------------------------------------------------------------------------

//# sourceMappingURL=data:application/json;charset=utf-8;base64,