"use strict";
// exec.lib.civet

type AutoPromise<T> = Promise<Awaited<T>>;
import fs from 'node:fs'
import {stripAnsiCode} from "@std/fmt/colors"
import {
	CompilerOptions, ScriptTarget, ModuleKind, CompilerHost,
	createSourceFile, createProgram, getPreEmitDiagnostics,
	flattenDiagnosticMessageText, createCompilerHost,
	} from "npm:typescript"

import {
	undef, defined, notdefined, assert, croak, hash,
	isString, isArray, isArrayOfStrings,
	} from 'datatypes'
import {
	getOptions, OL, pass, blockToArray,
	} from 'llutils'
import {
	barf,
	} from 'fsys'
import {
	getLogLevel, pushLogLevel, popLogLevel,
	DBG, LOG, WARN, ERR, LOGVALUE,
	INDENT, UNDENT,
	} from 'logger'

/**
 * @module exec-utils - utilities for executing external code
 */

const textDecoder = new TextDecoder()

// ---------------------------------------------------------------------------

/**
 * convert ArrayBuffer, Int8Array, etc. to a string
 */

export const mkstr = (item: any): string => {

	if (isString(item)) {
		return stripAnsiCode(item)
	}
	else if (isArray(item)) {
		return stripAnsiCode(item.join(''))
	}
	else if (item instanceof ArrayBuffer) {
		return stripAnsiCode(textDecoder.decode(item))
	}
	else if (item instanceof Int8Array) {
		return stripAnsiCode(textDecoder.decode(item))
	}
	return ''
}

// ---------------------------------------------------------------------------

/**
 * build a command line from a command name and array of arguments
 */

export const getCmdLine = (cmdName: string, lArgs: string[]): string => {

	assert(isString(cmdName), `cmdName not a string: ${OL(cmdName)}`)
	assert(isArrayOfStrings(lArgs), `not an array of strings: ${OL(lArgs)}`)
	const cmdLine = `${cmdName} ${lArgs.join(' ')}`
	DBG(`cmdLine = ${OL(cmdLine)}`)
	return cmdLine
}

// ---------------------------------------------------------------------------

/**
 * build result hash to be returned by execCmd() or execCmdSync()
 */

export type TExecResult = {
	success: boolean
	code: number
	signal: (string | undefined)
	stdout: (string | undefined)
	stderr: (string | undefined)
	}

// ---------------------------------------------------------------------------

/**
 * get options to pass to Deno.Command constructor
 * 2nd argument determines whether stdout and stderr are
 * sent to parent process's stdout and stderr or are
 * collected to be returned to the caller
 */

export const getProcOpt = (
	lArgs: string[],
	collect: boolean
	): Deno.CommandOptions => {

	const hEnv: hash = {
		DEFAULT_LOGGER: getLogLevel()
		}

	return (collect?
		({
			args: lArgs,
			env: {DEFAULT_LOGGER: getLogLevel()},
			stdout: 'piped',
			stderr: 'piped'
			})
	:
		({
			args: lArgs,
			env: {DEFAULT_LOGGER: getLogLevel()},
			stdout: 'inherit',
			stderr: 'inherit'
			}))
}

// ---------------------------------------------------------------------------
// ASYNC

export const execCmd = async (
	cmdName: string,
	lArgs: string[] = [],
	hOptions: hash = {}
	): AutoPromise<TExecResult> => {

	type opt = {
		collect: boolean
		nolog: boolean
		}
	const {collect, nolog} = getOptions<opt>(hOptions, {
		collect: false,
		nolog: false
		})
	if (nolog) {
		pushLogLevel('silent')
	}

	DBG(`EXEC: ${OL(getCmdLine(cmdName, lArgs))}`)
	DBG(INDENT)
	const hProcOpt = getProcOpt(lArgs, collect)
	const child = new Deno.Command(cmdName, hProcOpt)
	DBG(UNDENT)
	const {success, code, signal, stdout, stderr} = await child.output();
	if (nolog) {
		popLogLevel()
	}
	return {
		success,
		code,
		signal: signal || undef,
		stdout: collect ? mkstr(stdout) : undef,
		stderr: collect ? mkstr(stderr) : undef
		}
}

// ---------------------------------------------------------------------------

export const execCmdSync = (
	cmdName: string,
	lArgs: string[] = [],
	hOptions: hash = {}
	): TExecResult => {

	type opt = {
		collect: boolean
		nolog: boolean
		}
	const {collect, nolog} = getOptions<opt>(hOptions, {
		collect: false,
		nolog: false
		})
	if (nolog) {
		pushLogLevel('silent')
	}
	DBG(`EXEC SYNC: ${OL(getCmdLine(cmdName, lArgs))}`)
	DBG(INDENT)
	const hProcOpt = getProcOpt(lArgs, collect)
	const child = new Deno.Command(cmdName, hProcOpt)
	DBG(UNDENT)
	const {success, code, signal, stdout, stderr} = child.outputSync()
	if (nolog) {
		popLogLevel()
	}
	return {
		success,
		code,
		signal: signal || undef,
		stdout: collect ? mkstr(stdout) : undef,
		stderr: collect ? mkstr(stderr) : undef
		}
}

// ---------------------------------------------------------------------------

export const cmdSucceeds = (
	cmdName: string,
	lArgs: string[] = [],
	hOptions: hash = {}
	): boolean => {

	type opt = {
		quiet: boolean
		}
	const {quiet} = getOptions<opt>(hOptions, {
		quiet: true
		})
	try {
		const h = quiet ? {collect: true, nolog: true} : {}
		execCmdSync(cmdName, lArgs, h)
		return true
	}
	catch (err) {
		return false
	}
}

// ---------------------------------------------------------------------------

const getErrorMsgs = (stderr: (string | undefined)): string[] => {

	if (notdefined(stderr)) {
		return ['Unknown error']
	}
	else {
		const lMsgs = (
			(()=>{const results=[];for (const line of blockToArray(stderr)) {
				let ref;if ((ref = line.match(/\[ERROR\]:\s*(.*)$/))) {const lMatches = ref;
					results.push(lMatches[1])
				}
				else {
					results.push(undef)
				}
			}return results})()
			).filter((x) => defined(x))
		if (lMsgs.length === 0) {
			return ['Unknown error']
		}
		else {
			return lMsgs
		}
	}
}

// ---------------------------------------------------------------------------

/**
 * type checks TypeScript code, and returns
 * an array of diagnostic messages if errors are found
 */

export const typeCheck = (
		tsCode: string
		): ((string[]) | undefined) => {

	// --- We must place the TypeScript file at the project root
	//     so that paths gotten from .symbols resolve correctly

	const path = "./_typecheck_.ts"
	barf(path, tsCode)
	const hResult = execCmdSync('deno', ['check', path], {collect: true})
	const {success, code, stdout, stderr} = hResult
	if (success && (code === 0)) {
		return []
	}
	else {
		return getErrorMsgs(stderr)
	}
}

// ---------------------------------------------------------------------------

//# sourceMappingURL=data:application/json;charset=utf-8;base64,