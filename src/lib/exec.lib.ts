"use strict";
// exec.lib.civet

type AutoPromise<T> = Promise<Awaited<T>>;
import fs from 'node:fs'
import {stripAnsiCode} from "@std/fmt/colors"
import {
	CompilerOptions, ScriptTarget, ModuleKind, CompilerHost,
	createSourceFile, createProgram, getPreEmitDiagnostics,
	flattenDiagnosticMessageText, createCompilerHost,
	} from "npm:typescript"

import {
	undef, defined, notdefined, assert, croak, hash,
	isString, isArray, isArrayOfStrings,
	} from 'datatypes'
import {
	getOptions, pass, blockToArray,
	} from 'llutils'
import {OL} from 'to-nice'
import {
	getLogLevel, pushLogLevel, popLogLevel,
	DBG, LOG, WARN, ERR, LOGVALUE,
	INDENT, UNDENT, DBGVALUE, DBGLABELED,
	} from 'logger'
import {
	barf,
	} from 'fsys'

/**
 * @module exec - utilities for executing external code
 */

const textDecoder = new TextDecoder()

// ---------------------------------------------------------------------------

/**
 * convert ArrayBuffer, Int8Array, etc. to a string
 */

export const mkstr = (item: ((string | BufferSource) | undefined)): string => {

	if (isString(item)) {
		return stripAnsiCode(item)
	}
	else if (isArray(item)) {
		return stripAnsiCode(item.join(''))
	}
	else {
		return stripAnsiCode(textDecoder.decode(item))
	}
}

// ---------------------------------------------------------------------------

/**
 * build a command line from a command name and array of arguments
 */

export const getCmdLine = (cmdName: string, lArgs: string[]): string => {

	assert(isString(cmdName), `cmdName not a string: ${OL(cmdName)}`)
	assert(isArrayOfStrings(lArgs), `not an array of strings: ${OL(lArgs)}`)
	const cmdLine = `${cmdName} ${lArgs.join(' ')}`
	DBG(`cmdLine = ${OL(cmdLine)}`)
	return cmdLine
}

// ---------------------------------------------------------------------------

/**
 * build result hash to be returned by execCmd() or execCmdSync()
 */

export type TExecResult = {
	success: boolean
	code: number
	signal: (string | undefined)
	stdout?: string
	stderr?: string
	}

// ---------------------------------------------------------------------------
// ASYNC

export const execCmd = async (
	cmdName: string,
	lArgs: string[] = [],
	): AutoPromise<TExecResult> => {

	DBGLABELED("EXEC", `${OL(getCmdLine(cmdName, lArgs))}`)
	DBG(INDENT)
	const child = new Deno.Command(cmdName, {
		args: lArgs,
		env: {DEFAULT_LOGGER: getLogLevel()},
		stdout: 'inherit',
		stderr: 'inherit'
		})
	const {success, code, signal} = await child.output()
	DBG(UNDENT)
	return {
		success,
		code,
		signal: signal || undef
		}
}

// ---------------------------------------------------------------------------

export type TCmdDesc = [string, string[]]

export const execCmds = async (
		lCmds: TCmdDesc[]
		): AutoPromise<TExecResult[]> => {

	const results=[];for (const [cmdName, lArgs] of lCmds) {
		results.push(execCmd(cmdName, lArgs))
	};const lPromises =results

	const lResults = await Promise.all(lPromises)
	return lResults
}

// ---------------------------------------------------------------------------

export const execCmdSync = (
	cmdName: string,
	lArgs: string[] = [],
	): TExecResult => {

	DBGLABELED("EXEC SYNC", `${OL(getCmdLine(cmdName, lArgs))}`)
	DBG(INDENT)
	const child = new Deno.Command(cmdName, {
		args: lArgs,
		env: {DEFAULT_LOGGER: getLogLevel()},
		stdout: 'inherit',
		stderr: 'inherit'
		})
	const {success, code, signal} = child.outputSync()
	DBG(UNDENT)
	return {
		success,
		code,
		signal: signal || undef
		}
}

// ---------------------------------------------------------------------------
// ASYNC

export const getCmdOutput = async (
	cmdName: string,
	lArgs: string[] = [],
	): AutoPromise<TExecResult> => {

	DBGLABELED("EXEC(collect)", `${OL(getCmdLine(cmdName, lArgs))}`)
	DBG(INDENT)
	const child = new Deno.Command(cmdName, {
		args: lArgs,
		env: {DEFAULT_LOGGER: getLogLevel()},
		stdout: 'piped',
		stderr: 'piped'
		})
	const {success, code, signal, stdout, stderr} = await child.output()
	DBG(UNDENT)
	return {
		success,
		code,
		signal: signal || undef,
		stdout: mkstr(stdout),
		stderr: mkstr(stderr)
		}
}

// ---------------------------------------------------------------------------

export const getCmdOutputSync = (
	cmdName: string,
	lArgs: string[] = [],
	): TExecResult => {

	DBGLABELED("EXEC SYNC(collect)", `${OL(getCmdLine(cmdName, lArgs))}`)
	DBG(INDENT)
	const child = new Deno.Command(cmdName, {
		args: lArgs,
		env: {DEFAULT_LOGGER: getLogLevel()},
		stdout: 'piped',
		stderr: 'piped'
		})
	const {success, code, signal, stdout, stderr} = child.outputSync()
	DBG(UNDENT)
	return {
		success,
		code,
		signal: signal || undef,
		stdout: mkstr(stdout),
		stderr: mkstr(stderr)
		}
}

// ---------------------------------------------------------------------------

export const cmdSucceeds = (
	cmdName: string,
	lArgs: string[] = [],
	hOptions: hash = {}
	): boolean => {

	type opt = {
		quiet: boolean
		}
	const {quiet} = getOptions<opt>(hOptions, {
		quiet: true
		})
	try {
		if (!quiet) {
			pushLogLevel('silent')
		}
		getCmdOutputSync(cmdName, lArgs)
		if (!quiet) {
			popLogLevel()
		}
		return true
	}
	catch (err) {
		return false
	}
}

// ---------------------------------------------------------------------------

//# sourceMappingURL=data:application/json;base64,