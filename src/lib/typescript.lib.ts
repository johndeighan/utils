"use strict";
// typescript.lib.civet

import {existsSync} from '@std/fs'
import {statSync} from 'node:fs'
import {
	SourceFile, Node, ScriptTarget, SyntaxKind, ModuleKind,
	NewLineKind, EmitHint, CompilerOptions, ModuleResolutionKind,
	createSourceFile, createPrinter, createProgram, transpileModule,
	getPreEmitDiagnostics, flattenDiagnosticMessageText,
	getLineAndCharacterOfPosition, forEachChild,
	} from "typescript"
import {minify} from 'npm:uglify-js'

const decoder = new TextDecoder("utf-8")

// ---------------------------------------------------------------------------

/**
 * getCode(str) - return contents of file if str is a file path
 *    else return str
 */

export const getCode = (str: string): string => {

	if ((str.indexOf('\n') === -1)
			&& str.match(/\.[A-Za-z0-9]+$/)
			&& existsSync(str)
			&& statSync(str).isFile()
			) {
		const data = Deno.readFileSync(str)
		return decoder.decode(data)
	}
	else {
		return str
	}
}

// ---------------------------------------------------------------------------

export const addFunctionNames = (code: string): string => {

	// --- The names we add will look like: '__dummy99' where
	//     '99' can be any sequence of digits
	//     to make it trivial to remove them later

	let id = 99
	const re = /function\s*(\*)?\s*\(/g
	const replaceFunc = (match: string, ast: (string | undefined)) => {
		const n = id
		id += 1
		return (
			  (ast === undefined)
			? `function __dummy${n.toString()}(`
			: `function* __dummy${n.toString()}(`
			)
	}
	return code.replaceAll(re, replaceFunc)
}

// ---------------------------------------------------------------------------

export const removeFunctionNames = (code: string): string => {

	return code.replaceAll(/__dummy\d+/g, '')
}

// ---------------------------------------------------------------------------

export const normalizeCode = (
		code: string,
		ext: string = '.js'
		): string => {

	if(ext === '.js') {

			// --- Due to a bug in JavaScript, we have to make sure
			//     that all function names (even in generators)
			//     have a name, which we must remove after minimization

			const newCode = addFunctionNames(code)

			// --- Remove extra whitespace
			//     Remove extra parens from '(str)=>return'
			//     Remove comments
			const hOptions = {
				annotations: false,
				mangle: false,
				compress: undefined,
				keep_fargs: true,
				keep_fnames: true,
				warnings: true
				}
			const hResult = minify(newCode, hOptions)
			console.log(hResult)
			if (hResult.error) {
				throw new Error(hResult.error.message)
			}
			else if (hResult.code) {
				return removeFunctionNames(hResult.code)
			}
			else {
				throw new Error("Unknown error in normalizeCode()")
			}}
else  {
			return code.trim().replaceAll(/\s+/g, ' ')
		}
}

// ---------------------------------------------------------------------------

export const normalizeExpr = (
		code: string,
		ext: string = '.js'
		): string => {

	const str = normalizeCode(code, ext)
	const len = str.length
	if (str[len-1] === ';') {
		return str.substring(0, len-1)
	}
	else {
		return str
	}
}

// ---------------------------------------------------------------------------

export const truncStr = (str: string, len: number) => {

	if (str.length <= len) {
		return str
	}
	return str.substring(0, len-3) + '...'
}

// ---------------------------------------------------------------------------

/**
 * ts2ast() - convert TypeScript code to an AST
 */

export const ts2ast = (str: string): SourceFile => {

	const tsCode = getCode(str)
	return createSourceFile("temp.ts", tsCode, ScriptTarget.Latest)
}

// ---------------------------------------------------------------------------

/**
 * ts2js() - convert TypeScript code to JavaScript code
 */

export const ts2js = (str: string): string => {

	const tsCode = getCode(str)
	const hOptions = {
		compilerOptions: {
			module: ModuleKind.ES2022
			}
		}
	return transpileModule(tsCode, hOptions).outputText.trim()
}

// ---------------------------------------------------------------------------

export const ast2ts = (node: SourceFile): string => {

	const printer = createPrinter({newLine: NewLineKind.LineFeed})
	return printer.printNode(EmitHint.Unspecified, node, node)
}

// ---------------------------------------------------------------------------

export const ast2js = (node: SourceFile): string => {

	return ts2js(ast2ts(node))
}

// ---------------------------------------------------------------------------

export const typeCheckFiles = (
		lFileNames: string | string[],
		hOptions: CompilerOptions = hDefConfig
		): string[] => {

	if (typeof lFileNames === 'string') {
		lFileNames = [lFileNames]
	}
	const program = createProgram(lFileNames, hOptions)
	const emitResult = program.emit()

	const lMsgs: string[] = []
	getPreEmitDiagnostics(program).forEach((diag) => {
		const {file, start, messageText} = diag
		const msg = flattenDiagnosticMessageText(messageText, "\n")
		if (file) {
			const {fileName} = file
			const {line, character} = getLineAndCharacterOfPosition(file, start!)
			lMsgs.push(`${fileName}:(${line+1}:${character+1}): ${msg}`)
		}
		else {
			lMsgs.push(msg)
		}
	})
	return lMsgs
}

export var typeCheckFile = typeCheckFiles   // --- synonym

// ---------------------------------------------------------------------------

const pprintNode = (
		source: SourceFile,
		node: Node,
		depth: number
		) => {

	const kind = SyntaxKind[node.kind]
	const text = node.getText(source).replaceAll('\n', '\\n')
	const pre = ' '.repeat(3 * depth)
	return `${pre}${kind} - '${truncStr(text, 32)}'`
}

// ---------------------------------------------------------------------------

export const pprintAST = (source: SourceFile, pprint=pprintNode): string => {

	const lLines: string[] = []

	const traverse = (node: Node, depth=0): void => {
		lLines.push(pprint(source, node, depth))
		forEachChild(node, (childNode) => traverse(childNode, depth + 1))
		return
	}

	traverse(source)
	return lLines.join('\n')
}

// ---------------------------------------------------------------------------

const hDefConfig: CompilerOptions = {
	"allowJs": false,
	"allowUmdGlobalAccess": false,
	"allowUnreachableCode": false,
	"allowUnusedLabels": false,
	"alwaysStrict": true,
	"assumeChangesOnlyAffectDirectDependencies": false,
	"checkJs": false,
	"composite": false,
	"declaration": false,
	"declarationDir": undefined,
	"declarationMap": false,
	"emitBOM": false,
	"emitDeclarationOnly": false,
	"exactOptionalPropertyTypes": false,
	"experimentalDecorators": false,
	"forceConsistentCasingInFileNames": true,
	"generateCpuProfile": null,
	"generateTrace": null,
	"ignoreDeprecations": "5.0",
	"importHelpers": false,
	"inlineSourceMap": false,
	"inlineSources": false,
	"isolatedModules": false,
//	"jsx": "react-jsx",
//	"jsxFactory": "React.createElement",
//	"jsxFragmentFactory": "React.Fragment",
//	"jsxImportSource": "react",
	"lib": [
		"esnext",
		"dom",
		"dom.iterable"
	],
	"mapRoot": undefined,
	"maxNodeModuleJsDepth": 0,
	"module": ModuleKind.ESNext,
	"moduleDetection": undefined,
	"moduleResolution": ModuleResolutionKind.NodeNext,
	"newLine": NewLineKind.LineFeed,
	"noEmit": true,
	"noEmitHelpers": false,
	"noEmitOnError": false,
	"noErrorTruncation": false,
	"noFallthroughCasesInSwitch": true,
	"noImplicitAny": true,
	"noImplicitOverride": true,
	"noImplicitReturns": true,
	"noImplicitThis": true,
	"noPropertyAccessFromIndexSignature": true,
	"noUncheckedIndexedAccess": true,
	"noUnusedLocals": true,
	"noUnusedParameters": true,
	"outDir": undefined,
	"outFile": undefined,
	"paths": {},
	"preserveConstEnums": false,
	"preserveSymlinks": false,
	"preserveValueImports": false,
	"reactNamespace": "React",
	"removeComments": false,
	"resolveJsonModule": true,
	"rootDir": undefined,
	"rootDirs": [],
	"skipDefaultLibCheck": false,
	"skipLibCheck": false,
	"sourceMap": false,
	"sourceRoot": undefined,
	"strict": true,
	"strictBindCallApply": true,
	"strictFunctionTypes": true,
	"strictNullChecks": true,
	"strictPropertyInitialization": true,
	"stripInternal": false,
	"suppressExcessPropertyErrors": false,
	"suppressImplicitAnyIndexErrors": false,
	"target": ScriptTarget.ES2022,
	"traceResolution": false,
	"tsBuildInfoFile": undefined,
	"typeRoots": [],
	"useDefineForClassFields": true,
	"useUnknownInCatchVariables": true
	}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,