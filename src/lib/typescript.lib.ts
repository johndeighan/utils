"use strict";
// typescript.lib.civet

import {existsSync} from '@std/fs'
import {statSync} from 'node:fs'
import {
	SourceFile, Node, ScriptTarget, SyntaxKind, ModuleKind,
	NewLineKind, EmitHint, CompilerOptions, ModuleResolutionKind,
	createSourceFile, createPrinter, createProgram, transpileModule,
	getPreEmitDiagnostics, flattenDiagnosticMessageText,
	getLineAndCharacterOfPosition, forEachChild,
	} from "npm:typescript"
import {blue} from "@std/fmt/colors"

import {
	undef, defined, notdefined, integer, TStringGenerator,
	hash, hashof, isHash, TFilterFunc, isString,
	isEmpty, nonEmpty,
	} from 'datatypes'
import {
	truncStr, getOptions, spaces, o, OL, words,
	stringify,
	} from 'llutils'
import {indented} from 'indent'
import {
	LOG, DBG, LOGVALUE, INDENT, UNDENT, DBGVALUE,
	} from 'logger'
import {slurp, barf, barfTempFile} from 'fsys'
import {toNice, TMapFunc} from 'nice'
import {getCmdOutputSync} from 'exec'
import {stripSrcMap} from 'source-map'
import {getNeededImportStmts} from 'symbols'

const decoder = new TextDecoder("utf-8")

// ---------------------------------------------------------------------------
// ---------------------------------------------------------------------------

type TExportDesc = {
	name: string
	kind?: string
	}

// ---------------------------------------------------------------------------

export const allExportsIn = function*(
		tsCode: string
		): Generator<TExportDesc, void, void> {

	yield {name: 'dummy'}
	return
}

// ---------------------------------------------------------------------------

export const allExportsInFile = function*(
		path: string
		): Generator<TExportDesc, void, void> {

	yield* allExportsIn(slurp(path))
	return
}

// ---------------------------------------------------------------------------
// ---------------------------------------------------------------------------

type TImportDesc = {
	name: string
	kind?: string
	}

// ---------------------------------------------------------------------------

export const allImportsIn = function*(
		tsCode: string
		): Generator<TImportDesc, void, void> {

	yield {name: 'dummy'}
	return
}

// ---------------------------------------------------------------------------

export const allImportsInFile = function*(
		path: string
		): Generator<TImportDesc, void, void> {

	yield* allImportsIn(slurp(path))
	return
}

// ---------------------------------------------------------------------------

export const kindStr = (i: number): string => {

	return SyntaxKind[i]
}

// ---------------------------------------------------------------------------

export const tsMapFunc: TMapFunc = (
		key: string,
		val: unknown
		): unknown => {

	if ((key === 'kind') && (typeof val === 'number')) {
		return kindStr(val)
	}
	return val
}

// ---------------------------------------------------------------------------

export const ts2ast = (
		tsCode: string,
		hOptions: hash = {}
		): SourceFile => {

	type opt = {
		fileName: string
		}
	const {fileName} = getOptions<opt>(hOptions, {
		fileName: 'temp.ts'
		})

	tsCode = stripSrcMap(tsCode)[0]
	const hAst = createSourceFile(fileName, tsCode, ScriptTarget.Latest)
	const filter: TFilterFunc = (x: unknown) => {
		return (
			   (typeof x === 'object')
			&& (x !== null)
			&& ('kind' in x)
			&& (typeof x.kind === 'number')
			)
	}
	return hAst
}

// ---------------------------------------------------------------------------

export const ast2ts = (node: SourceFile): string => {

	const printer = createPrinter({newLine: NewLineKind.LineFeed})
	return printer.printNode(EmitHint.Unspecified, node, node)
}

// ---------------------------------------------------------------------------

export const typeCheckFiles = (
		lFileNames: string | string[],
		hOptions: CompilerOptions = hDefConfig
		): string[] => {

	if (typeof lFileNames === 'string') {
		lFileNames = [lFileNames]
	}
	const program = createProgram(lFileNames, hOptions)
	const emitResult = program.emit()

	const lMsgs: string[] = []
	getPreEmitDiagnostics(program).forEach((diag) => {
		const {file, start, messageText} = diag
		const msg = flattenDiagnosticMessageText(messageText, "\n")
		if (file) {
			const {fileName} = file
			const {line, character} = getLineAndCharacterOfPosition(file, start!)
			lMsgs.push(`${fileName}:(${line+1}:${character+1}): ${msg}`)
		}
		else {
			lMsgs.push(msg)
		}
	})
	return lMsgs
}

export var typeCheckFile = typeCheckFiles   // --- synonym

// ---------------------------------------------------------------------------

export const astAsString = (
		hAst: SourceFile,
		hOptions: hash = {}
		): string => {

	return toNice(hAst, {
		ignoreEmptyKeys: true,
		mapFunc: tsMapFunc,
		lExclude: words(
			'pos end id flags modifierFlagsCache',
			'transformFlags hasExtendedUnicodeEscape',
			'numericLiteralFlags setExternalModuleIndicator',
			'languageVersion languageVariant jsDocParsingMode',
			'hasNoDefaultLib'
			)
		})
}

// ---------------------------------------------------------------------------

export const typeCheckCode = (
		tsCode: string
		): ((string[]) | undefined) => {

	// --- We must place the TypeScript file at the project root
	//     so that paths gotten from .symbols resolve correctly

	const path = "./_typecheck_.ts"
	barf(path, tsCode)
	const hResult = getCmdOutputSync('deno', [
			'check',
			'--import-map', 'import_map.jsonc',
			path
			])
	const {success, code, stdout, stderr} = hResult
	if (success && (code === 0)) {
		return []
	}
	else if (defined(stderr)) {
		return [stderr]
	}
	else {
		return ['Unknown error']
	}
}

// ---------------------------------------------------------------------------

export const checkType = (
		value: unknown,
		typeStr: string,
		expectSuccess: boolean = true
		): string[] => {

	DBG("CALL checkType():", INDENT)

	const tsCode = getTsCode(typeStr, stringify(value))
	DBGVALUE('tsCode', tsCode)

	// --- check if we need to import the type
	const importCode = getImportCode(typeStr)
	DBGVALUE('importCode', importCode)

	const code = `${importCode}\n${tsCode}`
	const lDiagnostics = typeCheckCode(code)
	if (expectSuccess && nonEmpty(lDiagnostics)) {
		LOG("typeCheckCode FAILED:")
		LOG("CODE:")
		LOG(code)
		LOGVALUE('lDiagnostics', lDiagnostics)
	}
	else if (!expectSuccess && isEmpty(lDiagnostics)) {
		LOG("typeCheckCode SUCCEEDED:")
		LOG("CODE:")
		LOG(code)
	}
	DBG(UNDENT)
	return lDiagnostics || []
}

// ---------------------------------------------------------------------------
// --- We need to add ':unknown' to any function parameters
//     that don't have an explicit type

export const getTsCode = (
		typeStr: string,
		valueStr: string
		): string => {

	DBGVALUE('typeStr', typeStr)
	DBGVALUE('valueStr', valueStr)
	const result = splitFuncStr(valueStr)
	if (defined(result)) {
		const [lParms, body] = result
		const addType = (parm: string) => {
			if (parm.indexOf(':') >= 0) {
				return parm
			}
			else {
				return `${parm}: unknown`
			}
		}
		const parmStr = lParms.map(addType).join(', ')
		return `const x: ${typeStr} = (${parmStr}) => ${body}`
	}
	else {
		return `const x: ${typeStr} = ${valueStr}`
	}
}

// ---------------------------------------------------------------------------

type splitResult = [string[], string]

export const splitFuncStr = (
		valueStr: string
		): (splitResult | undefined) => {

	let ref;if ((ref = valueStr.match(/^\(([^\)]*)\)\s*[\=\-]\>\s*(.*)$/))) {const lMatches = ref;
		const [_, strParms, strBody] = lMatches
		if (isEmpty(strParms)) {
			return [[], strBody]
		}
		else {
			return [
				strParms.split(',').map((x) => x.trim()),
				strBody
				]
		}
	}
	else {
		return undef
	}
}

// ---------------------------------------------------------------------------

export const getImportCode = (
		typeStr: string
		): string => {

	DBG("CALL getImportCode()")
	const lSymbols = getSymbolsFromType(typeStr)
	DBGVALUE('lSymbols', lSymbols)
	if (nonEmpty(lSymbols)) {
		const lStmts = getNeededImportStmts(lSymbols)
		DBGVALUE('lStmts', lStmts)
		return lStmts.join('\n')
	}
	else {
		return ''
	}
}

// ---------------------------------------------------------------------------

export const getSymbolsFromType = (typeStr: string): string[] => {

	let ref1;let ref2;if ((ref1 = typeStr.match(/^([A-Za-z][A-Za-z0-9+]*)(?:\<([A-Za-z][A-Za-z0-9+]*)\>)?$/))) {const lMatches = ref1;
		const [_, type, subtype] = lMatches
		return nonEmpty(subtype) ? [type, subtype] : [type]
	}
	else if ((ref2 = typeStr.match(/^\(\)\s*\=\>\s*([A-Za-z][A-Za-z0-9+]*)$/))) {const lMatches = ref2;
		return [lMatches[1]]
	}
	else {
		return []
	}
}

// ---------------------------------------------------------------------------

const hDefConfig: CompilerOptions = {
	"allowJs": false,
	"allowUmdGlobalAccess": false,
	"allowUnreachableCode": false,
	"allowUnusedLabels": false,
	"alwaysStrict": true,
	"assumeChangesOnlyAffectDirectDependencies": false,
	"checkJs": false,
	"composite": false,
	"declaration": false,
	"declarationDir": undefined,
	"declarationMap": false,
	"emitBOM": false,
	"emitDeclarationOnly": false,
	"exactOptionalPropertyTypes": false,
	"experimentalDecorators": false,
	"forceConsistentCasingInFileNames": true,
	"generateCpuProfile": null,
	"generateTrace": null,
	"ignoreDeprecations": "5.0",
	"importHelpers": false,
	"inlineSourceMap": false,
	"inlineSources": false,
	"isolatedModules": false,
//	"jsx": "react-jsx",
//	"jsxFactory": "React.createElement",
//	"jsxFragmentFactory": "React.Fragment",
//	"jsxImportSource": "react",
	"lib": [
		"esnext",
		"dom",
		"dom.iterable"
	],
	"mapRoot": undefined,
	"maxNodeModuleJsDepth": 0,
	"module": ModuleKind.ESNext,
	"moduleDetection": undefined,
	"moduleResolution": ModuleResolutionKind.NodeNext,
	"newLine": NewLineKind.LineFeed,
	"noEmit": true,
	"noEmitHelpers": false,
	"noEmitOnError": false,
	"noErrorTruncation": false,
	"noFallthroughCasesInSwitch": true,
	"noImplicitAny": true,
	"noImplicitOverride": true,
	"noImplicitReturns": true,
	"noImplicitThis": true,
	"noPropertyAccessFromIndexSignature": true,
	"noUncheckedIndexedAccess": true,
	"noUnusedLocals": true,
	"noUnusedParameters": true,
	"outDir": undefined,
	"outFile": undefined,
	"paths": {},
	"preserveConstEnums": false,
	"preserveSymlinks": false,
	"preserveValueImports": false,
	"reactNamespace": "React",
	"removeComments": false,
	"resolveJsonModule": true,
	"rootDir": undefined,
	"rootDirs": [],
	"skipDefaultLibCheck": false,
	"skipLibCheck": false,
	"sourceMap": false,
	"sourceRoot": undefined,
	"strict": true,
	"strictBindCallApply": true,
	"strictFunctionTypes": true,
	"strictNullChecks": true,
	"strictPropertyInitialization": true,
	"stripInternal": false,
	"suppressExcessPropertyErrors": false,
	"suppressImplicitAnyIndexErrors": false,
	"target": ScriptTarget.ES2022,
	"traceResolution": false,
	"tsBuildInfoFile": undefined,
	"typeRoots": [],
	"useDefineForClassFields": true,
	"useUnknownInCatchVariables": true
	}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQzpcXFVzZXJzXFxqb2huZFxcdXRpbHNcXHNyY1xcbGliXFx0eXBlc2NyaXB0LmxpYi5jaXZldC50c3giLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcam9obmRcXHV0aWxzXFxzcmNcXGxpYlxcdHlwZXNjcmlwdC5saWIuY2l2ZXQiXSwibWFwcGluZ3MiOiI7QUFBQSx1QkFBc0I7QUFDdEIsQUFBQTtBQUNBLEFBQUEsTUFBTSxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVM7QUFDbEMsQUFBQSxBQUFBLE1BQU0sQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLElBQUksQ0FBQyxTQUFTO0FBQ2hDLEFBQUEsQUFBQSxNQUFNLENBQUMsQ0FBQztBQUNSLENBQUMsVUFBVSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsWUFBWSxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsVUFBVSxDQUFDO0FBQ3hELENBQUMsV0FBVyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsZUFBZSxDQUFDLENBQUMsb0JBQW9CLENBQUM7QUFDOUQsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxDQUFDLGVBQWUsQ0FBQztBQUNqRSxDQUFDLHFCQUFxQixDQUFDLENBQUMsNEJBQTRCLENBQUM7QUFDckQsQ0FBQyw2QkFBNkIsQ0FBQyxDQUFDLFlBQVksQ0FBQztBQUM3QyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsZ0JBQWdCO0FBQ3hCLEFBQUEsQUFBQSxNQUFNLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsaUJBQWlCO0FBQ3BDLEFBQUE7QUFDQSxBQUFBLEFBQUEsTUFBTSxDQUFDLENBQUM7QUFDUixDQUFDLEtBQUssQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLGdCQUFnQixDQUFDO0FBQ3ZELENBQUMsSUFBSSxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsTUFBTSxD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LENBQUM7QUFDN0IsQUFBQSxDQUFDLHFCQUFxQixDQUFDLENBQUMsSUFBSSxDQUFDO0FBQzdCLEFBQUEsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDLElBQUksQ0FBQztBQUMxQixBQUFBLENBQUMsOEJBQThCLENBQUMsQ0FBQyxJQUFJLENBQUM7QUFDdEMsQUFBQSxDQUFDLGVBQWUsQ0FBQyxDQUFDLEtBQUssQ0FBQztBQUN4QixBQUFBLENBQUMsOEJBQThCLENBQUMsQ0FBQyxLQUFLLENBQUM7QUFDdkMsQUFBQSxDQUFDLGdDQUFnQyxDQUFDLENBQUMsS0FBSyxDQUFDO0FBQ3pDLEFBQUEsQ0FBQyxRQUFRLENBQUMsQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDO0FBQy9CLEFBQUEsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLEtBQUssQ0FBQztBQUMxQixBQUFBLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxTQUFTLENBQUM7QUFDOUIsQUFBQSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ2pCLEFBQUEsQ0FBQyx5QkFBeUIsQ0FBQyxDQUFDLElBQUksQ0FBQztBQUNqQyxBQUFBLENBQUMsNEJBQTRCLENBQUMsQ0FBQyxJQUFJO0FBQ25DLENBQUMsQ0FBQztBQUNGIiwibmFtZXMiOltdLCJzb3VyY2VzQ29udGVudCI6WyIjIHR5cGVzY3JpcHQubGliLmNpdmV0XHJcblxyXG5pbXBvcnQge2V4aXN0c1N5bmN9IGZyb20gJ0BzdGQvZnMnXHJcbmltcG9ydCB7c3RhdFN5bmN9IGZyb20gJ25vZGU6ZnMnXHJcbmltcG9ydCB7XHJcblx0U291cmNlRmlsZSwgTm9kZSwgU2NyaXB0VGFyZ2V0LCBTeW50YXhLaW5kLCBNb2R1bGVLaW5kLFxyXG5cdE5ld0xpbmVLaW5kLCBFbWl0SGludCwgQ29tcGlsZXJPcHRpb25zLCBNb2R1bGVSZXNvbHV0aW9uS2luZCxcclxuXHRjcmVhdGVTb3VyY2VGaWxlLCBjcmVhdGVQcmludGVyLCBjcmVhdGVQcm9ncmFtLCB0cmFuc3BpbGVNb2R1bGUsXHJcblx0Z2V0UHJlRW1pdERpYWdub3N0aWNzLCBmbGF0dGVuRGlhZ25vc3RpY01lc3NhZ2VUZXh0LFxyXG5cdGdldExpbmVBbmRDaGFyYWN0ZXJPZlBvc2l0aW9uLCBmb3JFYWNoQ2hpbGQsXHJcblx0fSBmcm9tIFwibnBtOnR5cGVzY3JpcHRcIlxyXG5pbXBvcnQge2JsdWV9IGZyb20gXCJAc3RkL2ZtdC9jb2xvcnNcIlxyXG5cclxuaW1wb3J0IHtcclxuXHR1bmRlZiwgZGVmaW5lZCwgbm90ZGVmaW5lZCwgaW50ZWdlciwgVFN0cmluZ0dlbmVyYXRvcixcclxuXHRoYXNoLCBoYXNob2YsIGlzSGFzaCwgVEZpbHRlckZ1bmMsIGlzU3RyaW5nLFxyXG5cdGlzRW1wdHksIG5vbkVtcHR5LFxyXG5cdH0gZnJvbSAnZGF0YXR5cGVzJ1xyXG5pbXBvcnQge1xyXG5cdHRydW5jU3RyLCBnZXRPcHRpb25zLCBzcGFjZXMsIG8sIE9MLCB3b3JkcyxcclxuXHRzdHJpbmdpZnksXHJcblx0fSBmcm9tICdsbHV0aWxzJ1xyXG5pbXBvcnQge2luZGVudGVkfSBmcm9tICdpbmRlbnQnXHJcbmltcG9ydCB7XHJcblx0TE9HLCBEQkcsIExPR1ZBTFVFLCBJTkRFTlQsIFVOREVOVCwgREJHVkFMVUUsXHJcblx0fSBmcm9tICdsb2dnZXInXHJcbmltcG9ydCB7c2x1cnAsIGJhcmYsIGJhcmZUZW1wRmlsZX0gZnJvbSAnZnN5cydcclxuaW1wb3J0IHt0b05pY2UsIFRNYXBGdW5jfSBmcm9tICduaWNlJ1xyXG5pbXBvcnQge2dldENtZE91dHB1dFN5bmN9IGZyb20gJ2V4ZWMnXHJcbmltcG9ydCB7c3RyaXBTcmNNYXB9IGZyb20gJ3NvdXJjZS1tYXAnXHJcbmltcG9ydCB7Z2V0TmVlZGVkSW1wb3J0U3RtdHN9IGZyb20gJ3N5bWJvbHMnXHJcblxyXG5kZWNvZGVyIDo9IG5ldyBUZXh0RGVjb2RlcihcInV0Zi04XCIpXHJcblxyXG4jIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4jIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cclxudHlwZSBURXhwb3J0RGVzYyA9IHtcclxuXHRuYW1lOiBzdHJpbmdcclxuXHRraW5kPzogc3RyaW5nXHJcblx0fVxyXG5cclxuIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuXHJcbmV4cG9ydCBhbGxFeHBvcnRzSW4gOj0gKFxyXG5cdFx0dHNDb2RlOiBzdHJpbmdcclxuXHRcdCk6IEdlbmVyYXRvcjxURXhwb3J0RGVzYywgdm9pZCwgdm9pZD4gLT5cclxuXHJcblx0eWllbGQge25hbWU6ICdkdW1teSd9XHJcblx0cmV0dXJuXHJcblxyXG4jIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cclxuZXhwb3J0IGFsbEV4cG9ydHNJbkZpbGUgOj0gKFxyXG5cdFx0cGF0aDogc3RyaW5nXHJcblx0XHQpOiBHZW5lcmF0b3I8VEV4cG9ydERlc2MsIHZvaWQsIHZvaWQ+IC0+XHJcblxyXG5cdHlpZWxkKiBhbGxFeHBvcnRzSW4oc2x1cnAocGF0aCkpXHJcblx0cmV0dXJuXHJcblxyXG4jIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4jIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cclxudHlwZSBUSW1wb3J0RGVzYyA9IHtcclxuXHRuYW1lOiBzdHJpbmdcclxuXHRraW5kPzogc3RyaW5nXHJcblx0fVxyXG5cclxuIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuXHJcbmV4cG9ydCBhbGxJbXBvcnRzSW4gOj0gKFxyXG5cdFx0dHNDb2RlOiBzdHJpbmdcclxuXHRcdCk6IEdlbmVyYXRvcjxUSW1wb3J0RGVzYywgdm9pZCwgdm9pZD4gLT5cclxuXHJcblx0eWllbGQge25hbWU6ICdkdW1teSd9XHJcblx0cmV0dXJuXHJcblxyXG4jIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cclxuZXhwb3J0IGFsbEltcG9ydHNJbkZpbGUgOj0gKFxyXG5cdFx0cGF0aDogc3RyaW5nXHJcblx0XHQpOiBHZW5lcmF0b3I8VEltcG9ydERlc2MsIHZvaWQsIHZvaWQ+IC0+XHJcblxyXG5cdHlpZWxkKiBhbGxJbXBvcnRzSW4oc2x1cnAocGF0aCkpXHJcblx0cmV0dXJuXHJcblxyXG4jIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cclxuZXhwb3J0IGtpbmRTdHIgOj0gKGk6IG51bWJlcik6IHN0cmluZyA9PlxyXG5cclxuXHRyZXR1cm4gU3ludGF4S2luZFtpXVxyXG5cclxuIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuXHJcbmV4cG9ydCB0c01hcEZ1bmM6IFRNYXBGdW5jIDo9IChcclxuXHRcdGtleTogc3RyaW5nXHJcblx0XHR2YWw6IHVua25vd25cclxuXHRcdCk6IHVua25vd24gPT5cclxuXHJcblx0aWYgKGtleSA9PSAna2luZCcpICYmICh0eXBlb2YgdmFsID09ICdudW1iZXInKVxyXG5cdFx0cmV0dXJuIGtpbmRTdHIodmFsKVxyXG5cdHJldHVybiB2YWxcclxuXHJcbiMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblxyXG5leHBvcnQgdHMyYXN0IDo9IChcclxuXHRcdHRzQ29kZTogc3RyaW5nLFxyXG5cdFx0aE9wdGlvbnM6IGhhc2ggPSB7fVxyXG5cdFx0KTogU291cmNlRmlsZSA9PlxyXG5cclxuXHR0eXBlIG9wdCA9IHtcclxuXHRcdGZpbGVOYW1lOiBzdHJpbmdcclxuXHRcdH1cclxuXHR7ZmlsZU5hbWV9IDo9IGdldE9wdGlvbnM8b3B0PiBoT3B0aW9ucywge1xyXG5cdFx0ZmlsZU5hbWU6ICd0ZW1wLnRzJ1xyXG5cdFx0fVxyXG5cclxuXHR0c0NvZGUgPSBzdHJpcFNyY01hcCh0c0NvZGUpWzBdXHJcblx0aEFzdCA6PSBjcmVhdGVTb3VyY2VGaWxlKGZpbGVOYW1lLCB0c0NvZGUsIFNjcmlwdFRhcmdldC5MYXRlc3QpXHJcblx0ZmlsdGVyOiBURmlsdGVyRnVuYyA6PSAoeDogdW5rbm93bikgPT5cclxuXHRcdHJldHVybiAoXHJcblx0XHRcdCAgICh0eXBlb2YgeCA9PSAnb2JqZWN0JylcclxuXHRcdFx0JiYgKHggIT0gbnVsbClcclxuXHRcdFx0JiYgKCdraW5kJyBpbiB4KVxyXG5cdFx0XHQmJiAodHlwZW9mIHgua2luZCA9PSAnbnVtYmVyJylcclxuXHRcdFx0KVxyXG5cdHJldHVybiBoQXN0XHJcblxyXG4jIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cclxuZXhwb3J0IGFzdDJ0cyA6PSAobm9kZTogU291cmNlRmlsZSk6IHN0cmluZyA9PlxyXG5cclxuXHRwcmludGVyIDo9IGNyZWF0ZVByaW50ZXIge25ld0xpbmU6IE5ld0xpbmVLaW5kLkxpbmVGZWVkfVxyXG5cdHJldHVybiBwcmludGVyLnByaW50Tm9kZSBFbWl0SGludC5VbnNwZWNpZmllZCwgbm9kZSwgbm9kZVxyXG5cclxuIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuXHJcbmV4cG9ydCB0eXBlQ2hlY2tGaWxlcyA6PSAoXHJcblx0XHRsRmlsZU5hbWVzOiBzdHJpbmcgfCBzdHJpbmdbXSxcclxuXHRcdGhPcHRpb25zOiBDb21waWxlck9wdGlvbnMgPSBoRGVmQ29uZmlnXHJcblx0XHQpOiBzdHJpbmdbXSA9PlxyXG5cclxuXHRpZiAodHlwZW9mIGxGaWxlTmFtZXMgPT0gJ3N0cmluZycpXHJcblx0XHRsRmlsZU5hbWVzID0gW2xGaWxlTmFtZXNdXHJcblx0cHJvZ3JhbSA6PSBjcmVhdGVQcm9ncmFtKGxGaWxlTmFtZXMsIGhPcHRpb25zKVxyXG5cdGVtaXRSZXN1bHQgOj0gcHJvZ3JhbS5lbWl0KClcclxuXHJcblx0bE1zZ3M6IHN0cmluZ1tdIDo9IFtdXHJcblx0Z2V0UHJlRW1pdERpYWdub3N0aWNzKHByb2dyYW0pLmZvckVhY2ggKGRpYWcpID0+XHJcblx0XHR7ZmlsZSwgc3RhcnQsIG1lc3NhZ2VUZXh0fSA6PSBkaWFnXHJcblx0XHRtc2cgOj0gZmxhdHRlbkRpYWdub3N0aWNNZXNzYWdlVGV4dCBtZXNzYWdlVGV4dCwgXCJcXG5cIlxyXG5cdFx0aWYgKGZpbGUpXHJcblx0XHRcdHtmaWxlTmFtZX0gOj0gZmlsZVxyXG5cdFx0XHR7bGluZSwgY2hhcmFjdGVyfSA6PSBnZXRMaW5lQW5kQ2hhcmFjdGVyT2ZQb3NpdGlvbiBmaWxlLCBzdGFydCFcclxuXHRcdFx0bE1zZ3MucHVzaCBcIiN7ZmlsZU5hbWV9Oigje2xpbmUrMX06I3tjaGFyYWN0ZXIrMX0pOiAje21zZ31cIlxyXG5cdFx0ZWxzZVxyXG5cdFx0XHRsTXNncy5wdXNoIG1zZ1xyXG5cdHJldHVybiBsTXNnc1xyXG5cclxuZXhwb3J0IHR5cGVDaGVja0ZpbGUgPSB0eXBlQ2hlY2tGaWxlcyAgICMgLS0tIHN5bm9ueW1cclxuXHJcbiMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblxyXG5leHBvcnQgYXN0QXNTdHJpbmcgOj0gKFxyXG5cdFx0aEFzdDogU291cmNlRmlsZVxyXG5cdFx0aE9wdGlvbnM6IGhhc2ggPSB7fVxyXG5cdFx0KTogc3RyaW5nID0+XHJcblxyXG5cdHJldHVybiB0b05pY2UgaEFzdCwge1xyXG5cdFx0aWdub3JlRW1wdHlLZXlzOiB0cnVlXHJcblx0XHRtYXBGdW5jOiB0c01hcEZ1bmNcclxuXHRcdGxFeGNsdWRlOiB3b3JkcyhcclxuXHRcdFx0J3BvcyBlbmQgaWQgZmxhZ3MgbW9kaWZpZXJGbGFnc0NhY2hlJ1xyXG5cdFx0XHQndHJhbnNmb3JtRmxhZ3MgaGFzRXh0ZW5kZWRVbmljb2RlRXNjYXBlJ1xyXG5cdFx0XHQnbnVtZXJpY0xpdGVyYWxGbGFncyBzZXRFeHRlcm5hbE1vZHVsZUluZGljYXRvcidcclxuXHRcdFx0J2xhbmd1YWdlVmVyc2lvbiBsYW5ndWFnZVZhcmlhbnQganNEb2NQYXJzaW5nTW9kZSdcclxuXHRcdFx0J2hhc05vRGVmYXVsdExpYidcclxuXHRcdFx0KVxyXG5cdFx0fVxyXG5cclxuIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuXHJcbmV4cG9ydCB0eXBlQ2hlY2tDb2RlIDo9IChcclxuXHRcdHRzQ29kZTogc3RyaW5nXHJcblx0XHQpOiBzdHJpbmdbXT8gPT5cclxuXHJcblx0IyAtLS0gV2UgbXVzdCBwbGFjZSB0aGUgVHlwZVNjcmlwdCBmaWxlIGF0IHRoZSBwcm9qZWN0IHJvb3RcclxuXHQjICAgICBzbyB0aGF0IHBhdGhzIGdvdHRlbiBmcm9tIC5zeW1ib2xzIHJlc29sdmUgY29ycmVjdGx5XHJcblxyXG5cdHBhdGggOj0gXCIuL190eXBlY2hlY2tfLnRzXCJcclxuXHRiYXJmIHBhdGgsIHRzQ29kZVxyXG5cdGhSZXN1bHQgOj0gZ2V0Q21kT3V0cHV0U3luYyAnZGVubycsIFtcclxuXHRcdFx0J2NoZWNrJyxcclxuXHRcdFx0Jy0taW1wb3J0LW1hcCcsICdpbXBvcnRfbWFwLmpzb25jJyxcclxuXHRcdFx0cGF0aFxyXG5cdFx0XHRdXHJcblx0e3N1Y2Nlc3MsIGNvZGUsIHN0ZG91dCwgc3RkZXJyfSA6PSBoUmVzdWx0XHJcblx0aWYgc3VjY2VzcyAmJiAoY29kZSA9PSAwKVxyXG5cdFx0cmV0dXJuIFtdXHJcblx0ZWxzZSBpZiBkZWZpbmVkKHN0ZGVycilcclxuXHRcdHJldHVybiBbc3RkZXJyXVxyXG5cdGVsc2VcclxuXHRcdHJldHVybiBbJ1Vua25vd24gZXJyb3InXVxyXG5cclxuIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuXHJcbmV4cG9ydCBjaGVja1R5cGUgOj0gKFxyXG5cdFx0dmFsdWU6IHVua25vd25cclxuXHRcdHR5cGVTdHI6IHN0cmluZ1xyXG5cdFx0ZXhwZWN0U3VjY2VzczogYm9vbGVhbiA9IHRydWVcclxuXHRcdCk6IHN0cmluZ1tdID0+XHJcblxyXG5cdERCRyBcIkNBTEwgY2hlY2tUeXBlKCk6XCIsIElOREVOVFxyXG5cclxuXHR0c0NvZGUgOj0gZ2V0VHNDb2RlIHR5cGVTdHIsIHN0cmluZ2lmeSh2YWx1ZSlcclxuXHREQkdWQUxVRSAndHNDb2RlJywgdHNDb2RlXHJcblxyXG5cdCMgLS0tIGNoZWNrIGlmIHdlIG5lZWQgdG8gaW1wb3J0IHRoZSB0eXBlXHJcblx0aW1wb3J0Q29kZSA6PSBnZXRJbXBvcnRDb2RlKHR5cGVTdHIpXHJcblx0REJHVkFMVUUgJ2ltcG9ydENvZGUnLCBpbXBvcnRDb2RlXHJcblxyXG5cdGNvZGUgOj0gXCIje2ltcG9ydENvZGV9XFxuI3t0c0NvZGV9XCJcclxuXHRsRGlhZ25vc3RpY3MgOj0gdHlwZUNoZWNrQ29kZShjb2RlKVxyXG5cdGlmIGV4cGVjdFN1Y2Nlc3MgJiYgbm9uRW1wdHkobERpYWdub3N0aWNzKVxyXG5cdFx0TE9HIFwidHlwZUNoZWNrQ29kZSBGQUlMRUQ6XCJcclxuXHRcdExPRyBcIkNPREU6XCJcclxuXHRcdExPRyBjb2RlXHJcblx0XHRMT0dWQUxVRSAnbERpYWdub3N0aWNzJywgbERpYWdub3N0aWNzXHJcblx0ZWxzZSBpZiBub3QgZXhwZWN0U3VjY2VzcyAmJiBpc0VtcHR5KGxEaWFnbm9zdGljcylcclxuXHRcdExPRyBcInR5cGVDaGVja0NvZGUgU1VDQ0VFREVEOlwiXHJcblx0XHRMT0cgXCJDT0RFOlwiXHJcblx0XHRMT0cgY29kZVxyXG5cdERCRyBVTkRFTlRcclxuXHRyZXR1cm4gbERpYWdub3N0aWNzIHx8IFtdXHJcblxyXG4jIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4jIC0tLSBXZSBuZWVkIHRvIGFkZCAnOnVua25vd24nIHRvIGFueSBmdW5jdGlvbiBwYXJhbWV0ZXJzXHJcbiMgICAgIHRoYXQgZG9uJ3QgaGF2ZSBhbiBleHBsaWNpdCB0eXBlXHJcblxyXG5leHBvcnQgZ2V0VHNDb2RlIDo9IChcclxuXHRcdHR5cGVTdHI6IHN0cmluZ1xyXG5cdFx0dmFsdWVTdHI6IHN0cmluZ1xyXG5cdFx0KTogc3RyaW5nID0+XHJcblxyXG5cdERCR1ZBTFVFICd0eXBlU3RyJywgdHlwZVN0clxyXG5cdERCR1ZBTFVFICd2YWx1ZVN0cicsIHZhbHVlU3RyXHJcblx0cmVzdWx0IDo9IHNwbGl0RnVuY1N0cih2YWx1ZVN0cilcclxuXHRpZiBkZWZpbmVkKHJlc3VsdClcclxuXHRcdFtsUGFybXMsIGJvZHldIDo9IHJlc3VsdFxyXG5cdFx0YWRkVHlwZSA6PSAocGFybTogc3RyaW5nKSA9PlxyXG5cdFx0XHRpZiAocGFybS5pbmRleE9mKCc6JykgPj0gMClcclxuXHRcdFx0XHRyZXR1cm4gcGFybVxyXG5cdFx0XHRlbHNlXHJcblx0XHRcdFx0cmV0dXJuIFwiI3twYXJtfTogdW5rbm93blwiXHJcblx0XHRwYXJtU3RyIDo9IGxQYXJtcy5tYXAoYWRkVHlwZSkuam9pbignLCAnKVxyXG5cdFx0cmV0dXJuIFwiY29uc3QgeDogI3t0eXBlU3RyfSA9ICgje3Bhcm1TdHJ9KSA9PiAje2JvZHl9XCJcclxuXHRlbHNlXHJcblx0XHRyZXR1cm4gXCJjb25zdCB4OiAje3R5cGVTdHJ9ID0gI3t2YWx1ZVN0cn1cIlxyXG5cclxuIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuXHJcbnR5cGUgc3BsaXRSZXN1bHQgPSBbc3RyaW5nW10sIHN0cmluZ11cclxuXHJcbmV4cG9ydCBzcGxpdEZ1bmNTdHIgOj0gKFxyXG5cdFx0dmFsdWVTdHI6IHN0cmluZ1xyXG5cdFx0KTogc3BsaXRSZXN1bHQ/ID0+XHJcblxyXG5cdGlmIGxNYXRjaGVzIDo9IHZhbHVlU3RyLm1hdGNoKC8vL15cclxuXHRcdFx0XFwoXHJcblx0XHRcdChbXlxcKV0qKVxyXG5cdFx0XHRcXCkgXFxzKiBbXFw9XFwtXVxcPlxyXG5cdFx0XHRcXHMqXHJcblx0XHRcdCguKilcclxuXHRcdFx0JC8vLylcclxuXHRcdFtfLCBzdHJQYXJtcywgc3RyQm9keV0gOj0gbE1hdGNoZXNcclxuXHRcdGlmIGlzRW1wdHkoc3RyUGFybXMpXHJcblx0XHRcdHJldHVybiBbW10sIHN0ckJvZHldXHJcblx0XHRlbHNlXHJcblx0XHRcdHJldHVybiBbXHJcblx0XHRcdFx0c3RyUGFybXMuc3BsaXQoJywnKS5tYXAoKHgpID0+IHgudHJpbSgpKVxyXG5cdFx0XHRcdHN0ckJvZHlcclxuXHRcdFx0XHRdXHJcblx0ZWxzZVxyXG5cdFx0cmV0dXJuIHVuZGVmXHJcblxyXG4jIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cclxuZXhwb3J0IGdldEltcG9ydENvZGUgOj0gKFxyXG5cdFx0dHlwZVN0cjogc3RyaW5nXHJcblx0XHQpOiBzdHJpbmcgPT5cclxuXHJcblx0REJHIFwiQ0FMTCBnZXRJbXBvcnRDb2RlKClcIlxyXG5cdGxTeW1ib2xzIDo9IGdldFN5bWJvbHNGcm9tVHlwZSh0eXBlU3RyKVxyXG5cdERCR1ZBTFVFICdsU3ltYm9scycsIGxTeW1ib2xzXHJcblx0aWYgbm9uRW1wdHkobFN5bWJvbHMpXHJcblx0XHRsU3RtdHMgOj0gZ2V0TmVlZGVkSW1wb3J0U3RtdHMobFN5bWJvbHMpXHJcblx0XHREQkdWQUxVRSAnbFN0bXRzJywgbFN0bXRzXHJcblx0XHRyZXR1cm4gbFN0bXRzLmpvaW4oJ1xcbicpXHJcblx0ZWxzZVxyXG5cdFx0cmV0dXJuICcnXHJcblxyXG4jIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cclxuZXhwb3J0IGdldFN5bWJvbHNGcm9tVHlwZSA6PSAodHlwZVN0cjogc3RyaW5nKTogc3RyaW5nW10gPT5cclxuXHJcblx0aWYgbE1hdGNoZXMgOj0gdHlwZVN0ci5tYXRjaCgvLy9eXHJcblx0XHRcdChbQS1aYS16XVtBLVphLXowLTkrXSopXHJcblx0XHRcdCg/OlxyXG5cdFx0XHRcdFxcPFxyXG5cdFx0XHRcdChbQS1aYS16XVtBLVphLXowLTkrXSopXHJcblx0XHRcdFx0XFw+XHJcblx0XHRcdFx0KT9cclxuXHRcdFx0JC8vLylcclxuXHRcdFtfLCB0eXBlLCBzdWJ0eXBlXSA6PSBsTWF0Y2hlc1xyXG5cdFx0cmV0dXJuIG5vbkVtcHR5KHN1YnR5cGUpID8gW3R5cGUsIHN1YnR5cGVdIDogW3R5cGVdXHJcblx0ZWxzZSBpZiBsTWF0Y2hlcyA6PSB0eXBlU3RyLm1hdGNoKC8vL15cclxuXHRcdFx0XFwoIFxcKSAgICAgICAgICAgICAgICAgICAgICAgICAjICgpXHJcblx0XHRcdFxccypcclxuXHRcdFx0XFw9IFxcPiAgICAgICAgICAgICAgICAgICAgICAgICAjID0+XHJcblx0XHRcdFxccypcclxuXHRcdFx0KFtBLVphLXpdW0EtWmEtejAtOStdKikgICAgICAgIyBhbiBpZGVudGlmaWVyXHJcblx0XHRcdCQvLy8pXHJcblx0XHRyZXR1cm4gW2xNYXRjaGVzWzFdXVxyXG5cdGVsc2VcclxuXHRcdHJldHVybiBbXVxyXG5cclxuIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuXHJcbmhEZWZDb25maWc6IENvbXBpbGVyT3B0aW9ucyA6PSB7XHJcblx0XCJhbGxvd0pzXCI6IGZhbHNlLFxyXG5cdFwiYWxsb3dVbWRHbG9iYWxBY2Nlc3NcIjogZmFsc2UsXHJcblx0XCJhbGxvd1VucmVhY2hhYmxlQ29kZVwiOiBmYWxzZSxcclxuXHRcImFsbG93VW51c2VkTGFiZWxzXCI6IGZhbHNlLFxyXG5cdFwiYWx3YXlzU3RyaWN0XCI6IHRydWUsXHJcblx0XCJhc3N1bWVDaGFuZ2VzT25seUFmZmVjdERpcmVjdERlcGVuZGVuY2llc1wiOiBmYWxzZSxcclxuXHRcImNoZWNrSnNcIjogZmFsc2UsXHJcblx0XCJjb21wb3NpdGVcIjogZmFsc2UsXHJcblx0XCJkZWNsYXJhdGlvblwiOiBmYWxzZSxcclxuXHRcImRlY2xhcmF0aW9uRGlyXCI6IHVuZGVmaW5lZCxcclxuXHRcImRlY2xhcmF0aW9uTWFwXCI6IGZhbHNlLFxyXG5cdFwiZW1pdEJPTVwiOiBmYWxzZSxcclxuXHRcImVtaXREZWNsYXJhdGlvbk9ubHlcIjogZmFsc2UsXHJcblx0XCJleGFjdE9wdGlvbmFsUHJvcGVydHlUeXBlc1wiOiBmYWxzZSxcclxuXHRcImV4cGVyaW1lbnRhbERlY29yYXRvcnNcIjogZmFsc2UsXHJcblx0XCJmb3JjZUNvbnNpc3RlbnRDYXNpbmdJbkZpbGVOYW1lc1wiOiB0cnVlLFxyXG5cdFwiZ2VuZXJhdGVDcHVQcm9maWxlXCI6IG51bGwsXHJcblx0XCJnZW5lcmF0ZVRyYWNlXCI6IG51bGwsXHJcblx0XCJpZ25vcmVEZXByZWNhdGlvbnNcIjogXCI1LjBcIixcclxuXHRcImltcG9ydEhlbHBlcnNcIjogZmFsc2UsXHJcblx0XCJpbmxpbmVTb3VyY2VNYXBcIjogZmFsc2UsXHJcblx0XCJpbmxpbmVTb3VyY2VzXCI6IGZhbHNlLFxyXG5cdFwiaXNvbGF0ZWRNb2R1bGVzXCI6IGZhbHNlLFxyXG4jXHRcImpzeFwiOiBcInJlYWN0LWpzeFwiLFxyXG4jXHRcImpzeEZhY3RvcnlcIjogXCJSZWFjdC5jcmVhdGVFbGVtZW50XCIsXHJcbiNcdFwianN4RnJhZ21lbnRGYWN0b3J5XCI6IFwiUmVhY3QuRnJhZ21lbnRcIixcclxuI1x0XCJqc3hJbXBvcnRTb3VyY2VcIjogXCJyZWFjdFwiLFxyXG5cdFwibGliXCI6IFtcclxuXHRcdFwiZXNuZXh0XCIsXHJcblx0XHRcImRvbVwiLFxyXG5cdFx0XCJkb20uaXRlcmFibGVcIlxyXG5cdF0sXHJcblx0XCJtYXBSb290XCI6IHVuZGVmaW5lZCxcclxuXHRcIm1heE5vZGVNb2R1bGVKc0RlcHRoXCI6IDAsXHJcblx0XCJtb2R1bGVcIjogTW9kdWxlS2luZC5FU05leHQsXHJcblx0XCJtb2R1bGVEZXRlY3Rpb25cIjogdW5kZWZpbmVkLFxyXG5cdFwibW9kdWxlUmVzb2x1dGlvblwiOiBNb2R1bGVSZXNvbHV0aW9uS2luZC5Ob2RlTmV4dCxcclxuXHRcIm5ld0xpbmVcIjogTmV3TGluZUtpbmQuTGluZUZlZWQsXHJcblx0XCJub0VtaXRcIjogdHJ1ZSxcclxuXHRcIm5vRW1pdEhlbHBlcnNcIjogZmFsc2UsXHJcblx0XCJub0VtaXRPbkVycm9yXCI6IGZhbHNlLFxyXG5cdFwibm9FcnJvclRydW5jYXRpb25cIjogZmFsc2UsXHJcblx0XCJub0ZhbGx0aHJvdWdoQ2FzZXNJblN3aXRjaFwiOiB0cnVlLFxyXG5cdFwibm9JbXBsaWNpdEFueVwiOiB0cnVlLFxyXG5cdFwibm9JbXBsaWNpdE92ZXJyaWRlXCI6IHRydWUsXHJcblx0XCJub0ltcGxpY2l0UmV0dXJuc1wiOiB0cnVlLFxyXG5cdFwibm9JbXBsaWNpdFRoaXNcIjogdHJ1ZSxcclxuXHRcIm5vUHJvcGVydHlBY2Nlc3NGcm9tSW5kZXhTaWduYXR1cmVcIjogdHJ1ZSxcclxuXHRcIm5vVW5jaGVja2VkSW5kZXhlZEFjY2Vzc1wiOiB0cnVlLFxyXG5cdFwibm9VbnVzZWRMb2NhbHNcIjogdHJ1ZSxcclxuXHRcIm5vVW51c2VkUGFyYW1ldGVyc1wiOiB0cnVlLFxyXG5cdFwib3V0RGlyXCI6IHVuZGVmaW5lZCxcclxuXHRcIm91dEZpbGVcIjogdW5kZWZpbmVkLFxyXG5cdFwicGF0aHNcIjoge30sXHJcblx0XCJwcmVzZXJ2ZUNvbnN0RW51bXNcIjogZmFsc2UsXHJcblx0XCJwcmVzZXJ2ZVN5bWxpbmtzXCI6IGZhbHNlLFxyXG5cdFwicHJlc2VydmVWYWx1ZUltcG9ydHNcIjogZmFsc2UsXHJcblx0XCJyZWFjdE5hbWVzcGFjZVwiOiBcIlJlYWN0XCIsXHJcblx0XCJyZW1vdmVDb21tZW50c1wiOiBmYWxzZSxcclxuXHRcInJlc29sdmVKc29uTW9kdWxlXCI6IHRydWUsXHJcblx0XCJyb290RGlyXCI6IHVuZGVmaW5lZCxcclxuXHRcInJvb3REaXJzXCI6IFtdLFxyXG5cdFwic2tpcERlZmF1bHRMaWJDaGVja1wiOiBmYWxzZSxcclxuXHRcInNraXBMaWJDaGVja1wiOiBmYWxzZSxcclxuXHRcInNvdXJjZU1hcFwiOiBmYWxzZSxcclxuXHRcInNvdXJjZVJvb3RcIjogdW5kZWZpbmVkLFxyXG5cdFwic3RyaWN0XCI6IHRydWUsXHJcblx0XCJzdHJpY3RCaW5kQ2FsbEFwcGx5XCI6IHRydWUsXHJcblx0XCJzdHJpY3RGdW5jdGlvblR5cGVzXCI6IHRydWUsXHJcblx0XCJzdHJpY3ROdWxsQ2hlY2tzXCI6IHRydWUsXHJcblx0XCJzdHJpY3RQcm9wZXJ0eUluaXRpYWxpemF0aW9uXCI6IHRydWUsXHJcblx0XCJzdHJpcEludGVybmFsXCI6IGZhbHNlLFxyXG5cdFwic3VwcHJlc3NFeGNlc3NQcm9wZXJ0eUVycm9yc1wiOiBmYWxzZSxcclxuXHRcInN1cHByZXNzSW1wbGljaXRBbnlJbmRleEVycm9yc1wiOiBmYWxzZSxcclxuXHRcInRhcmdldFwiOiBTY3JpcHRUYXJnZXQuRVMyMDIyLFxyXG5cdFwidHJhY2VSZXNvbHV0aW9uXCI6IGZhbHNlLFxyXG5cdFwidHNCdWlsZEluZm9GaWxlXCI6IHVuZGVmaW5lZCxcclxuXHRcInR5cGVSb290c1wiOiBbXSxcclxuXHRcInVzZURlZmluZUZvckNsYXNzRmllbGRzXCI6IHRydWUsXHJcblx0XCJ1c2VVbmtub3duSW5DYXRjaFZhcmlhYmxlc1wiOiB0cnVlXHJcblx0fVxyXG4iXX0=