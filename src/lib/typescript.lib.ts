"use strict";
// typescript.lib.civet

import {existsSync} from '@std/fs'
import {statSync} from 'node:fs'
import {
	SourceFile, Node, ScriptTarget, SyntaxKind, ModuleKind,
	NewLineKind, EmitHint, CompilerOptions, ModuleResolutionKind,
	createSourceFile, createPrinter, createProgram, transpileModule,
	getPreEmitDiagnostics, flattenDiagnosticMessageText,
	getLineAndCharacterOfPosition, forEachChild,
	} from "npm:typescript"
import {blue} from "@std/fmt/colors"

import {
	undef, defined, notdefined, integer, TStringGenerator,
	hash, hashof, isHash, TFilterFunc, isString,
	isEmpty, nonEmpty, TConstructor,
	} from 'datatypes'
import {
	truncStr, getOptions, spaces, o, OL, words,
	stringify,
	} from 'llutils'
import {indented} from 'indent'
import {
	LOG, DBG, LOGVALUE, INDENT, UNDENT, DBGVALUE,
	} from 'logger'
import {slurp, barf, barfTempFile} from 'fsys'
import {toNice, TMapFunc} from 'nice'
import {getCmdOutputSync} from 'exec'
import {stripSrcMap} from 'source-map'
import {getNeededImportStmts} from 'symbols'
import {Walker} from 'walker'

const decoder = new TextDecoder("utf-8")

// ---------------------------------------------------------------------------
// ---------------------------------------------------------------------------

type TExportDesc = {
	name: string
	kind?: string
	}

// ---------------------------------------------------------------------------

export const allExportsIn = function*(
		tsCode: string
		): Generator<TExportDesc, void, void> {

	yield {name: 'dummy'}
	return
}

// ---------------------------------------------------------------------------

export const allExportsInFile = function*(
		path: string
		): Generator<TExportDesc, void, void> {

	yield* allExportsIn(slurp(path))
	return
}

// ---------------------------------------------------------------------------
// ---------------------------------------------------------------------------

type TImportDesc = {
	name: string
	source: string
	}

// ---------------------------------------------------------------------------

export const allImportsIn = function*(
		tsCode: string
		): Generator<TImportDesc, void, void> {

	yield {name: 'dummy', source: 'dummy'}
	return
}

// ---------------------------------------------------------------------------

export const allImportsInFile = function*(
		path: string
		): Generator<TImportDesc, void, void> {

	yield* allImportsIn(slurp(path))
	return
}

// ---------------------------------------------------------------------------

export const kindStr = (i: number): string => {

	return SyntaxKind[i]
}

// ---------------------------------------------------------------------------

export const ts2ast = (
		tsCode: string,
		hOptions: hash = {}
		): SourceFile => {

	type opt = {
		fileName: string
		}
	const {fileName} = getOptions<opt>(hOptions, {
		fileName: 'temp.ts'
		})

	tsCode = stripSrcMap(tsCode)[0]
	const hAst = createSourceFile(fileName, tsCode, ScriptTarget.Latest)
	const filter: TFilterFunc = (x: unknown) => {
		return (
			   (typeof x === 'object')
			&& (x !== null)
			&& ('kind' in x)
			&& (typeof x.kind === 'number')
			)
	}
	return hAst
}

// ---------------------------------------------------------------------------

export const ast2ts = (node: SourceFile): string => {

	const printer = createPrinter({newLine: NewLineKind.LineFeed})
	return printer.printNode(EmitHint.Unspecified, node, node)
}

// ---------------------------------------------------------------------------

export const typeCheckFiles = (
		lFileNames: string | string[],
		hOptions: CompilerOptions = hDefConfig
		): string[] => {

	if (typeof lFileNames === 'string') {
		lFileNames = [lFileNames]
	}
	const program = createProgram(lFileNames, hOptions)
	const emitResult = program.emit()

	const lMsgs: string[] = []
	getPreEmitDiagnostics(program).forEach((diag) => {
		const {file, start, messageText} = diag
		const msg = flattenDiagnosticMessageText(messageText, "\n")
		if (file) {
			const {fileName} = file
			const {line, character} = getLineAndCharacterOfPosition(file, start!)
			lMsgs.push(`${fileName}:(${line+1}:${character+1}): ${msg}`)
		}
		else {
			lMsgs.push(msg)
		}
	})
	return lMsgs
}

export var typeCheckFile = typeCheckFiles   // --- synonym

// ---------------------------------------------------------------------------

export const tsMapFunc: TMapFunc = (
		key: string,
		val: unknown
		): unknown => {

	if ((key === 'kind') && (typeof val === 'number')) {
		return kindStr(val)
	}
	return val
}

// ---------------------------------------------------------------------------

export const astAsString = (
		hAst: SourceFile,
		hOptions: hash = {}
		): string => {

	return toNice(hAst, {
		ignoreEmptyKeys: true,
		mapFunc: tsMapFunc,
		lExclude: words(
			'pos end id flags modifierFlagsCache',
			'transformFlags hasExtendedUnicodeEscape',
			'numericLiteralFlags setExternalModuleIndicator',
			'languageVersion languageVariant jsDocParsingMode',
			'hasNoDefaultLib'
			)
		})
}

// ---------------------------------------------------------------------------

export const typeCheckCode = (
		tsCode: string
		): ((string[]) | undefined) => {

	// --- We must place the TypeScript file at the project root
	//     so that paths gotten from .symbols resolve correctly

	const path = "./_typecheck_.ts"
	barf(path, tsCode)
	const hResult = getCmdOutputSync('deno', [
			'check',
			'--import-map', 'import_map.jsonc',
			path
			])
	const {success, code, stdout, stderr} = hResult
	if (success && (code === 0)) {
		return []
	}
	else if (defined(stderr)) {
		return [stderr]
	}
	else {
		return ['Unknown error']
	}
}

// ---------------------------------------------------------------------------

export const checkType = (
		value: unknown,
		typeStr: string,
		expectSuccess: boolean = true
		): string[] => {

	DBG("CALL checkType():", INDENT)

	const tsCode = getTsCode(typeStr, stringify(value))
	DBGVALUE('tsCode', tsCode)

	// --- check if we need to import the type
	const importCode = getImportCode(typeStr)
	DBGVALUE('importCode', importCode)

	const code = `${importCode}\n${tsCode}`
	const lDiagnostics = typeCheckCode(code)
	if (expectSuccess && nonEmpty(lDiagnostics)) {
		LOG("typeCheckCode FAILED:")
		LOG("CODE:")
		LOG(code)
		LOGVALUE('lDiagnostics', lDiagnostics)
	}
	else if (!expectSuccess && isEmpty(lDiagnostics)) {
		LOG("typeCheckCode SUCCEEDED:")
		LOG("CODE:")
		LOG(code)
	}
	DBG(UNDENT)
	return lDiagnostics || []
}

// ---------------------------------------------------------------------------
// --- We need to add ':unknown' to any function parameters
//     that don't have an explicit type

export const getTsCode = (
		typeStr: string,
		valueStr: string
		): string => {

	DBGVALUE('typeStr', typeStr)
	DBGVALUE('valueStr', valueStr)
	const result = splitFuncStr(valueStr)
	if (defined(result)) {
		const [lParms, body] = result
		const addType = (parm: string) => {
			if (parm.indexOf(':') >= 0) {
				return parm
			}
			else {
				return `${parm}: unknown`
			}
		}
		const parmStr = lParms.map(addType).join(', ')
		return `const x: ${typeStr} = (${parmStr}) => ${body}`
	}
	else {
		return `const x: ${typeStr} = ${valueStr}`
	}
}

// ---------------------------------------------------------------------------

type splitResult = [string[], string]

export const splitFuncStr = (
		valueStr: string
		): (splitResult | undefined) => {

	let ref;if ((ref = valueStr.match(/^\(([^\)]*)\)\s*[\=\-]\>\s*(.*)$/))) {const lMatches = ref;
		const [_, strParms, strBody] = lMatches
		if (isEmpty(strParms)) {
			return [[], strBody]
		}
		else {
			return [
				strParms.split(',').map((x) => x.trim()),
				strBody
				]
		}
	}
	else {
		return undef
	}
}

// ---------------------------------------------------------------------------

export const getImportCode = (
		typeStr: string
		): string => {

	DBG("CALL getImportCode()")
	const lSymbols = getSymbolsFromType(typeStr)
	DBGVALUE('lSymbols', lSymbols)
	if (nonEmpty(lSymbols)) {
		const lStmts = getNeededImportStmts(lSymbols)
		DBGVALUE('lStmts', lStmts)
		return lStmts.join('\n')
	}
	else {
		return ''
	}
}

// ---------------------------------------------------------------------------

export const getSymbolsFromType = (typeStr: string): string[] => {

	let ref1;let ref2;if ((ref1 = typeStr.match(/^([A-Za-z][A-Za-z0-9+]*)(?:\<([A-Za-z][A-Za-z0-9+]*)\>)?$/))) {const lMatches = ref1;
		const [_, type, subtype] = lMatches
		return nonEmpty(subtype) ? [type, subtype] : [type]
	}
	else if ((ref2 = typeStr.match(/^\(\)\s*\=\>\s*([A-Za-z][A-Za-z0-9+]*)$/))) {const lMatches = ref2;
		return [lMatches[1]]
	}
	else {
		return []
	}
}

// ---------------------------------------------------------------------------

const hDefConfig: CompilerOptions = {
	"allowJs": false,
	"allowUmdGlobalAccess": false,
	"allowUnreachableCode": false,
	"allowUnusedLabels": false,
	"alwaysStrict": true,
	"assumeChangesOnlyAffectDirectDependencies": false,
	"checkJs": false,
	"composite": false,
	"declaration": false,
	"declarationDir": undefined,
	"declarationMap": false,
	"emitBOM": false,
	"emitDeclarationOnly": false,
	"exactOptionalPropertyTypes": false,
	"experimentalDecorators": false,
	"forceConsistentCasingInFileNames": true,
	"generateCpuProfile": null,
	"generateTrace": null,
	"ignoreDeprecations": "5.0",
	"importHelpers": false,
	"inlineSourceMap": false,
	"inlineSources": false,
	"isolatedModules": false,
//	"jsx": "react-jsx",
//	"jsxFactory": "React.createElement",
//	"jsxFragmentFactory": "React.Fragment",
//	"jsxImportSource": "react",
	"lib": [
		"esnext",
		"dom",
		"dom.iterable"
	],
	"mapRoot": undefined,
	"maxNodeModuleJsDepth": 0,
	"module": ModuleKind.ESNext,
	"moduleDetection": undefined,
	"moduleResolution": ModuleResolutionKind.NodeNext,
	"newLine": NewLineKind.LineFeed,
	"noEmit": true,
	"noEmitHelpers": false,
	"noEmitOnError": false,
	"noErrorTruncation": false,
	"noFallthroughCasesInSwitch": true,
	"noImplicitAny": true,
	"noImplicitOverride": true,
	"noImplicitReturns": true,
	"noImplicitThis": true,
	"noPropertyAccessFromIndexSignature": true,
	"noUncheckedIndexedAccess": true,
	"noUnusedLocals": true,
	"noUnusedParameters": true,
	"outDir": undefined,
	"outFile": undefined,
	"paths": {},
	"preserveConstEnums": false,
	"preserveSymlinks": false,
	"preserveValueImports": false,
	"reactNamespace": "React",
	"removeComments": false,
	"resolveJsonModule": true,
	"rootDir": undefined,
	"rootDirs": [],
	"skipDefaultLibCheck": false,
	"skipLibCheck": false,
	"sourceMap": false,
	"sourceRoot": undefined,
	"strict": true,
	"strictBindCallApply": true,
	"strictFunctionTypes": true,
	"strictNullChecks": true,
	"strictPropertyInitialization": true,
	"stripInternal": false,
	"suppressExcessPropertyErrors": false,
	"suppressImplicitAnyIndexErrors": false,
	"target": ScriptTarget.ES2022,
	"traceResolution": false,
	"tsBuildInfoFile": undefined,
	"typeRoots": [],
	"useDefineForClassFields": true,
	"useUnknownInCatchVariables": true
	}

// ---------------------------------------------------------------------------

export const getNodeObjectConstructorFunc = (): TConstructor<Node> => {

	const hAst = ts2ast("let x = 42;")
	const obj = hAst.statements[0]    // --- this is a NodeObject
	return obj.constructor as TConstructor<Node>
}

const nodeConstructor = getNodeObjectConstructorFunc()

// ---------------------------------------------------------------------------

export class AstWalker extends Walker<Node> {

	constructor() {

		super(nodeConstructor)
	}
}

//# sourceMappingURL=data:application/json;base64,