"use strict";
// typescript.lib.civet

import {cyan, blue} from "@std/fmt/colors"
import {existsSync} from '@std/fs'
import {statSync} from 'node:fs'
import {
	SourceFile, Node, ScriptTarget, SyntaxKind, ModuleKind,
	NewLineKind, EmitHint, CompilerOptions, ModuleResolutionKind,
	createSourceFile, createPrinter, createProgram, transpileModule,
	getPreEmitDiagnostics, flattenDiagnosticMessageText,
	getLineAndCharacterOfPosition, forEachChild,
	} from "npm:typescript"

import {
	undef, defined, notdefined, integer, TStringGenerator,
	hash, hashof, isHash, TFilterFunc, isString,
	isEmpty, nonEmpty, TConstructor, assert, croak,
	} from 'datatypes'
import {
	truncStr, getOptions, spaces, o, words,
	stringify, KeyedStringSet,
	} from 'llutils'
import {
	getString,
	} from 'extract'
import {OL} from 'to-nice'
import {indented} from 'indent'
import {
	LOG, DBG, LOGVALUE, INDENT, UNDENT, DBGVALUE,
	} from 'logger'
import {slurp, barf, barfTempFile, fileExt} from 'fsys'
import {toNice, TMapFunc} from 'to-nice'
import {getCmdOutputSync} from 'exec'
import {stripSrcMap} from 'source-map'
import {getNeededImportStmts} from 'symbols'
import {Walker} from 'walker'

const decoder = new TextDecoder("utf-8")

// ---------------------------------------------------------------------------

export const kindStr = (i: number): string => {

	return SyntaxKind[i]
}

// ---------------------------------------------------------------------------

export const ts2ast = (
		tsCode: string,
		hOptions: hash = {}
		): Node => {

	type opt = {
		fileName: string
		}
	const {fileName} = getOptions<opt>(hOptions, {
		fileName: 'temp.ts'
		})

	tsCode = stripSrcMap(tsCode)[0]
	const hAst = createSourceFile(fileName, tsCode, ScriptTarget.Latest)
	const filter: TFilterFunc = (x: unknown) => {
		return (
			   (typeof x === 'object')
			&& (x !== null)
			&& ('kind' in x)
			&& (typeof x.kind === 'number')
			)
	}
	return hAst
}

// ---------------------------------------------------------------------------

export const ast2ts = (node: Node): string => {

	assert((node.kind === 308), "Not a SourceFile node")
	const printer = createPrinter({newLine: NewLineKind.LineFeed})
	return printer.printNode(EmitHint.Unspecified, node, node as SourceFile)
}

// ---------------------------------------------------------------------------

export const typeCheckFiles = (
		lFileNames: string | string[],
		hOptions: CompilerOptions = hDefConfig
		): string[] => {

	if (typeof lFileNames === 'string') {
		lFileNames = [lFileNames]
	}
	const program = createProgram(lFileNames, hOptions)
	const emitResult = program.emit()

	const lMsgs: string[] = []
	getPreEmitDiagnostics(program).forEach((diag) => {
		const {file, start, messageText} = diag
		const msg = flattenDiagnosticMessageText(messageText, "\n")
		if (file) {
			const {fileName} = file
			const {line, character} = getLineAndCharacterOfPosition(file, start!)
			lMsgs.push(`${fileName}:(${line+1}:${character+1}): ${msg}`)
		}
		else {
			lMsgs.push(msg)
		}
	})
	return lMsgs
}

export var typeCheckFile = typeCheckFiles   // --- synonym

// ---------------------------------------------------------------------------

export const tsMapFunc: TMapFunc = (
		key: string,
		value: unknown,
		hParent: hash
		): unknown => {

	if ((key === 'kind') && (typeof value === 'number')) {
		const desc = cyan(' (' + kindStr(value) + ')')
		return value.toString() + desc
	}
	return undef
}

// ---------------------------------------------------------------------------

export const astAsString = (
		hAst: Node,
		hOptions: hash = {}
		): string => {

	return toNice(hAst, {
		ignoreEmptyValues: true,
		mapFunc: tsMapFunc,
		lInclude: hOptions.lInclude,
		lExclude: words(
			'pos end id flags modifierFlagsCache',
			'transformFlags hasExtendedUnicodeEscape',
			'numericLiteralFlags setExternalModuleIndicator',
			'languageVersion languageVariant jsDocParsingMode',
			'hasNoDefaultLib'
			)
		})
}

// ---------------------------------------------------------------------------

export const typeCheckCode = (
		tsCode: string
		): ((string[]) | undefined) => {

	// --- We must place the TypeScript file at the project root
	//     so that paths gotten from .symbols resolve correctly

	const path = "./_typecheck_.ts"
	barf(path, tsCode)
	const hResult = getCmdOutputSync('deno', [
			'check',
			'--import-map', 'import_map.jsonc',
			path
			])
	const {success, code, stdout, stderr} = hResult
	if (success && (code === 0)) {
		return []
	}
	else if (defined(stderr)) {
		return [stderr]
	}
	else {
		return ['Unknown error']
	}
}

// ---------------------------------------------------------------------------

export const checkType = (
		value: unknown,
		typeStr: string,
		expectSuccess: boolean = true
		): string[] => {

	DBG("CALL checkType():", INDENT)

	const tsCode = getTsCode(typeStr, stringify(value))
	DBGVALUE('tsCode', tsCode)

	// --- check if we need to import the type
	const importCode = getImportCode(typeStr)
	DBGVALUE('importCode', importCode)

	const code = `${importCode}\n${tsCode}`
	const lDiagnostics = typeCheckCode(code)
	if (expectSuccess && nonEmpty(lDiagnostics)) {
		LOG("typeCheckCode FAILED:")
		LOG("CODE:")
		LOG(code)
		LOGVALUE('lDiagnostics', lDiagnostics)
	}
	else if (!expectSuccess && isEmpty(lDiagnostics)) {
		LOG("typeCheckCode SUCCEEDED:")
		LOG("CODE:")
		LOG(code)
	}
	DBG(UNDENT)
	return lDiagnostics || []
}

// ---------------------------------------------------------------------------
// --- We need to add ':unknown' to any function parameters
//     that don't have an explicit type

export const getTsCode = (
		typeStr: string,
		valueStr: string
		): string => {

	DBGVALUE('typeStr', typeStr)
	DBGVALUE('valueStr', valueStr)
	const result = splitFuncStr(valueStr)
	if (defined(result)) {
		const [lParms, body] = result
		const addType = (parm: string) => {
			if (parm.indexOf(':') >= 0) {
				return parm
			}
			else {
				return `${parm}: unknown`
			}
		}
		const parmStr = lParms.map(addType).join(', ')
		return `const x: ${typeStr} = (${parmStr}) => ${body}`
	}
	else {
		return `const x: ${typeStr} = ${valueStr}`
	}
}

// ---------------------------------------------------------------------------

type splitResult = [string[], string]

export const splitFuncStr = (
		valueStr: string
		): (splitResult | undefined) => {

	let ref;if ((ref = valueStr.match(/^\(([^\)]*)\)\s*[\=\-]\>\s*(.*)$/))) {const lMatches = ref;
		const [_, strParms, strBody] = lMatches
		if (isEmpty(strParms)) {
			return [[], strBody]
		}
		else {
			return [
				strParms.split(',').map((x) => x.trim()),
				strBody
				]
		}
	}
	else {
		return undef
	}
}

// ---------------------------------------------------------------------------

export const getImportCode = (
		typeStr: string
		): string => {

	DBG("CALL getImportCode()")
	const lSymbols = getSymbolsFromType(typeStr)
	DBGVALUE('lSymbols', lSymbols)
	if (nonEmpty(lSymbols)) {
		const lStmts = getNeededImportStmts(lSymbols)
		DBGVALUE('lStmts', lStmts)
		return lStmts.join('\n')
	}
	else {
		return ''
	}
}

// ---------------------------------------------------------------------------

export const getSymbolsFromType = (typeStr: string): string[] => {

	let ref1;let ref2;if ((ref1 = typeStr.match(/^([A-Za-z][A-Za-z0-9+]*)(?:\<([A-Za-z][A-Za-z0-9+]*)\>)?$/))) {const lMatches = ref1;
		const [_, type, subtype] = lMatches
		return nonEmpty(subtype) ? [type, subtype] : [type]
	}
	else if ((ref2 = typeStr.match(/^\(\)\s*\=\>\s*([A-Za-z][A-Za-z0-9+]*)$/))) {const lMatches = ref2;
		return [lMatches[1]]
	}
	else {
		return []
	}
}

// ---------------------------------------------------------------------------

const hDefConfig: CompilerOptions = {
	"allowJs": false,
	"allowUmdGlobalAccess": false,
	"allowUnreachableCode": false,
	"allowUnusedLabels": false,
	"alwaysStrict": true,
	"assumeChangesOnlyAffectDirectDependencies": false,
	"checkJs": false,
	"composite": false,
	"declaration": false,
	"declarationDir": undefined,
	"declarationMap": false,
	"emitBOM": false,
	"emitDeclarationOnly": false,
	"exactOptionalPropertyTypes": false,
	"experimentalDecorators": false,
	"forceConsistentCasingInFileNames": true,
	"generateCpuProfile": null,
	"generateTrace": null,
	"ignoreDeprecations": "5.0",
	"importHelpers": false,
	"inlineSourceMap": false,
	"inlineSources": false,
	"isolatedModules": false,
//	"jsx": "react-jsx",
//	"jsxFactory": "React.createElement",
//	"jsxFragmentFactory": "React.Fragment",
//	"jsxImportSource": "react",
	"lib": [
		"esnext",
		"dom",
		"dom.iterable"
	],
	"mapRoot": undefined,
	"maxNodeModuleJsDepth": 0,
	"module": ModuleKind.ESNext,
	"moduleDetection": undefined,
	"moduleResolution": ModuleResolutionKind.NodeNext,
	"newLine": NewLineKind.LineFeed,
	"noEmit": true,
	"noEmitHelpers": false,
	"noEmitOnError": false,
	"noErrorTruncation": false,
	"noFallthroughCasesInSwitch": true,
	"noImplicitAny": true,
	"noImplicitOverride": true,
	"noImplicitReturns": true,
	"noImplicitThis": true,
	"noPropertyAccessFromIndexSignature": true,
	"noUncheckedIndexedAccess": true,
	"noUnusedLocals": true,
	"noUnusedParameters": true,
	"outDir": undefined,
	"outFile": undefined,
	"paths": {},
	"preserveConstEnums": false,
	"preserveSymlinks": false,
	"preserveValueImports": false,
	"reactNamespace": "React",
	"removeComments": false,
	"resolveJsonModule": true,
	"rootDir": undefined,
	"rootDirs": [],
	"skipDefaultLibCheck": false,
	"skipLibCheck": false,
	"sourceMap": false,
	"sourceRoot": undefined,
	"strict": true,
	"strictBindCallApply": true,
	"strictFunctionTypes": true,
	"strictNullChecks": true,
	"strictPropertyInitialization": true,
	"stripInternal": false,
	"suppressExcessPropertyErrors": false,
	"suppressImplicitAnyIndexErrors": false,
	"target": ScriptTarget.ES2022,
	"traceResolution": false,
	"tsBuildInfoFile": undefined,
	"typeRoots": [],
	"useDefineForClassFields": true,
	"useUnknownInCatchVariables": true
	}

// ---------------------------------------------------------------------------

type TAstFilterFunc = (node: Node) => boolean

export class AstWalker extends Walker<Node> {

	filterFunc: (TAstFilterFunc | undefined)

	// ..........................................................

	constructor(filterFunc1: (TAstFilterFunc | undefined) = undef) {

		super()

		this.filterFunc = filterFunc1;
	}

	// ..........................................................

	override isNode(x: object): x is Node {

		return Object.hasOwn(x, 'kind')
	}

	// ..........................................................

	override filter(node: Node): boolean {

		return defined(this.filterFunc) ? this.filterFunc(node) : true
	}
}

// ---------------------------------------------------------------------------

export type TAnalysis = {
	imports: KeyedStringSet
	exports: KeyedStringSet
	}

export const analyze = (tsCode: string): TAnalysis => {

	const imports = new KeyedStringSet()
	const exports = new KeyedStringSet()

	const walker = new AstWalker()
	const hAst = ts2ast(tsCode)
	DBG(astAsString(hAst))
	for (const node of walker.walk(hAst)) {
		LOG(`NODE KIND: ${node.kind}`)
		if (node.kind === 273) {
			const source = walker.getString('.moduleSpecifier.text')
			for (const h of walker.getArray('.importClause.namedBindings.elements')) {
				const name = getString(h, '.name.escapedText')
				imports.add(source, name)
			}
		}
		else if (node.kind === 95) {
			LOG("Found 95 node")
			const parent = walker.parent()
			const parentKind = parent.kind
			const lDeclarations = walker.getArray('^?.declarationList?.declarations')
			if (defined(lDeclarations)) {
				LOG("found export")
			}
		}
	}
	return {imports, exports}
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQzpcXFVzZXJzXFxqb2huZFxcdXRpbHNcXHNyY1xcbGliXFx0eXBlc2NyaXB0LmxpYi5jaXZldC50c3giLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcam9obmRcXHV0aWxzXFxzcmNcXGxpYlxcdHlwZXNjcmlwdC5saWIuY2l2ZXQiXSwibWFwcGluZ3MiOiI7QUFBQSx1QkFBc0I7QUFDdEIsQUFBQTtBQUNBLEFBQUEsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLGlCQUFpQjtBQUMxQyxBQUFBLEFBQUEsTUFBTSxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVM7QUFDbEMsQUFBQSxBQUFBLE1BQU0sQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLElBQUksQ0FBQyxTQUFTO0FBQ2hDLEFBQUEsQUFBQSxNQUFNLENBQUMsQ0FBQztBQUNSLENBQUMsVUFBVSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsWUFBWSxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsVUFBVSxDQUFDO0FBQ3hELENBQUMsV0FBVyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsZUFBZSxDQUFDLENBQUMsb0JBQW9CLENBQUM7QUFDOUQsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxDQUFDLGVBQWUsQ0FBQztBQUNqRSxDQUFDLHFCQUFxQixDQUFDLENBQUMsNEJBQTRCLENBQUM7QUFDckQsQ0FBQyw2QkFBNkIsQ0FBQyxDQUFDLFlBQVksQ0FBQztBQUM3QyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsZ0JBQWdCO0FBQ3hCLEFBQUE7QUFDQSxBQUFBLEFBQUEsTUFBTSxDQUFDLENBQUM7QUFDUixDQUFDLEtBQUssQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLGdCQUFnQixDQUFDO0FBQ3ZELENBQUMsSUFBSSxDQUFDLENBQUMsTUFBTSxD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QUUsQ0FBQyxDQUFBLENBQUE7QUFDM0IsQUFBQSxHQUFHLEdBQUcsQ0FBQSxBQUFDLGVBQWUsQ0FBQTtBQUN0QixBQUFBLEdBQVMsTUFBTixNQUFNLENBQUMsQ0FBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUM1QixBQUFBLEdBQWEsTUFBVixVQUFVLENBQUMsQ0FBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJO0FBQzVCLEFBQUEsR0FBZ0IsTUFBYixhQUFhLENBQUMsQ0FBRSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsa0NBQWtDLENBQUM7QUFDdkUsQUFBQSxHQUFHLEdBQUcsQ0FBQSxPQUFPLENBQUMsYUFBYSxDQUFDLENBQUEsQ0FBQSxDQUFBO0FBQzVCLEFBQUEsSUFBSSxHQUFHLENBQUEsQUFBQyxjQUFjLEM7R0FBQSxDO0VBQUEsQztDQUFBLENBQUE7QUFDdEIsQUFBQSxDQUFDLE1BQU0sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLE9BQU8sQztBQUFDLENBQUE7QUFDMUIiLCJuYW1lcyI6W10sInNvdXJjZXNDb250ZW50IjpbIiMgdHlwZXNjcmlwdC5saWIuY2l2ZXRcclxuXHJcbmltcG9ydCB7Y3lhbiwgYmx1ZX0gZnJvbSBcIkBzdGQvZm10L2NvbG9yc1wiXHJcbmltcG9ydCB7ZXhpc3RzU3luY30gZnJvbSAnQHN0ZC9mcydcclxuaW1wb3J0IHtzdGF0U3luY30gZnJvbSAnbm9kZTpmcydcclxuaW1wb3J0IHtcclxuXHRTb3VyY2VGaWxlLCBOb2RlLCBTY3JpcHRUYXJnZXQsIFN5bnRheEtpbmQsIE1vZHVsZUtpbmQsXHJcblx0TmV3TGluZUtpbmQsIEVtaXRIaW50LCBDb21waWxlck9wdGlvbnMsIE1vZHVsZVJlc29sdXRpb25LaW5kLFxyXG5cdGNyZWF0ZVNvdXJjZUZpbGUsIGNyZWF0ZVByaW50ZXIsIGNyZWF0ZVByb2dyYW0sIHRyYW5zcGlsZU1vZHVsZSxcclxuXHRnZXRQcmVFbWl0RGlhZ25vc3RpY3MsIGZsYXR0ZW5EaWFnbm9zdGljTWVzc2FnZVRleHQsXHJcblx0Z2V0TGluZUFuZENoYXJhY3Rlck9mUG9zaXRpb24sIGZvckVhY2hDaGlsZCxcclxuXHR9IGZyb20gXCJucG06dHlwZXNjcmlwdFwiXHJcblxyXG5pbXBvcnQge1xyXG5cdHVuZGVmLCBkZWZpbmVkLCBub3RkZWZpbmVkLCBpbnRlZ2VyLCBUU3RyaW5nR2VuZXJhdG9yLFxyXG5cdGhhc2gsIGhhc2hvZiwgaXNIYXNoLCBURmlsdGVyRnVuYywgaXNTdHJpbmcsXHJcblx0aXNFbXB0eSwgbm9uRW1wdHksIFRDb25zdHJ1Y3RvciwgYXNzZXJ0LCBjcm9hayxcclxuXHR9IGZyb20gJ2RhdGF0eXBlcydcclxuaW1wb3J0IHtcclxuXHR0cnVuY1N0ciwgZ2V0T3B0aW9ucywgc3BhY2VzLCBvLCB3b3JkcyxcclxuXHRzdHJpbmdpZnksIEtleWVkU3RyaW5nU2V0LFxyXG5cdH0gZnJvbSAnbGx1dGlscydcclxuaW1wb3J0IHtcclxuXHRnZXRTdHJpbmcsXHJcblx0fSBmcm9tICdleHRyYWN0J1xyXG5pbXBvcnQge09MfSBmcm9tICd0by1uaWNlJ1xyXG5pbXBvcnQge2luZGVudGVkfSBmcm9tICdpbmRlbnQnXHJcbmltcG9ydCB7XHJcblx0TE9HLCBEQkcsIExPR1ZBTFVFLCBJTkRFTlQsIFVOREVOVCwgREJHVkFMVUUsXHJcblx0fSBmcm9tICdsb2dnZXInXHJcbmltcG9ydCB7c2x1cnAsIGJhcmYsIGJhcmZUZW1wRmlsZSwgZmlsZUV4dH0gZnJvbSAnZnN5cydcclxuaW1wb3J0IHt0b05pY2UsIFRNYXBGdW5jfSBmcm9tICd0by1uaWNlJ1xyXG5pbXBvcnQge2dldENtZE91dHB1dFN5bmN9IGZyb20gJ2V4ZWMnXHJcbmltcG9ydCB7c3RyaXBTcmNNYXB9IGZyb20gJ3NvdXJjZS1tYXAnXHJcbmltcG9ydCB7Z2V0TmVlZGVkSW1wb3J0U3RtdHN9IGZyb20gJ3N5bWJvbHMnXHJcbmltcG9ydCB7V2Fsa2VyfSBmcm9tICd3YWxrZXInXHJcblxyXG5kZWNvZGVyIDo9IG5ldyBUZXh0RGVjb2RlcihcInV0Zi04XCIpXHJcblxyXG4jIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cclxuZXhwb3J0IGtpbmRTdHIgOj0gKGk6IG51bWJlcik6IHN0cmluZyA9PlxyXG5cclxuXHRyZXR1cm4gU3ludGF4S2luZFtpXVxyXG5cclxuIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuXHJcbmV4cG9ydCB0czJhc3QgOj0gKFxyXG5cdFx0dHNDb2RlOiBzdHJpbmcsXHJcblx0XHRoT3B0aW9uczogaGFzaCA9IHt9XHJcblx0XHQpOiBOb2RlID0+XHJcblxyXG5cdHR5cGUgb3B0ID0ge1xyXG5cdFx0ZmlsZU5hbWU6IHN0cmluZ1xyXG5cdFx0fVxyXG5cdHtmaWxlTmFtZX0gOj0gZ2V0T3B0aW9uczxvcHQ+IGhPcHRpb25zLCB7XHJcblx0XHRmaWxlTmFtZTogJ3RlbXAudHMnXHJcblx0XHR9XHJcblxyXG5cdHRzQ29kZSA9IHN0cmlwU3JjTWFwKHRzQ29kZSlbMF1cclxuXHRoQXN0IDo9IGNyZWF0ZVNvdXJjZUZpbGUoZmlsZU5hbWUsIHRzQ29kZSwgU2NyaXB0VGFyZ2V0LkxhdGVzdClcclxuXHRmaWx0ZXI6IFRGaWx0ZXJGdW5jIDo9ICh4OiB1bmtub3duKSA9PlxyXG5cdFx0cmV0dXJuIChcclxuXHRcdFx0ICAgKHR5cGVvZiB4ID09ICdvYmplY3QnKVxyXG5cdFx0XHQmJiAoeCAhPSBudWxsKVxyXG5cdFx0XHQmJiAoJ2tpbmQnIGluIHgpXHJcblx0XHRcdCYmICh0eXBlb2YgeC5raW5kID09ICdudW1iZXInKVxyXG5cdFx0XHQpXHJcblx0cmV0dXJuIGhBc3RcclxuXHJcbiMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblxyXG5leHBvcnQgYXN0MnRzIDo9IChub2RlOiBOb2RlKTogc3RyaW5nID0+XHJcblxyXG5cdGFzc2VydCAobm9kZS5raW5kID09IDMwOCksIFwiTm90IGEgU291cmNlRmlsZSBub2RlXCJcclxuXHRwcmludGVyIDo9IGNyZWF0ZVByaW50ZXIge25ld0xpbmU6IE5ld0xpbmVLaW5kLkxpbmVGZWVkfVxyXG5cdHJldHVybiBwcmludGVyLnByaW50Tm9kZSBFbWl0SGludC5VbnNwZWNpZmllZCwgbm9kZSwgbm9kZSBhcyBTb3VyY2VGaWxlXHJcblxyXG4jIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cclxuZXhwb3J0IHR5cGVDaGVja0ZpbGVzIDo9IChcclxuXHRcdGxGaWxlTmFtZXM6IHN0cmluZyB8IHN0cmluZ1tdLFxyXG5cdFx0aE9wdGlvbnM6IENvbXBpbGVyT3B0aW9ucyA9IGhEZWZDb25maWdcclxuXHRcdCk6IHN0cmluZ1tdID0+XHJcblxyXG5cdGlmICh0eXBlb2YgbEZpbGVOYW1lcyA9PSAnc3RyaW5nJylcclxuXHRcdGxGaWxlTmFtZXMgPSBbbEZpbGVOYW1lc11cclxuXHRwcm9ncmFtIDo9IGNyZWF0ZVByb2dyYW0obEZpbGVOYW1lcywgaE9wdGlvbnMpXHJcblx0ZW1pdFJlc3VsdCA6PSBwcm9ncmFtLmVtaXQoKVxyXG5cclxuXHRsTXNnczogc3RyaW5nW10gOj0gW11cclxuXHRnZXRQcmVFbWl0RGlhZ25vc3RpY3MocHJvZ3JhbSkuZm9yRWFjaCAoZGlhZykgPT5cclxuXHRcdHtmaWxlLCBzdGFydCwgbWVzc2FnZVRleHR9IDo9IGRpYWdcclxuXHRcdG1zZyA6PSBmbGF0dGVuRGlhZ25vc3RpY01lc3NhZ2VUZXh0IG1lc3NhZ2VUZXh0LCBcIlxcblwiXHJcblx0XHRpZiAoZmlsZSlcclxuXHRcdFx0e2ZpbGVOYW1lfSA6PSBmaWxlXHJcblx0XHRcdHtsaW5lLCBjaGFyYWN0ZXJ9IDo9IGdldExpbmVBbmRDaGFyYWN0ZXJPZlBvc2l0aW9uIGZpbGUsIHN0YXJ0IVxyXG5cdFx0XHRsTXNncy5wdXNoIFwiI3tmaWxlTmFtZX06KCN7bGluZSsxfToje2NoYXJhY3RlcisxfSk6ICN7bXNnfVwiXHJcblx0XHRlbHNlXHJcblx0XHRcdGxNc2dzLnB1c2ggbXNnXHJcblx0cmV0dXJuIGxNc2dzXHJcblxyXG5leHBvcnQgdHlwZUNoZWNrRmlsZSA9IHR5cGVDaGVja0ZpbGVzICAgIyAtLS0gc3lub255bVxyXG5cclxuIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuXHJcbmV4cG9ydCB0c01hcEZ1bmM6IFRNYXBGdW5jIDo9IChcclxuXHRcdGtleTogc3RyaW5nXHJcblx0XHR2YWx1ZTogdW5rbm93blxyXG5cdFx0aFBhcmVudDogaGFzaFxyXG5cdFx0KTogdW5rbm93biA9PlxyXG5cclxuXHRpZiAoa2V5ID09ICdraW5kJykgJiYgKHR5cGVvZiB2YWx1ZSA9PSAnbnVtYmVyJylcclxuXHRcdGRlc2MgOj0gY3lhbignICgnICsga2luZFN0cih2YWx1ZSkgKyAnKScpXHJcblx0XHRyZXR1cm4gdmFsdWUudG9TdHJpbmcoKSArIGRlc2NcclxuXHRyZXR1cm4gdW5kZWZcclxuXHJcbiMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblxyXG5leHBvcnQgYXN0QXNTdHJpbmcgOj0gKFxyXG5cdFx0aEFzdDogTm9kZVxyXG5cdFx0aE9wdGlvbnM6IGhhc2ggPSB7fVxyXG5cdFx0KTogc3RyaW5nID0+XHJcblxyXG5cdHJldHVybiB0b05pY2UgaEFzdCwge1xyXG5cdFx0aWdub3JlRW1wdHlWYWx1ZXM6IHRydWVcclxuXHRcdG1hcEZ1bmM6IHRzTWFwRnVuY1xyXG5cdFx0bEluY2x1ZGU6IGhPcHRpb25zLmxJbmNsdWRlXHJcblx0XHRsRXhjbHVkZTogd29yZHMoXHJcblx0XHRcdCdwb3MgZW5kIGlkIGZsYWdzIG1vZGlmaWVyRmxhZ3NDYWNoZSdcclxuXHRcdFx0J3RyYW5zZm9ybUZsYWdzIGhhc0V4dGVuZGVkVW5pY29kZUVzY2FwZSdcclxuXHRcdFx0J251bWVyaWNMaXRlcmFsRmxhZ3Mgc2V0RXh0ZXJuYWxNb2R1bGVJbmRpY2F0b3InXHJcblx0XHRcdCdsYW5ndWFnZVZlcnNpb24gbGFuZ3VhZ2VWYXJpYW50IGpzRG9jUGFyc2luZ01vZGUnXHJcblx0XHRcdCdoYXNOb0RlZmF1bHRMaWInXHJcblx0XHRcdClcclxuXHRcdH1cclxuXHJcbiMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblxyXG5leHBvcnQgdHlwZUNoZWNrQ29kZSA6PSAoXHJcblx0XHR0c0NvZGU6IHN0cmluZ1xyXG5cdFx0KTogc3RyaW5nW10/ID0+XHJcblxyXG5cdCMgLS0tIFdlIG11c3QgcGxhY2UgdGhlIFR5cGVTY3JpcHQgZmlsZSBhdCB0aGUgcHJvamVjdCByb290XHJcblx0IyAgICAgc28gdGhhdCBwYXRocyBnb3R0ZW4gZnJvbSAuc3ltYm9scyByZXNvbHZlIGNvcnJlY3RseVxyXG5cclxuXHRwYXRoIDo9IFwiLi9fdHlwZWNoZWNrXy50c1wiXHJcblx0YmFyZiBwYXRoLCB0c0NvZGVcclxuXHRoUmVzdWx0IDo9IGdldENtZE91dHB1dFN5bmMgJ2Rlbm8nLCBbXHJcblx0XHRcdCdjaGVjaycsXHJcblx0XHRcdCctLWltcG9ydC1tYXAnLCAnaW1wb3J0X21hcC5qc29uYycsXHJcblx0XHRcdHBhdGhcclxuXHRcdFx0XVxyXG5cdHtzdWNjZXNzLCBjb2RlLCBzdGRvdXQsIHN0ZGVycn0gOj0gaFJlc3VsdFxyXG5cdGlmIHN1Y2Nlc3MgJiYgKGNvZGUgPT0gMClcclxuXHRcdHJldHVybiBbXVxyXG5cdGVsc2UgaWYgZGVmaW5lZChzdGRlcnIpXHJcblx0XHRyZXR1cm4gW3N0ZGVycl1cclxuXHRlbHNlXHJcblx0XHRyZXR1cm4gWydVbmtub3duIGVycm9yJ11cclxuXHJcbiMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblxyXG5leHBvcnQgY2hlY2tUeXBlIDo9IChcclxuXHRcdHZhbHVlOiB1bmtub3duXHJcblx0XHR0eXBlU3RyOiBzdHJpbmdcclxuXHRcdGV4cGVjdFN1Y2Nlc3M6IGJvb2xlYW4gPSB0cnVlXHJcblx0XHQpOiBzdHJpbmdbXSA9PlxyXG5cclxuXHREQkcgXCJDQUxMIGNoZWNrVHlwZSgpOlwiLCBJTkRFTlRcclxuXHJcblx0dHNDb2RlIDo9IGdldFRzQ29kZSB0eXBlU3RyLCBzdHJpbmdpZnkodmFsdWUpXHJcblx0REJHVkFMVUUgJ3RzQ29kZScsIHRzQ29kZVxyXG5cclxuXHQjIC0tLSBjaGVjayBpZiB3ZSBuZWVkIHRvIGltcG9ydCB0aGUgdHlwZVxyXG5cdGltcG9ydENvZGUgOj0gZ2V0SW1wb3J0Q29kZSh0eXBlU3RyKVxyXG5cdERCR1ZBTFVFICdpbXBvcnRDb2RlJywgaW1wb3J0Q29kZVxyXG5cclxuXHRjb2RlIDo9IFwiI3tpbXBvcnRDb2RlfVxcbiN7dHNDb2RlfVwiXHJcblx0bERpYWdub3N0aWNzIDo9IHR5cGVDaGVja0NvZGUoY29kZSlcclxuXHRpZiBleHBlY3RTdWNjZXNzICYmIG5vbkVtcHR5KGxEaWFnbm9zdGljcylcclxuXHRcdExPRyBcInR5cGVDaGVja0NvZGUgRkFJTEVEOlwiXHJcblx0XHRMT0cgXCJDT0RFOlwiXHJcblx0XHRMT0cgY29kZVxyXG5cdFx0TE9HVkFMVUUgJ2xEaWFnbm9zdGljcycsIGxEaWFnbm9zdGljc1xyXG5cdGVsc2UgaWYgbm90IGV4cGVjdFN1Y2Nlc3MgJiYgaXNFbXB0eShsRGlhZ25vc3RpY3MpXHJcblx0XHRMT0cgXCJ0eXBlQ2hlY2tDb2RlIFNVQ0NFRURFRDpcIlxyXG5cdFx0TE9HIFwiQ09ERTpcIlxyXG5cdFx0TE9HIGNvZGVcclxuXHREQkcgVU5ERU5UXHJcblx0cmV0dXJuIGxEaWFnbm9zdGljcyB8fCBbXVxyXG5cclxuIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuIyAtLS0gV2UgbmVlZCB0byBhZGQgJzp1bmtub3duJyB0byBhbnkgZnVuY3Rpb24gcGFyYW1ldGVyc1xyXG4jICAgICB0aGF0IGRvbid0IGhhdmUgYW4gZXhwbGljaXQgdHlwZVxyXG5cclxuZXhwb3J0IGdldFRzQ29kZSA6PSAoXHJcblx0XHR0eXBlU3RyOiBzdHJpbmdcclxuXHRcdHZhbHVlU3RyOiBzdHJpbmdcclxuXHRcdCk6IHN0cmluZyA9PlxyXG5cclxuXHREQkdWQUxVRSAndHlwZVN0cicsIHR5cGVTdHJcclxuXHREQkdWQUxVRSAndmFsdWVTdHInLCB2YWx1ZVN0clxyXG5cdHJlc3VsdCA6PSBzcGxpdEZ1bmNTdHIodmFsdWVTdHIpXHJcblx0aWYgZGVmaW5lZChyZXN1bHQpXHJcblx0XHRbbFBhcm1zLCBib2R5XSA6PSByZXN1bHRcclxuXHRcdGFkZFR5cGUgOj0gKHBhcm06IHN0cmluZykgPT5cclxuXHRcdFx0aWYgKHBhcm0uaW5kZXhPZignOicpID49IDApXHJcblx0XHRcdFx0cmV0dXJuIHBhcm1cclxuXHRcdFx0ZWxzZVxyXG5cdFx0XHRcdHJldHVybiBcIiN7cGFybX06IHVua25vd25cIlxyXG5cdFx0cGFybVN0ciA6PSBsUGFybXMubWFwKGFkZFR5cGUpLmpvaW4oJywgJylcclxuXHRcdHJldHVybiBcImNvbnN0IHg6ICN7dHlwZVN0cn0gPSAoI3twYXJtU3RyfSkgPT4gI3tib2R5fVwiXHJcblx0ZWxzZVxyXG5cdFx0cmV0dXJuIFwiY29uc3QgeDogI3t0eXBlU3RyfSA9ICN7dmFsdWVTdHJ9XCJcclxuXHJcbiMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblxyXG50eXBlIHNwbGl0UmVzdWx0ID0gW3N0cmluZ1tdLCBzdHJpbmddXHJcblxyXG5leHBvcnQgc3BsaXRGdW5jU3RyIDo9IChcclxuXHRcdHZhbHVlU3RyOiBzdHJpbmdcclxuXHRcdCk6IHNwbGl0UmVzdWx0PyA9PlxyXG5cclxuXHRpZiBsTWF0Y2hlcyA6PSB2YWx1ZVN0ci5tYXRjaCgvLy9eXHJcblx0XHRcdFxcKFxyXG5cdFx0XHQoW15cXCldKilcclxuXHRcdFx0XFwpIFxccyogW1xcPVxcLV1cXD5cclxuXHRcdFx0XFxzKlxyXG5cdFx0XHQoLiopXHJcblx0XHRcdCQvLy8pXHJcblx0XHRbXywgc3RyUGFybXMsIHN0ckJvZHldIDo9IGxNYXRjaGVzXHJcblx0XHRpZiBpc0VtcHR5KHN0clBhcm1zKVxyXG5cdFx0XHRyZXR1cm4gW1tdLCBzdHJCb2R5XVxyXG5cdFx0ZWxzZVxyXG5cdFx0XHRyZXR1cm4gW1xyXG5cdFx0XHRcdHN0clBhcm1zLnNwbGl0KCcsJykubWFwKCh4KSA9PiB4LnRyaW0oKSlcclxuXHRcdFx0XHRzdHJCb2R5XHJcblx0XHRcdFx0XVxyXG5cdGVsc2VcclxuXHRcdHJldHVybiB1bmRlZlxyXG5cclxuIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuXHJcbmV4cG9ydCBnZXRJbXBvcnRDb2RlIDo9IChcclxuXHRcdHR5cGVTdHI6IHN0cmluZ1xyXG5cdFx0KTogc3RyaW5nID0+XHJcblxyXG5cdERCRyBcIkNBTEwgZ2V0SW1wb3J0Q29kZSgpXCJcclxuXHRsU3ltYm9scyA6PSBnZXRTeW1ib2xzRnJvbVR5cGUodHlwZVN0cilcclxuXHREQkdWQUxVRSAnbFN5bWJvbHMnLCBsU3ltYm9sc1xyXG5cdGlmIG5vbkVtcHR5KGxTeW1ib2xzKVxyXG5cdFx0bFN0bXRzIDo9IGdldE5lZWRlZEltcG9ydFN0bXRzKGxTeW1ib2xzKVxyXG5cdFx0REJHVkFMVUUgJ2xTdG10cycsIGxTdG10c1xyXG5cdFx0cmV0dXJuIGxTdG10cy5qb2luKCdcXG4nKVxyXG5cdGVsc2VcclxuXHRcdHJldHVybiAnJ1xyXG5cclxuIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuXHJcbmV4cG9ydCBnZXRTeW1ib2xzRnJvbVR5cGUgOj0gKHR5cGVTdHI6IHN0cmluZyk6IHN0cmluZ1tdID0+XHJcblxyXG5cdGlmIGxNYXRjaGVzIDo9IHR5cGVTdHIubWF0Y2goLy8vXlxyXG5cdFx0XHQoW0EtWmEtel1bQS1aYS16MC05K10qKVxyXG5cdFx0XHQoPzpcclxuXHRcdFx0XHRcXDxcclxuXHRcdFx0XHQoW0EtWmEtel1bQS1aYS16MC05K10qKVxyXG5cdFx0XHRcdFxcPlxyXG5cdFx0XHRcdCk/XHJcblx0XHRcdCQvLy8pXHJcblx0XHRbXywgdHlwZSwgc3VidHlwZV0gOj0gbE1hdGNoZXNcclxuXHRcdHJldHVybiBub25FbXB0eShzdWJ0eXBlKSA/IFt0eXBlLCBzdWJ0eXBlXSA6IFt0eXBlXVxyXG5cdGVsc2UgaWYgbE1hdGNoZXMgOj0gdHlwZVN0ci5tYXRjaCgvLy9eXHJcblx0XHRcdFxcKCBcXCkgICAgICAgICAgICAgICAgICAgICAgICAgIyAoKVxyXG5cdFx0XHRcXHMqXHJcblx0XHRcdFxcPSBcXD4gICAgICAgICAgICAgICAgICAgICAgICAgIyA9PlxyXG5cdFx0XHRcXHMqXHJcblx0XHRcdChbQS1aYS16XVtBLVphLXowLTkrXSopICAgICAgICMgYW4gaWRlbnRpZmllclxyXG5cdFx0XHQkLy8vKVxyXG5cdFx0cmV0dXJuIFtsTWF0Y2hlc1sxXV1cclxuXHRlbHNlXHJcblx0XHRyZXR1cm4gW11cclxuXHJcbiMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblxyXG5oRGVmQ29uZmlnOiBDb21waWxlck9wdGlvbnMgOj0ge1xyXG5cdFwiYWxsb3dKc1wiOiBmYWxzZSxcclxuXHRcImFsbG93VW1kR2xvYmFsQWNjZXNzXCI6IGZhbHNlLFxyXG5cdFwiYWxsb3dVbnJlYWNoYWJsZUNvZGVcIjogZmFsc2UsXHJcblx0XCJhbGxvd1VudXNlZExhYmVsc1wiOiBmYWxzZSxcclxuXHRcImFsd2F5c1N0cmljdFwiOiB0cnVlLFxyXG5cdFwiYXNzdW1lQ2hhbmdlc09ubHlBZmZlY3REaXJlY3REZXBlbmRlbmNpZXNcIjogZmFsc2UsXHJcblx0XCJjaGVja0pzXCI6IGZhbHNlLFxyXG5cdFwiY29tcG9zaXRlXCI6IGZhbHNlLFxyXG5cdFwiZGVjbGFyYXRpb25cIjogZmFsc2UsXHJcblx0XCJkZWNsYXJhdGlvbkRpclwiOiB1bmRlZmluZWQsXHJcblx0XCJkZWNsYXJhdGlvbk1hcFwiOiBmYWxzZSxcclxuXHRcImVtaXRCT01cIjogZmFsc2UsXHJcblx0XCJlbWl0RGVjbGFyYXRpb25Pbmx5XCI6IGZhbHNlLFxyXG5cdFwiZXhhY3RPcHRpb25hbFByb3BlcnR5VHlwZXNcIjogZmFsc2UsXHJcblx0XCJleHBlcmltZW50YWxEZWNvcmF0b3JzXCI6IGZhbHNlLFxyXG5cdFwiZm9yY2VDb25zaXN0ZW50Q2FzaW5nSW5GaWxlTmFtZXNcIjogdHJ1ZSxcclxuXHRcImdlbmVyYXRlQ3B1UHJvZmlsZVwiOiBudWxsLFxyXG5cdFwiZ2VuZXJhdGVUcmFjZVwiOiBudWxsLFxyXG5cdFwiaWdub3JlRGVwcmVjYXRpb25zXCI6IFwiNS4wXCIsXHJcblx0XCJpbXBvcnRIZWxwZXJzXCI6IGZhbHNlLFxyXG5cdFwiaW5saW5lU291cmNlTWFwXCI6IGZhbHNlLFxyXG5cdFwiaW5saW5lU291cmNlc1wiOiBmYWxzZSxcclxuXHRcImlzb2xhdGVkTW9kdWxlc1wiOiBmYWxzZSxcclxuI1x0XCJqc3hcIjogXCJyZWFjdC1qc3hcIixcclxuI1x0XCJqc3hGYWN0b3J5XCI6IFwiUmVhY3QuY3JlYXRlRWxlbWVudFwiLFxyXG4jXHRcImpzeEZyYWdtZW50RmFjdG9yeVwiOiBcIlJlYWN0LkZyYWdtZW50XCIsXHJcbiNcdFwianN4SW1wb3J0U291cmNlXCI6IFwicmVhY3RcIixcclxuXHRcImxpYlwiOiBbXHJcblx0XHRcImVzbmV4dFwiLFxyXG5cdFx0XCJkb21cIixcclxuXHRcdFwiZG9tLml0ZXJhYmxlXCJcclxuXHRdLFxyXG5cdFwibWFwUm9vdFwiOiB1bmRlZmluZWQsXHJcblx0XCJtYXhOb2RlTW9kdWxlSnNEZXB0aFwiOiAwLFxyXG5cdFwibW9kdWxlXCI6IE1vZHVsZUtpbmQuRVNOZXh0LFxyXG5cdFwibW9kdWxlRGV0ZWN0aW9uXCI6IHVuZGVmaW5lZCxcclxuXHRcIm1vZHVsZVJlc29sdXRpb25cIjogTW9kdWxlUmVzb2x1dGlvbktpbmQuTm9kZU5leHQsXHJcblx0XCJuZXdMaW5lXCI6IE5ld0xpbmVLaW5kLkxpbmVGZWVkLFxyXG5cdFwibm9FbWl0XCI6IHRydWUsXHJcblx0XCJub0VtaXRIZWxwZXJzXCI6IGZhbHNlLFxyXG5cdFwibm9FbWl0T25FcnJvclwiOiBmYWxzZSxcclxuXHRcIm5vRXJyb3JUcnVuY2F0aW9uXCI6IGZhbHNlLFxyXG5cdFwibm9GYWxsdGhyb3VnaENhc2VzSW5Td2l0Y2hcIjogdHJ1ZSxcclxuXHRcIm5vSW1wbGljaXRBbnlcIjogdHJ1ZSxcclxuXHRcIm5vSW1wbGljaXRPdmVycmlkZVwiOiB0cnVlLFxyXG5cdFwibm9JbXBsaWNpdFJldHVybnNcIjogdHJ1ZSxcclxuXHRcIm5vSW1wbGljaXRUaGlzXCI6IHRydWUsXHJcblx0XCJub1Byb3BlcnR5QWNjZXNzRnJvbUluZGV4U2lnbmF0dXJlXCI6IHRydWUsXHJcblx0XCJub1VuY2hlY2tlZEluZGV4ZWRBY2Nlc3NcIjogdHJ1ZSxcclxuXHRcIm5vVW51c2VkTG9jYWxzXCI6IHRydWUsXHJcblx0XCJub1VudXNlZFBhcmFtZXRlcnNcIjogdHJ1ZSxcclxuXHRcIm91dERpclwiOiB1bmRlZmluZWQsXHJcblx0XCJvdXRGaWxlXCI6IHVuZGVmaW5lZCxcclxuXHRcInBhdGhzXCI6IHt9LFxyXG5cdFwicHJlc2VydmVDb25zdEVudW1zXCI6IGZhbHNlLFxyXG5cdFwicHJlc2VydmVTeW1saW5rc1wiOiBmYWxzZSxcclxuXHRcInByZXNlcnZlVmFsdWVJbXBvcnRzXCI6IGZhbHNlLFxyXG5cdFwicmVhY3ROYW1lc3BhY2VcIjogXCJSZWFjdFwiLFxyXG5cdFwicmVtb3ZlQ29tbWVudHNcIjogZmFsc2UsXHJcblx0XCJyZXNvbHZlSnNvbk1vZHVsZVwiOiB0cnVlLFxyXG5cdFwicm9vdERpclwiOiB1bmRlZmluZWQsXHJcblx0XCJyb290RGlyc1wiOiBbXSxcclxuXHRcInNraXBEZWZhdWx0TGliQ2hlY2tcIjogZmFsc2UsXHJcblx0XCJza2lwTGliQ2hlY2tcIjogZmFsc2UsXHJcblx0XCJzb3VyY2VNYXBcIjogZmFsc2UsXHJcblx0XCJzb3VyY2VSb290XCI6IHVuZGVmaW5lZCxcclxuXHRcInN0cmljdFwiOiB0cnVlLFxyXG5cdFwic3RyaWN0QmluZENhbGxBcHBseVwiOiB0cnVlLFxyXG5cdFwic3RyaWN0RnVuY3Rpb25UeXBlc1wiOiB0cnVlLFxyXG5cdFwic3RyaWN0TnVsbENoZWNrc1wiOiB0cnVlLFxyXG5cdFwic3RyaWN0UHJvcGVydHlJbml0aWFsaXphdGlvblwiOiB0cnVlLFxyXG5cdFwic3RyaXBJbnRlcm5hbFwiOiBmYWxzZSxcclxuXHRcInN1cHByZXNzRXhjZXNzUHJvcGVydHlFcnJvcnNcIjogZmFsc2UsXHJcblx0XCJzdXBwcmVzc0ltcGxpY2l0QW55SW5kZXhFcnJvcnNcIjogZmFsc2UsXHJcblx0XCJ0YXJnZXRcIjogU2NyaXB0VGFyZ2V0LkVTMjAyMixcclxuXHRcInRyYWNlUmVzb2x1dGlvblwiOiBmYWxzZSxcclxuXHRcInRzQnVpbGRJbmZvRmlsZVwiOiB1bmRlZmluZWQsXHJcblx0XCJ0eXBlUm9vdHNcIjogW10sXHJcblx0XCJ1c2VEZWZpbmVGb3JDbGFzc0ZpZWxkc1wiOiB0cnVlLFxyXG5cdFwidXNlVW5rbm93bkluQ2F0Y2hWYXJpYWJsZXNcIjogdHJ1ZVxyXG5cdH1cclxuXHJcbiMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblxyXG50eXBlIFRBc3RGaWx0ZXJGdW5jID0gKG5vZGU6IE5vZGUpID0+IGJvb2xlYW5cclxuXHJcbmV4cG9ydCBjbGFzcyBBc3RXYWxrZXIgZXh0ZW5kcyBXYWxrZXI8Tm9kZT5cclxuXHJcblx0ZmlsdGVyRnVuYzogVEFzdEZpbHRlckZ1bmM/XHJcblxyXG5cdCMgLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLlxyXG5cclxuXHRjb25zdHJ1Y3RvcihAZmlsdGVyRnVuYzogVEFzdEZpbHRlckZ1bmM/ID0gdW5kZWYpXHJcblxyXG5cdFx0c3VwZXIoKVxyXG5cclxuXHQjIC4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi5cclxuXHJcblx0b3ZlcnJpZGUgaXNOb2RlKHg6IG9iamVjdCk6IHggaXMgTm9kZVxyXG5cclxuXHRcdHJldHVybiBPYmplY3QuaGFzT3duIHgsICdraW5kJ1xyXG5cclxuXHQjIC4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi5cclxuXHJcblx0b3ZlcnJpZGUgZmlsdGVyKG5vZGU6IE5vZGUpOiBib29sZWFuXHJcblxyXG5cdFx0cmV0dXJuIGRlZmluZWQoQGZpbHRlckZ1bmMpID8gQGZpbHRlckZ1bmMobm9kZSkgOiB0cnVlXHJcblxyXG4jIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cclxuZXhwb3J0IHR5cGUgVEFuYWx5c2lzID0ge1xyXG5cdGltcG9ydHM6IEtleWVkU3RyaW5nU2V0XHJcblx0ZXhwb3J0czogS2V5ZWRTdHJpbmdTZXRcclxuXHR9XHJcblxyXG5leHBvcnQgYW5hbHl6ZSA6PSAodHNDb2RlOiBzdHJpbmcpOiBUQW5hbHlzaXMgPT5cclxuXHJcblx0aW1wb3J0cyA6PSBuZXcgS2V5ZWRTdHJpbmdTZXQoKVxyXG5cdGV4cG9ydHMgOj0gbmV3IEtleWVkU3RyaW5nU2V0KClcclxuXHJcblx0d2Fsa2VyIDo9IG5ldyBBc3RXYWxrZXIoKVxyXG5cdGhBc3QgOj0gdHMyYXN0IHRzQ29kZVxyXG5cdERCRyBhc3RBc1N0cmluZyhoQXN0KVxyXG5cdGZvciBub2RlIG9mIHdhbGtlci53YWxrIGhBc3RcclxuXHRcdExPRyBcIk5PREUgS0lORDogI3tub2RlLmtpbmR9XCJcclxuXHRcdGlmIChub2RlLmtpbmQgPT0gMjczKVxyXG5cdFx0XHRzb3VyY2UgOj0gd2Fsa2VyLmdldFN0cmluZygnLm1vZHVsZVNwZWNpZmllci50ZXh0JylcclxuXHRcdFx0Zm9yIGggb2Ygd2Fsa2VyLmdldEFycmF5KCcuaW1wb3J0Q2xhdXNlLm5hbWVkQmluZGluZ3MuZWxlbWVudHMnKVxyXG5cdFx0XHRcdG5hbWUgOj0gZ2V0U3RyaW5nIGgsICcubmFtZS5lc2NhcGVkVGV4dCdcclxuXHRcdFx0XHRpbXBvcnRzLmFkZCBzb3VyY2UsIG5hbWVcclxuXHRcdGVsc2UgaWYgKG5vZGUua2luZCA9PSA5NSlcclxuXHRcdFx0TE9HIFwiRm91bmQgOTUgbm9kZVwiXHJcblx0XHRcdHBhcmVudCA6PSB3YWxrZXIucGFyZW50KClcclxuXHRcdFx0cGFyZW50S2luZCA6PSBwYXJlbnQua2luZFxyXG5cdFx0XHRsRGVjbGFyYXRpb25zIDo9IHdhbGtlci5nZXRBcnJheSgnXj8uZGVjbGFyYXRpb25MaXN0Py5kZWNsYXJhdGlvbnMnKVxyXG5cdFx0XHRpZiBkZWZpbmVkKGxEZWNsYXJhdGlvbnMpXHJcblx0XHRcdFx0TE9HIFwiZm91bmQgZXhwb3J0XCJcclxuXHRyZXR1cm4ge2ltcG9ydHMsIGV4cG9ydHN9XHJcbiJdfQ==