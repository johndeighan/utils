"use strict";
// typescript.lib.civet

import {
	CompilerOptions, createProgram, createSourceFile,
	getPreEmitDiagnostics, createPrinter, EmitHint,
	getLineAndCharacterOfPosition, flattenDiagnosticMessageText,
	ScriptTarget, ModuleKind, SourceFile, Diagnostic,
	Node, SyntaxKind, forEachChild, NewLineKind,
	} from "typescript"

import {
	undef, defined, notdefined, assert, hash,
	isString, isNumber, isBoolean, isPrimitive, isArray,
	stringify,
	} from './datatypes.lib.ts'
import {
	croak, pass, keys, hasKey, hasKeys, truncStr, OL, spaces,
	NodeGenerator, getOptions, o,
	} from './llutils.lib.ts'
import {
	DBG, LOG, WARN, ERR, DBGVALUE, LOGVALUE,
	pushLogLevel, popLogLevel,
	} from './logger.lib.ts'
import {
	isFile, fileExt, withExt, slurp, barf,
	} from './fs.lib.ts'
import {
	execCmdSync,
	} from './exec.lib.ts'
import {hDefConfig} from './ts.config.ts'

// ---------------------------------------------------------------------------

/**
 * ts2ast() - convert TypeScript code to an AST
 */

export const ts2ast = (tsCode: string): SourceFile => {

	return createSourceFile("x.ts", tsCode, ScriptTarget.Latest)
}

// ---------------------------------------------------------------------------

export const ast2ts = (node: SourceFile): string => {

	const printer = createPrinter({newLine: NewLineKind.LineFeed})
	const result = printer.printNode(EmitHint.Unspecified, node, node)
	return result
}

// ---------------------------------------------------------------------------

export const typeCheckFiles = (
	lFileNames: string | string[],
	hOptions: CompilerOptions = hDefConfig
	): string[] => {

	DBGVALUE('lFileNames', lFileNames)
	DBGVALUE('hOptions', hOptions)

	if (isString(lFileNames)) {
		lFileNames = [lFileNames]
	}
	const program = createProgram(lFileNames, hOptions)
	const emitResult = program.emit()

	const lMsgs: string[] = []
	getPreEmitDiagnostics(program).forEach((diag) => {
		const {file, start, messageText} = diag
		const msg = flattenDiagnosticMessageText(messageText, "\n")
		if (file) {
			const {fileName} = file
			const {line, character} = getLineAndCharacterOfPosition(file, start!)
			lMsgs.push(`${fileName}:(${line+1}:${character+1}): ${msg}`)
		}
		else {
			lMsgs.push(msg)
		}
	})
	return lMsgs
}

export var typeCheckFile = typeCheckFiles   // --- synonym

// ---------------------------------------------------------------------------

export const pprintNode = (
		source: SourceFile,
		node: Node,
		depth: number
		) => {

	const kind = SyntaxKind[node.kind]
	const text = node.getText(source).replaceAll('\n', '\\n')
	const pre = spaces(3 * depth)
	return `${pre}${kind} - '${truncStr(text, 32)}'`
}

// ---------------------------------------------------------------------------

export const pprintAST = (source: SourceFile, pprint=pprintNode): string => {

	const lLines: string[] = []

	const traverse = (node: Node, depth=0): void => {
		lLines.push(pprint(source, node, depth))
		forEachChild(node, (childNode) => traverse(childNode, depth + 1))
		return
	}

	traverse(source)
	return lLines.join('\n')
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,