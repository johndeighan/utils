"use strict";
// v8-stack.lib.civet

import {sprintf} from '@std/fmt/printf'

import {
	undef, defined, notdefined, assert, croak,
	isEmpty, nonEmpty, hash,
	isString, isNonEmptyString, isInteger,
	} from 'datatypes'
import {OL, ML, rpad, centered} from 'llutils'
import {DBG, LOG, WARN, ERR, INDENT, UNDENT} from 'logger'
import {
	isFile, mkpath, fileExt, withExt,
	normalizePath, relpath,
	} from 'fsys'
import {
	mapSourcePos,
	} from 'source-map'

const width = 40

// ---------------------------------------------------------------------------

export type TFrameType = 'eval'|'native'|'constructor'|'method'|'function'|'script'|'unknown'

export type TStackFrame = {
	type: TFrameType
	fileName: string      // source file name
	line: number
	column: number
	name: string        // name of function or method
	isConstructor: boolean
	isAsync: boolean
	objType?: string    // --- if type == 'method'
	}

// ---------------------------------------------------------------------------

/**
 * Get the runtime stack from the v8 engine
 * ignores any stack frames from this module
 * files will be mapped to original source files
 * 	if a source map is available
 */

export const getV8Stack = (): TStackFrame[] => {
	// --- ignores any stack frames from this module
	//     files will be mapped to original source files
	//        if a source map is available

	try {
		// @ts-ignore
		const oldLimit = Error.stackTraceLimit

		// @ts-ignore
		const oldPreparer = Error.prepareStackTrace

		// @ts-ignore
		Error.stackTraceLimit = Infinity

		// @ts-ignore
		Error.prepareStackTrace = (error, lFrames) => {
			const lResultFrames: TStackFrame[] = []
			DBG(`getV8Stack(): ${lFrames.length} stack frames`)
			let i1 = 0;for (const frame of lFrames) {const i = i1++;

				DBG(`FRAME ${i}`, INDENT)

				// --- Call functions on the frame
				const fileName: string = frame.getFileName() || 'unknown'
				const functionName     = frame.getFunctionName()
				const functionObj      = frame.getFunction()
				const methodName       = frame.getMethodName()
				const line             = frame.getLineNumber()
				const column           = frame.getColumnNumber()
				const isTopLevel       = frame.isToplevel()
				const isAsync          = frame.isAsync()
				const isEval           = frame.isEval()
				const isNative         = frame.isNative()
				const isConstructor    = frame.isConstructor()
				const typeName         = frame.getTypeName()

				DBG(centered('from V8', width, '-'))
				DBG(`fileName = ${OL(fileName)}`)
				DBG(`functionName = ${OL(functionName)}`)
				DBG(`defined(functionObj) = ${OL(defined(functionObj))}`)
				DBG(`methodName = ${OL(methodName)}`)
				DBG(`line = ${OL(line)}`)
				DBG(`column = ${OL(column)}`)
				DBG(`isTopLevel = ${OL(isTopLevel)}`)
				DBG(`isAsync = ${OL(isAsync)}`)
				DBG(`isEval = ${OL(isEval)}`)
				DBG(`isNative = ${OL(isNative)}`)
				DBG(`isConstructor = ${OL(isConstructor)}`)
				DBG(`typeName = ${OL(typeName)}`)
				DBG('-'.repeat(width))

				if (fileName.match(/v8-stack\.lib\.[A-Za-z0-9_]+$/)) {
					DBG(`SKIP: fileName = '${fileName}'`, UNDENT)
					continue
				}

				const h: TStackFrame = {
					type: (
						  isEval                ? 'eval'
						: isNative              ? 'native'
						: isConstructor         ? 'constructor'
						: defined(methodName)   ? 'method'
						: defined(functionName) ? 'function'
						: isTopLevel            ? 'script'
						:                         'unknown'
						),
					fileName,
					line,
					column,
					name: (
						  isString(functionName) ? functionName
						: defined(functionObj)   ? '<anon>'
						: isString(methodName)   ? methodName
						:                         ''
						),
					isConstructor,
					isAsync,
					...(defined(methodName) && {objType: typeName})
					}

				// --- fix a bug in the V8 engine where calls inside a
				//     top level anonymous function is reported as
				//     being from the top level, i.e. type 'script'

				const tos = lResultFrames.at(-1)    // --- i.e. previous frame
				if (tos !== undef) {
					if ((h.type === 'script') && (tos.type === 'script')) {
						DBG(`Patch current TOS (currently ${lResultFrames.length} frames)`)
						tos.type = 'function'
						tos.name = '<anon>'
					}
				}

				DBG(centered('return frame', width, '-'))
				DBG(ML(h))
				DBG('-'.repeat(width))

				// --- Ignore this entry and any before it
				if (h.objType === 'ModuleJob') {
					DBG("objType is 'ModuleJob' - stop processing")
					break
				}

				lResultFrames.push(h)
				DBG(UNDENT)
			}

			DBG('-'.repeat(width))
			return lResultFrames
		}

		const errObj = new Error()

		// @ts-ignore - because errObj.stack will be an array
		const lStack: TStackFrame[] = errObj.stack || []

		// --- reset to previous values

		// @ts-ignore
		Error.stackTraceLimit = oldLimit

		// @ts-ignore
		Error.prepareStackTrace = oldPreparer

		for (const h of lStack) {
			DBG(`before mapping, h = ${ML(h)}`)
			const {fileName, line, column, name, type} = h
			const hNew = mapSourcePos({
				path: fileName,
				line,
				column
				})
			const newExt = fileExt(hNew.path)
			if (newExt === fileExt(h.fileName)) {
				DBG("Not mapped - returning original position")
				h.fileName = relpath(h.fileName)
			}
			else {
				DBG(`Mapped, hNew = ${ML(hNew)}`)
				h.fileName = relpath(withExt(h.fileName, newExt))
				h.line = hNew.line
				h.column = hNew.column
				DBG(`after mapping, h = ${ML(h)}`)
			}
		}

		return lStack
	}
	catch (e) {
		// @ts-ignore
		ERR(e.message)
		return []
	}
}

// ---------------------------------------------------------------------------

export const getV8StackStr = (): string => {

	const lLines = getV8Stack().map((h) => {
		const {type, name, fileName, line, column} = h
		let ref;
			if (name) {
				ref = sprintf("%-18s", `${type} ${name}`)
			}
			else {
				ref = sprintf("%-18s", `${type}`)
			};const nameStr =ref
		return `[${nameStr}] ${fileName}:${line}:${column}`
	}
		)
	return lLines.join('\n')
}

// ---------------------------------------------------------------------------

/**
 * Get the current function's caller
 */

export const getMyCaller = (): (TStackFrame | undefined) => {

	try {
		const lStack = getV8Stack()
		if (defined(lStack) && (lStack.length > 0)) {
			return lStack[1]
		}
		else {
			return undef
		}
	}
	catch (err) {
		if (err instanceof Error) {
			LOG(`ERROR in getV8Stack(): ${err.message}`)
		}
		return undef
	}
}

// ---------------------------------------------------------------------------

/**
 * Get the current function's caller, ignoring any calls
 * from the same module
 */

export const getMyOutsideCaller = (): (TStackFrame | undefined) => {

	try {
		const lStack = getV8Stack()
		DBG(`Call stack has ${lStack.length} items`)
		if (lStack.length === 0) {
			return undef
		}
		const {fileName} = lStack[0]
		DBG(`fileName = ${fileName}`)
		let i2 = 0;for (const frame of lStack) {const i = i2++;
			DBG(`frame[${i}].fileName = ${frame.fileName}`)
			if (frame.fileName !== fileName) {
				return frame
			}
		}
		return undef
	}
	catch (err) {
		if (err instanceof Error) {
			LOG(`ERROR in getV8Stack(): ${err.message}`)
		}
		return undef
	}
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,