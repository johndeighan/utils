"use strict";
// civet.lib.civet

import {SourceFile} from 'npm:typescript'

import {
	undef, defined, notdefined, hash, assert, isHash,
	} from 'datatypes'
import {
	OL, ML, getOptions, o, require,
	} from 'llutils'
import {
	DBG, DBGVALUE,
	} from 'logger'
import {
	isFile, fileExt, withExt, slurp, barf, barfTempFile,
	parsePath,
	} from 'fsys'
import {execCmdSync} from 'exec'
import {ts2ast} from 'typescript'

// ---------------------------------------------------------------------------

export const civet2tsFile = (
		path: string,
		tsPath: string = withExt(path, '.ts'),
		hOptions: hash = {}
		): string => {

	assert(isFile(path), `No such file: ${OL(path)} (civet2tsFile)`)
	assert((fileExt(path) === '.civet'), `Not a civet file: ${OL(path)}`)

	type opt = {
		inlineMap: boolean
		}
	const {inlineMap} = getOptions<opt>(hOptions, {
		inlineMap: true
		})
	if (inlineMap) {
		execCmdSync('civet', [
			'--inline-map',
			'-o',
			tsPath,
			'-c',
			path
			])
	}
	else {
		execCmdSync('civet', [
			'-o',
			tsPath,
			'-c',
			path
			])
	}
	assert(isFile(tsPath), `File not created: ${OL(tsPath)}`)
	return tsPath
}

// ---------------------------------------------------------------------------

export const civet2jsFile = (
		path: string,
		jsPath: string = withExt(path, '.js'),
		hOptions: hash = {}
		): string => {

	assert(isFile(path), `No such file: ${OL(path)} (civet2jsFile)`)
	assert((fileExt(path) === '.civet'), `Not a civet file: ${OL(path)}`)

	type opt = {
		inlineMap: boolean
		}
	const {inlineMap} = getOptions<opt>(hOptions, {
		inlineMap: true
		})
	if (inlineMap) {
		execCmdSync('civet', [
			'--js',
			'--inline-map',
			'-o',
			jsPath,
			'-c',
			path
			])
	}
	else {
		execCmdSync('civet', [
			'--js',
			'-o',
			jsPath,
			'-c',
			path
			])
	}
	assert(isFile(jsPath), `File not created: ${OL(jsPath)}`)
	return jsPath
}

// ---------------------------------------------------------------------------

export const civet2ts = (civetCode: string): string => {

	const tempFilePath = barfTempFile(civetCode)
	const tsFilePath = withExt(tempFilePath, '.ts')
	civet2tsFile(tempFilePath, tsFilePath, o`!inlineMap`)
	return slurp(tsFilePath)
}

// ---------------------------------------------------------------------------

export const civet2js = (civetCode: string): string => {

	const tempFilePath = Deno.makeTempFileSync({suffix: '.civet'})
	const jsFilePath = withExt(tempFilePath, '.js')
	barf(tempFilePath, civetCode)
	civet2jsFile(tempFilePath, jsFilePath, o`!inlineMap`)
	return slurp(jsFilePath)
}

// ---------------------------------------------------------------------------

export const civet2ast = (civetCode: string): SourceFile => {

	const tsCode = civet2ts(civetCode)
	return ts2ast(tsCode)
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3JjL2xpYi9jaXZldC5saWIuY2l2ZXQudHN4Iiwic291cmNlcyI6WyJzcmMvbGliL2NpdmV0LmxpYi5jaXZldCJdLCJtYXBwaW5ncyI6IjtBQUFBLGtCQUFpQjtBQUNqQixBQUFBO0FBQ0EsQUFBQSxNQUFNLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxJQUFJLENBQUMsZ0JBQWdCO0FBQ3pDLEFBQUE7QUFDQSxBQUFBLEFBQUEsTUFBTSxDQUFDLENBQUM7QUFDUixDQUFDLEtBQUssQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLE1BQU0sQ0FBQztBQUNsRCxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsV0FBVztBQUNuQixBQUFBLEFBQUEsTUFBTSxDQUFDLENBQUM7QUFDUixDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQztBQUNoQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsU0FBUztBQUNqQixBQUFBLEFBQUEsTUFBTSxDQUFDLENBQUM7QUFDUixDQUFDLEdBQUcsQ0FBQyxDQUFDLFFBQVEsQ0FBQztBQUNmLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxRQUFRO0FBQ2hCLEFBQUEsQUFBQSxNQUFNLENBQUMsQ0FBQztBQUNSLENBQUMsTUFBTSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsWUFBWSxDQUFDO0FBQ3JELENBQUMsU0FBUyxDQUFDO0FBQ1gsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU07QUFDZCxBQUFBLEFBQUEsTUFBTSxDQUFDLENBQUMsV0FBVyxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU07QUFDaEMsQUFBQSxBQUFBLE1BQU0sQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxZ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Q0FBQSxDQUFBO0FBQ2pELEFBQUE7QUFDQSxBQUFBLENBQWEsTUFBWixZQUFZLENBQUMsQ0FBRSxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQSxBQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUE7QUFDekQsQUFBQSxDQUFXLE1BQVYsVUFBVSxDQUFDLENBQUUsQ0FBQyxPQUFPLENBQUEsQUFBQyxZQUFZLENBQUMsQ0FBQyxLQUFLLENBQUE7QUFDMUMsQUFBQSxDQUFDLElBQUksQ0FBQSxBQUFDLFlBQVksQ0FBQyxDQUFDLFNBQVMsQ0FBQTtBQUM3QixBQUFBLENBQUMsWUFBWSxDQUFBLEFBQUMsWUFBWSxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsQyxZQUFhLENBQUE7QUFDckQsQUFBQSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUEsQUFBQyxVQUFVLEM7QUFBQSxDQUFBO0FBQ3hCLEFBQUE7QUFDQSxBQUFBLDhFQUE2RTtBQUM3RSxBQUFBO0FBQ0EsQUFBQSxBQUFBLE1BQU0sQ0FBVSxNQUFULFNBQVMsQ0FBQyxDQUFFLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxFQUFFLENBQUEsQ0FBQTtBQUN0RCxBQUFBO0FBQ0EsQUFBQSxDQUFPLE1BQU4sTUFBTSxDQUFDLENBQUUsQ0FBQyxRQUFRLENBQUEsQUFBQyxTQUFTLENBQUE7QUFDN0IsQUFBQSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsTUFBTSxDO0FBQUMsQ0FBQTtBQUN0QiIsIm5hbWVzIjpbXSwic291cmNlc0NvbnRlbnQiOlsiIyBjaXZldC5saWIuY2l2ZXRcblxuaW1wb3J0IHtTb3VyY2VGaWxlfSBmcm9tICducG06dHlwZXNjcmlwdCdcblxuaW1wb3J0IHtcblx0dW5kZWYsIGRlZmluZWQsIG5vdGRlZmluZWQsIGhhc2gsIGFzc2VydCwgaXNIYXNoLFxuXHR9IGZyb20gJ2RhdGF0eXBlcydcbmltcG9ydCB7XG5cdE9MLCBNTCwgZ2V0T3B0aW9ucywgbywgcmVxdWlyZSxcblx0fSBmcm9tICdsbHV0aWxzJ1xuaW1wb3J0IHtcblx0REJHLCBEQkdWQUxVRSxcblx0fSBmcm9tICdsb2dnZXInXG5pbXBvcnQge1xuXHRpc0ZpbGUsIGZpbGVFeHQsIHdpdGhFeHQsIHNsdXJwLCBiYXJmLCBiYXJmVGVtcEZpbGUsXG5cdHBhcnNlUGF0aCxcblx0fSBmcm9tICdmc3lzJ1xuaW1wb3J0IHtleGVjQ21kU3luY30gZnJvbSAnZXhlYydcbmltcG9ydCB7dHMyYXN0fSBmcm9tICd0eXBlc2NyaXB0J1xuXG4jIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG5leHBvcnQgY2l2ZXQydHNGaWxlIDo9IChcblx0XHRwYXRoOiBzdHJpbmdcblx0XHR0c1BhdGg6IHN0cmluZyA9IHdpdGhFeHQocGF0aCwgJy50cycpXG5cdFx0aE9wdGlvbnM6IGhhc2ggPSB7fVxuXHRcdCk6IHN0cmluZyA9PlxuXG5cdGFzc2VydCBpc0ZpbGUocGF0aCksIFwiTm8gc3VjaCBmaWxlOiAje09MKHBhdGgpfSAoY2l2ZXQydHNGaWxlKVwiXG5cdGFzc2VydCAoZmlsZUV4dChwYXRoKSA9PSAnLmNpdmV0JyksIFwiTm90IGEgY2l2ZXQgZmlsZTogI3tPTChwYXRoKX1cIlxuXG5cdHR5cGUgb3B0ID0ge1xuXHRcdGlubGluZU1hcDogYm9vbGVhblxuXHRcdH1cblx0e2lubGluZU1hcH0gOj0gZ2V0T3B0aW9uczxvcHQ+IGhPcHRpb25zLCB7XG5cdFx0aW5saW5lTWFwOiB0cnVlXG5cdFx0fVxuXHRpZiBpbmxpbmVNYXBcblx0XHRleGVjQ21kU3luYyAnY2l2ZXQnLCBbXG5cdFx0XHQnLS1pbmxpbmUtbWFwJyxcblx0XHRcdCctbycsXG5cdFx0XHR0c1BhdGgsXG5cdFx0XHQnLWMnLFxuXHRcdFx0cGF0aFxuXHRcdFx0XVxuXHRlbHNlXG5cdFx0ZXhlY0NtZFN5bmMgJ2NpdmV0JywgW1xuXHRcdFx0Jy1vJyxcblx0XHRcdHRzUGF0aCxcblx0XHRcdCctYycsXG5cdFx0XHRwYXRoXG5cdFx0XHRdXG5cdGFzc2VydCBpc0ZpbGUodHNQYXRoKSwgXCJGaWxlIG5vdCBjcmVhdGVkOiAje09MKHRzUGF0aCl9XCJcblx0cmV0dXJuIHRzUGF0aFxuXG4jIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG5leHBvcnQgY2l2ZXQyanNGaWxlIDo9IChcblx0XHRwYXRoOiBzdHJpbmdcblx0XHRqc1BhdGg6IHN0cmluZyA9IHdpdGhFeHQocGF0aCwgJy5qcycpXG5cdFx0aE9wdGlvbnM6IGhhc2ggPSB7fVxuXHRcdCk6IHN0cmluZyA9PlxuXG5cdGFzc2VydCBpc0ZpbGUocGF0aCksIFwiTm8gc3VjaCBmaWxlOiAje09MKHBhdGgpfSAoY2l2ZXQyanNGaWxlKVwiXG5cdGFzc2VydCAoZmlsZUV4dChwYXRoKSA9PSAnLmNpdmV0JyksIFwiTm90IGEgY2l2ZXQgZmlsZTogI3tPTChwYXRoKX1cIlxuXG5cdHR5cGUgb3B0ID0ge1xuXHRcdGlubGluZU1hcDogYm9vbGVhblxuXHRcdH1cblx0e2lubGluZU1hcH0gOj0gZ2V0T3B0aW9uczxvcHQ+IGhPcHRpb25zLCB7XG5cdFx0aW5saW5lTWFwOiB0cnVlXG5cdFx0fVxuXHRpZiBpbmxpbmVNYXBcblx0XHRleGVjQ21kU3luYyAnY2l2ZXQnLCBbXG5cdFx0XHQnLS1qcydcblx0XHRcdCctLWlubGluZS1tYXAnLFxuXHRcdFx0Jy1vJyxcblx0XHRcdGpzUGF0aCxcblx0XHRcdCctYycsXG5cdFx0XHRwYXRoXG5cdFx0XHRdXG5cdGVsc2Vcblx0XHRleGVjQ21kU3luYyAnY2l2ZXQnLCBbXG5cdFx0XHQnLS1qcydcblx0XHRcdCctbycsXG5cdFx0XHRqc1BhdGgsXG5cdFx0XHQnLWMnLFxuXHRcdFx0cGF0aFxuXHRcdFx0XVxuXHRhc3NlcnQgaXNGaWxlKGpzUGF0aCksIFwiRmlsZSBub3QgY3JlYXRlZDogI3tPTChqc1BhdGgpfVwiXG5cdHJldHVybiBqc1BhdGhcblxuIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuZXhwb3J0IGNpdmV0MnRzIDo9IChjaXZldENvZGU6IHN0cmluZyk6IHN0cmluZyA9PlxuXG5cdHRlbXBGaWxlUGF0aCA6PSBiYXJmVGVtcEZpbGUgY2l2ZXRDb2RlXG5cdHRzRmlsZVBhdGggOj0gd2l0aEV4dCB0ZW1wRmlsZVBhdGgsICcudHMnXG5cdGNpdmV0MnRzRmlsZSB0ZW1wRmlsZVBhdGgsIHRzRmlsZVBhdGgsIG8nIWlubGluZU1hcCdcblx0cmV0dXJuIHNsdXJwIHRzRmlsZVBhdGhcblxuIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuZXhwb3J0IGNpdmV0MmpzIDo9IChjaXZldENvZGU6IHN0cmluZyk6IHN0cmluZyA9PlxuXG5cdHRlbXBGaWxlUGF0aCA6PSBEZW5vLm1ha2VUZW1wRmlsZVN5bmMge3N1ZmZpeDogJy5jaXZldCd9XG5cdGpzRmlsZVBhdGggOj0gd2l0aEV4dCB0ZW1wRmlsZVBhdGgsICcuanMnXG5cdGJhcmYgdGVtcEZpbGVQYXRoLCBjaXZldENvZGVcblx0Y2l2ZXQyanNGaWxlIHRlbXBGaWxlUGF0aCwganNGaWxlUGF0aCwgbychaW5saW5lTWFwJ1xuXHRyZXR1cm4gc2x1cnAganNGaWxlUGF0aFxuXG4jIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG5leHBvcnQgY2l2ZXQyYXN0IDo9IChjaXZldENvZGU6IHN0cmluZyk6IFNvdXJjZUZpbGUgPT5cblxuXHR0c0NvZGUgOj0gY2l2ZXQydHMgY2l2ZXRDb2RlXG5cdHJldHVybiB0czJhc3QodHNDb2RlKVxuIl19