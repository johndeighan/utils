"use strict";
// civet.lib.civet

type AutoPromise<T> = Promise<Awaited<T>>;
import {findInDir, findConfig, loadConfig} from "@danielx/civet/config"
import {compile, parseProgram} from "@danielx/civet"

import {
	undef, defined, notdefined, assert, hash,
	isString, isNumber, isBoolean, isPrimitive, isArray,
	stringify,
	} from './datatypes.lib.ts'
import {
	croak, pass, keys, hasKey, hasKeys, OL, NodeGenerator,
	} from './llutils.lib.ts'
import {
	LogCmd, DBG, LOG, WARN, ERR,
	pushLogLevel, popLogLevel,
	} from './logger.lib.ts'
import {
	isFile, fileExt, withExt, slurp, barf,
	} from './fs.lib.ts'
import {
	execCmdSync,
	} from './exec.lib.ts'

// ---------------------------------------------------------------------------
// --- ASYNC

/**
 * civet2ast() - convert civet code to civet AST
 */

export const civet2ast = async (civetCode: string): AutoPromise<hash> => {

	const dir: string = process.cwd()
	const path: string | null = await findConfig(dir)
	const hConfig: hash = defined(path) ? await loadConfig(path) : {}
	const hAST = await parseProgram(civetCode, hConfig)
	return hAST as hash
}

// ---------------------------------------------------------------------------

export const pprintAST = (hAST: hash): string => {

	const results=[];for (const key of keys(hAST)) {
		const value = hAST[key]
		if (key === 'type') {
			results.push(`[${value}]`)
		}
		else if (key === 'parent') {
			results.push("parent: ??")
		}
		else if (isPrimitive(value)) {
			results.push(`${key}: ${value}`)
		}
		else if (isArray(value)) {
			results.push(stringify(value))
		}
		else {
			results.push(`${key}: ?`)
		}
	};const lLines =results
	return lLines.join('\n')
}


//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3JjL2xpYi9jaXZldC5saWIuY2l2ZXQudHN4Iiwic291cmNlcyI6WyJzcmMvbGliL2NpdmV0LmxpYi5jaXZldCJdLCJtYXBwaW5ncyI6IjtBQUFBLGtCQUFpQjtBQUNqQixBQUFBO0FBQ0EsSyxXLHlCO0FBQUEsTUFBTSxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsSUFBSSxDQUFDLHVCQUF1QjtBQUN2RSxBQUFBLEFBQUEsTUFBTSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsWUFBWSxDQUFDLENBQUMsSUFBSSxDQUFDLGdCQUFnQjtBQUNwRCxBQUFBO0FBQ0EsQUFBQSxBQUFBLE1BQU0sQ0FBQyxDQUFDO0FBQ1IsQ0FBQyxLQUFLLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLENBQUM7QUFDMUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxXQUFXLENBQUMsQ0FBQyxPQUFPLENBQUM7QUFDckQsQ0FBQyxTQUFTLENBQUM7QUFDWCxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsb0JBQW9CO0FBQzVCLEFBQUEsQUFBQSxNQUFNLENBQUMsQ0FBQztBQUNSLENBQUMsS0FBSyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsYUFBYSxDQUFDO0FBQ3ZELENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxrQkFBa0I7QUFDMUIsQUFBQSxBQUFBLE1BQU0sQ0FBQyxDQUFDO0FBQ1IsQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUM7QUFDN0IsQ0FBQyxZQUFZLENBQUMsQ0FBQyxXQUFXLENBQUM7QUFDM0IsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLGlCQUFpQjtBQUN6QixBQUFBLEFBQUEsTUFBTSxDQUFDLENBQUM7QUFDUixDQUFDLE1BQU0sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLElBQUksQ0FBQztBQUN2QyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsYUFBYTtBQUNyQixBQUFBLEFBQUEsTUFBTSxDQUFDLENBQUM7QUFDUixDQUFDLFdBQVcsQ0FBQztBQUNiLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxlQUFlO0FBQ3ZCLEFBQUE7QUFDQSxBQUFBLDhFQUE2RTtBQUM3RSxBQUFBLFlBQVc7QUFDWCxBQUFBO0FBQ0EsQUFBQTtBQUNBO0FBQ0EsR0FBRztBQUNILEFBQUE7QUFDQSxBQUFBLEFBQUEsTUFBTSxDQUFVLE1BQVQsU0FBUyxDQUFDLENBQUUsQyxNQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsTUFBTSxDQUFDLEMsQyxXLENBQUMsQUFBQyxJLENBQUksQ0FBQyxFQUFFLENBQUEsQ0FBQTtBQUNoRCxBQUFBO0FBQ0EsQUFBQSxDQUFZLE1BQVgsR0FBRyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUUsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDN0IsQUFBQSxDQUFvQixNQUFuQixJQUFJLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFFLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUM7QUFDN0MsQUFBQSxDQUFjLE1BQWIsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUUsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUM3RCxBQUFBLENBQUssTUFBSixJQUFJLENBQUMsQ0FBRSxDQUFDLEtBQUssQ0FBQyxZQUFZLENBQUMsU0FBUyxDQUFDLENBQUMsT0FBTyxDQUFDO0FBQy9DLEFBQUEsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJO0FBQUksQ0FBQTtBQUNwQixBQUFBO0FBQ0EsQUFBQSw4RUFBNkU7QUFDN0UsQUFBQTtBQUNBLEFBQUEsQUFBQSxNQUFNLENBQVUsTUFBVCxTQUFTLENBQUMsQ0FBRSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFBLENBQUE7QUFDM0MsQUFBQTtBQUNBLEFBQUEsQyxLLEMsTyxHLENBQVcsR0FBRyxDQUFDLENBQUEsTUFBQSxHQUFHLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQSxDQUFBLENBQUE7QUFDaEMsQUFBQSxFQUFPLE1BQUwsS0FBSyxDQUFDLENBQUUsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDO0FBQ3BCLEFBQUEsRUFBRSxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUUsQ0FBQyxNQUFNLENBQUMsQ0FBQSxDQUFBO0FBQ3BCLEFBQUEsRyxPLE1BQUcsQ0FBQyxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUMsQyxDO0VBQUMsQ0FBQTtBQUNmLEFBQUEsRUFBRSxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFFLENBQUMsUUFBUSxDQUFDLENBQUEsQ0FBQTtBQUMzQixBQUFBLEcsTyxNQUFHLFksQztFQUFZLENBQUE7QUFDZixBQUFBLEVBQUUsSUFBSSxDQUFDLEdBQUcsQ0FBQSxXQUFXLENBQUMsS0FBSyxDQUFDLENBQUEsQ0FBQSxDQUFBO0FBQzVCLEFBQUEsRyxPLE1BQUcsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxFQUFFLEVBQUUsS0FBSyxDQUFDLEMsQztFQUFDLENBQUE7QUFDckIsQUFBQSxFQUFFLElBQUksQ0FBQyxHQUFHLENBQUEsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFBLENBQUEsQ0FBQTtBQUN4QixBQUFBLEcsTyxNQUFHLFNBQVMsQ0FBQyxLQUFLLEMsQztFQUFDLENBQUE7QUFDbkIsQUFBQSxFQUFFLElBQUksQ0FBQSxDQUFBO0FBQ04sQUFBQSxHLE8sTUFBRyxDQUFDLEVBQUUsR0FBRyxDQUFDLEdBQUcsQyxDO0VBQUMsQztDQUFBLEMsQ0FYUCxNQUFOLE1BQU0sQ0FBQyxDLE9BV007QUFDZCxBQUFBLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDO0FBQUMsQ0FBQTtBQUN6QjtBQUNBIiwibmFtZXMiOltdLCJzb3VyY2VzQ29udGVudCI6WyIjIGNpdmV0LmxpYi5jaXZldFxuXG5pbXBvcnQge2ZpbmRJbkRpciwgZmluZENvbmZpZywgbG9hZENvbmZpZ30gZnJvbSBcIkBkYW5pZWx4L2NpdmV0L2NvbmZpZ1wiXG5pbXBvcnQge2NvbXBpbGUsIHBhcnNlUHJvZ3JhbX0gZnJvbSBcIkBkYW5pZWx4L2NpdmV0XCJcblxuaW1wb3J0IHtcblx0dW5kZWYsIGRlZmluZWQsIG5vdGRlZmluZWQsIGFzc2VydCwgaGFzaCxcblx0aXNTdHJpbmcsIGlzTnVtYmVyLCBpc0Jvb2xlYW4sIGlzUHJpbWl0aXZlLCBpc0FycmF5LFxuXHRzdHJpbmdpZnksXG5cdH0gZnJvbSAnLi9kYXRhdHlwZXMubGliLnRzJ1xuaW1wb3J0IHtcblx0Y3JvYWssIHBhc3MsIGtleXMsIGhhc0tleSwgaGFzS2V5cywgT0wsIE5vZGVHZW5lcmF0b3IsXG5cdH0gZnJvbSAnLi9sbHV0aWxzLmxpYi50cydcbmltcG9ydCB7XG5cdExvZ0NtZCwgREJHLCBMT0csIFdBUk4sIEVSUixcblx0cHVzaExvZ0xldmVsLCBwb3BMb2dMZXZlbCxcblx0fSBmcm9tICcuL2xvZ2dlci5saWIudHMnXG5pbXBvcnQge1xuXHRpc0ZpbGUsIGZpbGVFeHQsIHdpdGhFeHQsIHNsdXJwLCBiYXJmLFxuXHR9IGZyb20gJy4vZnMubGliLnRzJ1xuaW1wb3J0IHtcblx0ZXhlY0NtZFN5bmMsXG5cdH0gZnJvbSAnLi9leGVjLmxpYi50cydcblxuIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiMgLS0tIEFTWU5DXG5cbi8qKlxuICogY2l2ZXQyYXN0KCkgLSBjb252ZXJ0IGNpdmV0IGNvZGUgdG8gY2l2ZXQgQVNUXG4gKi9cblxuZXhwb3J0IGNpdmV0MmFzdCA6PSAoY2l2ZXRDb2RlOiBzdHJpbmcpOiBoYXNoID0+XG5cblx0ZGlyOiBzdHJpbmcgOj0gcHJvY2Vzcy5jd2QoKVxuXHRwYXRoOiBzdHJpbmcgfCBudWxsIDo9IGF3YWl0IGZpbmRDb25maWcoZGlyKVxuXHRoQ29uZmlnOiBoYXNoIDo9IGRlZmluZWQocGF0aCkgPyBhd2FpdCBsb2FkQ29uZmlnKHBhdGgpIDoge31cblx0aEFTVCA6PSBhd2FpdCBwYXJzZVByb2dyYW0oY2l2ZXRDb2RlLCBoQ29uZmlnKVxuXHRyZXR1cm4gaEFTVCBhcyBoYXNoXG5cbiMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbmV4cG9ydCBwcHJpbnRBU1QgOj0gKGhBU1Q6IGhhc2gpOiBzdHJpbmcgPT5cblxuXHRsTGluZXMgOj0gZm9yIGtleSBvZiBrZXlzKGhBU1QpXG5cdFx0dmFsdWUgOj0gaEFTVFtrZXldXG5cdFx0aWYgKGtleSA9PSAndHlwZScpXG5cdFx0XHRcIlsje3ZhbHVlfV1cIlxuXHRcdGVsc2UgaWYgKGtleSA9PSAncGFyZW50Jylcblx0XHRcdFwicGFyZW50OiA/P1wiXG5cdFx0ZWxzZSBpZiBpc1ByaW1pdGl2ZSh2YWx1ZSlcblx0XHRcdFwiI3trZXl9OiAje3ZhbHVlfVwiXG5cdFx0ZWxzZSBpZiBpc0FycmF5KHZhbHVlKVxuXHRcdFx0c3RyaW5naWZ5KHZhbHVlKVxuXHRcdGVsc2Vcblx0XHRcdFwiI3trZXl9OiA/XCJcblx0cmV0dXJuIGxMaW5lcy5qb2luKCdcXG4nKVxuXG4iXX0=