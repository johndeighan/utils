"use strict";
// civet.lib.civet

import {SourceFile} from 'typescript'
import {
	undef, defined, notdefined, hash, assert,
	} from './datatypes.lib.ts'
import {
	OL, getOptions, o,
	} from './llutils.lib.ts'
import {
	isFile, fileExt, withExt, slurp, barf,
	} from './fs.lib.ts'
import {
	execCmdSync,
	} from './exec.lib.ts'
import {
	ts2ast,
	} from './typescript.lib.ts'

// ---------------------------------------------------------------------------

export const civet2tsFile = (
		path: string,
		hOptions: hash = {}
		): void => {

	assert(isFile(path), `No such file: ${OL(path)} (civet2tsFile)`)
	assert((fileExt(path) === '.civet'), `Not a civet file: ${OL(path)}`)

	const tsPath = withExt(path, '.ts')
	const {inlineMap} = getOptions(hOptions, {
		inlineMap: true
		})
	if (inlineMap) {
		execCmdSync('civet', [
			'--inline-map',
			'-o',
			tsPath,
			'-c',
			path
			])
	}
	else {
		execCmdSync('civet', [
			'-o',
			tsPath,
			'-c',
			path
			])
	}
	assert(isFile(tsPath), `File not created: ${OL(tsPath)}`)
	return
}

// ---------------------------------------------------------------------------

export const civet2ts = (civetCode: string): string => {

	const tempFilePath = Deno.makeTempFileSync({suffix: '.civet'})
	barf(tempFilePath, civetCode)
	civet2tsFile(tempFilePath, o`!inlineMap`)
	return slurp(withExt(tempFilePath, '.ts'))
}

// ---------------------------------------------------------------------------

export const civet2ast = (civetCode: string): SourceFile => {

	const tsCode = civet2ts(civetCode)
	return ts2ast(tsCode)
}

// ---------------------------------------------------------------------------

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3JjL2xpYi9jaXZldC5saWIuY2l2ZXQudHN4Iiwic291cmNlcyI6WyJzcmMvbGliL2NpdmV0LmxpYi5jaXZldCJdLCJtYXBwaW5ncyI6IjtBQUFBLGtCQUFpQjtBQUNqQixBQUFBO0FBQ0EsQUFBQSxNQUFNLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxJQUFJLENBQUMsWUFBWTtBQUNyQyxBQUFBLEFBQUEsTUFBTSxDQUFDLENBQUM7QUFDUixDQUFDLEtBQUssQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLE1BQU0sQ0FBQztBQUMxQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsb0JBQW9CO0FBQzVCLEFBQUEsQUFBQSxNQUFNLENBQUMsQ0FBQztBQUNSLENBQUMsRUFBRSxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ25CLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxrQkFBa0I7QUFDMUIsQUFBQSxBQUFBLE1BQU0sQ0FBQyxDQUFDO0FBQ1IsQ0FBQyxNQUFNLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxJQUFJLENBQUM7QUFDdkMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLGFBQWE7QUFDckIsQUFBQSxBQUFBLE1BQU0sQ0FBQyxDQUFDO0FBQ1IsQ0FBQyxXQUFXLENBQUM7QUFDYixDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsZUFBZTtBQUN2QixBQUFBLEFBQUEsTUFBTSxDQUFDLENBQUM7QUFDUixDQUFDLE1BQU0sQ0FBQztBQUNSLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxxQkFBcUI7QUFDN0IsQUFBQTtBQUNBLEFBQUEsOEVBQTZFO0FBQzdFLEFBQUE7QUFDQSxBQUFBLEFBQUEsTUFBTSxDQUFhLE1BQVosWUFBWSxDQUFDLENBQUUsQ0FBQyxDQUFDO0FBQ3hCLEFBQUEsRUFBRSxJQUFJLENBQUMsQ0FBQyxNQUFNLENB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Q0FBQyxVQUFVLENBQUMsRUFBRSxDQUFBLENBQUE7QUFDdEQsQUFBQTtBQUNBLEFBQUEsQ0FBTyxNQUFOLE1BQU0sQ0FBQyxDQUFFLENBQUMsUUFBUSxDQUFBLEFBQUMsU0FBUyxDQUFBO0FBQzdCLEFBQUEsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLE1BQU0sQztBQUFDLENBQUE7QUFDdEI7QUFDQSxBQUFBLDhFQUE2RTtBQUM3RSIsIm5hbWVzIjpbXSwic291cmNlc0NvbnRlbnQiOlsiIyBjaXZldC5saWIuY2l2ZXRcblxuaW1wb3J0IHtTb3VyY2VGaWxlfSBmcm9tICd0eXBlc2NyaXB0J1xuaW1wb3J0IHtcblx0dW5kZWYsIGRlZmluZWQsIG5vdGRlZmluZWQsIGhhc2gsIGFzc2VydCxcblx0fSBmcm9tICcuL2RhdGF0eXBlcy5saWIudHMnXG5pbXBvcnQge1xuXHRPTCwgZ2V0T3B0aW9ucywgbyxcblx0fSBmcm9tICcuL2xsdXRpbHMubGliLnRzJ1xuaW1wb3J0IHtcblx0aXNGaWxlLCBmaWxlRXh0LCB3aXRoRXh0LCBzbHVycCwgYmFyZixcblx0fSBmcm9tICcuL2ZzLmxpYi50cydcbmltcG9ydCB7XG5cdGV4ZWNDbWRTeW5jLFxuXHR9IGZyb20gJy4vZXhlYy5saWIudHMnXG5pbXBvcnQge1xuXHR0czJhc3QsXG5cdH0gZnJvbSAnLi90eXBlc2NyaXB0LmxpYi50cydcblxuIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuZXhwb3J0IGNpdmV0MnRzRmlsZSA6PSAoXG5cdFx0cGF0aDogc3RyaW5nXG5cdFx0aE9wdGlvbnM6IGhhc2ggPSB7fVxuXHRcdCk6IHZvaWQgPT5cblxuXHRhc3NlcnQgaXNGaWxlKHBhdGgpLCBcIk5vIHN1Y2ggZmlsZTogI3tPTChwYXRoKX0gKGNpdmV0MnRzRmlsZSlcIlxuXHRhc3NlcnQgKGZpbGVFeHQocGF0aCkgPT0gJy5jaXZldCcpLCBcIk5vdCBhIGNpdmV0IGZpbGU6ICN7T0wocGF0aCl9XCJcblxuXHR0c1BhdGggOj0gd2l0aEV4dChwYXRoLCAnLnRzJylcblx0e2lubGluZU1hcH0gOj0gZ2V0T3B0aW9ucyBoT3B0aW9ucywge1xuXHRcdGlubGluZU1hcDogdHJ1ZVxuXHRcdH1cblx0aWYgaW5saW5lTWFwXG5cdFx0ZXhlY0NtZFN5bmMgJ2NpdmV0JywgW1xuXHRcdFx0Jy0taW5saW5lLW1hcCcsXG5cdFx0XHQnLW8nLFxuXHRcdFx0dHNQYXRoLFxuXHRcdFx0Jy1jJyxcblx0XHRcdHBhdGhcblx0XHRcdF1cblx0ZWxzZVxuXHRcdGV4ZWNDbWRTeW5jICdjaXZldCcsIFtcblx0XHRcdCctbycsXG5cdFx0XHR0c1BhdGgsXG5cdFx0XHQnLWMnLFxuXHRcdFx0cGF0aFxuXHRcdFx0XVxuXHRhc3NlcnQgaXNGaWxlKHRzUGF0aCksIFwiRmlsZSBub3QgY3JlYXRlZDogI3tPTCh0c1BhdGgpfVwiXG5cdHJldHVyblxuXG4jIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG5leHBvcnQgY2l2ZXQydHMgOj0gKGNpdmV0Q29kZTogc3RyaW5nKTogc3RyaW5nID0+XG5cblx0dGVtcEZpbGVQYXRoIDo9IERlbm8ubWFrZVRlbXBGaWxlU3luYyB7c3VmZml4OiAnLmNpdmV0J31cblx0YmFyZiB0ZW1wRmlsZVBhdGgsIGNpdmV0Q29kZVxuXHRjaXZldDJ0c0ZpbGUgdGVtcEZpbGVQYXRoLCBvJyFpbmxpbmVNYXAnXG5cdHJldHVybiBzbHVycCB3aXRoRXh0KHRlbXBGaWxlUGF0aCwgJy50cycpXG5cbiMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbmV4cG9ydCBjaXZldDJhc3QgOj0gKGNpdmV0Q29kZTogc3RyaW5nKTogU291cmNlRmlsZSA9PlxuXG5cdHRzQ29kZSA6PSBjaXZldDJ0cyBjaXZldENvZGVcblx0cmV0dXJuIHRzMmFzdCh0c0NvZGUpXG5cbiMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4iXX0=