"use strict";
// civet.lib.civet

type AutoPromise<T> = Promise<Awaited<T>>;
import {SourceFile} from 'npm:typescript'

import {
	undef, defined, notdefined, hash, assert,
	isString, isHash,
	} from 'datatypes'
import {OL, ML, getOptions, o} from 'llutils'
import {DBG, DBGVALUE} from 'logger'
import {
	isFile, fileExt, withExt, slurp, barf, barfTempFile,
	parsePath, findSrcFile,
	} from 'fsys'
import {
	TCmdDesc, TExecResult, execCmdSync, execCmd, execCmds,
	} from 'exec'
import {stripSrcMap} from 'source-map'
import {ts2ast} from 'typescript'

// ---------------------------------------------------------------------------
// ASYNC

export const compileCivetFiles = async (
		lStubs: string[],
		purpose: string = 'lib'
		): AutoPromise<TExecResult[]> => {

	const lCmds: TCmdDesc[] = []
	for (const stub of lStubs) {
		const path = findSrcFile(`${stub}.${purpose}.civet`)
		assert(defined(path), `No such file: ${OL(path)}`)
		if (defined(path)) {
			lCmds.push(['deno', [
				'run',
				'-A',
				'npm:@danielx/civet',
				'--inline-map',
				'-o', '.ts',
				'-c', path
				]])
		}
	}

	const lResults = await execCmds(lCmds)
	return lResults
}

// ---------------------------------------------------------------------------

export const civet2tsFile = (
		path: string,
		tsPath: string = withExt(path, '.ts'),
		hOptions: hash = {}
		): string => {

	assert(isFile(path), `No such file: ${OL(path)} (civet2tsFile)`)
	assert((fileExt(path) === '.civet'), `Not a civet file: ${OL(path)}`)

	type opt = {
		nomap: boolean
		}
	const {nomap} = getOptions<opt>(hOptions, {
		nomap: false
		})

	execCmdSync('deno', [
		'run',
		'-A',
		'npm:@danielx/civet',
		... nomap ? [] : ['--inline-map'],
		'-o',
		tsPath,
		'-c',
		path
		])
	assert(isFile(tsPath), `File not created: ${OL(tsPath)}`)
	return tsPath
}

// ---------------------------------------------------------------------------

export const civet2ts = (
		civetCode: string,
		hOptions: hash = {}
		): string => {

	const tempFilePath = barfTempFile(civetCode)
	const tsFilePath = withExt(tempFilePath, '.ts')
	civet2tsFile(tempFilePath, tsFilePath, hOptions)
	const contents = slurp(tsFilePath)
	return contents
}

// ---------------------------------------------------------------------------

export const civet2ast = (civetCode: string): SourceFile => {

	const tsCode = civet2ts(civetCode)
	return ts2ast(tsCode)
}

// ---------------------------------------------------------------------------

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQzpcXFVzZXJzXFxqb2huZFxcdXRpbHNcXHNyY1xcbGliXFxjaXZldC5saWIuY2l2ZXQudHN4Iiwic291cmNlcyI6WyJDOlxcVXNlcnNcXGpvaG5kXFx1dGlsc1xcc3JjXFxsaWJcXGNpdmV0LmxpYi5jaXZldCJdLCJtYXBwaW5ncyI6IjtBQUFBLGtCQUFpQjtBQUNqQixBQUFBO0FBQ0EsSyxXLHlCO0FBQUEsTUFBTSxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsSUFBSSxDQUFDLGdCQUFnQjtBQUN6QyxBQUFBO0FBQ0EsQUFBQSxBQUFBLE1BQU0sQ0FBQyxDQUFDO0FBQ1IsQ0FBQyxLQUFLLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxNQUFNLENBQUM7QUFDMUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxNQUFNLENBQUM7QUFDbEIsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFdBQVc7QUFDbkIsQUFBQSxBQUFBLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxTQUFTO0FBQzdDLEFBQUEsQUFBQSxNQUFNLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUTtBQUNwQyxBQUFBLEFBQUEsTUFBTSxDQUFDLENBQUM7QUFDUixDQUFDLE1BQU0sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLFlBQVksQ0FBQztBQUNyRCxDQUFDLFNBQVMsQ0FBQyxDQUFDLFdBQVcsQ0FBQztBQUN4QixDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTTtBQUNkLEFBQUEsQUFBQSxNQUFNLENBQUMsQ0FBQztBQUNSLENBQUMsUUFBUSxDQUFDLENBQUMsV0FBVyxDQUFDLENBQUMsV0FBVyxDQUFDLENBQUMs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LCJuYW1lcyI6W10sInNvdXJjZXNDb250ZW50IjpbIiMgY2l2ZXQubGliLmNpdmV0XHJcblxyXG5pbXBvcnQge1NvdXJjZUZpbGV9IGZyb20gJ25wbTp0eXBlc2NyaXB0J1xyXG5cclxuaW1wb3J0IHtcclxuXHR1bmRlZiwgZGVmaW5lZCwgbm90ZGVmaW5lZCwgaGFzaCwgYXNzZXJ0LFxyXG5cdGlzU3RyaW5nLCBpc0hhc2gsXHJcblx0fSBmcm9tICdkYXRhdHlwZXMnXHJcbmltcG9ydCB7T0wsIE1MLCBnZXRPcHRpb25zLCBvfSBmcm9tICdsbHV0aWxzJ1xyXG5pbXBvcnQge0RCRywgREJHVkFMVUV9IGZyb20gJ2xvZ2dlcidcclxuaW1wb3J0IHtcclxuXHRpc0ZpbGUsIGZpbGVFeHQsIHdpdGhFeHQsIHNsdXJwLCBiYXJmLCBiYXJmVGVtcEZpbGUsXHJcblx0cGFyc2VQYXRoLCBmaW5kU3JjRmlsZSxcclxuXHR9IGZyb20gJ2ZzeXMnXHJcbmltcG9ydCB7XHJcblx0VENtZERlc2MsIFRFeGVjUmVzdWx0LCBleGVjQ21kU3luYywgZXhlY0NtZCwgZXhlY0NtZHMsXHJcblx0fSBmcm9tICdleGVjJ1xyXG5pbXBvcnQge3N0cmlwU3JjTWFwfSBmcm9tICdzb3VyY2UtbWFwJ1xyXG5pbXBvcnQge3RzMmFzdH0gZnJvbSAndHlwZXNjcmlwdCdcclxuXHJcbiMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiMgQVNZTkNcclxuXHJcbmV4cG9ydCBjb21waWxlQ2l2ZXRGaWxlcyA6PSAoXHJcblx0XHRsU3R1YnM6IHN0cmluZ1tdXHJcblx0XHRwdXJwb3NlOiBzdHJpbmcgPSAnbGliJ1xyXG5cdFx0KTogVEV4ZWNSZXN1bHRbXSA9PlxyXG5cclxuXHRsQ21kczogVENtZERlc2NbXSA6PSBbXVxyXG5cdGZvciBzdHViIG9mIGxTdHVic1xyXG5cdFx0cGF0aCA6PSBmaW5kU3JjRmlsZSBcIiN7c3R1Yn0uI3twdXJwb3NlfS5jaXZldFwiXHJcblx0XHRhc3NlcnQgZGVmaW5lZChwYXRoKSwgXCJObyBzdWNoIGZpbGU6ICN7T0wocGF0aCl9XCJcclxuXHRcdGlmIGRlZmluZWQocGF0aClcclxuXHRcdFx0bENtZHMucHVzaCBbJ2Rlbm8nLCBbXHJcblx0XHRcdFx0J3J1bidcclxuXHRcdFx0XHQnLUEnXHJcblx0XHRcdFx0J25wbTpAZGFuaWVseC9jaXZldCdcclxuXHRcdFx0XHQnLS1pbmxpbmUtbWFwJ1xyXG5cdFx0XHRcdCctbycsICcudHMnXHJcblx0XHRcdFx0Jy1jJywgcGF0aFxyXG5cdFx0XHRcdF1dXHJcblxyXG5cdGxSZXN1bHRzIDo9IGF3YWl0IGV4ZWNDbWRzIGxDbWRzXHJcblx0cmV0dXJuIGxSZXN1bHRzXHJcblxyXG4jIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cclxuZXhwb3J0IGNpdmV0MnRzRmlsZSA6PSAoXHJcblx0XHRwYXRoOiBzdHJpbmdcclxuXHRcdHRzUGF0aDogc3RyaW5nID0gd2l0aEV4dChwYXRoLCAnLnRzJylcclxuXHRcdGhPcHRpb25zOiBoYXNoID0ge31cclxuXHRcdCk6IHN0cmluZyA9PlxyXG5cclxuXHRhc3NlcnQgaXNGaWxlKHBhdGgpLCBcIk5vIHN1Y2ggZmlsZTogI3tPTChwYXRoKX0gKGNpdmV0MnRzRmlsZSlcIlxyXG5cdGFzc2VydCAoZmlsZUV4dChwYXRoKSA9PSAnLmNpdmV0JyksIFwiTm90IGEgY2l2ZXQgZmlsZTogI3tPTChwYXRoKX1cIlxyXG5cclxuXHR0eXBlIG9wdCA9IHtcclxuXHRcdG5vbWFwOiBib29sZWFuXHJcblx0XHR9XHJcblx0e25vbWFwfSA6PSBnZXRPcHRpb25zPG9wdD4gaE9wdGlvbnMsIHtcclxuXHRcdG5vbWFwOiBmYWxzZVxyXG5cdFx0fVxyXG5cclxuXHRleGVjQ21kU3luYyAnZGVubycsIFtcclxuXHRcdCdydW4nXHJcblx0XHQnLUEnXHJcblx0XHQnbnBtOkBkYW5pZWx4L2NpdmV0J1xyXG5cdFx0Li4uIG5vbWFwID8gW10gOiBbJy0taW5saW5lLW1hcCddXHJcblx0XHQnLW8nLFxyXG5cdFx0dHNQYXRoLFxyXG5cdFx0Jy1jJyxcclxuXHRcdHBhdGhcclxuXHRcdF1cclxuXHRhc3NlcnQgaXNGaWxlKHRzUGF0aCksIFwiRmlsZSBub3QgY3JlYXRlZDogI3tPTCh0c1BhdGgpfVwiXHJcblx0cmV0dXJuIHRzUGF0aFxyXG5cclxuIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuXHJcbmV4cG9ydCBjaXZldDJ0cyA6PSAoXHJcblx0XHRjaXZldENvZGU6IHN0cmluZ1xyXG5cdFx0aE9wdGlvbnM6IGhhc2ggPSB7fVxyXG5cdFx0KTogc3RyaW5nID0+XHJcblxyXG5cdHRlbXBGaWxlUGF0aCA6PSBiYXJmVGVtcEZpbGUgY2l2ZXRDb2RlXHJcblx0dHNGaWxlUGF0aCA6PSB3aXRoRXh0IHRlbXBGaWxlUGF0aCwgJy50cydcclxuXHRjaXZldDJ0c0ZpbGUgdGVtcEZpbGVQYXRoLCB0c0ZpbGVQYXRoLCBoT3B0aW9uc1xyXG5cdGNvbnRlbnRzIDo9IHNsdXJwIHRzRmlsZVBhdGhcclxuXHRyZXR1cm4gY29udGVudHNcclxuXHJcbiMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblxyXG5leHBvcnQgY2l2ZXQyYXN0IDo9IChjaXZldENvZGU6IHN0cmluZyk6IFNvdXJjZUZpbGUgPT5cclxuXHJcblx0dHNDb2RlIDo9IGNpdmV0MnRzIGNpdmV0Q29kZVxyXG5cdHJldHVybiB0czJhc3QgdHNDb2RlXHJcblxyXG4jIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4iXX0=