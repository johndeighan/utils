"use strict";
// civet.lib.civet

import {SourceFile} from 'typescript'
import {
	undef, defined, notdefined, hash, assert,
	} from './datatypes.lib.ts'
import {
	OL, getOptions, o,
	} from './llutils.lib.ts'
import {
	isFile, fileExt, withExt, slurp, barf, barfTempFile,
	} from './fs.lib.ts'
import {execCmdSync} from './exec.lib.ts'
import {ts2ast} from './typescript.lib.ts'

// ---------------------------------------------------------------------------

export const civet2tsFile = (
		path: string,
		tsPath: string = withExt(path, '.ts'),
		hOptions: hash = {}
		): string => {

	assert(isFile(path), `No such file: ${OL(path)} (civet2tsFile)`)
	assert((fileExt(path) === '.civet'), `Not a civet file: ${OL(path)}`)

	const {inlineMap} = getOptions(hOptions, {
		inlineMap: true
		})
	if (inlineMap) {
		execCmdSync('civet', [
			'--inline-map',
			'-o',
			tsPath,
			'-c',
			path
			])
	}
	else {
		execCmdSync('civet', [
			'-o',
			tsPath,
			'-c',
			path
			])
	}
	assert(isFile(tsPath), `File not created: ${OL(tsPath)}`)
	return tsPath
}

// ---------------------------------------------------------------------------

export const civet2jsFile = (
		path: string,
		jsPath: string = withExt(path, '.js'),
		hOptions: hash = {}
		): string => {

	assert(isFile(path), `No such file: ${OL(path)} (civet2jsFile)`)
	assert((fileExt(path) === '.civet'), `Not a civet file: ${OL(path)}`)

	const {inlineMap} = getOptions(hOptions, {
		inlineMap: true
		})
	if (inlineMap) {
		execCmdSync('civet', [
			'--js',
			'--inline-map',
			'-o',
			jsPath,
			'-c',
			path
			])
	}
	else {
		execCmdSync('civet', [
			'--js',
			'-o',
			jsPath,
			'-c',
			path
			])
	}
	assert(isFile(jsPath), `File not created: ${OL(jsPath)}`)
	return jsPath
}

// ---------------------------------------------------------------------------

export const civet2ts = (civetCode: string): string => {

	const tempFilePath = barfTempFile(civetCode)
	const tsFilePath = withExt(tempFilePath, '.ts')
	civet2tsFile(tempFilePath, tsFilePath, o`!inlineMap`)
	return slurp(tsFilePath)
}

// ---------------------------------------------------------------------------

export const civet2js = (civetCode: string): string => {

	const tempFilePath = Deno.makeTempFileSync({suffix: '.civet'})
	const jsFilePath = withExt(tempFilePath, '.js')
	barf(tempFilePath, civetCode)
	civet2jsFile(tempFilePath, jsFilePath, o`!inlineMap`)
	return slurp(jsFilePath)
}

// ---------------------------------------------------------------------------

export const civet2ast = (civetCode: string): SourceFile => {

	const tsCode = civet2ts(civetCode)
	return ts2ast(tsCode)
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,