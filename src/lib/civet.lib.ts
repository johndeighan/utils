"use strict";
// civet.lib.civet

type AutoPromise<T> = Promise<Awaited<T>>;
import {SourceFile} from 'npm:typescript'

import {
	undef, defined, notdefined, hash, assert,
	isString, isHash,
	} from 'datatypes'
import {getOptions, o} from 'llutils'
import {OL, ML} from 'to-nice'
import {DBG, DBGVALUE} from 'logger'
import {
	isFile, fileExt, withExt, slurp, barf, barfTempFile,
	parsePath, findSrcFile, rmFile,
	} from 'fsys'
import {
	TCmdDesc, TExecResult, execCmdSync, execCmd, execCmds,
	} from 'exec'
import {stripSrcMap} from 'source-map'
import {ts2ast} from 'typescript'

// ---------------------------------------------------------------------------
// ASYNC

export const compileCivetFiles = async (
		lStubs: string[],
		purpose: string = 'lib'
		): AutoPromise<TExecResult[]> => {

	const lCmds: TCmdDesc[] = []
	for (const stub of lStubs) {
		const path = findSrcFile(`${stub}.${purpose}.civet`)
		assert(defined(path), `No such file: ${OL(path)}`)
		if (defined(path)) {
			lCmds.push(['deno', [
				'run',
				'-A',
				'npm:@danielx/civet',
				'--inline-map',
				'-o', '.ts',
				'-c', path
				]])
		}
	}

	const lResults = await execCmds(lCmds)
	return lResults
}

// ---------------------------------------------------------------------------

export const civet2tsFile = (
		path: string,
		tsPath: string = withExt(path, '.ts'),
		hOptions: hash = {}
		): string => {

	assert(isFile(path), `No such file: ${OL(path)} (civet2tsFile)`)
	assert((fileExt(path) === '.civet'), `Not a civet file: ${OL(path)}`)

	type opt = {
		nomap: boolean
		}
	const {nomap} = getOptions<opt>(hOptions, {
		nomap: false
		})

	execCmdSync('deno', [
		'run',
		'-A',
		'npm:@danielx/civet',
		... nomap ? [] : ['--inline-map'],
		'-o',
		tsPath,
		'-c',
		path
		])
	assert(isFile(tsPath), `File not created: ${OL(tsPath)}`)
	return tsPath
}

// ---------------------------------------------------------------------------

export const civet2ts = (
		civetCode: string,
		hOptions: hash = {}
		): string => {

	const tempFilePath = barfTempFile(civetCode)
	const tsFilePath = withExt(tempFilePath, '.ts')
	civet2tsFile(tempFilePath, tsFilePath, hOptions)
	const contents = slurp(tsFilePath)
	return contents
}

// ---------------------------------------------------------------------------

export const civet2ast = (civetCode: string): SourceFile => {

	const tsCode = civet2ts(civetCode)
	return ts2ast(tsCode)
}

// ---------------------------------------------------------------------------

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQzpcXFVzZXJzXFxqb2huZFxcdXRpbHNcXHNyY1xcbGliXFxjaXZldC5saWIuY2l2ZXQudHN4Iiwic291cmNlcyI6WyJDOlxcVXNlcnNcXGpvaG5kXFx1dGlsc1xcc3JjXFxsaWJcXGNpdmV0LmxpYi5jaXZldCJdLCJtYXBwaW5ncyI6IjtBQUFBLGtCQUFpQjtBQUNqQixBQUFBO0FBQ0EsSyxXLHlCO0FBQUEsTUFBTSxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsSUFBSSxDQUFDLGdCQUFnQjtBQUN6QyxBQUFBO0FBQ0EsQUFBQSxBQUFBLE1BQU0sQ0FBQyxDQUFDO0FBQ1IsQ0FBQyxLQUFLLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxNQUFNLENBQUM7QUFDMUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxNQUFNLENBQUM7QUFDbEIsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFdBQVc7QUFDbkIsQUFBQSxBQUFBLE1BQU0sQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxTQUFTO0FBQ3JDLEFBQUEsQUFBQSxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsU0FBUztBQUM5QixBQUFBLEFBQUEsTUFBTSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVE7QUFDcEMsQUFBQSxBQUFBLE1BQU0sQ0FBQyxDQUFDO0FBQ1IsQ0FBQyxNQUFNLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxZQUFZLENBQUM7QUFDckQsQ0FBQyxTQUFTLENBQUMsQ0FBQyxXQUFXLENBQUMsQ0FBQyxNQUFNLENBQUM7QUFDaEMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU07QUFDZCxBQUFBLEFBQUEsTUFBTSxDQUFDLENBQUM7QUFDUixDQUFDLFFBQVEsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLFFBQVEsQ0FBQztBQUN2RCxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTTtBQUNkLEFBQUEsQUFBQSxNQUFNLENBQUMsQ0FBQyxXQUFXLENBQUMsQ0FBQyxJQUFJLENBQUMsWUFBWTtBQUN0QyxBQUFBLEFBQUEsTUFBTSxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLFlBQVk7QUFDakMsQUFBQTtBQUNBLEFBQUEsOEVBQTZFO0FBQzdFLEFBQUEsUUFBTztBQUNQLEFBQUE7QUFDQSxBQUFBLEFBQUEsTUFBTSxDQUFrQixNQUFqQixpQkFBaUIsQ0FBQyxDQUFFLEMsTUFBQyxDQUFDO0FBQzdCLEFBQUEsRUFBRSxNQUFNLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFBO0FBQ2xCLEFBQUEsRUFBRSxPQUFPLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEtBQUs7QUFDekIsRUFBRSxDQUFDLEMsQyxXLENBQUMsQUFBQyxXQUFXLENBQUMsQyxDQUFDLENBQUMsRUFBRSxDQUFBLENBQUE7QUFDckIsQUFBQTtBQUNBLEFBQUEsQ0FBa0IsTUFBakIsS0FBSyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFFLENBQUMsQ0FBQyxDQUFDO0FBQ3hCLEFBQUEsQ0FBQyxHQUFHLENBQUMsQ0FBQSxNQUFBLElBQUksQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFBLENBQUEsQ0FBQTtBQUNuQixBQUFBLEVBQU0sTUFBSixJQUFJLENBQUMsQ0FBRSxDQUFDLFdBQVcsQ0FBQSxBQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQyxFQUFFLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQTtBQUNoRCxBQUFBLEVBQUUsTUFBTSxDQUFBLEFBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxjQUFjLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQTtBQUNuRCxBQUFBLEVBQUUsR0FBRyxDQUFBLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQSxDQUFBLENBQUE7QUFDbEIsQUFBQSxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUEsQUFBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7QUFDeEIsQUFBQSxJQUFJLEtBQUssQ0FBQTtBQUNULEFBQUEsSUFBSSxJQUFJLENBQUE7QUFDUixBQUFBLElBQUksb0JBQW9CLENBQUE7QUFDeEIsQUFBQSxJQUFJLGNBQWMsQ0FBQTtBQUNsQixBQUFBLElBQUksSUFBSSxDQUFDLENBQUMsS0FBSyxDQUFBO0FBQ2YsQUFBQSxJQUFJLElBQUksQ0FBQyxDQUFDLElBQUk7QUFDZCxBQUFBLElBQUksQ0FBQyxDQUFDLEM7RUFBQSxDO0NBQUEsQ0FBQTtBQUNOLEFBQUE7QUFDQSxBQUFBLENBQVMsTUFBUixRQUFRLENBQUMsQ0FBRSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUEsQUFBQyxLQUFLLENBQUE7QUFDakMsQUFBQSxDQUFDLE1BQU0sQ0FBQyxRO0FBQVEsQ0FBQTtBQUNoQixBQUFBO0FBQ0EsQUFBQSw4RUFBNkU7QUFDN0UsQUFBQTtBQUNBLEFBQUEsQUFBQSxNQUFNLENBQWEsTUFBWixZQUFZLENBQUMsQ0FBRSxDQUFDLENBQUM7QUFDeEIsQUFBQSxFQUFFLElBQUksQ0FBQyxDQUFDLE1BQU0sQ0FBQTtBQUNkLEFBQUEsRUFBRSxNQUFNLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQTtBQUN2QyxBQUFBLEVBQUUsUUFBUSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDckIsRUFBRSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFBLENBQUE7QUFDZCxBQUFBO0FBQ0EsQUFBQSxDQUFDLE1BQU0sQ0FBQSxBQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsY0FBYyxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxlQUFlLENBQUMsQ0FBQTtBQUNoRSxBQUFBLENBQUMsTUFBTSxDQUFBLEFBQUMsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsR0FBRSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxrQkFBa0IsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFBO0FBQ3BFLEFBQUE7QUFDQSxBQUFBLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNiLEFBQUEsRUFBRSxLQUFLLENBQUMsQ0FBQyxPQUFPO0FBQ2hCLEVBQUUsQ0FBQztBQUNILEFBQUEsQ0FBUSxNQUFQLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBRSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsQ0FBQSxBQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7QUFDdkMsQUFBQSxFQUFFLEtBQUssQ0FBQyxDQUFDLEtBQUs7QUFDZCxFQUFFLENBQUMsQ0FBQTtBQUNILEFBQUE7QUFDQSxBQUFBLENBQUMsV0FBVyxDQUFBLEFBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztBQUN0QixBQUFBLEVBQUUsS0FBSyxDQUFBO0FBQ1AsQUFBQSxFQUFFLElBQUksQ0FBQTtBQUNOLEFBQUEsRUFBRSxvQkFBb0IsQ0FBQTtBQUN0QixBQUFBLEVBQUUsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsY0FBYyxDQUFDLENBQUE7QUFDbkMsQUFBQSxFQUFFLElBQUksQ0FBQztBQUNQLEFBQUEsRUFBRSxNQUFNLENBQUM7QUFDVCxBQUFBLEVBQUUsSUFBSSxDQUFDO0FBQ1AsQUFBQSxFQUFFLElBQUk7QUFDTixBQUFBLEVBQUUsQ0FBQyxDQUFBO0FBQ0gsQUFBQSxDQUFDLE1BQU0sQ0FBQSxBQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsa0JBQWtCLEVBQUUsRUFBRSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQTtBQUN6RCxBQUFBLENBQUMsTUFBTSxDQUFDLE07QUFBTSxDQUFBO0FBQ2QsQUFBQTtBQUNBLEFBQUEsOEVBQTZFO0FBQzdFLEFBQUE7QUFDQSxBQUFBLEFBQUEsTUFBTSxDQUFTLE1BQVIsUUFBUSxDQUFDLENBQUUsQ0FBQyxDQUFDO0FBQ3BCLEFBQUEsRUFBRSxTQUFTLENBQUMsQ0FBQyxNQUFNLENBQUE7QUFDbkIsQUFBQSxFQUFFLFFBQVEsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ3JCLEVBQUUsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQSxDQUFBO0FBQ2QsQUFBQTtBQUNBLEFBQUEsQ0FBYSxNQUFaLFlBQVksQ0FBQyxDQUFFLENBQUMsWUFBWSxDQUFBLEFBQUMsU0FBUyxDQUFBO0FBQ3ZDLEFBQUEsQ0FBVyxNQUFWLFVBQVUsQ0FBQyxDQUFFLENBQUMsT0FBTyxDQUFBLEFBQUMsWUFBWSxDQUFDLENBQUMsS0FBSyxDQUFBO0FBQzFDLEFBQUEsQ0FBQyxZQUFZLENBQUEsQUFBQyxZQUFZLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxRQUFRLENBQUE7QUFDaEQsQUFBQSxDQUFTLE1BQVIsUUFBUSxDQUFDLENBQUUsQ0FBQyxLQUFLLENBQUEsQUFBQyxVQUFVLENBQUE7QUFDN0IsQUFBQSxDQUFDLE1BQU0sQ0FBQyxRO0FBQVEsQ0FBQTtBQUNoQixBQUFBO0FBQ0EsQUFBQSw4RUFBNkU7QUFDN0UsQUFBQTtBQUNBLEFBQUEsQUFBQSxNQUFNLENBQVUsTUFBVCxTQUFTLENBQUMsQ0FBRSxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsRUFBRSxDQUFBLENBQUE7QUFDdEQsQUFBQTtBQUNBLEFBQUEsQ0FBTyxNQUFOLE1BQU0sQ0FBQyxDQUFFLENBQUMsUUFBUSxDQUFBLEFBQUMsU0FBUyxDQUFBO0FBQzdCLEFBQUEsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFBLEFBQUMsTUFBTSxDO0FBQUEsQ0FBQTtBQUNyQjtBQUNBLEFBQUEsOEVBQTZFO0FBQzdFIiwibmFtZXMiOltdLCJzb3VyY2VzQ29udGVudCI6WyIjIGNpdmV0LmxpYi5jaXZldFxyXG5cclxuaW1wb3J0IHtTb3VyY2VGaWxlfSBmcm9tICducG06dHlwZXNjcmlwdCdcclxuXHJcbmltcG9ydCB7XHJcblx0dW5kZWYsIGRlZmluZWQsIG5vdGRlZmluZWQsIGhhc2gsIGFzc2VydCxcclxuXHRpc1N0cmluZywgaXNIYXNoLFxyXG5cdH0gZnJvbSAnZGF0YXR5cGVzJ1xyXG5pbXBvcnQge2dldE9wdGlvbnMsIG99IGZyb20gJ2xsdXRpbHMnXHJcbmltcG9ydCB7T0wsIE1MfSBmcm9tICd0by1uaWNlJ1xyXG5pbXBvcnQge0RCRywgREJHVkFMVUV9IGZyb20gJ2xvZ2dlcidcclxuaW1wb3J0IHtcclxuXHRpc0ZpbGUsIGZpbGVFeHQsIHdpdGhFeHQsIHNsdXJwLCBiYXJmLCBiYXJmVGVtcEZpbGUsXHJcblx0cGFyc2VQYXRoLCBmaW5kU3JjRmlsZSwgcm1GaWxlLFxyXG5cdH0gZnJvbSAnZnN5cydcclxuaW1wb3J0IHtcclxuXHRUQ21kRGVzYywgVEV4ZWNSZXN1bHQsIGV4ZWNDbWRTeW5jLCBleGVjQ21kLCBleGVjQ21kcyxcclxuXHR9IGZyb20gJ2V4ZWMnXHJcbmltcG9ydCB7c3RyaXBTcmNNYXB9IGZyb20gJ3NvdXJjZS1tYXAnXHJcbmltcG9ydCB7dHMyYXN0fSBmcm9tICd0eXBlc2NyaXB0J1xyXG5cclxuIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuIyBBU1lOQ1xyXG5cclxuZXhwb3J0IGNvbXBpbGVDaXZldEZpbGVzIDo9IChcclxuXHRcdGxTdHViczogc3RyaW5nW11cclxuXHRcdHB1cnBvc2U6IHN0cmluZyA9ICdsaWInXHJcblx0XHQpOiBURXhlY1Jlc3VsdFtdID0+XHJcblxyXG5cdGxDbWRzOiBUQ21kRGVzY1tdIDo9IFtdXHJcblx0Zm9yIHN0dWIgb2YgbFN0dWJzXHJcblx0XHRwYXRoIDo9IGZpbmRTcmNGaWxlIFwiI3tzdHVifS4je3B1cnBvc2V9LmNpdmV0XCJcclxuXHRcdGFzc2VydCBkZWZpbmVkKHBhdGgpLCBcIk5vIHN1Y2ggZmlsZTogI3tPTChwYXRoKX1cIlxyXG5cdFx0aWYgZGVmaW5lZChwYXRoKVxyXG5cdFx0XHRsQ21kcy5wdXNoIFsnZGVubycsIFtcclxuXHRcdFx0XHQncnVuJ1xyXG5cdFx0XHRcdCctQSdcclxuXHRcdFx0XHQnbnBtOkBkYW5pZWx4L2NpdmV0J1xyXG5cdFx0XHRcdCctLWlubGluZS1tYXAnXHJcblx0XHRcdFx0Jy1vJywgJy50cydcclxuXHRcdFx0XHQnLWMnLCBwYXRoXHJcblx0XHRcdFx0XV1cclxuXHJcblx0bFJlc3VsdHMgOj0gYXdhaXQgZXhlY0NtZHMgbENtZHNcclxuXHRyZXR1cm4gbFJlc3VsdHNcclxuXHJcbiMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblxyXG5leHBvcnQgY2l2ZXQydHNGaWxlIDo9IChcclxuXHRcdHBhdGg6IHN0cmluZ1xyXG5cdFx0dHNQYXRoOiBzdHJpbmcgPSB3aXRoRXh0KHBhdGgsICcudHMnKVxyXG5cdFx0aE9wdGlvbnM6IGhhc2ggPSB7fVxyXG5cdFx0KTogc3RyaW5nID0+XHJcblxyXG5cdGFzc2VydCBpc0ZpbGUocGF0aCksIFwiTm8gc3VjaCBmaWxlOiAje09MKHBhdGgpfSAoY2l2ZXQydHNGaWxlKVwiXHJcblx0YXNzZXJ0IChmaWxlRXh0KHBhdGgpID09ICcuY2l2ZXQnKSwgXCJOb3QgYSBjaXZldCBmaWxlOiAje09MKHBhdGgpfVwiXHJcblxyXG5cdHR5cGUgb3B0ID0ge1xyXG5cdFx0bm9tYXA6IGJvb2xlYW5cclxuXHRcdH1cclxuXHR7bm9tYXB9IDo9IGdldE9wdGlvbnM8b3B0PiBoT3B0aW9ucywge1xyXG5cdFx0bm9tYXA6IGZhbHNlXHJcblx0XHR9XHJcblxyXG5cdGV4ZWNDbWRTeW5jICdkZW5vJywgW1xyXG5cdFx0J3J1bidcclxuXHRcdCctQSdcclxuXHRcdCducG06QGRhbmllbHgvY2l2ZXQnXHJcblx0XHQuLi4gbm9tYXAgPyBbXSA6IFsnLS1pbmxpbmUtbWFwJ11cclxuXHRcdCctbycsXHJcblx0XHR0c1BhdGgsXHJcblx0XHQnLWMnLFxyXG5cdFx0cGF0aFxyXG5cdFx0XVxyXG5cdGFzc2VydCBpc0ZpbGUodHNQYXRoKSwgXCJGaWxlIG5vdCBjcmVhdGVkOiAje09MKHRzUGF0aCl9XCJcclxuXHRyZXR1cm4gdHNQYXRoXHJcblxyXG4jIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cclxuZXhwb3J0IGNpdmV0MnRzIDo9IChcclxuXHRcdGNpdmV0Q29kZTogc3RyaW5nXHJcblx0XHRoT3B0aW9uczogaGFzaCA9IHt9XHJcblx0XHQpOiBzdHJpbmcgPT5cclxuXHJcblx0dGVtcEZpbGVQYXRoIDo9IGJhcmZUZW1wRmlsZSBjaXZldENvZGVcclxuXHR0c0ZpbGVQYXRoIDo9IHdpdGhFeHQgdGVtcEZpbGVQYXRoLCAnLnRzJ1xyXG5cdGNpdmV0MnRzRmlsZSB0ZW1wRmlsZVBhdGgsIHRzRmlsZVBhdGgsIGhPcHRpb25zXHJcblx0Y29udGVudHMgOj0gc2x1cnAgdHNGaWxlUGF0aFxyXG5cdHJldHVybiBjb250ZW50c1xyXG5cclxuIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuXHJcbmV4cG9ydCBjaXZldDJhc3QgOj0gKGNpdmV0Q29kZTogc3RyaW5nKTogU291cmNlRmlsZSA9PlxyXG5cclxuXHR0c0NvZGUgOj0gY2l2ZXQydHMgY2l2ZXRDb2RlXHJcblx0cmV0dXJuIHRzMmFzdCB0c0NvZGVcclxuXHJcbiMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiJdfQ==