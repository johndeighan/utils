# logger.lib.civet

import {
	existsSync,
	} from '@std/fs'
import {LogLevels} from "@std/log/levels"
import {
	ConsoleHandler, FileHandler, setup, getLogger, LogRecord,
	} from '@std/log'

import {
	getPrefix,
	} from 'unicode'
import {
	undef, defined, notdefined, hash, isString, nonEmpty,
	croak, assert,
	} from 'datatypes'
import {
	spaces, o, sinceLoadStr, OL, ML, pass,
	} from 'llutils'
import {
	TLogLevel, isLogLevel, getLogLevel, setLogLevel,
	pushLogLevel, popLogLevel, resetLogLevel,
	isInactiveLevel,
	} from 'log-levels'
import {
	getFormatter, indentLog, undentLog,
	getConsoleLog, clearConsoleLog, logIndent,
	} from 'log-formatter'

export {
	getLogLevel, isLogLevel, setLogLevel,
	pushLogLevel, popLogLevel,
	indentLog, undentLog,
	clearConsoleLog, getConsoleLog,
	}
export type {TLogLevel}

# ---------------------------------------------------------------------------

mainModule: string := new URL(Deno.mainModule).pathname.slice(1)

logFileName := (() =>
	lMatches := mainModule.match(/[A-Za-z0-9_\-\.]+$/)
	if (lMatches == null)
		return "logs/dummy.log"
	label := lMatches[0].replaceAll('.', '_')
	time := new Date().toISOString().replaceAll(':','-')
	return "logs/#{label} #{time}.log"
	)()

# ---------------------------------------------------------------------------

export getLog := (from: string): string =>

	switch from
		when 'console'
			return getConsoleLog()
		when 'file'
			if existsSync(logFileName)
				data := Deno.readFileSync(logFileName)
				decoder := new TextDecoder("utf-8")
				return decoder.decode(data)
			else
				return ''
		else
			croak "getLog(): invalid from = #{from}"
			return ''

# ---------------------------------------------------------------------------

export clearLog := (which: string): void =>

	switch which
		when 'console'
			clearConsoleLog()
		when 'file'
			encoder := new TextEncoder();
			str := encoder.encode('')
			Deno.writeFileSync(logFileName, str)
		when 'both'
			clearConsoleLog()
			encoder := new TextEncoder();
			str := encoder.encode('')
			Deno.writeFileSync(logFileName, str)
		else
			pass()
	return

# ---------------------------------------------------------------------------

hConfig: hash := {

	handlers:

		console: new ConsoleHandler('DEBUG', {
			formatter: getFormatter('$msg', 'console')
			})

		file: new FileHandler('DEBUG', {
			filename: logFileName
			mode: 'a'
			formatter: getFormatter('$ll $msg', 'file')
			})

		console_prof: new ConsoleHandler('DEBUG', {
			formatter: getFormatter('[$ts] $msg', 'console')
			})

		file_prof: new FileHandler('DEBUG', {
			filename: logFileName
			mode: 'a'
			formatter: getFormatter('[$ts] $ll $msg', 'file')
			})

	# --- assign handlers to loggers
	#     order from most verbose to least verbose

	loggers: {
		profile: {
			level: "DEBUG"
			num: 1
			handlers: ["console_prof", "file_prof"]
			}
		debug: {
			level: "DEBUG"
			num: 2
			handlers: ["console", "file"]
			}
		info: {
			level: "INFO"
			num: 3
			handlers: ["console", "file"]
			}
		warn: {
			level: "WARN",
			num: 4
			handlers: ["console", "file"]
			}
		error: {
			level: "ERROR"
			num: 5
			handlers: ["console", "file"]
			}
		file: {
			level: "DEBUG",
			num: 6
			handlers: ["file"]
			}
		silent: {
			level: "ERROR"
			num: 7
			handlers: []
			}
		}
	}

setup(hConfig)
hLoggers := hConfig.loggers
hHandlers := hConfig.handlers

export INDENT := Symbol('indent')
export UNDENT := Symbol('undent')

# ---------------------------------------------------------------------------

output := (level: TLogLevel, lItems: any[]): void =>

	if isInactiveLevel(level)
		return

	let logger = getLogger(getLogLevel())
	for item of lItems
		switch item
			when INDENT
				indentLog()
			when UNDENT
				undentLog()
			else
				str := isString(item) ? item : ML(item)
				if nonEmpty(str)
					switch level
						when 'debug': logger.debug str
						when 'info':  logger.info str
						when 'warn':  logger.warn str
						when 'error': logger.error str
						else pass()

	return

# ---------------------------------------------------------------------------

export DBG  := (...lItems: any[]): void =>
	output 'debug', lItems
	return

export LOG  := (...lItems: any[]): void =>
	output 'info', lItems
	return

export WARN := (...lItems: any[]): void =>
	output 'warn', lItems
	return

export ERR  := (...lItems: any[]): void =>
	output 'error', lItems
	return

export LOGVALUE := (label: string, value: any): void =>
	if isInactiveLevel('info')
		return
	LOG "#{label} = #{ML(value)}"
	return

export DBGVALUE := (label: string, value: any): void =>
	if isInactiveLevel('debug')
		return
	DBG "#{label} = #{ML(value)}"
	return

# ---------------------------------------------------------------------------

export removeLogFile := (): void =>

	Deno.removeSync logFileName
	return

# ---------------------------------------------------------------------------

export type TFormatter<T> = (desc: string, item: T?) => string

export class TreeLogger<T>

	# --- data fields
	indentLevel: number = 0
	logLevel: TLogLevel = 'debug'
	formatter: TFormatter<T>

	# --- methods
	constructor(
			@formatter = (desc: string, item: T?) => desc
			logLevel: string = 'debug'
			)
		if isLogLevel(logLevel)
			@logLevel = logLevel

	start(desc: string, item: T?=undef): void
		str := @formatter(desc, item)
		pre := getPrefix(@indentLevel, 'plain')
		output @logLevel, [pre + str]
		@indentLevel += 1
		return

	log(desc: string, item: T?=undef): void
		str := @formatter(desc, item)
		pre := getPrefix(@indentLevel, 'plain')
		output @logLevel,  [pre + str]
		return

	succeed(desc: string, item: T?=undef): void
		str := @formatter(desc, item)
		pre := getPrefix(@indentLevel, 'withArrow')
		output @logLevel,  [pre + str]
		@indentLevel -= 1
		return

	fail(desc: string, item: T?=undef): void
		str := @formatter(desc, item)
		pre := getPrefix(@indentLevel, 'withArrow')
		output @logLevel,  [pre + str]
		@indentLevel -= 1
		return
