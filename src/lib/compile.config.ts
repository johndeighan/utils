"use strict";
// compile.config.civet - default compiler configuration

import {
	compile as compileSvelte,
	} from 'npm:svelte/compiler'

import {o} from './llutils.lib.ts'
import {
	LOG, LOGVALUE, DBG, DBGVALUE,
	} from './logger.lib.ts'
import {
	withExt, rmFile, slurp, barf, patchFirstLine,
	TPathInfo, parsePath,
	} from './fs.lib.ts'
import {
	cmdSucceeds, execCmdSync,
	} from './exec.lib.ts'
import {cielo2civetFile} from './cielo.lib.ts'
import {civet2tsFile} from './civet.lib.ts'
import {installCmd, runUnitTestsFor} from './compile.lib.ts'

// ---------------------------------------------------------------------------
// --- NOTES:
//        1. compiler doesn't need to check if the file exists
//        2. compiler doesn't need to check the file extension

export default new Object({

	hCompilers: {
		// --- keys are file extensions
		//     NOTE: compilers must be synchronous!!!

		'.svelte': {
			getOutPaths: (path: string) => [withExt(path, '.js')],
			tester: () => { return true },
			compiler: (path: string) => {
				const jsPath = withExt(path, '.js')
				rmFile(jsPath)
				const {js, warnings} = compileSvelte(slurp(path), {
					customElement: true,
					runes: true
					})
				const {code, map} = js
				barf(jsPath, code)
				return 'compiled'
			}
			},
		'.dot': {
			getOutPaths: (path: string) => [withExt(path, '.svg')],
			tester: () => cmdSucceeds('dot', ['--version'], o`quiet`),
			compiler: (path: string) => {
				const svgPath = withExt(path, '.svg')
				rmFile(svgPath)
				execCmdSync('dot', ['-Tsvg', path])
				return 'compiled'
			}
			},
		'.cielo': {
			// --- We produce an intermediate .civet file,
			//     but give it a purpose of 'temp'
			//     so it won't get compiled by the compile script
			getOutPaths: (path: string) => [withExt(path, '.ts')],
			tester: () => {
				// --- we need civet to be installed
				return cmdSucceeds('civet', ['--version'], o`quiet`)
			},
			compiler: (path: string) => {
				const {fileName} = parsePath(path)

				const civetPath = withExt(path, '.temp.civet')
				const civetName = withExt(fileName, '.temp.civet')
				const tsPath = withExt(path, '.ts')
				const tsName = withExt(fileName, '.ts')

				rmFile(civetPath)    // --- needed?
				rmFile(tsPath)       // --- needed?

				cielo2civetFile(path, civetPath)
				civet2tsFile(civetPath, tsPath)

				patchFirstLine(civetPath, fileName, civetName)
				patchFirstLine(tsPath, fileName, tsName)

				return 'compiled'
			}
			},
		'.civet': {
			getOutPaths: (path: string) => [withExt(path, '.ts')],
			tester: () => {
				return cmdSucceeds('civet', ['--version'], o`quiet`)
			},
			compiler: (path: string) => {
				const {purpose, fileName} = parsePath(path)
				if (defined(purpose) && ['temp','debug'].includes(purpose)) {
					return 'temp'
				}

				const tsPath = withExt(path, '.ts')
				const tsName = withExt(fileName, '.ts')

				civet2tsFile(path, tsPath)
				patchFirstLine(tsPath, fileName, tsName)
				return 'compiled'
			}
			}
		},

	hPostProcessors: {
		// --- Keys are a purpose

		'test': (path: string): void => {
			return
		},

		'lib': (path: string): void => {
			const {stub} = parsePath(path)
			if (defined(stub)) {
				for (const {success} of runUnitTestsFor(stub)) {
					if (!success) {
						WARN(`Unit test ${path} failed`)
					}
				}
			}
			return
		},

		'cmd': (path: string): void => {
			LOG(`- installing command ${path}`)
			installCmd(path)
			return
		}
		}
	})

//# sourceMappingURL=data:application/json;charset=utf-8;base64,