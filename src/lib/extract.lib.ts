"use strict";
// extract.lib.civet

import {
	undef, defined, notdefined, isString, isArray, isEmpty, nonEmpty,
	assertIsString, assertIsNumber,
	} from 'datatypes'

// ---------------------------------------------------------------------------

export type TPathItem = string | number

export const getDsPath = (lPath: TPathItem[]): string => {

	const results=[];for (const x of lPath) {
		results.push(isString(x) ? `.${x}` : `[${x}]`)
	};const lParts =results
	return lParts.join('')
}

// ---------------------------------------------------------------------------

export const extract = (
		x: unknown,
		dspath: string | TPathItem[]
		): unknown => {

	const pathstr = isArray(dspath) ? getDsPath(dspath) : dspath
	if (nonEmpty(pathstr)) {
		const expr = `x = x${pathstr}`
		try {
			eval(expr)
		}
		catch (err) {
			console.log(`EVAL ERROR: '${expr}'`)
			try {
				console.log(`x = ${JSON.stringify(x, null, 3)}`)
			} catch(e) {}
			throw err
		}
	}
	return x
}

// ---------------------------------------------------------------------------

export const getString = (
		x: unknown,
		dspath: string | TPathItem[]
		): string => {

	const pathstr = isArray(dspath) ? getDsPath(dspath) : dspath
	if (nonEmpty(pathstr)) {
		eval(`x = x${pathstr}`)
	}
	assertIsString(x)
	return x
}

// ---------------------------------------------------------------------------

export const getNumber = (
		x: unknown,
		dspath: string | TPathItem[]
		): number => {

	const pathstr = isArray(dspath) ? getDsPath(dspath) : dspath
	if (nonEmpty(pathstr)) {
		eval(`x = x${pathstr}`)
	}
	assertIsNumber(x)
	return x
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQzpcXFVzZXJzXFxqb2huZFxcdXRpbHNcXHNyY1xcbGliXFxleHRyYWN0LmxpYi5jaXZldC50c3giLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcam9obmRcXHV0aWxzXFxzcmNcXGxpYlxcZXh0cmFjdC5saWIuY2l2ZXQiXSwibWFwcGluZ3MiOiI7QUFBQSxvQkFBbUI7QUFDbkIsQUFBQTtBQUNBLEFBQUEsTUFBTSxDQUFDLENBQUM7QUFDUixDQUFDLEtBQUssQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLFFBQVEsQ0FBQztBQUNsRSxDQUFDLGNBQWMsQ0FBQyxDQUFDLGNBQWMsQ0FBQztBQUNoQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsV0FBVztBQUNuQixBQUFBO0FBQ0EsQUFBQSw4RUFBNkU7QUFDN0UsQUFBQTtBQUNBLEFBQUEsQUFBQSxNQUFNLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxNQUFNO0FBQ3ZDLEFBQUE7QUFDQSxBQUFBLEFBQUEsTUFBTSxDQUFVLE1BQVQsU0FBUyxDQUFDLENBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUEsQ0FBQTtBQUNuRCxBQUFBO0FBQ0EsQUFBQSxDLEssQyxPLEcsQ0FBVyxHQUFHLENBQUMsQ0FBQSxNQUFBLENBQUMsQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFBLENBQUEsQ0FBQTtBQUN6QixBQUFBLEUsTyxNQUFFLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQyxDO0NBQUMsQyxDQUQzQixNQUFOLE1BQU0sQ0FB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QUFNLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDO0FBQzlCLEVBQUUsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQSxDQUFBO0FBQ2QsQUFBQTtBQUNBLEFBQUEsQ0FBUSxNQUFQLE9BQU8sQ0FBQyxDQUFFLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU07QUFDeEQsQUFBQSxDQUFDLEdBQUcsQ0FBQSxRQUFRLENBQUMsT0FBTyxDQUFDLENBQUEsQ0FBQSxDQUFBO0FBQ3JCLEFBQUEsRUFBRSxJQUFJLENBQUEsQUFBQyxDQUFDLEtBQUssRUFBRSxPQUFPLENBQUMsQ0FBQyxDO0NBQUEsQ0FBQTtBQUN4QixBQUFBLENBQUMsY0FBYyxDQUFBLEFBQUMsQ0FBQyxDQUFBO0FBQ2pCLEFBQUEsQ0FBQyxNQUFNLENBQUMsQztBQUFDLENBQUE7QUFDVCIsIm5hbWVzIjpbXSwic291cmNlc0NvbnRlbnQiOlsiIyBleHRyYWN0LmxpYi5jaXZldFxuXG5pbXBvcnQge1xuXHR1bmRlZiwgZGVmaW5lZCwgbm90ZGVmaW5lZCwgaXNTdHJpbmcsIGlzQXJyYXksIGlzRW1wdHksIG5vbkVtcHR5LFxuXHRhc3NlcnRJc1N0cmluZywgYXNzZXJ0SXNOdW1iZXIsXG5cdH0gZnJvbSAnZGF0YXR5cGVzJ1xuXG4jIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG5leHBvcnQgdHlwZSBUUGF0aEl0ZW0gPSBzdHJpbmcgfCBudW1iZXJcblxuZXhwb3J0IGdldERzUGF0aCA6PSAobFBhdGg6IFRQYXRoSXRlbVtdKTogc3RyaW5nID0+XG5cblx0bFBhcnRzIDo9IGZvciB4IG9mIGxQYXRoXG5cdFx0aXNTdHJpbmcoeCkgPyBcIi4je3h9XCIgOiBcIlsje3h9XVwiXG5cdHJldHVybiBsUGFydHMuam9pbignJylcblxuIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuZXhwb3J0IGV4dHJhY3QgOj0gKFxuXHRcdHg6IHVua25vd24sXG5cdFx0ZHNwYXRoOiBzdHJpbmcgfCBUUGF0aEl0ZW1bXVxuXHRcdCk6IHVua25vd24gPT5cblxuXHRwYXRoc3RyIDo9IGlzQXJyYXkoZHNwYXRoKSA/IGdldERzUGF0aChkc3BhdGgpIDogZHNwYXRoXG5cdGlmIG5vbkVtcHR5KHBhdGhzdHIpXG5cdFx0ZXhwciA6PSBcInggPSB4I3twYXRoc3RyfVwiXG5cdFx0dHJ5XG5cdFx0XHRldmFsIGV4cHJcblx0XHRjYXRjaCBlcnJcblx0XHRcdGNvbnNvbGUubG9nIFwiRVZBTCBFUlJPUjogJyN7ZXhwcn0nXCJcblx0XHRcdHRyeVxuXHRcdFx0XHRjb25zb2xlLmxvZyBcInggPSAje0pTT04uc3RyaW5naWZ5KHgsIG51bGwsIDMpfVwiXG5cdFx0XHR0aHJvdyBlcnJcblx0cmV0dXJuIHhcblxuIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuZXhwb3J0IGdldFN0cmluZyA6PSAoXG5cdFx0eDogdW5rbm93bixcblx0XHRkc3BhdGg6IHN0cmluZyB8IFRQYXRoSXRlbVtdXG5cdFx0KTogc3RyaW5nID0+XG5cblx0cGF0aHN0ciA6PSBpc0FycmF5KGRzcGF0aCkgPyBnZXREc1BhdGgoZHNwYXRoKSA6IGRzcGF0aFxuXHRpZiBub25FbXB0eShwYXRoc3RyKVxuXHRcdGV2YWwgXCJ4ID0geCN7cGF0aHN0cn1cIlxuXHRhc3NlcnRJc1N0cmluZyB4XG5cdHJldHVybiB4XG5cbiMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbmV4cG9ydCBnZXROdW1iZXIgOj0gKFxuXHRcdHg6IHVua25vd24sXG5cdFx0ZHNwYXRoOiBzdHJpbmcgfCBUUGF0aEl0ZW1bXVxuXHRcdCk6IG51bWJlciA9PlxuXG5cdHBhdGhzdHIgOj0gaXNBcnJheShkc3BhdGgpID8gZ2V0RHNQYXRoKGRzcGF0aCkgOiBkc3BhdGhcblx0aWYgbm9uRW1wdHkocGF0aHN0cilcblx0XHRldmFsIFwieCA9IHgje3BhdGhzdHJ9XCJcblx0YXNzZXJ0SXNOdW1iZXIgeFxuXHRyZXR1cm4geFxuIl19