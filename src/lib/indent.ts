"use strict";
// indent.civet

import {
	undef, defined, notdefined,
	isString, isArray, isHash, isInteger,
	} from './datatypes.ts'
import {
	pass, OL, ML, rtrim, countChars,
	blockToArray, arrayToBlock, toArray, toBlock,
	assert, croak, escapeStr,
	} from './llutils.ts'
import {DBG} from './logger.ts'

export let oneIndent: (string | undefined) = undef

// ---------------------------------------------------------------------------

/**
 * Reset the text for one indent level
 */

export const resetOneIndent = (str: (string | undefined)=undef): void => {

	DBG(`Resetting oneIndent to ${str}`)
	oneIndent = str
	return
}

// ---------------------------------------------------------------------------

/**
 * indentLevel - determine indent level of a string
 *               it's OK if the string is ONLY indentation
 */

export const indentLevel = (line: string): number => {

	// --- This will always match, and it's greedy
	//     (but TypeScript doesn't know that)
	const [prefix] = line.match(/^\s*/) || ['']

	if (prefix.length === 0) {
		return 0
	}

	// --- Check if we're using TABs or spaces
	const numTABs = countChars(prefix, "\t")
	const numSpaces = countChars(prefix, " ")
	assert((numTABs===0) || (numSpaces===0),
		`Invalid mix of TABs and spaces in ${escapeStr(line)}`)

	// --- oneIndent must be one of:
	//        undef
	//        a single TAB character
	//        some number of space characters

	// --- Set variables oneIndent & level
	switch(oneIndent) {
		case undef: {
			if (numTABs > 0) {
				oneIndent = "\t"
				return numTABs
			}
			else {
				oneIndent = ' '.repeat(numSpaces)
				return 1
			}
		}
		case "\t": {
			assert((numSpaces===0), "Expecting TABs, found spaces")
			return numTABs
		}
		default: {
			// --- using some number of spaces
			assert((numTABs === 0), "Expecting spaces, found TABs")
			assert((numSpaces % oneIndent.length === 0), `Invalid num spaces: ${numSpaces},
oneIndent = ${escapeStr(oneIndent)}`)
			return numSpaces / oneIndent.length
		}
	}
}

// ---------------------------------------------------------------------------

/**
 * splitLine - separate a line into [level, line]
 */

export type lineDesc = [
	level: number,
	text: string
	]

export const splitLine = (line: string): lineDesc => {

	const [_, prefix, str] = line.match(/^(\s*)(.*)$/) || ['', '', '']
	return [indentLevel(prefix), str.trim()]
}

// ---------------------------------------------------------------------------

/**
 * indented - add indentation to each string in a block or array
 *          - returns the same type as input, i.e. array or string
 */

export const indented = (
		input: string | string[],
		level: number=1
		): string | string[] => {

	assert(isInteger(level), `Invalid level: ${OL(level)}`)
	assert((level >= 0), `Invalid level: ${OL(level)}`)
	if (level === 0) {
		return input
	}
	if (notdefined(oneIndent)) {
		oneIndent = "\t"
	}
	const toAdd = oneIndent.repeat(level)

	// --- input must be either a string or array of strings
	const lLines = toArray(input)

	// --- NOTE: don't add indentation to empty lines
	const lNewLines = lLines.map((line) => {
		line = rtrim(line)
		return (line === '') ? '' : `${toAdd}${line}`
	}
		)

	return isArray(input) ? lNewLines : arrayToBlock(lNewLines)
}

// ---------------------------------------------------------------------------

/**
 * undented - string with 1st line indentation removed for each line
 *          - returns same type as input, i.e. either string or array
 */

export const undented = (input: string | string[]): string | string[] => {

	// --- input must be either a string or array of strings
	const lLines = toArray(input)

	// --- NOTE: leave empty lines empty

	let toRemove: (string | undefined)  = undef
	let nToRemove: number = 0
	const lNewLines = lLines.map((line) => {
		line = rtrim(line)
		if (line === '') {
			return ''
		}
		else if (notdefined(toRemove)) {
			const [_, prefix, rest] = line.match(/^(\s*)(.*)$/) || ['','','']
			if (prefix.length === 0) {
				return line
			}
			else {
				toRemove = prefix
				nToRemove = prefix.length
				return rest
			}
		}
		else {
			assert((line.indexOf(toRemove)===0),
				`can't remove ${OL(toRemove)} from ${OL(line)}`)
			return line.substr(nToRemove)
		}
	}
		)

	return isString(input) ? arrayToBlock(lNewLines) : lNewLines
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,