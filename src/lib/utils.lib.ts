/**
 * utils - utility functions
 * @module
 */

// utils.lib.civet

"use strict";
import {
	undef, defined, notdefined,
	isString, char, integer, isChar, isNonEmptyString,
	isBoolean, isNumber, isInteger,
	isPrimitive, isNonPrimitive,
	isArray, isArrayOfIntegers, isArrayOfStrings,
	isHash, isFunction, isObject, isRegExp,
	isEmpty, nonEmpty, assert,
	jsType, isSymbol, symbolName, functionName, functionDef,
	hash, hashof, array, arrayof,
	regexp, voidFunc, nonEmptyString, stringify,
	isClass, className, isPromise, isClassInstance, isIterable,
	} from './datatypes.lib.ts'
import {
	pass, deeplyEquals, truncStr, OL, ML,
	getOptions, croak, throwsError,
	strToHash, o, removeEmptyKeys, keys,
	hasKey, hasKeys, missingKeys, merge, hit,
	spaces, tabs, rtrim, countChars,
	blockToArray, allLinesInBlock,
	TBlockSpec, isBlockSpec, toArray,
	arrayToBlock, toBlock,
	escapeStr, unescapeStr, escapeBlock,
	relpath, wsSplit, words, addDefaults,
	sinceLoad, sinceLoadStr, sleep,
	getNExtra, rpad, lpad, centered,
	TAlignment, isAlignment, alignString, zpad,
	allMatches, NodeGenerator, TNodeInfo, range, Fetcher,
	} from './llutils.lib.ts'
import {
	setLogLevel, pushLogLevel, popLogLevel,
	curLogLevel, clearLog, getLog, getFullLog,
	INDENT, UNDENT,
	DBG, LOG, WARN, ERR, LOGVALUE, DBGVALUE,
	} from './logger.lib.ts'
import {TextTable} from './text-table.lib.ts'
import {
	oneIndent, resetOneIndent, indentLevel, splitLine,
	indented, undented,
	} from './indent.lib.ts'
import {
	Token, allTokensIn, allTokensInBlock, tokenTable, TTokenGenerator,
	} from './tokens.lib.ts'
import {
	toNice, fromNice, getPrimitive,
	} from './nice.lib.ts'
import {
	isFile, isDir, fileExt, withExt,
	rmFile, rmDir, TPathType, getPathType, getStats,
	isStub, TPathInfo, parsePath, slurp, barf,
	allFilesMatching, allLinesIn, watchFile, watchFiles, FileEventHandler,
	normalizePath, mkpath, pathToURL, newerDestFileExists,
	pathSubDirs, clearDir, mkDir, mkDirsForFile, lStatFields,
	myself, removeFilesMatching, removeFilesExcept,
	TWatcherCallbackFunc, TFsChangeType, TFsCallbackFunc, setDirTree,
	TFileOp, fileOpsTable, allTokensInFile,
	} from './fs.lib.ts'
import {
	loadSymbols, sourceLib, libsAndSymbols, getNeededImportStmts,
	} from './symbols.lib.ts'
import {
	execCmd, execCmdSync, cmdSucceeds,
	mkstr, getCmdLine, getProcOpt,
	TExecResult, typeCheck,
	} from './exec.lib.ts'
import {
	testerFunc, compilerFunc, postProcessor,
	isCompilerFunc, isPostProcessor,
	TCompilerInfo, isCompilerInfo,
	TCompilerConfig, isConfigHash,
	hDefaultConfig,
	userConfigPath, hCompilerConfig, loadCompilerConfig,
	installCmd, uninstallCmd, getCompilerInfo, getPostProcessor,
	TCompileStatus, TCompileResult, compileFile,
	getCompilerGlobPattern, allCompilableFiles,
	runUnitTestsFor, runAllUnitTests,
	} from './compile.lib.ts'
import {
	ts2ast, pprintAST,
	} from './typescript.lib.ts'
import {
	civet2ts, civet2tsFile, civet2ast,
	} from './civet.lib.ts'

export {
	undef, defined, notdefined,
	isString, isChar, isNonEmptyString,
	isBoolean, isNumber, isInteger,
	isPrimitive, isNonPrimitive,
	isArray, isArrayOfIntegers, isArrayOfStrings,
	isHash, isFunction, isObject, isRegExp,
	isEmpty, nonEmpty, assert, stringify,
	jsType, isSymbol, symbolName, functionName, functionDef,
	isClass, className, isPromise, isClassInstance, isIterable,

	pass, deeplyEquals, truncStr, OL, ML,
	getOptions, croak, throwsError,
	strToHash, o, removeEmptyKeys, keys,
	hasKey, hasKeys, missingKeys, merge, hit,
	spaces, tabs, rtrim, countChars,
	blockToArray, allLinesInBlock, toArray,
	arrayToBlock, toBlock,
	escapeStr, unescapeStr, escapeBlock,
	relpath, wsSplit, words, addDefaults,
	sinceLoad, sinceLoadStr, sleep,
	getNExtra, rpad, lpad, centered,
	isAlignment, alignString, zpad,
	allMatches, NodeGenerator, range, Fetcher,

	TextTable,

	isFile, isDir, fileExt, withExt,
	rmFile, rmDir, getPathType, getStats,
	parsePath, slurp, barf, isStub,
	allFilesMatching, allLinesIn, watchFile, watchFiles, FileEventHandler,
	normalizePath, mkpath, pathToURL, newerDestFileExists, setDirTree,
	fileOpsTable, allTokensInFile,
	pathSubDirs, clearDir, mkDir, mkDirsForFile, lStatFields,
	myself, removeFilesMatching, removeFilesExcept,

	loadSymbols, sourceLib, libsAndSymbols, getNeededImportStmts,

	setLogLevel, pushLogLevel, popLogLevel,
	curLogLevel, clearLog, getLog, getFullLog,
	INDENT, UNDENT,
	DBG, LOG, WARN, ERR, LOGVALUE, DBGVALUE,

	oneIndent, resetOneIndent, indentLevel, splitLine,
	indented, undented,

	allTokensIn, allTokensInBlock, tokenTable,

	toNice, fromNice, getPrimitive,

	execCmd, execCmdSync, cmdSucceeds,
	mkstr, getCmdLine, getProcOpt, typeCheck,

	isCompilerFunc, isPostProcessor,
	isCompilerInfo, isConfigHash,
	hDefaultConfig,
	userConfigPath, hCompilerConfig, loadCompilerConfig,
	installCmd, uninstallCmd, getCompilerInfo, getPostProcessor,
	compileFile,
	getCompilerGlobPattern, allCompilableFiles,
	runUnitTestsFor, runAllUnitTests, isBlockSpec,
	civet2ts, civet2tsFile, ts2ast, civet2ast, pprintAST,
	}

export type {
	hash, hashof, array, arrayof, regexp, char, integer,
	voidFunc, nonEmptyString,
	TExecResult, TBlockSpec, TPathType, TPathInfo,
	TWatcherCallbackFunc, TFsChangeType, TFsCallbackFunc, TFileOp,
	Token, TTokenGenerator, TAlignment, TNodeInfo,

	testerFunc, compilerFunc, postProcessor,
	TCompilerInfo, TCompilerConfig,

	TCompileStatus, TCompileResult,
	}

// ---------------------------------------------------------------------------

/**
 * converts x to a string, removing any carriage returns
 * and removing leading and trailing whitespace
 */

export const normalizeStr = (x: any): string => {

	return x.toString().replaceAll('\r', '').trim()
}

// ---------------------------------------------------------------------------

/**
 * Remove lines from a string or array
 * pat can be a string or a regular expression
 */

export const removeLines = (
	strOrArray: string | string[],
	pat: string | RegExp
	): string | string[] => {

	assert(isString(pat) || isRegExp(pat),  `Bad arg 2: ${OL(pat)}`)
	const lLines = isString(strOrArray) ? blockToArray(strOrArray) : strOrArray
	const lNewLines = (
		(typeof pat === 'string'?
			lLines.filter((line) => (line !== pat))
		:
			lLines.filter((line) => (line.match(pat) === null)))
		)
	if (isString(strOrArray)) {
		return lNewLines.join('\n')
	}
	else {
		return lNewLines
	}
}

// ---------------------------------------------------------------------------

const hKeyToLogger: hash = {
	I: 'info',
	P: 'profile',
	D: 'debug',
	Q: 'quiet',
	S: 'silent'
	}

export const logLevelFromArgs = (lArgs: string[]): (string | undefined) => {

	for (const str of lArgs) {
		const lMatches = str.match(/^-([A-Za-z0-9_-]*)(=)?/)
		if (lMatches === null) {
			pass()
		}
		else {
			const keyStr = lMatches[1]
			const hasEq = lMatches[2]
			if (isEmpty(hasEq)) {
				for (const key of keys(hKeyToLogger)) {
					if (keyStr.includes(key)) {
						return hKeyToLogger[key]
					}
				}
			}
		}
	}
	return undef
}

// ---------------------------------------------------------------------------

/**
 * Parse command line arguments, optionally specifying which
 * options to expect and/or the expected number of non-options
 *
 * There are 3 kinds of items allowed on the command line:
 *
 * 1. flags, e.g.
 * 	`-fnx` - sets flags `f`, 'n' and `x` to true
 *    flags must be upper or lower case letters
 *
 * 2. an option with a value, e.g.
 * 	`-label=mylabel` - sets option `label` to `'mylabel'`
 * 	if the value contains a space char, it must be quoted
 * 	if the value looks like a number, it's set to a number
 *
 * 3. anything else is a non-option, e.g.
 * 	c:/temp/temp.txt
 * 	if it includes a space char or starts with `-`,
 * 		it must be quoted
 *
 * the 1st argument to getCmdArgs() is optional, and is a hash
 * of information about the expected arguments.
 *
 * If key '_' is present, it must be a hash possibly including keys:
 *    'range' - either an integer specifying the exact number of
 *              non-options expected, of an array of 2 integers
 *              specifying the minimum and maximum number of
 *              non-options expected. The 2nd of these may be
 *              the string 'inf' to indicate no maximum number
 *    'desc' - a text description of what non-options are
 *
 * All other keys are names of options allowed
 *    the associated value
 * must be a hash with possibly these keys:
 *    type - the type of value expected (defaults to 'boolean')
 *    desc - a text description of the option (used on help screens)
 *
 * the 2nd argument to getCmdArgs() is an array of string arguments
 * from the command line (defaults to Deno.args)
 *
 * the 3rd argument to getCmdArgs() is a hash of possible options:
 *    doSetLogger - defaults to true - if false, then options
 *                  -P, -D, -Q, -I and -S no longer set logging options
 *                  and may therefore be used for other purposes
 *
 * By default, the following flags are recognized, and therefore
 * cannot be included in hDesc (this behavior can be
 * disabled by setting hOptions.doSetLogger to false):
 *
 * `-P` - set the current log level to 'profile'
 * `-D` - set the current log level to 'debug'
 * `-Q` - set the current log level to 'warn'
 * `-I` - set the current log level to 'info'
 * `-S` - set the current log level to 'silent'
 *
 * (see library @jdeighan/logger)
 */

export const getCmdArgs = (
	hDesc: (hash | undefined) = undef,
	lArgs: string[] = Deno.args,
	hOptions: hash = {}
	): hash => {

	const {doSetLogger} = getOptions(hOptions, {
		doSetLogger: true
		})

	if (doSetLogger && defined(hDesc)) {
		// --- Make sure hDesc does NOT include any of:
		//        P, D, Q, I, S
		for (const key of keys(hKeyToLogger)) {
			assert(notdefined(hDesc[key]),
					`invalid key ${OL(key)} set in hDesc`)
		}
		const logLevel = logLevelFromArgs(lArgs)
		if (defined(logLevel)) {
			setLogLevel(logLevel)
		}
	}

	if (defined(hDesc)) {
		DBG(`hDesc is: ${OL(hDesc)}`)
	}
	DBG(`lArgs is: ${OL(lArgs)}`)

	if ((lArgs.length === 1)
			&& ['-h','--h','-help','--help'].includes(lArgs[0])
			) {
		if (defined(hDesc)) {
			LOG(helpStr(hDesc))
		}
		else {
			LOG("No help available")
		}
		Deno.exit()
	}

	const hResult: hash = { _: [] }

	// --- Utility functions

	// --- Even gets called for -D, -Q, -P, -S
	const addOption = (name: string, value: any) => {
		DBG(`addOption(${OL(name)}, ${OL(value)})`)
		assert(isString(name), `Not a string: ${OL(name)}`)
		assert(!hasKey(hResult, name),
				`dup key ${name}, hResult = ${OL(hResult)}`)

		if (doSetLogger) {
			const logger = hKeyToLogger[name]
			if (defined(logger)) {
				hResult[name] = true
				setLogLevel(logger)
				return
			}
		}

		if (notdefined(hDesc)) {
			hResult[name] = value
			return
		}
		const {type} = getOptionInfo(hDesc, name)

		// --- type checking
		if (isArray(type)) {
			assert(type.includes(value), "type not an array")
			hResult[name] = value
		}
		else {
			switch(type) {
				case 'string': {
					hResult[name] = value;break;
				}
				case 'boolean': {
					hResult[name] = (
						  (value === 'true')  ? true
						: (value === 'false') ? false
						:                      value
						);break;
				}
				case 'number':case 'float': {
					hResult[name] = parseFloat(value);break;
				}
				case 'integer': {
					hResult[name] = parseInt(value);break;
				}
			}
		}
		return
	}

	const addNonOption = (str: string) => {
		DBG(`addNonOption(${OL(str)})`)
		hResult._.push(str)
	}

	for (const str of lArgs) {
		// --- ignore '--'
		if (str === '--') {
			DBG("skipping --")
			continue
		}

		// --- check if it's an option
		const lMatches = str.match(/^-([A-Za-z0-9_-]*)(?:(=)(.*))?$/)
		if (lMatches === null) {
			// --- it's a non-option
			addNonOption(str)
		}
		else {
			// --- it's an option
			const [_, optStr, eqStr, value] = lMatches
			if (eqStr) {
				addOption(optStr, value)
			}
			else {
				for (const ch of optStr.split('')) {
					addOption(ch, true)
				}
			}
		}
	}

	// --- if hDesc is set, then
	//     Fill in default values if available

	if (defined(hDesc)) {
		// --- Fill in missing keys with default values
		DBG("Filling in missing keys with default values")
		for (const name of keys(hDesc, o`except=_`)) {
			if (notdefined(hResult[name])) {
				const {defaultVal} = getOptionInfo(hDesc, name)
				if (defined(defaultVal)) {
					hResult[name] = defaultVal
				}
			}
		}

		// --- Check of there's a restriction on the number of non-options
		if (hasKey(hDesc, '_')) {
			const len = hResult._.length
			DBG(`Check number of non-options (${len})`)
			const hInfo = getNonOptionInfo(hDesc)
			DBG(`Non-option info: ${OL(hInfo)}`)
			if (defined(hInfo)) {
				const {min, max} = hInfo
				if (defined(min)) {
					assert((len >= min), `${len} non-options < min (${min})`)
				}
				if (defined(max)) {
					assert((len <= max), `${len} non-options > max (${max})`)
				}
			}
		}
	}

	DBG(`hResult = ${OL(hResult)}`)
	return hResult
}

// ---------------------------------------------------------------------------

export const getOptionInfo = (hDesc: hash, name: string): hash => {

	// --- Return value is a hash with keys: type, desc

	assert((name !== '_'), "getOptionInfo(hDesc, '_') called")
	assert(hasKey(hDesc, name), `No such option: -${name}`)
	const h = isHash(hDesc[name]) ? hDesc[name] : {desc: hDesc[name]}
	if (notdefined(h.type)) {
		h.type = (name.length === 1) ? 'boolean' : 'string'
	}
	if (notdefined(h.desc)) {
		h.desc = '<no description available>'
	}
	if (!hasKey(h, 'defaultVal') && (h.type === 'boolean')) {
		h.defaultVal = false
	}
	return h
}

// ---------------------------------------------------------------------------
// --- returns undef if no '_' key in hDesc

type nonOptionInfo = {
	desc: string
	min?: number
	max?: number
	}

export const getNonOptionInfo = (hDesc: hash): (nonOptionInfo | undefined) => {

	DBG(`hDesc = ${OL(hDesc)}`)
	if (!hasKey(hDesc, '_')) {
		DBG("No '_' key in hDesc")
		return undef
	}
	let {desc, range} = hDesc._
	if (isEmpty(desc)) {
		desc = '<no description available>'
	}
	DBG(`desc = ${desc}`)
	if (defined(range)) {
		DBG(`range = ${OL(range)}`)
		if (isInteger(range)) {
			DBG(`Integer range: ${range}`)
			return {
				desc,
				min: range,
				max: range
				}
		}
		else if (isArray(range)) {
			assert((range.length === 2), `Bad '_' key: ${OL(range)}`)
			const [min, max] = range
			DBG(`Array range: ${min}..${max}`)
			assert(isInteger(min), "range min not an integer")
			if (max === 'inf') {
				return {
					desc,
					min,
					max: Infinity
					}
			}
			else {
				assert(isInteger(max), "range max not an integer")
				return {
					desc,
					min,
					max
					}
			}
		}
		else {
			croak(`Invalid range: ${OL(range)}`)
		}
	}
	else {
		DBG("No range key")
		return {desc}
	}
}

// ---------------------------------------------------------------------------

const cntStr = (n: number, str: string): string => {
	return (n===1) ? `1 ${str}` : `${n} ${str}s`
}

export const helpStr = (hDesc: hash): string => {

	const lLines = ["Available options:"]
	const push = (str: string, level: number=0): void => {
		lLines.push(spaces(3*level) + str)
	}

	for (const name of keys(hDesc, o`except=_`)) {
		const {type, desc} = getOptionInfo(hDesc, name)
		push(`-${name}: ${type} - ${desc}`, 1)
	}
	if (defined(hDesc._)) {
		push("Non-options:")
		if (isString(hDesc._)) {
			push(`${hDesc._}`, 1)
		}
		else if (isHash(hDesc._)) {
			const {desc, range} = hDesc._
			push((desc || '<no description available>'), 1)
			if (defined(range)) {
				if (isInteger(range)) {
					push("There must be exactly #{cntStr(range, 'non-option')", 1)
				}
				else if (isArray(range)) {
					const [min, max] = range
					if (min > 0) {
						push(`There must be at least ${cntStr(min, 'non-option')}`, 1)
					}
					if (max !== 'inf') {
						push(`There must be at most ${cntStr(max, 'non-option')}`, 1)
					}
				}
			}
		}
		else {
			croak("Bad descriptor for '_'")
		}
	}
	return lLines.join('\n')
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,