/**
 * utils - utility functions
 * @module
 */

// utils.lib.civet

"use strict";
import {
	undef, defined, notdefined,
	isString, char, integer, isChar, isNonEmptyString,
	isBoolean, isNumber, isInteger,
	isPrimitive, isNonPrimitive,
	isArray, isArrayOfIntegers, isArrayOfStrings,
	isHash, isFunction, isObject, isRegExp,
	isEmpty, nonEmpty, assert,
	hash, hashof, array, arrayof,
	regexp, voidFunc, nonEmptyString, stringify,
	} from './datatypes.lib.ts'
import {
	pass, deeplyEquals, OL, ML, getOptions, croak, throwsError,
	strToHash, o, removeEmptyKeys, keys,
	hasKey, hasKeys, missingKeys, merge, hit,
	spaces, tabs, rtrim, countChars,
	blockToArray, allLinesInBlock,
	blockSpec, isBlockSpec, toArray,
	arrayToBlock, toBlock,
	escapeStr, escapeBlock, relpath, wsSplit, words, addDefaults,
	sinceLoad, sinceLoadStr, sleep,
	getNExtra, rpad, lpad, centered,
	alignment, isAlignment, alignString, zpad,
	allMatches, NodeGenerator, TNodeInfo,
	} from './llutils.lib.ts'
import {
	setLogLevel, pushLogLevel, popLogLevel,
	curLogLevel, clearLog, getLog, getFullLog,
	LogCmd,
	DBG, LOG, WARN, ERR, LOGVALUE, DBGVALUE,
	} from './logger.lib.ts'
import {TextTable} from './text-table.lib.ts'
import {
	oneIndent, resetOneIndent, indentLevel, splitLine,
	indented, undented,
	} from './indent.lib.ts'
import {
	Token, allTokensIn, allTokensInBlock, tokenTable, tokenGenerator,
	} from './tokens.lib.ts'
import {
	isFile, isDir, fileExt, withExt,
	rmFile, rmDir, pathType, getPathType, getStats,
	isStub, pathInfo, parsePath, slurp, barf,
	allFilesMatching, allLinesIn, watchFile, watchFiles, FileEventHandler,
	normalizePath, mkpath, pathToURL, newerDestFileExists,
	pathSubDirs, clearDir, mkDir, mkDirsForFile, lStatFields,
	myself, removeFilesMatching, removeFilesExcept,
	watcherCallbackFunc, fsChangeType, fsCallbackFunc, setDirTree,
	FileOp, fileOpsTable, allTokensInFile,
	} from './fs.lib.ts'
import {
	loadSymbols, sourceLib, libsAndSymbols, getNeededImportStmts,
	} from './symbols.lib.ts'
import {
	execCmd, execCmdSync, cmdSucceeds,
	mkstr, getCmdLine, getProcOpt,
	execCmdResult, typeCheck,
	} from './exec.lib.ts'
import {
	testerFunc, compilerFunc, postProcessor,
	isCompilerFunc, isPostProcessor,
	compilerInfo, isCompilerInfo,
	compilerConfigHash, isConfigHash,
	hDefaultConfig,
	userConfigPath, hCompilerConfig, loadCompilerConfig,
	installCmd, uninstallCmd, getCompilerInfo, getPostProcessor,
	compileStatus, compileResult, compileFile,
	getCompilerGlobPattern, allCompilableFiles,
	runUnitTestsFor, runAllUnitTests,
	} from './compile.lib.ts'
import {
	civet2ast,
	} from './civet.lib.ts'

export {
	undef, defined, notdefined,
	isString, isChar, isNonEmptyString,
	isBoolean, isNumber, isInteger,
	isPrimitive, isNonPrimitive,
	isArray, isArrayOfIntegers, isArrayOfStrings,
	isHash, isFunction, isObject, isRegExp,
	isEmpty, nonEmpty, assert, stringify,

	pass, deeplyEquals, OL, ML, getOptions, croak, throwsError,
	strToHash, o, removeEmptyKeys, keys,
	hasKey, hasKeys, missingKeys, merge, hit,
	spaces, tabs, rtrim, countChars,
	blockToArray, allLinesInBlock, toArray,
	arrayToBlock, toBlock,
	escapeStr, escapeBlock, relpath, wsSplit, words, addDefaults,
	sinceLoad, sinceLoadStr, sleep,
	getNExtra, rpad, lpad, centered,
	isAlignment, alignString, zpad,
	allMatches, NodeGenerator,

	TextTable,

	isFile, isDir, fileExt, withExt,
	rmFile, rmDir, getPathType, getStats,
	parsePath, slurp, barf, isStub,
	allFilesMatching, allLinesIn, watchFile, watchFiles, FileEventHandler,
	normalizePath, mkpath, pathToURL, newerDestFileExists, setDirTree,
	fileOpsTable, allTokensInFile,
	pathSubDirs, clearDir, mkDir, mkDirsForFile, lStatFields,
	myself, removeFilesMatching, removeFilesExcept,

	loadSymbols, sourceLib, libsAndSymbols, getNeededImportStmts,

	setLogLevel, pushLogLevel, popLogLevel,
	curLogLevel, clearLog, getLog, getFullLog,
	LogCmd,
	DBG, LOG, WARN, ERR, LOGVALUE, DBGVALUE,

	oneIndent, resetOneIndent, indentLevel, splitLine,
	indented, undented,

	allTokensIn, allTokensInBlock, tokenTable,

	execCmd, execCmdSync, cmdSucceeds,
	mkstr, getCmdLine, getProcOpt, typeCheck,

	isCompilerFunc, isPostProcessor,
	isCompilerInfo, isConfigHash,
	hDefaultConfig,
	userConfigPath, hCompilerConfig, loadCompilerConfig,
	installCmd, uninstallCmd, getCompilerInfo, getPostProcessor,
	compileFile,
	getCompilerGlobPattern, allCompilableFiles,
	runUnitTestsFor, runAllUnitTests, isBlockSpec,
	civet2ast,
	}

export type {
	hash, hashof, array, arrayof, regexp, char, integer,
	voidFunc, nonEmptyString,
	execCmdResult, blockSpec, pathType, pathInfo,
	watcherCallbackFunc, fsChangeType, fsCallbackFunc, FileOp,
	Token, tokenGenerator, alignment, TNodeInfo,

	testerFunc, compilerFunc, postProcessor,
	compilerInfo, compilerConfigHash,

	compileStatus, compileResult,
	}

// ---------------------------------------------------------------------------

/**
 * A generator that yields integers starting with 0 and
 * continuing to n-1
 */

export const range = function*(n: number): Generator<number, void, void> {

	let i = 0
	while (i < n) {
		yield i
		i = i + 1
	}
	return
}

// ---------------------------------------------------------------------------

/**
 * converts x to a string, removing any carriage returns
 * and removing leading and trailing whitespace
 */

export const normalizeStr = (x: any): string => {

	return x.toString().replaceAll('\r', '').trim()
}

// ---------------------------------------------------------------------------

/**
 * Remove lines from a string or array
 * pat can be a string or a regular expression
 */

export const removeLines = (
	strOrArray: string | string[],
	pat: string | RegExp
	): string | string[] => {

	assert(isString(pat) || isRegExp(pat),  `Bad arg 2: ${OL(pat)}`)
	const lLines = isString(strOrArray) ? blockToArray(strOrArray) : strOrArray
	const lNewLines = (
		(typeof pat === 'string'?
			lLines.filter((line) => (line !== pat))
		:
			lLines.filter((line) => (line.match(pat) === null)))
		)
	if (isString(strOrArray)) {
		return lNewLines.join('\n')
	}
	else {
		return lNewLines
	}
}

// ---------------------------------------------------------------------------

const hKeyToLogger: hash = {
	I: 'info',
	P: 'profile',
	D: 'debug',
	Q: 'quiet',
	S: 'silent'
	}

export const logLevelFromArgs = (lArgs: string[]): (string | undefined) => {

	for (const str of lArgs) {
		const lMatches = str.match(/^-([A-Za-z0-9_-]*)(=)?/)
		if (lMatches === null) {
			pass()
		}
		else {
			const keyStr = lMatches[1]
			const hasEq = lMatches[2]
			if (isEmpty(hasEq)) {
				for (const key of keys(hKeyToLogger)) {
					if (keyStr.includes(key)) {
						return hKeyToLogger[key]
					}
				}
			}
		}
	}
	return undef
}

// ---------------------------------------------------------------------------

/**
 * Parse command line arguments, optionally specifying which
 * options to expect and/or the expected number of non-options
 *
 * There are 3 kinds of items allowed on the command line:
 *
 * 1. flags, e.g.
 * 	`-fnx` - sets flags `f`, 'n' and `x` to true
 *    flags must be upper or lower case letters
 *
 * 2. an option with a value, e.g.
 * 	`-label=mylabel` - sets option `label` to `'mylabel'`
 * 	if the value contains a space char, it must be quoted
 * 	if the value looks like a number, it's set to a number
 *
 * 3. anything else is a non-option, e.g.
 * 	c:/temp/temp.txt
 * 	if it includes a space char or starts with `-`,
 * 		it must be quoted
 *
 * the 1st argument to getCmdArgs() is optional, and is a hash
 * of information about the expected arguments.
 *
 * If key '_' is present, it must be a hash possibly including keys:
 *    'range' - either an integer specifying the exact number of
 *              non-options expected, of an array of 2 integers
 *              specifying the minimum and maximum number of
 *              non-options expected. The 2nd of these may be
 *              the string 'inf' to indicate no maximum number
 *    'desc' - a text description of what non-options are
 *
 * All other keys are names of options allowed
 *    the associated value
 * must be a hash with possibly these keys:
 *    type - the type of value expected (defaults to 'boolean')
 *    desc - a text description of the option (used on help screens)
 *
 * the 2nd argument to getCmdArgs() is an array of string arguments
 * from the command line (defaults to Deno.args)
 *
 * the 3rd argument to getCmdArgs() is a hash of possible options:
 *    doSetLogger - defaults to true - if false, then options
 *                  -P, -D, -Q, -I and -S no longer set logging options
 *                  and may therefore be used for other purposes
 *
 * By default, the following flags are recognized, and therefore
 * cannot be included in hDesc (this behavior can be
 * disabled by setting hOptions.doSetLogger to false):
 *
 * `-P` - set the current log level to 'profile'
 * `-D` - set the current log level to 'debug'
 * `-Q` - set the current log level to 'warn'
 * `-I` - set the current log level to 'info'
 * `-S` - set the current log level to 'silent'
 *
 * (see library @jdeighan/logger)
 */

export const getCmdArgs = (
	hDesc: (hash | undefined) = undef,
	lArgs: string[] = Deno.args,
	hOptions: hash = {}
	): hash => {

	const {doSetLogger} = getOptions(hOptions, {
		doSetLogger: true
		})

	if (doSetLogger && defined(hDesc)) {
		// --- Make sure hDesc does NOT include any of:
		//        P, D, Q, I, S
		for (const key of keys(hKeyToLogger)) {
			assert(notdefined(hDesc[key]),
					`invalid key ${OL(key)} set in hDesc`)
		}
		const logLevel = logLevelFromArgs(lArgs)
		if (defined(logLevel)) {
			setLogLevel(logLevel)
		}
	}

	if (defined(hDesc)) {
		DBG(`hDesc is: ${OL(hDesc)}`)
	}
	DBG(`lArgs is: ${OL(lArgs)}`)

	if ((lArgs.length === 1)
			&& ['-h','--h','-help','--help'].includes(lArgs[0])
			) {
		if (defined(hDesc)) {
			LOG(helpStr(hDesc))
		}
		else {
			LOG("No help available")
		}
		Deno.exit()
	}

	const hResult: hash = { _: [] }

	// --- Utility functions

	// --- Even gets called for -D, -Q, -P, -S
	const addOption = (name: string, value: any) => {
		DBG(`addOption(${OL(name)}, ${OL(value)})`)
		assert(isString(name), `Not a string: ${OL(name)}`)
		assert(!hasKey(hResult, name),
				`dup key ${name}, hResult = ${OL(hResult)}`)

		if (doSetLogger) {
			const logger = hKeyToLogger[name]
			if (defined(logger)) {
				hResult[name] = true
				setLogLevel(logger)
				return
			}
		}

		if (notdefined(hDesc)) {
			hResult[name] = value
			return
		}
		const {type} = getOptionInfo(hDesc, name)

		// --- type checking
		if (isArray(type)) {
			assert(type.includes(value), "type not an array")
			hResult[name] = value
		}
		else {
			switch(type) {
				case 'string': {
					hResult[name] = value;break;
				}
				case 'boolean': {
					hResult[name] = (
						  (value === 'true')  ? true
						: (value === 'false') ? false
						:                      value
						);break;
				}
				case 'number':case 'float': {
					hResult[name] = parseFloat(value);break;
				}
				case 'integer': {
					hResult[name] = parseInt(value);break;
				}
			}
		}
		return
	}

	const addNonOption = (str: string) => {
		DBG(`addNonOption(${OL(str)})`)
		hResult._.push(str)
	}

	for (const str of lArgs) {
		// --- ignore '--'
		if (str === '--') {
			DBG("skipping --")
			continue
		}

		// --- check if it's an option
		const lMatches = str.match(/^-([A-Za-z0-9_-]*)(?:(=)(.*))?$/)
		if (lMatches === null) {
			// --- it's a non-option
			addNonOption(str)
		}
		else {
			// --- it's an option
			const [_, optStr, eqStr, value] = lMatches
			if (eqStr) {
				addOption(optStr, value)
			}
			else {
				for (const ch of optStr.split('')) {
					addOption(ch, true)
				}
			}
		}
	}

	// --- if hDesc is set, then
	//     Fill in default values if available

	if (defined(hDesc)) {
		// --- Fill in missing keys with default values
		DBG("Filling in missing keys with default values")
		for (const name of keys(hDesc, o`except=_`)) {
			if (notdefined(hResult[name])) {
				const {defaultVal} = getOptionInfo(hDesc, name)
				if (defined(defaultVal)) {
					hResult[name] = defaultVal
				}
			}
		}

		// --- Check of there's a restriction on the number of non-options
		if (hasKey(hDesc, '_')) {
			const len = hResult._.length
			DBG(`Check number of non-options (${len})`)
			const hInfo = getNonOptionInfo(hDesc)
			DBG(`Non-option info: ${OL(hInfo)}`)
			if (defined(hInfo)) {
				const {min, max} = hInfo
				if (defined(min)) {
					assert((len >= min), `${len} non-options < min (${min})`)
				}
				if (defined(max)) {
					assert((len <= max), `${len} non-options > max (${max})`)
				}
			}
		}
	}

	DBG(`hResult = ${OL(hResult)}`)
	return hResult
}

// ---------------------------------------------------------------------------

export const getOptionInfo = (hDesc: hash, name: string): hash => {

	// --- Return value is a hash with keys: type, desc

	assert((name !== '_'), "getOptionInfo(hDesc, '_') called")
	assert(hasKey(hDesc, name), `No such option: -${name}`)
	const h = isHash(hDesc[name]) ? hDesc[name] : {desc: hDesc[name]}
	if (notdefined(h.type)) {
		h.type = (name.length === 1) ? 'boolean' : 'string'
	}
	if (notdefined(h.desc)) {
		h.desc = '<no description available>'
	}
	if (!hasKey(h, 'defaultVal') && (h.type === 'boolean')) {
		h.defaultVal = false
	}
	return h
}

// ---------------------------------------------------------------------------
// --- returns undef if no '_' key in hDesc

type nonOptionInfo = {
	desc: string
	min?: number
	max?: number
	}

export const getNonOptionInfo = (hDesc: hash): (nonOptionInfo | undefined) => {

	DBG(`hDesc = ${OL(hDesc)}`)
	if (!hasKey(hDesc, '_')) {
		DBG("No '_' key in hDesc")
		return undef
	}
	let {desc, range} = hDesc._
	if (isEmpty(desc)) {
		desc = '<no description available>'
	}
	DBG(`desc = ${desc}`)
	if (defined(range)) {
		DBG(`range = ${OL(range)}`)
		if (isInteger(range)) {
			DBG(`Integer range: ${range}`)
			return {
				desc,
				min: range,
				max: range
				}
		}
		else if (isArray(range)) {
			assert((range.length === 2), `Bad '_' key: ${OL(range)}`)
			const [min, max] = range
			DBG(`Array range: ${min}..${max}`)
			assert(isInteger(min), "range min not an integer")
			if (max === 'inf') {
				return {
					desc,
					min,
					max: Infinity
					}
			}
			else {
				assert(isInteger(max), "range max not an integer")
				return {
					desc,
					min,
					max
					}
			}
		}
		else {
			croak(`Invalid range: ${OL(range)}`)
		}
	}
	else {
		DBG("No range key")
		return {desc}
	}
}

// ---------------------------------------------------------------------------

const cntStr = (n: number, str: string): string => {
	return (n===1) ? `1 ${str}` : `${n} ${str}s`
}

export const helpStr = (hDesc: hash): string => {

	const lLines = ["Available options:"]
	const push = (str: string, level: number=0): void => {
		lLines.push(spaces(3*level) + str)
	}

	for (const name of keys(hDesc, o`except=_`)) {
		const {type, desc} = getOptionInfo(hDesc, name)
		push(`-${name}: ${type} - ${desc}`, 1)
	}
	if (defined(hDesc._)) {
		push("Non-options:")
		if (isString(hDesc._)) {
			push(`${hDesc._}`, 1)
		}
		else if (isHash(hDesc._)) {
			const {desc, range} = hDesc._
			push((desc || '<no description available>'), 1)
			if (defined(range)) {
				if (isInteger(range)) {
					push("There must be exactly #{cntStr(range, 'non-option')", 1)
				}
				else if (isArray(range)) {
					const [min, max] = range
					if (min > 0) {
						push(`There must be at least ${cntStr(min, 'non-option')}`, 1)
					}
					if (max !== 'inf') {
						push(`There must be at most ${cntStr(max, 'non-option')}`, 1)
					}
				}
			}
		}
		else {
			croak("Bad descriptor for '_'")
		}
	}
	return lLines.join('\n')
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3JjL2xpYi91dGlscy5saWIuY2l2ZXQudHN4Iiwic291cmNlcyI6WyJzcmMvbGliL3V0aWxzLmxpYi5jaXZldCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNILEFBQUE7QUFDQSxBQUFBLGtCQUFpQjtBQUNqQixBQUFBO0FBQ0E7QUFBQSxNQUFNLENBQUMsQ0FBQztBQUNSLENBQUMsS0FBSyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsVUFBVSxDQUFDO0FBQzVCLENBQUMsUUFBUSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsZ0JBQWdCLENBQUM7QUFDbkQsQ0FBQyxTQUFTLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxTQUFTLENBQUM7QUFDaEMsQ0FBQyxXQUFXLENBQUMsQ0FBQyxjQUFjLENBQUM7QUFDN0IsQ0FBQyxPQUFPLENBQUMsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLGdCQUFnQixDQUFDO0FBQzlDLENBQUMsTUFBTSxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsUUFBUSxDQUFDO0FBQ3hDLENBQUMsT0FBTyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsTUFBTSxDQUFDO0FBQzNCLENBQUMsSUFBSSxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsT0FBTyxDQUFDO0FBQzlCLENBQUMsTUFBTSxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsY0FBYyxDQUFDLENBQUMsU0FBUyxDQUFDO0FBQzdDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxvQkFBb0I7QUFDNUIsQUFBQSxBQUFBLE1BQU0sQ0FBQyxDQUFDO0FBQ1IsQ0FBQyxJQUFJLENBQUMsQ0FBQyxZQUFZLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxXQUFXLENBQUM7QUFDNUQsQ0FB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QUNULEFBQUEsRUFBRSxJQUFJLENBQUEsQ0FBQTtBQUNOLEFBQUEsR0FBUyxNQUFOLE1BQU0sQ0FBQyxDQUFFLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztBQUN4QixBQUFBLEdBQVEsTUFBTCxLQUFLLENBQUMsQ0FBRSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7QUFDdkIsQUFBQSxHQUFHLEdBQUcsQ0FBQSxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUEsQ0FBQSxDQUFBO0FBQ3BCLEFBQUEsSUFBSSxHQUFHLENBQUMsQ0FBQSxNQUFBLEdBQUcsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFBLENBQUEsQ0FBQTtBQUNqQyxBQUFBLEtBQUssR0FBRyxDQUFBLE1BQU0sQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUEsQ0FBQSxDQUFBO0FBQzVCLEFBQUEsTUFBTSxNQUFNLENBQUMsWUFBWSxDQUFDLEdBQUcsQztLQUFDLEM7SUFBQSxDO0dBQUEsQztFQUFBLEM7Q0FBQSxDQUFBO0FBQzlCLEFBQUEsQ0FBQyxNQUFNLENBQUMsSztBQUFLLENBQUE7QUFDYixBQUFBO0FBQ0EsQUFBQSw4RUFBNkU7QUFDN0UsQUFBQTtBQUNBLEFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSCxBQUFBO0FBQ0EsQUFBQSxBQUFBLE1BQU0sQ0FBVyxNQUFWLFVBQVUsQ0FBQyxDQUFFLENBQUMsQ0FBQztBQUN0QixBQUFBLENBQUMsS0FBSyxDLEMsQ0FBQyxBQUFDLEksWSxDQUFLLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQztBQUN0QixBQUFBLENBQUMsS0FBSyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQztBQUM3QixBQUFBLENBQUMsUUFBUSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDcEIsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFBLENBQUE7QUFDWCxBQUFBO0FBQ0EsQUFBQSxDQUFjLE1BQWIsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFFLENBQUMsVUFBVSxDQUFBLEFBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztBQUN4QyxBQUFBLEVBQUUsV0FBVyxDQUFDLENBQUMsSUFBSTtBQUNuQixFQUFFLENBQUMsQ0FBQTtBQUNILEFBQUE7QUFDQSxBQUFBLENBQUMsR0FBRyxDQUFBLFdBQVcsQ0FBQyxFQUFFLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFBLENBQUEsQ0FBQTtBQUNqQyxBQUFBLEVBQUUsK0NBQThDO0FBQ2hELEFBQUEsRUFBRSx1QkFBc0I7QUFDeEIsQUFBQSxFQUFFLEdBQUcsQ0FBQyxDQUFBLE1BQUEsR0FBRyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUEsQ0FBQSxDQUFBO0FBQy9CLEFBQUEsR0FBRyxNQUFNLENBQUEsQUFBQyxVQUFVLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7QUFDakMsQUFBQSxLQUFLLENBQUMsWUFBWSxFQUFFLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxhQUFhLENBQUMsQztFQUFBLENBQUE7QUFDMUMsQUFBQSxFQUFVLE1BQVIsUUFBUSxDQUFDLENBQUUsQ0FBQyxnQkFBZ0IsQ0FBQyxLQUFLLENBQUM7QUFDckMsQUFBQSxFQUFFLEdBQUcsQ0FBQSxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUEsQ0FBQSxDQUFBO0FBQ3RCLEFBQUEsR0FBRyxXQUFXLENBQUEsQUFBQyxRQUFRLEM7RUFBQSxDO0NBQUEsQ0FBQTtBQUN2QixBQUFBO0FBQ0EsQUFBQSxDQUFDLEdBQUcsQ0FBQSxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUEsQ0FBQSxDQUFBO0FBQ2xCLEFBQUEsRUFBRSxHQUFHLENBQUEsQUFBQyxDQUFDLFVBQVUsRUFBRSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDO0NBQUEsQ0FBQTtBQUM5QixBQUFBLENBQUMsR0FBRyxDQUFBLEFBQUMsQ0FBQyxVQUFVLEVBQUUsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQTtBQUM3QixBQUFBO0FBQ0EsQUFBQSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsR0FBRSxDQUFDLENBQUMsQ0FBQztBQUN4QixBQUFBLEdBQUcsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUN0RCxHQUFHLENBQUMsQ0FBQSxDQUFBO0FBQ0osQUFBQSxFQUFFLEdBQUcsQ0FBQSxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUEsQ0FBQSxDQUFBO0FBQ25CLEFBQUEsR0FBRyxHQUFHLENBQUEsQUFBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEM7RUFBQSxDQUFBO0FBQ3JCLEFBQUEsRUFBRSxJQUFJLENBQUEsQ0FBQTtBQUNOLEFBQUEsR0FBRyxHQUFHLENBQUEsQUFBQyxtQkFBbUIsQztFQUFBLENBQUE7QUFDMUIsQUFBQSxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsQztDQUFDLENBQUE7QUFDYixBQUFBO0FBQ0EsQUFBQSxDQUFjLE1BQWIsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUMzQixBQUFBO0FBQ0EsQUFBQSxDQUFDLHdCQUF1QjtBQUN4QixBQUFBO0FBQ0EsQUFBQSxDQUFDLDBDQUF5QztBQUMxQyxBQUFBLENBQVUsTUFBVCxTQUFTLENBQUMsQ0FBRSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFBLENBQUE7QUFDM0MsQUFBQSxFQUFFLEdBQUcsQ0FBQSxBQUFDLENBQUMsVUFBVSxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBO0FBQzVDLEFBQUEsRUFBRSxNQUFNLENBQUEsQUFBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLGNBQWMsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFBO0FBQ3BELEFBQUEsRUFBRSxNQUFNLENBQUEsQUFBQyxDQUFJLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUNuQyxBQUFBLElBQUksQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDLFlBQVksRUFBRSxFQUFFLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFBO0FBQy9DLEFBQUE7QUFDQSxBQUFBLEVBQUUsR0FBRyxDQUFBLFdBQVcsQ0FBQSxDQUFBLENBQUE7QUFDaEIsQUFBQSxHQUFTLE1BQU4sTUFBTSxDQUFDLENBQUUsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDO0FBQy9CLEFBQUEsR0FBRyxHQUFHLENBQUEsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFBLENBQUEsQ0FBQTtBQUNyQixBQUFBLElBQUksT0FBTyxDQUFDLElBQUksQ0FBQyxDLENBQUUsQ0FBQyxJQUFJO0FBQ3hCLEFBQUEsSUFBSSxXQUFXLENBQUEsQUFBQyxNQUFNLENBQUE7QUFDdEIsQUFBQSxJQUFJLE07R0FBTSxDO0VBQUEsQ0FBQTtBQUNWLEFBQUE7QUFDQSxBQUFBLEVBQUUsR0FBRyxDQUFBLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQSxDQUFBLENBQUE7QUFDdEIsQUFBQSxHQUFHLE9BQU8sQ0FBQyxJQUFJLENBQUMsQyxDQUFFLENBQUMsS0FBSztBQUN4QixBQUFBLEdBQUcsTTtFQUFNLENBQUE7QUFDVCxBQUFBLEVBQVEsTUFBTixDQUFDLElBQUksQ0FBQyxDQUFDLENBQUUsQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLENBQUMsSUFBSSxDQUFDO0FBQ3RDLEFBQUE7QUFDQSxBQUFBLEVBQUUsb0JBQW1CO0FBQ3JCLEFBQUEsRUFBRSxHQUFHLENBQUEsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFBLENBQUEsQ0FBQTtBQUNsQixBQUFBLEdBQUcsTUFBTSxDQUFBLEFBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLG1CQUFtQixDQUFBO0FBQ25ELEFBQUEsR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFDLEMsQ0FBRSxDQUFDLEs7RUFBSyxDQUFBO0FBQ3hCLEFBQUEsRUFBRSxJQUFJLENBQUEsQ0FBQTtBQUNOLEFBQUEsR0FBRyxNQUFNLENBQUEsQUFBQyxJQUFJLENBQUEsQ0FBQSxDQUFBO0FBQ2QsQUFBQSxJQUFJLElBQUksQ0FBQyxRQUFRLENBQUEsQ0FBQSxDQUFBO0FBQ2pCLEFBQUEsS0FBSyxPQUFPLENBQUMsSUFBSSxDQUFDLEMsQ0FBRSxDQUFDLEtBQUssTztJQUFBLENBQUE7QUFDMUIsQUFBQSxJQUFJLElBQUksQ0FBQyxTQUFTLENBQUEsQ0FBQSxDQUFBO0FBQ2xCLEFBQUEsS0FBSyxPQUFPLENBQUMsSUFBSSxDQUFDLEMsQ0FBRSxDQUFDLENBQUM7QUFDdEIsQUFBQSxRQUFRLENBQUMsS0FBSyxDQUFDLEdBQUUsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUMsSUFBSTtBQUNqQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxHQUFFLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUs7QUFDbEMsTUFBTSxDQUFDLHNCQUFzQixLQUFLO0FBQ2xDLE1BQU0sQ0FBQyxPO0lBQUEsQ0FBQTtBQUNQLEFBQUEsSUFBSSxJQUFJLENBQUMsUUFBUSxDLEtBQUMsT0FBTyxDQUFBLENBQUEsQ0FBQTtBQUN6QixBQUFBLEtBQUssT0FBTyxDQUFDLElBQUksQ0FBQyxDLENBQUUsQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLE87SUFBQSxDQUFBO0FBQ3RDLEFBQUEsSUFBSSxJQUFJLENBQUMsU0FBUyxDQUFBLENBQUEsQ0FBQTtBQUNsQixBQUFBLEtBQUssT0FBTyxDQUFDLElBQUksQ0FBQyxDLENBQUUsQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLE87SUFBQSxDO0dBQUEsQztFQUFBLENBQUE7QUFDcEMsQUFBQSxFQUFFLE07Q0FBTSxDQUFBO0FBQ1IsQUFBQTtBQUNBLEFBQUEsQ0FBYSxNQUFaLFlBQVksQ0FBQyxDQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUEsQ0FBQTtBQUNqQyxBQUFBLEVBQUUsR0FBRyxDQUFBLEFBQUMsQ0FBQyxhQUFhLEVBQUUsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBO0FBQ2hDLEFBQUEsRUFBRSxPQUFPLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQSxBQUFDLEdBQUcsQztDQUFBLENBQUE7QUFDcEIsQUFBQTtBQUNBLEFBQUEsQ0FBQyxHQUFHLENBQUMsQ0FBQSxNQUFBLEdBQUcsQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFBLENBQUEsQ0FBQTtBQUNqQixBQUFBLEVBQUUsa0JBQWlCO0FBQ25CLEFBQUEsRUFBRSxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQSxDQUFBO0FBQ2xCLEFBQUEsR0FBRyxHQUFHLENBQUEsQUFBQyxhQUFhLENBQUE7QUFDcEIsQUFBQSxHQUFHLFE7RUFBUSxDQUFBO0FBQ1gsQUFBQTtBQUNBLEFBQUEsRUFBRSw4QkFBNkI7QUFDL0IsQUFBQSxFQUFVLE1BQVIsUUFBUSxDQUFDLENBQUUsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUcsQ0FBQyxBQUN6QixDQUFDLEFBQ0QsQ0FBQyxhQUFhLEVBQUUsQUFDaEIsR0FBRyxBQUNGLEdBQUcsQUFDSCxJQUFJLEFBQ0osRUFBRSxBQUNILENBQUMsQ0FBRyxDQUFDO0FBQ1IsQUFBQSxFQUFFLEdBQUcsQ0FBQyxRQUFRLENBQUMsR0FBRSxDQUFDLElBQUksQ0FBQyxDQUFBLENBQUE7QUFDdkIsQUFBQSxHQUFHLHdCQUF1QjtBQUMxQixBQUFBLEdBQUcsWUFBWSxDQUFBLEFBQUMsR0FBRyxDO0VBQUEsQ0FBQTtBQUNuQixBQUFBLEVBQUUsSUFBSSxDQUFBLENBQUE7QUFDTixBQUFBLEdBQUcscUJBQW9CO0FBQ3ZCLEFBQUEsR0FBNEIsTUFBekIsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFFLENBQUMsUUFBUTtBQUN4QyxBQUFBLEdBQUcsR0FBRyxDQUFBLEtBQUssQ0FBQSxDQUFBLENBQUE7QUFDWCxBQUFBLElBQUksU0FBUyxDQUFBLEFBQUMsTUFBTSxDQUFDLENBQUMsS0FBSyxDO0dBQUEsQ0FBQTtBQUMzQixBQUFBLEdBQUcsSUFBSSxDQUFBLENBQUE7QUFDUCxBQUFBLElBQUksR0FBRyxDQUFDLENBQUEsTUFBQSxFQUFFLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUEsQ0FBQSxDQUFBO0FBQzlCLEFBQUEsS0FBSyxTQUFTLENBQUEsQUFBQyxFQUFFLENBQUMsQ0FBQyxJQUFJLEM7SUFBQSxDO0dBQUEsQztFQUFBLEM7Q0FBQSxDQUFBO0FBQ3ZCLEFBQUE7QUFDQSxBQUFBLENBQUMsNEJBQTJCO0FBQzVCLEFBQUEsQ0FBQywwQ0FBeUM7QUFDMUMsQUFBQTtBQUNBLEFBQUEsQ0FBQyxHQUFHLENBQUEsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFBLENBQUEsQ0FBQTtBQUNsQixBQUFBLEVBQUUsK0NBQThDO0FBQ2hELEFBQUEsRUFBRSxHQUFHLENBQUEsQUFBQyw2Q0FBNkMsQ0FBQTtBQUNuRCxBQUFBLEVBQUUsR0FBRyxDQUFDLENBQUEsTUFBQSxJQUFJLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDLFVBQVcsQ0FBQyxDQUFBLENBQUEsQ0FBQTtBQUN0QyxBQUFBLEdBQUcsR0FBRyxDQUFBLFVBQVUsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQSxDQUFBLENBQUE7QUFDL0IsQUFBQSxJQUFnQixNQUFaLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBRSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsQ0FBQyxJQUFJLENBQUM7QUFDOUMsQUFBQSxJQUFJLEdBQUcsQ0FBQSxPQUFPLENBQUMsVUFBVSxDQUFDLENBQUEsQ0FBQSxDQUFBO0FBQzFCLEFBQUEsS0FBSyxPQUFPLENBQUMsSUFBSSxDQUFDLEMsQ0FBRSxDQUFDLFU7SUFBVSxDO0dBQUEsQztFQUFBLENBQUE7QUFDL0IsQUFBQTtBQUNBLEFBQUEsRUFBRSxrRUFBaUU7QUFDbkUsQUFBQSxFQUFFLEdBQUcsQ0FBQSxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUEsQ0FBQSxDQUFBO0FBQ3ZCLEFBQUEsR0FBTSxNQUFILEdBQUcsQ0FBQyxDQUFFLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxNQUFNO0FBQzFCLEFBQUEsR0FBRyxHQUFHLENBQUEsQUFBQyxDQUFDLDZCQUE2QixFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQTtBQUM3QyxBQUFBLEdBQVEsTUFBTCxLQUFLLENBQUMsQ0FBRSxDQUFDLGdCQUFnQixDQUFDLEtBQUssQ0FBQztBQUNuQyxBQUFBLEdBQUcsR0FBRyxDQUFBLEFBQUMsQ0FBQyxpQkFBaUIsRUFBRSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFBO0FBQ3RDLEFBQUEsR0FBRyxHQUFHLENBQUEsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFBLENBQUEsQ0FBQTtBQUNwQixBQUFBLElBQWMsTUFBVixDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUUsQ0FBQyxLQUFLO0FBQ3ZCLEFBQUEsSUFBSSxHQUFHLENBQUEsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFBLENBQUEsQ0FBQTtBQUNuQixBQUFBLEtBQUssTUFBTSxDQUFBLEFBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxvQkFBb0IsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLEM7SUFBQSxDQUFBO0FBQzdELEFBQUEsSUFBSSxHQUFHLENBQUEsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFBLENBQUEsQ0FBQTtBQUNuQixBQUFBLEtBQUssTUFBTSxDQUFBLEFBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxvQkFBb0IsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLEM7SUFBQSxDO0dBQUEsQztFQUFBLEM7Q0FBQSxDQUFBO0FBQzdELEFBQUE7QUFDQSxBQUFBLENBQUMsR0FBRyxDQUFBLEFBQUMsQ0FBQyxVQUFVLEVBQUUsRUFBRSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQTtBQUMvQixBQUFBLENBQUMsTUFBTSxDQUFDLE87QUFBTyxDQUFBO0FBQ2YsQUFBQTtBQUNBLEFBQUEsOEVBQTZFO0FBQzdFLEFBQUE7QUFDQSxBQUFBLEFBQUEsTUFBTSxDQUFjLE1BQWIsYUFBYSxDQUFDLENBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQSxDQUFBO0FBQzVELEFBQUE7QUFDQSxBQUFBLENBQUMsbURBQWtEO0FBQ25ELEFBQUE7QUFDQSxBQUFBLENBQUMsTUFBTSxDQUFBLEFBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsa0NBQWtDLENBQUE7QUFDekQsQUFBQSxDQUFDLE1BQU0sQ0FBQSxBQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsaUJBQWlCLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQTtBQUN2RCxBQUFBLENBQUUsTUFBRCxDQUFDLENBQUMsQ0FBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUM3RCxBQUFBLENBQUMsR0FBRyxDQUFBLFVBQVUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUEsQ0FBQSxDQUFBO0FBQ3RCLEFBQUEsRUFBRSxDQUFDLENBQUMsSUFBSSxDLENBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLFE7Q0FBUSxDQUFBO0FBQ3BELEFBQUEsQ0FBQyxHQUFHLENBQUEsVUFBVSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQSxDQUFBLENBQUE7QUFDdEIsQUFBQSxFQUFFLENBQUMsQ0FBQyxJQUFJLEMsQ0FBRSxDQUFDLDRCO0NBQTRCLENBQUE7QUFDdkMsQUFBQSxDQUFDLEdBQUcsQ0FBQSxDQUFJLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxZQUFZLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUUsQ0FBQyxTQUFTLENBQUMsQ0FBQSxDQUFBLENBQUE7QUFDeEQsQUFBQSxFQUFFLENBQUMsQ0FBQyxVQUFVLEMsQ0FBRSxDQUFDLEs7Q0FBSyxDQUFBO0FBQ3RCLEFBQUEsQ0FBQyxNQUFNLENBQUMsQztBQUFDLENBQUE7QUFDVCxBQUFBO0FB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QUMsQ0FBQyx1QkFBdUIsRUFBRSxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDO0tBQUEsQ0FBQTtBQUNuRSxBQUFBLEtBQUssR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFFLENBQUMsS0FBSyxDQUFDLENBQUEsQ0FBQTtBQUN0QixBQUFBLE1BQU0sSUFBSSxDQUFBLEFBQUMsQ0FBQyxzQkFBc0IsRUFBRSxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDO0tBQUEsQztJQUFBLEM7R0FBQSxDO0VBQUEsQ0FBQTtBQUNsRSxBQUFBLEVBQUUsSUFBSSxDQUFBLENBQUE7QUFDTixBQUFBLEdBQUcsS0FBSyxDQUFBLEFBQUMsd0JBQXdCLEM7RUFBQSxDO0NBQUEsQ0FBQTtBQUNqQyxBQUFBLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDO0FBQUMsQ0FBQTtBQUN6QiIsIm5hbWVzIjpbXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiB1dGlscyAtIHV0aWxpdHkgZnVuY3Rpb25zXG4gKiBAbW9kdWxlXG4gKi9cblxuIyB1dGlscy5saWIuY2l2ZXRcblxuaW1wb3J0IHtcblx0dW5kZWYsIGRlZmluZWQsIG5vdGRlZmluZWQsXG5cdGlzU3RyaW5nLCBjaGFyLCBpbnRlZ2VyLCBpc0NoYXIsIGlzTm9uRW1wdHlTdHJpbmcsXG5cdGlzQm9vbGVhbiwgaXNOdW1iZXIsIGlzSW50ZWdlcixcblx0aXNQcmltaXRpdmUsIGlzTm9uUHJpbWl0aXZlLFxuXHRpc0FycmF5LCBpc0FycmF5T2ZJbnRlZ2VycywgaXNBcnJheU9mU3RyaW5ncyxcblx0aXNIYXNoLCBpc0Z1bmN0aW9uLCBpc09iamVjdCwgaXNSZWdFeHAsXG5cdGlzRW1wdHksIG5vbkVtcHR5LCBhc3NlcnQsXG5cdGhhc2gsIGhhc2hvZiwgYXJyYXksIGFycmF5b2YsXG5cdHJlZ2V4cCwgdm9pZEZ1bmMsIG5vbkVtcHR5U3RyaW5nLCBzdHJpbmdpZnksXG5cdH0gZnJvbSAnLi9kYXRhdHlwZXMubGliLnRzJ1xuaW1wb3J0IHtcblx0cGFzcywgZGVlcGx5RXF1YWxzLCBPTCwgTUwsIGdldE9wdGlvbnMsIGNyb2FrLCB0aHJvd3NFcnJvcixcblx0c3RyVG9IYXNoLCBvLCByZW1vdmVFbXB0eUtleXMsIGtleXMsXG5cdGhhc0tleSwgaGFzS2V5cywgbWlzc2luZ0tleXMsIG1lcmdlLCBoaXQsXG5cdHNwYWNlcywgdGFicywgcnRyaW0sIGNvdW50Q2hhcnMsXG5cdGJsb2NrVG9BcnJheSwgYWxsTGluZXNJbkJsb2NrLFxuXHRibG9ja1NwZWMsIGlzQmxvY2tTcGVjLCB0b0FycmF5LFxuXHRhcnJheVRvQmxvY2ssIHRvQmxvY2ssXG5cdGVzY2FwZVN0ciwgZXNjYXBlQmxvY2ssIHJlbHBhdGgsIHdzU3BsaXQsIHdvcmRzLCBhZGREZWZhdWx0cyxcblx0c2luY2VMb2FkLCBzaW5jZUxvYWRTdHIsIHNsZWVwLFxuXHRnZXRORXh0cmEsIHJwYWQsIGxwYWQsIGNlbnRlcmVkLFxuXHRhbGlnbm1lbnQsIGlzQWxpZ25tZW50LCBhbGlnblN0cmluZywgenBhZCxcblx0YWxsTWF0Y2hlcywgTm9kZUdlbmVyYXRvciwgVE5vZGVJbmZvLFxuXHR9IGZyb20gJy4vbGx1dGlscy5saWIudHMnXG5pbXBvcnQge1xuXHRzZXRMb2dMZXZlbCwgcHVzaExvZ0xldmVsLCBwb3BMb2dMZXZlbCxcblx0Y3VyTG9nTGV2ZWwsIGNsZWFyTG9nLCBnZXRMb2csIGdldEZ1bGxMb2csXG5cdExvZ0NtZCxcblx0REJHLCBMT0csIFdBUk4sIEVSUiwgTE9HVkFMVUUsIERCR1ZBTFVFLFxuXHR9IGZyb20gJy4vbG9nZ2VyLmxpYi50cydcbmltcG9ydCB7VGV4dFRhYmxlfSBmcm9tICcuL3RleHQtdGFibGUubGliLnRzJ1xuaW1wb3J0IHtcblx0b25lSW5kZW50LCByZXNldE9uZUluZGVudCwgaW5kZW50TGV2ZWwsIHNwbGl0TGluZSxcblx0aW5kZW50ZWQsIHVuZGVudGVkLFxuXHR9IGZyb20gJy4vaW5kZW50LmxpYi50cydcbmltcG9ydCB7XG5cdFRva2VuLCBhbGxUb2tlbnNJbiwgYWxsVG9rZW5zSW5CbG9jaywgdG9rZW5UYWJsZSwgdG9rZW5HZW5lcmF0b3IsXG5cdH0gZnJvbSAnLi90b2tlbnMubGliLnRzJ1xuaW1wb3J0IHtcblx0aXNGaWxlLCBpc0RpciwgZmlsZUV4dCwgd2l0aEV4dCxcblx0cm1GaWxlLCBybURpciwgcGF0aFR5cGUsIGdldFBhdGhUeXBlLCBnZXRTdGF0cyxcblx0aXNTdHViLCBwYXRoSW5mbywgcGFyc2VQYXRoLCBzbHVycCwgYmFyZixcblx0YWxsRmlsZXNNYXRjaGluZywgYWxsTGluZXNJbiwgd2F0Y2hGaWxlLCB3YXRjaEZpbGVzLCBGaWxlRXZlbnRIYW5kbGVyLFxuXHRub3JtYWxpemVQYXRoLCBta3BhdGgsIHBhdGhUb1VSTCwgbmV3ZXJEZXN0RmlsZUV4aXN0cyxcblx0cGF0aFN1YkRpcnMsIGNsZWFyRGlyLCBta0RpciwgbWtEaXJzRm9yRmlsZSwgbFN0YXRGaWVsZHMsXG5cdG15c2VsZiwgcmVtb3ZlRmlsZXNNYXRjaGluZywgcmVtb3ZlRmlsZXNFeGNlcHQsXG5cdHdhdGNoZXJDYWxsYmFja0Z1bmMsIGZzQ2hhbmdlVHlwZSwgZnNDYWxsYmFja0Z1bmMsIHNldERpclRyZWUsXG5cdEZpbGVPcCwgZmlsZU9wc1RhYmxlLCBhbGxUb2tlbnNJbkZpbGUsXG5cdH0gZnJvbSAnLi9mcy5saWIudHMnXG5pbXBvcnQge1xuXHRsb2FkU3ltYm9scywgc291cmNlTGliLCBsaWJzQW5kU3ltYm9scywgZ2V0TmVlZGVkSW1wb3J0U3RtdHMsXG5cdH0gZnJvbSAnLi9zeW1ib2xzLmxpYi50cydcbmltcG9ydCB7XG5cdGV4ZWNDbWQsIGV4ZWNDbWRTeW5jLCBjbWRTdWNjZWVkcyxcblx0bWtzdHIsIGdldENtZExpbmUsIGdldFByb2NPcHQsXG5cdGV4ZWNDbWRSZXN1bHQsIHR5cGVDaGVjayxcblx0fSBmcm9tICcuL2V4ZWMubGliLnRzJ1xuaW1wb3J0IHtcblx0dGVzdGVyRnVuYywgY29tcGlsZXJGdW5jLCBwb3N0UHJvY2Vzc29yLFxuXHRpc0NvbXBpbGVyRnVuYywgaXNQb3N0UHJvY2Vzc29yLFxuXHRjb21waWxlckluZm8sIGlzQ29tcGlsZXJJbmZvLFxuXHRjb21waWxlckNvbmZpZ0hhc2gsIGlzQ29uZmlnSGFzaCxcblx0aERlZmF1bHRDb25maWcsXG5cdHVzZXJDb25maWdQYXRoLCBoQ29tcGlsZXJDb25maWcsIGxvYWRDb21waWxlckNvbmZpZyxcblx0aW5zdGFsbENtZCwgdW5pbnN0YWxsQ21kLCBnZXRDb21waWxlckluZm8sIGdldFBvc3RQcm9jZXNzb3IsXG5cdGNvbXBpbGVTdGF0dXMsIGNvbXBpbGVSZXN1bHQsIGNvbXBpbGVGaWxlLFxuXHRnZXRDb21waWxlckdsb2JQYXR0ZXJuLCBhbGxDb21waWxhYmxlRmlsZXMsXG5cdHJ1blVuaXRUZXN0c0ZvciwgcnVuQWxsVW5pdFRlc3RzLFxuXHR9IGZyb20gJy4vY29tcGlsZS5saWIudHMnXG5pbXBvcnQge1xuXHRjaXZldDJhc3QsXG5cdH0gZnJvbSAnLi9jaXZldC5saWIudHMnXG5cbmV4cG9ydCB7XG5cdHVuZGVmLCBkZWZpbmVkLCBub3RkZWZpbmVkLFxuXHRpc1N0cmluZywgaXNDaGFyLCBpc05vbkVtcHR5U3RyaW5nLFxuXHRpc0Jvb2xlYW4sIGlzTnVtYmVyLCBpc0ludGVnZXIsXG5cdGlzUHJpbWl0aXZlLCBpc05vblByaW1pdGl2ZVxuXHRpc0FycmF5LCBpc0FycmF5T2ZJbnRlZ2VycywgaXNBcnJheU9mU3RyaW5ncyxcblx0aXNIYXNoLCBpc0Z1bmN0aW9uLCBpc09iamVjdCwgaXNSZWdFeHAsXG5cdGlzRW1wdHksIG5vbkVtcHR5LCBhc3NlcnQsIHN0cmluZ2lmeSxcblxuXHRwYXNzLCBkZWVwbHlFcXVhbHMsIE9MLCBNTCwgZ2V0T3B0aW9ucywgY3JvYWssIHRocm93c0Vycm9yLFxuXHRzdHJUb0hhc2gsIG8sIHJlbW92ZUVtcHR5S2V5cywga2V5cyxcblx0aGFzS2V5LCBoYXNLZXlzLCBtaXNzaW5nS2V5cywgbWVyZ2UsIGhpdCxcblx0c3BhY2VzLCB0YWJzLCBydHJpbSwgY291bnRDaGFycyxcblx0YmxvY2tUb0FycmF5LCBhbGxMaW5lc0luQmxvY2ssIHRvQXJyYXksXG5cdGFycmF5VG9CbG9jaywgdG9CbG9jayxcblx0ZXNjYXBlU3RyLCBlc2NhcGVCbG9jaywgcmVscGF0aCwgd3NTcGxpdCwgd29yZHMsIGFkZERlZmF1bHRzLFxuXHRzaW5jZUxvYWQsIHNpbmNlTG9hZFN0ciwgc2xlZXAsXG5cdGdldE5FeHRyYSwgcnBhZCwgbHBhZCwgY2VudGVyZWQsXG5cdGlzQWxpZ25tZW50LCBhbGlnblN0cmluZywgenBhZCxcblx0YWxsTWF0Y2hlcywgTm9kZUdlbmVyYXRvcixcblxuXHRUZXh0VGFibGUsXG5cblx0aXNGaWxlLCBpc0RpciwgZmlsZUV4dCwgd2l0aEV4dCxcblx0cm1GaWxlLCBybURpciwgZ2V0UGF0aFR5cGUsIGdldFN0YXRzLFxuXHRwYXJzZVBhdGgsIHNsdXJwLCBiYXJmLCBpc1N0dWIsXG5cdGFsbEZpbGVzTWF0Y2hpbmcsIGFsbExpbmVzSW4sIHdhdGNoRmlsZSwgd2F0Y2hGaWxlcywgRmlsZUV2ZW50SGFuZGxlcixcblx0bm9ybWFsaXplUGF0aCwgbWtwYXRoLCBwYXRoVG9VUkwsIG5ld2VyRGVzdEZpbGVFeGlzdHMsIHNldERpclRyZWUsXG5cdGZpbGVPcHNUYWJsZSwgYWxsVG9rZW5zSW5GaWxlLFxuXHRwYXRoU3ViRGlycywgY2xlYXJEaXIsIG1rRGlyLCBta0RpcnNGb3JGaWxlLCBsU3RhdEZpZWxkcyxcblx0bXlzZWxmLCByZW1vdmVGaWxlc01hdGNoaW5nLCByZW1vdmVGaWxlc0V4Y2VwdCxcblxuXHRsb2FkU3ltYm9scywgc291cmNlTGliLCBsaWJzQW5kU3ltYm9scywgZ2V0TmVlZGVkSW1wb3J0U3RtdHMsXG5cblx0c2V0TG9nTGV2ZWwsIHB1c2hMb2dMZXZlbCwgcG9wTG9nTGV2ZWwsXG5cdGN1ckxvZ0xldmVsLCBjbGVhckxvZywgZ2V0TG9nLCBnZXRGdWxsTG9nLFxuXHRMb2dDbWQsXG5cdERCRywgTE9HLCBXQVJOLCBFUlIsIExPR1ZBTFVFLCBEQkdWQUxVRSxcblxuXHRvbmVJbmRlbnQsIHJlc2V0T25lSW5kZW50LCBpbmRlbnRMZXZlbCwgc3BsaXRMaW5lLFxuXHRpbmRlbnRlZCwgdW5kZW50ZWQsXG5cblx0YWxsVG9rZW5zSW4sIGFsbFRva2Vuc0luQmxvY2ssIHRva2VuVGFibGUsXG5cblx0ZXhlY0NtZCwgZXhlY0NtZFN5bmMsIGNtZFN1Y2NlZWRzLFxuXHRta3N0ciwgZ2V0Q21kTGluZSwgZ2V0UHJvY09wdCwgdHlwZUNoZWNrLFxuXG5cdGlzQ29tcGlsZXJGdW5jLCBpc1Bvc3RQcm9jZXNzb3IsXG5cdGlzQ29tcGlsZXJJbmZvLCBpc0NvbmZpZ0hhc2gsXG5cdGhEZWZhdWx0Q29uZmlnLFxuXHR1c2VyQ29uZmlnUGF0aCwgaENvbXBpbGVyQ29uZmlnLCBsb2FkQ29tcGlsZXJDb25maWcsXG5cdGluc3RhbGxDbWQsIHVuaW5zdGFsbENtZCwgZ2V0Q29tcGlsZXJJbmZvLCBnZXRQb3N0UHJvY2Vzc29yLFxuXHRjb21waWxlRmlsZSxcblx0Z2V0Q29tcGlsZXJHbG9iUGF0dGVybiwgYWxsQ29tcGlsYWJsZUZpbGVzLFxuXHRydW5Vbml0VGVzdHNGb3IsIHJ1bkFsbFVuaXRUZXN0cywgaXNCbG9ja1NwZWMsXG5cdGNpdmV0MmFzdCxcblx0fVxuXG5leHBvcnQgdHlwZSB7XG5cdGhhc2gsIGhhc2hvZiwgYXJyYXksIGFycmF5b2YsIHJlZ2V4cCwgY2hhciwgaW50ZWdlcixcblx0dm9pZEZ1bmMsIG5vbkVtcHR5U3RyaW5nLFxuXHRleGVjQ21kUmVzdWx0LCBibG9ja1NwZWMsIHBhdGhUeXBlLCBwYXRoSW5mbyxcblx0d2F0Y2hlckNhbGxiYWNrRnVuYywgZnNDaGFuZ2VUeXBlLCBmc0NhbGxiYWNrRnVuYywgRmlsZU9wLFxuXHRUb2tlbiwgdG9rZW5HZW5lcmF0b3IsIGFsaWdubWVudCwgVE5vZGVJbmZvLFxuXG5cdHRlc3RlckZ1bmMsIGNvbXBpbGVyRnVuYywgcG9zdFByb2Nlc3Nvcixcblx0Y29tcGlsZXJJbmZvLCBjb21waWxlckNvbmZpZ0hhc2gsXG5cblx0Y29tcGlsZVN0YXR1cywgY29tcGlsZVJlc3VsdCxcblx0fVxuXG4jIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4vKipcbiAqIEEgZ2VuZXJhdG9yIHRoYXQgeWllbGRzIGludGVnZXJzIHN0YXJ0aW5nIHdpdGggMCBhbmRcbiAqIGNvbnRpbnVpbmcgdG8gbi0xXG4gKi9cblxuZXhwb3J0IHJhbmdlIDo9IChuOiBudW1iZXIpOiBHZW5lcmF0b3I8bnVtYmVyLCB2b2lkLCB2b2lkPiAtPlxuXG5cdGxldCBpID0gMFxuXHR3aGlsZSAoaSA8IG4pXG5cdFx0eWllbGQgaVxuXHRcdGkgPSBpICsgMVxuXHRyZXR1cm5cblxuIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuLyoqXG4gKiBjb252ZXJ0cyB4IHRvIGEgc3RyaW5nLCByZW1vdmluZyBhbnkgY2FycmlhZ2UgcmV0dXJuc1xuICogYW5kIHJlbW92aW5nIGxlYWRpbmcgYW5kIHRyYWlsaW5nIHdoaXRlc3BhY2VcbiAqL1xuXG5leHBvcnQgbm9ybWFsaXplU3RyIDo9ICh4OiBhbnkpOiBzdHJpbmcgPT5cblxuXHRyZXR1cm4geC50b1N0cmluZygpLnJlcGxhY2VBbGwoJ1xccicsICcnKS50cmltKClcblxuIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuLyoqXG4gKiBSZW1vdmUgbGluZXMgZnJvbSBhIHN0cmluZyBvciBhcnJheVxuICogcGF0IGNhbiBiZSBhIHN0cmluZyBvciBhIHJlZ3VsYXIgZXhwcmVzc2lvblxuICovXG5cbmV4cG9ydCByZW1vdmVMaW5lcyA6PSAoXG5cdHN0ck9yQXJyYXk6IHN0cmluZyB8IHN0cmluZ1tdLFxuXHRwYXQ6IHN0cmluZyB8IFJlZ0V4cFxuXHQpOiBzdHJpbmcgfCBzdHJpbmdbXSA9PlxuXG5cdGFzc2VydCBpc1N0cmluZyhwYXQpIHx8IGlzUmVnRXhwKHBhdCksICBcIkJhZCBhcmcgMjogI3tPTChwYXQpfVwiXG5cdGxMaW5lcyA6PSBpc1N0cmluZyhzdHJPckFycmF5KSA/IGJsb2NrVG9BcnJheShzdHJPckFycmF5KSA6IHN0ck9yQXJyYXlcblx0bE5ld0xpbmVzIDo9IChcblx0XHRpZiAodHlwZW9mIHBhdCA9PSAnc3RyaW5nJylcblx0XHRcdGxMaW5lcy5maWx0ZXIoKGxpbmUpID0+IChsaW5lICE9IHBhdCkpXG5cdFx0ZWxzZVxuXHRcdFx0bExpbmVzLmZpbHRlcigobGluZSkgPT4gKGxpbmUubWF0Y2gocGF0KSA9PSBudWxsKSlcblx0XHQpXG5cdGlmIGlzU3RyaW5nKHN0ck9yQXJyYXkpXG5cdFx0cmV0dXJuIGxOZXdMaW5lcy5qb2luKCdcXG4nKVxuXHRlbHNlXG5cdFx0cmV0dXJuIGxOZXdMaW5lc1xuXG4jIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG5oS2V5VG9Mb2dnZXI6IGhhc2ggOj0ge1xuXHRJOiAnaW5mbydcblx0UDogJ3Byb2ZpbGUnXG5cdEQ6ICdkZWJ1Zydcblx0UTogJ3F1aWV0J1xuXHRTOiAnc2lsZW50J1xuXHR9XG5cbmV4cG9ydCBsb2dMZXZlbEZyb21BcmdzIDo9IChsQXJnczogc3RyaW5nW10pOiBzdHJpbmc/ID0+XG5cblx0Zm9yIHN0ciBvZiBsQXJnc1xuXHRcdGxNYXRjaGVzIDo9IHN0ci5tYXRjaCgvLy9eXG5cdFx0XHQtXG5cdFx0XHQoW0EtWmEtejAtOV8tXSopXG5cdFx0XHQoPSk/XG5cdFx0XHQvLy8pXG5cdFx0aWYgKGxNYXRjaGVzID09IG51bGwpXG5cdFx0XHRwYXNzKClcblx0XHRlbHNlXG5cdFx0XHRrZXlTdHIgOj0gbE1hdGNoZXNbMV1cblx0XHRcdGhhc0VxIDo9IGxNYXRjaGVzWzJdXG5cdFx0XHRpZiBpc0VtcHR5KGhhc0VxKVxuXHRcdFx0XHRmb3Iga2V5IG9mIGtleXMoaEtleVRvTG9nZ2VyKVxuXHRcdFx0XHRcdGlmIGtleVN0ci5pbmNsdWRlcyhrZXkpXG5cdFx0XHRcdFx0XHRyZXR1cm4gaEtleVRvTG9nZ2VyW2tleV1cblx0cmV0dXJuIHVuZGVmXG5cbiMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbi8qKlxuICogUGFyc2UgY29tbWFuZCBsaW5lIGFyZ3VtZW50cywgb3B0aW9uYWxseSBzcGVjaWZ5aW5nIHdoaWNoXG4gKiBvcHRpb25zIHRvIGV4cGVjdCBhbmQvb3IgdGhlIGV4cGVjdGVkIG51bWJlciBvZiBub24tb3B0aW9uc1xuICpcbiAqIFRoZXJlIGFyZSAzIGtpbmRzIG9mIGl0ZW1zIGFsbG93ZWQgb24gdGhlIGNvbW1hbmQgbGluZTpcbiAqXG4gKiAxLiBmbGFncywgZS5nLlxuICogXHRgLWZueGAgLSBzZXRzIGZsYWdzIGBmYCwgJ24nIGFuZCBgeGAgdG8gdHJ1ZVxuICogICAgZmxhZ3MgbXVzdCBiZSB1cHBlciBvciBsb3dlciBjYXNlIGxldHRlcnNcbiAqXG4gKiAyLiBhbiBvcHRpb24gd2l0aCBhIHZhbHVlLCBlLmcuXG4gKiBcdGAtbGFiZWw9bXlsYWJlbGAgLSBzZXRzIG9wdGlvbiBgbGFiZWxgIHRvIGAnbXlsYWJlbCdgXG4gKiBcdGlmIHRoZSB2YWx1ZSBjb250YWlucyBhIHNwYWNlIGNoYXIsIGl0IG11c3QgYmUgcXVvdGVkXG4gKiBcdGlmIHRoZSB2YWx1ZSBsb29rcyBsaWtlIGEgbnVtYmVyLCBpdCdzIHNldCB0byBhIG51bWJlclxuICpcbiAqIDMuIGFueXRoaW5nIGVsc2UgaXMgYSBub24tb3B0aW9uLCBlLmcuXG4gKiBcdGM6L3RlbXAvdGVtcC50eHRcbiAqIFx0aWYgaXQgaW5jbHVkZXMgYSBzcGFjZSBjaGFyIG9yIHN0YXJ0cyB3aXRoIGAtYCxcbiAqIFx0XHRpdCBtdXN0IGJlIHF1b3RlZFxuICpcbiAqIHRoZSAxc3QgYXJndW1lbnQgdG8gZ2V0Q21kQXJncygpIGlzIG9wdGlvbmFsLCBhbmQgaXMgYSBoYXNoXG4gKiBvZiBpbmZvcm1hdGlvbiBhYm91dCB0aGUgZXhwZWN0ZWQgYXJndW1lbnRzLlxuICpcbiAqIElmIGtleSAnXycgaXMgcHJlc2VudCwgaXQgbXVzdCBiZSBhIGhhc2ggcG9zc2libHkgaW5jbHVkaW5nIGtleXM6XG4gKiAgICAncmFuZ2UnIC0gZWl0aGVyIGFuIGludGVnZXIgc3BlY2lmeWluZyB0aGUgZXhhY3QgbnVtYmVyIG9mXG4gKiAgICAgICAgICAgICAgbm9uLW9wdGlvbnMgZXhwZWN0ZWQsIG9mIGFuIGFycmF5IG9mIDIgaW50ZWdlcnNcbiAqICAgICAgICAgICAgICBzcGVjaWZ5aW5nIHRoZSBtaW5pbXVtIGFuZCBtYXhpbXVtIG51bWJlciBvZlxuICogICAgICAgICAgICAgIG5vbi1vcHRpb25zIGV4cGVjdGVkLiBUaGUgMm5kIG9mIHRoZXNlIG1heSBiZVxuICogICAgICAgICAgICAgIHRoZSBzdHJpbmcgJ2luZicgdG8gaW5kaWNhdGUgbm8gbWF4aW11bSBudW1iZXJcbiAqICAgICdkZXNjJyAtIGEgdGV4dCBkZXNjcmlwdGlvbiBvZiB3aGF0IG5vbi1vcHRpb25zIGFyZVxuICpcbiAqIEFsbCBvdGhlciBrZXlzIGFyZSBuYW1lcyBvZiBvcHRpb25zIGFsbG93ZWRcbiAqICAgIHRoZSBhc3NvY2lhdGVkIHZhbHVlXG4gKiBtdXN0IGJlIGEgaGFzaCB3aXRoIHBvc3NpYmx5IHRoZXNlIGtleXM6XG4gKiAgICB0eXBlIC0gdGhlIHR5cGUgb2YgdmFsdWUgZXhwZWN0ZWQgKGRlZmF1bHRzIHRvICdib29sZWFuJylcbiAqICAgIGRlc2MgLSBhIHRleHQgZGVzY3JpcHRpb24gb2YgdGhlIG9wdGlvbiAodXNlZCBvbiBoZWxwIHNjcmVlbnMpXG4gKlxuICogdGhlIDJuZCBhcmd1bWVudCB0byBnZXRDbWRBcmdzKCkgaXMgYW4gYXJyYXkgb2Ygc3RyaW5nIGFyZ3VtZW50c1xuICogZnJvbSB0aGUgY29tbWFuZCBsaW5lIChkZWZhdWx0cyB0byBEZW5vLmFyZ3MpXG4gKlxuICogdGhlIDNyZCBhcmd1bWVudCB0byBnZXRDbWRBcmdzKCkgaXMgYSBoYXNoIG9mIHBvc3NpYmxlIG9wdGlvbnM6XG4gKiAgICBkb1NldExvZ2dlciAtIGRlZmF1bHRzIHRvIHRydWUgLSBpZiBmYWxzZSwgdGhlbiBvcHRpb25zXG4gKiAgICAgICAgICAgICAgICAgIC1QLCAtRCwgLVEsIC1JIGFuZCAtUyBubyBsb25nZXIgc2V0IGxvZ2dpbmcgb3B0aW9uc1xuICogICAgICAgICAgICAgICAgICBhbmQgbWF5IHRoZXJlZm9yZSBiZSB1c2VkIGZvciBvdGhlciBwdXJwb3Nlc1xuICpcbiAqIEJ5IGRlZmF1bHQsIHRoZSBmb2xsb3dpbmcgZmxhZ3MgYXJlIHJlY29nbml6ZWQsIGFuZCB0aGVyZWZvcmVcbiAqIGNhbm5vdCBiZSBpbmNsdWRlZCBpbiBoRGVzYyAodGhpcyBiZWhhdmlvciBjYW4gYmVcbiAqIGRpc2FibGVkIGJ5IHNldHRpbmcgaE9wdGlvbnMuZG9TZXRMb2dnZXIgdG8gZmFsc2UpOlxuICpcbiAqIGAtUGAgLSBzZXQgdGhlIGN1cnJlbnQgbG9nIGxldmVsIHRvICdwcm9maWxlJ1xuICogYC1EYCAtIHNldCB0aGUgY3VycmVudCBsb2cgbGV2ZWwgdG8gJ2RlYnVnJ1xuICogYC1RYCAtIHNldCB0aGUgY3VycmVudCBsb2cgbGV2ZWwgdG8gJ3dhcm4nXG4gKiBgLUlgIC0gc2V0IHRoZSBjdXJyZW50IGxvZyBsZXZlbCB0byAnaW5mbydcbiAqIGAtU2AgLSBzZXQgdGhlIGN1cnJlbnQgbG9nIGxldmVsIHRvICdzaWxlbnQnXG4gKlxuICogKHNlZSBsaWJyYXJ5IEBqZGVpZ2hhbi9sb2dnZXIpXG4gKi9cblxuZXhwb3J0IGdldENtZEFyZ3MgOj0gKFxuXHRoRGVzYzogaGFzaD8gPSB1bmRlZixcblx0bEFyZ3M6IHN0cmluZ1tdID0gRGVuby5hcmdzLFxuXHRoT3B0aW9uczogaGFzaCA9IHt9XG5cdCk6IGhhc2ggPT5cblxuXHR7ZG9TZXRMb2dnZXJ9IDo9IGdldE9wdGlvbnMgaE9wdGlvbnMsIHtcblx0XHRkb1NldExvZ2dlcjogdHJ1ZVxuXHRcdH1cblxuXHRpZiBkb1NldExvZ2dlciAmJiBkZWZpbmVkKGhEZXNjKVxuXHRcdCMgLS0tIE1ha2Ugc3VyZSBoRGVzYyBkb2VzIE5PVCBpbmNsdWRlIGFueSBvZjpcblx0XHQjICAgICAgICBQLCBELCBRLCBJLCBTXG5cdFx0Zm9yIGtleSBvZiBrZXlzKGhLZXlUb0xvZ2dlcilcblx0XHRcdGFzc2VydCBub3RkZWZpbmVkKGhEZXNjW2tleV0pLFxuXHRcdFx0XHRcdFwiaW52YWxpZCBrZXkgI3tPTChrZXkpfSBzZXQgaW4gaERlc2NcIlxuXHRcdGxvZ0xldmVsIDo9IGxvZ0xldmVsRnJvbUFyZ3MobEFyZ3MpXG5cdFx0aWYgZGVmaW5lZChsb2dMZXZlbClcblx0XHRcdHNldExvZ0xldmVsIGxvZ0xldmVsXG5cblx0aWYgZGVmaW5lZChoRGVzYylcblx0XHREQkcgXCJoRGVzYyBpczogI3tPTChoRGVzYyl9XCJcblx0REJHIFwibEFyZ3MgaXM6ICN7T0wobEFyZ3MpfVwiXG5cblx0aWYgKChsQXJncy5sZW5ndGggPT0gMSlcblx0XHRcdCYmIFsnLWgnLCctLWgnLCctaGVscCcsJy0taGVscCddLmluY2x1ZGVzKGxBcmdzWzBdKVxuXHRcdFx0KVxuXHRcdGlmIGRlZmluZWQoaERlc2MpXG5cdFx0XHRMT0cgaGVscFN0cihoRGVzYylcblx0XHRlbHNlXG5cdFx0XHRMT0cgXCJObyBoZWxwIGF2YWlsYWJsZVwiXG5cdFx0RGVuby5leGl0KClcblxuXHRoUmVzdWx0OiBoYXNoIDo9IHsgXzogW10gfVxuXG5cdCMgLS0tIFV0aWxpdHkgZnVuY3Rpb25zXG5cblx0IyAtLS0gRXZlbiBnZXRzIGNhbGxlZCBmb3IgLUQsIC1RLCAtUCwgLVNcblx0YWRkT3B0aW9uIDo9IChuYW1lOiBzdHJpbmcsIHZhbHVlOiBhbnkpID0+XG5cdFx0REJHIFwiYWRkT3B0aW9uKCN7T0wobmFtZSl9LCAje09MKHZhbHVlKX0pXCJcblx0XHRhc3NlcnQgaXNTdHJpbmcobmFtZSksIFwiTm90IGEgc3RyaW5nOiAje09MKG5hbWUpfVwiXG5cdFx0YXNzZXJ0IG5vdCBoYXNLZXkoaFJlc3VsdCwgbmFtZSksXG5cdFx0XHRcdFwiZHVwIGtleSAje25hbWV9LCBoUmVzdWx0ID0gI3tPTChoUmVzdWx0KX1cIlxuXG5cdFx0aWYgZG9TZXRMb2dnZXJcblx0XHRcdGxvZ2dlciA6PSBoS2V5VG9Mb2dnZXJbbmFtZV1cblx0XHRcdGlmIGRlZmluZWQobG9nZ2VyKVxuXHRcdFx0XHRoUmVzdWx0W25hbWVdID0gdHJ1ZVxuXHRcdFx0XHRzZXRMb2dMZXZlbCBsb2dnZXJcblx0XHRcdFx0cmV0dXJuXG5cblx0XHRpZiBub3RkZWZpbmVkKGhEZXNjKVxuXHRcdFx0aFJlc3VsdFtuYW1lXSA9IHZhbHVlXG5cdFx0XHRyZXR1cm5cblx0XHR7dHlwZX0gOj0gZ2V0T3B0aW9uSW5mbyhoRGVzYywgbmFtZSlcblxuXHRcdCMgLS0tIHR5cGUgY2hlY2tpbmdcblx0XHRpZiBpc0FycmF5KHR5cGUpXG5cdFx0XHRhc3NlcnQgdHlwZS5pbmNsdWRlcyh2YWx1ZSksIFwidHlwZSBub3QgYW4gYXJyYXlcIlxuXHRcdFx0aFJlc3VsdFtuYW1lXSA9IHZhbHVlXG5cdFx0ZWxzZVxuXHRcdFx0c3dpdGNoIHR5cGVcblx0XHRcdFx0d2hlbiAnc3RyaW5nJ1xuXHRcdFx0XHRcdGhSZXN1bHRbbmFtZV0gPSB2YWx1ZVxuXHRcdFx0XHR3aGVuICdib29sZWFuJ1xuXHRcdFx0XHRcdGhSZXN1bHRbbmFtZV0gPSAoXG5cdFx0XHRcdFx0XHQgICh2YWx1ZSA9PSAndHJ1ZScpICA/IHRydWVcblx0XHRcdFx0XHRcdDogKHZhbHVlID09ICdmYWxzZScpID8gZmFsc2Vcblx0XHRcdFx0XHRcdDogICAgICAgICAgICAgICAgICAgICAgdmFsdWVcblx0XHRcdFx0XHRcdClcblx0XHRcdFx0d2hlbiAnbnVtYmVyJywnZmxvYXQnXG5cdFx0XHRcdFx0aFJlc3VsdFtuYW1lXSA9IHBhcnNlRmxvYXQodmFsdWUpXG5cdFx0XHRcdHdoZW4gJ2ludGVnZXInXG5cdFx0XHRcdFx0aFJlc3VsdFtuYW1lXSA9IHBhcnNlSW50KHZhbHVlKVxuXHRcdHJldHVyblxuXG5cdGFkZE5vbk9wdGlvbiA6PSAoc3RyOiBzdHJpbmcpID0+XG5cdFx0REJHIFwiYWRkTm9uT3B0aW9uKCN7T0woc3RyKX0pXCJcblx0XHRoUmVzdWx0Ll8ucHVzaCBzdHJcblxuXHRmb3Igc3RyIG9mIGxBcmdzXG5cdFx0IyAtLS0gaWdub3JlICctLSdcblx0XHRpZiAoc3RyID09ICctLScpXG5cdFx0XHREQkcgXCJza2lwcGluZyAtLVwiXG5cdFx0XHRjb250aW51ZVxuXG5cdFx0IyAtLS0gY2hlY2sgaWYgaXQncyBhbiBvcHRpb25cblx0XHRsTWF0Y2hlcyA6PSBzdHIubWF0Y2goLy8vXlxuXHRcdFx0LVxuXHRcdFx0KFtBLVphLXowLTlfLV0qKVxuXHRcdFx0KD86XG5cdFx0XHRcdCg9KVxuXHRcdFx0XHQoLiopXG5cdFx0XHRcdCk/XG5cdFx0XHQkLy8vKVxuXHRcdGlmIChsTWF0Y2hlcyA9PSBudWxsKVxuXHRcdFx0IyAtLS0gaXQncyBhIG5vbi1vcHRpb25cblx0XHRcdGFkZE5vbk9wdGlvbiBzdHJcblx0XHRlbHNlXG5cdFx0XHQjIC0tLSBpdCdzIGFuIG9wdGlvblxuXHRcdFx0W18sIG9wdFN0ciwgZXFTdHIsIHZhbHVlXSA6PSBsTWF0Y2hlc1xuXHRcdFx0aWYgZXFTdHJcblx0XHRcdFx0YWRkT3B0aW9uIG9wdFN0ciwgdmFsdWVcblx0XHRcdGVsc2Vcblx0XHRcdFx0Zm9yIGNoIG9mIG9wdFN0ci5zcGxpdCgnJylcblx0XHRcdFx0XHRhZGRPcHRpb24gY2gsIHRydWVcblxuXHQjIC0tLSBpZiBoRGVzYyBpcyBzZXQsIHRoZW5cblx0IyAgICAgRmlsbCBpbiBkZWZhdWx0IHZhbHVlcyBpZiBhdmFpbGFibGVcblxuXHRpZiBkZWZpbmVkKGhEZXNjKVxuXHRcdCMgLS0tIEZpbGwgaW4gbWlzc2luZyBrZXlzIHdpdGggZGVmYXVsdCB2YWx1ZXNcblx0XHREQkcgXCJGaWxsaW5nIGluIG1pc3Npbmcga2V5cyB3aXRoIGRlZmF1bHQgdmFsdWVzXCJcblx0XHRmb3IgbmFtZSBvZiBrZXlzKGhEZXNjLCBvJ2V4Y2VwdD1fJylcblx0XHRcdGlmIG5vdGRlZmluZWQoaFJlc3VsdFtuYW1lXSlcblx0XHRcdFx0e2RlZmF1bHRWYWx9IDo9IGdldE9wdGlvbkluZm8oaERlc2MsIG5hbWUpXG5cdFx0XHRcdGlmIGRlZmluZWQoZGVmYXVsdFZhbClcblx0XHRcdFx0XHRoUmVzdWx0W25hbWVdID0gZGVmYXVsdFZhbFxuXG5cdFx0IyAtLS0gQ2hlY2sgb2YgdGhlcmUncyBhIHJlc3RyaWN0aW9uIG9uIHRoZSBudW1iZXIgb2Ygbm9uLW9wdGlvbnNcblx0XHRpZiBoYXNLZXkoaERlc2MsICdfJylcblx0XHRcdGxlbiA6PSBoUmVzdWx0Ll8ubGVuZ3RoXG5cdFx0XHREQkcgXCJDaGVjayBudW1iZXIgb2Ygbm9uLW9wdGlvbnMgKCN7bGVufSlcIlxuXHRcdFx0aEluZm8gOj0gZ2V0Tm9uT3B0aW9uSW5mbyhoRGVzYylcblx0XHRcdERCRyBcIk5vbi1vcHRpb24gaW5mbzogI3tPTChoSW5mbyl9XCJcblx0XHRcdGlmIGRlZmluZWQoaEluZm8pXG5cdFx0XHRcdHttaW4sIG1heH0gOj0gaEluZm9cblx0XHRcdFx0aWYgZGVmaW5lZChtaW4pXG5cdFx0XHRcdFx0YXNzZXJ0IChsZW4gPj0gbWluKSwgXCIje2xlbn0gbm9uLW9wdGlvbnMgPCBtaW4gKCN7bWlufSlcIlxuXHRcdFx0XHRpZiBkZWZpbmVkKG1heClcblx0XHRcdFx0XHRhc3NlcnQgKGxlbiA8PSBtYXgpLCBcIiN7bGVufSBub24tb3B0aW9ucyA+IG1heCAoI3ttYXh9KVwiXG5cblx0REJHIFwiaFJlc3VsdCA9ICN7T0woaFJlc3VsdCl9XCJcblx0cmV0dXJuIGhSZXN1bHRcblxuIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuZXhwb3J0IGdldE9wdGlvbkluZm8gOj0gKGhEZXNjOiBoYXNoLCBuYW1lOiBzdHJpbmcpOiBoYXNoID0+XG5cblx0IyAtLS0gUmV0dXJuIHZhbHVlIGlzIGEgaGFzaCB3aXRoIGtleXM6IHR5cGUsIGRlc2NcblxuXHRhc3NlcnQgKG5hbWUgIT0gJ18nKSwgXCJnZXRPcHRpb25JbmZvKGhEZXNjLCAnXycpIGNhbGxlZFwiXG5cdGFzc2VydCBoYXNLZXkoaERlc2MsIG5hbWUpLCBcIk5vIHN1Y2ggb3B0aW9uOiAtI3tuYW1lfVwiXG5cdGggOj0gaXNIYXNoKGhEZXNjW25hbWVdKSA/IGhEZXNjW25hbWVdIDoge2Rlc2M6IGhEZXNjW25hbWVdfVxuXHRpZiBub3RkZWZpbmVkKGgudHlwZSlcblx0XHRoLnR5cGUgPSAobmFtZS5sZW5ndGggPT0gMSkgPyAnYm9vbGVhbicgOiAnc3RyaW5nJ1xuXHRpZiBub3RkZWZpbmVkKGguZGVzYylcblx0XHRoLmRlc2MgPSAnPG5vIGRlc2NyaXB0aW9uIGF2YWlsYWJsZT4nXG5cdGlmIG5vdCBoYXNLZXkoaCwgJ2RlZmF1bHRWYWwnKSAmJiAoaC50eXBlID09ICdib29sZWFuJylcblx0XHRoLmRlZmF1bHRWYWwgPSBmYWxzZVxuXHRyZXR1cm4gaFxuXG4jIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuIyAtLS0gcmV0dXJucyB1bmRlZiBpZiBubyAnXycga2V5IGluIGhEZXNjXG5cbnR5cGUgbm9uT3B0aW9uSW5mbyA9IHtcblx0ZGVzYzogc3RyaW5nXG5cdG1pbj86IG51bWJlclxuXHRtYXg/OiBudW1iZXJcblx0fVxuXG5leHBvcnQgZ2V0Tm9uT3B0aW9uSW5mbyA6PSAoaERlc2M6IGhhc2gpOiBub25PcHRpb25JbmZvPyA9PlxuXG5cdERCRyBcImhEZXNjID0gI3tPTChoRGVzYyl9XCJcblx0aWYgbm90IGhhc0tleShoRGVzYywgJ18nKVxuXHRcdERCRyBcIk5vICdfJyBrZXkgaW4gaERlc2NcIlxuXHRcdHJldHVybiB1bmRlZlxuXHRsZXQge2Rlc2MsIHJhbmdlfSA9IGhEZXNjLl9cblx0aWYgaXNFbXB0eShkZXNjKVxuXHRcdGRlc2MgPSAnPG5vIGRlc2NyaXB0aW9uIGF2YWlsYWJsZT4nXG5cdERCRyBcImRlc2MgPSAje2Rlc2N9XCJcblx0aWYgZGVmaW5lZChyYW5nZSlcblx0XHREQkcgXCJyYW5nZSA9ICN7T0wocmFuZ2UpfVwiXG5cdFx0aWYgaXNJbnRlZ2VyKHJhbmdlKVxuXHRcdFx0REJHIFwiSW50ZWdlciByYW5nZTogI3tyYW5nZX1cIlxuXHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0ZGVzY1xuXHRcdFx0XHRtaW46IHJhbmdlXG5cdFx0XHRcdG1heDogcmFuZ2Vcblx0XHRcdFx0fVxuXHRcdGVsc2UgaWYgaXNBcnJheShyYW5nZSlcblx0XHRcdGFzc2VydCAocmFuZ2UubGVuZ3RoID09IDIpLCBcIkJhZCAnXycga2V5OiAje09MKHJhbmdlKX1cIlxuXHRcdFx0W21pbiwgbWF4XSA6PSByYW5nZVxuXHRcdFx0REJHIFwiQXJyYXkgcmFuZ2U6ICN7bWlufS4uI3ttYXh9XCJcblx0XHRcdGFzc2VydCBpc0ludGVnZXIobWluKSwgXCJyYW5nZSBtaW4gbm90IGFuIGludGVnZXJcIlxuXHRcdFx0aWYgKG1heCA9PSAnaW5mJylcblx0XHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0XHRkZXNjXG5cdFx0XHRcdFx0bWluXG5cdFx0XHRcdFx0bWF4OiBJbmZpbml0eVxuXHRcdFx0XHRcdH1cblx0XHRcdGVsc2Vcblx0XHRcdFx0YXNzZXJ0IGlzSW50ZWdlcihtYXgpLCBcInJhbmdlIG1heCBub3QgYW4gaW50ZWdlclwiXG5cdFx0XHRcdHJldHVybiB7XG5cdFx0XHRcdFx0ZGVzY1xuXHRcdFx0XHRcdG1pblxuXHRcdFx0XHRcdG1heFxuXHRcdFx0XHRcdH1cblx0XHRlbHNlXG5cdFx0XHRjcm9hayBcIkludmFsaWQgcmFuZ2U6ICN7T0wocmFuZ2UpfVwiXG5cdGVsc2Vcblx0XHREQkcgXCJObyByYW5nZSBrZXlcIlxuXHRcdHJldHVybiB7ZGVzY31cblxuIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuY250U3RyIDo9IChuOiBudW1iZXIsIHN0cjogc3RyaW5nKTogc3RyaW5nID0+XG5cdHJldHVybiAobj09MSkgPyBcIjEgI3tzdHJ9XCIgOiBcIiN7bn0gI3tzdHJ9c1wiXG5cbmV4cG9ydCBoZWxwU3RyIDo9IChoRGVzYzogaGFzaCk6IHN0cmluZyA9PlxuXG5cdGxMaW5lcyA6PSBbXCJBdmFpbGFibGUgb3B0aW9uczpcIl1cblx0cHVzaCA6PSAoc3RyOiBzdHJpbmcsIGxldmVsOiBudW1iZXI9MCk6IHZvaWQgPT5cblx0XHRsTGluZXMucHVzaCBzcGFjZXMoMypsZXZlbCkgKyBzdHJcblxuXHRmb3IgbmFtZSBvZiBrZXlzKGhEZXNjLCBvJ2V4Y2VwdD1fJylcblx0XHR7dHlwZSwgZGVzY30gOj0gZ2V0T3B0aW9uSW5mbyhoRGVzYywgbmFtZSlcblx0XHRwdXNoIFwiLSN7bmFtZX06ICN7dHlwZX0gLSAje2Rlc2N9XCIsIDFcblx0aWYgZGVmaW5lZChoRGVzYy5fKVxuXHRcdHB1c2ggXCJOb24tb3B0aW9uczpcIlxuXHRcdGlmIGlzU3RyaW5nKGhEZXNjLl8pXG5cdFx0XHRwdXNoIFwiI3toRGVzYy5ffVwiLCAxXG5cdFx0ZWxzZSBpZiBpc0hhc2goaERlc2MuXylcblx0XHRcdHtkZXNjLCByYW5nZX0gOj0gaERlc2MuX1xuXHRcdFx0cHVzaCAoZGVzYyB8fCAnPG5vIGRlc2NyaXB0aW9uIGF2YWlsYWJsZT4nKSwgMVxuXHRcdFx0aWYgZGVmaW5lZChyYW5nZSlcblx0XHRcdFx0aWYgaXNJbnRlZ2VyKHJhbmdlKVxuXHRcdFx0XHRcdHB1c2ggXCJUaGVyZSBtdXN0IGJlIGV4YWN0bHkgI3tjbnRTdHIocmFuZ2UsICdub24tb3B0aW9uJylcIiwgMVxuXHRcdFx0XHRlbHNlIGlmIGlzQXJyYXkocmFuZ2UpXG5cdFx0XHRcdFx0W21pbiwgbWF4XSA6PSByYW5nZVxuXHRcdFx0XHRcdGlmIChtaW4gPiAwKVxuXHRcdFx0XHRcdFx0cHVzaCBcIlRoZXJlIG11c3QgYmUgYXQgbGVhc3QgI3tjbnRTdHIobWluLCAnbm9uLW9wdGlvbicpfVwiLCAxXG5cdFx0XHRcdFx0aWYgKG1heCAhPSAnaW5mJylcblx0XHRcdFx0XHRcdHB1c2ggXCJUaGVyZSBtdXN0IGJlIGF0IG1vc3QgI3tjbnRTdHIobWF4LCAnbm9uLW9wdGlvbicpfVwiLCAxXG5cdFx0ZWxzZVxuXHRcdFx0Y3JvYWsgXCJCYWQgZGVzY3JpcHRvciBmb3IgJ18nXCJcblx0cmV0dXJuIGxMaW5lcy5qb2luKCdcXG4nKVxuIl19