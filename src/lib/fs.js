// fs.civet

import pathLib from 'path'
import urlLib from 'url'
import fs from 'fs'

import {
	undef, defined, notdefined, OL, getOptions,
	assert, croak, words,
	isString, isNonEmptyString, isArrayOfStrings,
	isFile, isDir, normalizePath, mkpath, relpath,
	fileExt, withExt, globFiles, allLinesIn, newerDestFileExists,
	pathSubDirs, mkDirsForFile, slurp, barf,
	pathType, getFileStats, parsePath,
	} from '@jdeighan/utils/llutils.js'

export {
	isFile, isDir, normalizePath, mkpath, relpath,
	fileExt, withExt, globFiles, allLinesIn, newerDestFileExists,
	pathSubDirs, mkDirsForFile, slurp, barf,
	pathType, getFileStats, parsePath,
	}

export const lStatFields = words(
	'dev ino mode nlink uid gid rdev size blksize blocks',
	'atimeMs mtimeMs ctimeMs birthtimeMs',
	'atime mtime ctime birthtime',
	)

// ---------------------------------------------------------------------------

export const mkDir = (dirPath, hOptions={}) => {

	const {clear} = getOptions(hOptions, {
		clear: false
		})

	try {
		fs.mkdirSync(dirPath)
		return true
	}
	catch (err) {
		if (err.code === 'EEXIST') {
			if (!clear) {
				return false
			}
			try {
				clearDir(dirPath)
				return true
			}
			catch (err) {
				return false
			}
		}
		else {
			throw err
		}
	}
}

// ---------------------------------------------------------------------------

export const clearDir = (dirPath) => {

	const hOptions = {
		withFileTypes: true,
		recursive: true
		}
	for (const ent in fs.readdirSync(dirPath, hOptions)) {
		if (ent.isFile()) {
			fs.rmSync(mkpath(ent.path, ent.name))
		}
		else if (ent.isDirectory()) {
			clearDir(mkpath(ent.path, ent.name))
		}
	}
	return
}

// ---------------------------------------------------------------------------

export const needDestFile = (srcPath, destPath) => {

	return !newerDestFileExists(srcPath, destPath)
}

// ---------------------------------------------------------------------------
// --- Should be called like: myself(import.meta.url)
//     returns full path of current file

export const myself = (url) => {

	return normalizePath(urlLib.fileURLToPath(url))
}

// ---------------------------------------------------------------------------

export const allFilesMatching = function*(pattern='*', hOptions={}) {
	// --- yields hFile with keys:
	//        path, filePath,
	//        type, root, dir, base, fileName,
	//        name, stub, ext, purpose
	//        (if eager) hMetaData, lLines
	// --- Valid options:
	//        hGlobOptions - options to pass to globFiles
	//        fileFilter - return path iff fileFilter(filePath) returns true
	//        eager - read the file and add keys hMetaData, lLines
	// --- Valid glob options:
	//        ignore - glob pattern for files to ignore
	//        dot - include dot files/directories (default: false)
	//        cwd - change working directory

	const {fileFilter} = getOptions(hOptions, {
		fileFilter: (h) => { return true }
		})

	for (const h of globFiles(pattern)) {
		const path = h.path
		const hResult = parsePath(path)
		if (fileFilter(hResult)) {
			yield hResult
		}
	}
	return
}

// ---------------------------------------------------------------------------
// --- fileFilter, if defined, gets (filePath)

export const deleteFilesMatching = (pattern, hOptions={}) => {

	assert((pattern !== '*'), "Can't delete files matching '*'")
	for (const {relPath} of allFilesMatching(pattern, hOptions)) {
		fs.rmSync(relPath)
	}
	return
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,