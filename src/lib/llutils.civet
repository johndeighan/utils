# llutils.civet

import {sprintf} from "https://deno.land/std/fmt/printf.ts"

import {
	undef, defined, notdefined,
	isHash, isArray, isNonEmptyString,
	isEmpty, nonEmpty, isString, isObject,
	integer, hash, voidFunc, optionspec,
	} from './datatypes.ts'

llutilsLoadTime: integer := Date.now()

# ---------------------------------------------------------------------------

export sinceLoad := () =>

	return Date.now() - llutilsLoadTime

# ---------------------------------------------------------------------------

export sinceLoadStr := () =>

	return sprintf("%5d", sinceLoad())

# ---------------------------------------------------------------------------

/**
 * throws an exception with the provided message
 */

export croak := (msg: string): never =>

	throw new Error(msg)

# ---------------------------------------------------------------------------

/**
 * Asserts that `cond` is true. If it isn't, an exception is
 * thrown with the given `msg`
 */

export assert := (cond: boolean, msg: string): void =>

	if !cond
		croak msg
	return

# ---------------------------------------------------------------------------

/**
 * Calling pass() does nothing
 */

export pass = (): void =>    # do nothing

# ---------------------------------------------------------------------------

/**
 * JSON stringifies x on one line
 * but displays both undefined and null as 'undef'
 */

export OL := (x: any): string =>

	if (x == undef)
		return 'undef'
	else if (x == null)
		return 'null'
	else
		return JSON.stringify(x)

# ---------------------------------------------------------------------------

export ML := (x: any): string =>

	if (x == undef)
		return 'undef'
	else if (x == null)
		return 'null'
	else
		return JSON.stringify(x, null, 3)

# ---------------------------------------------------------------------------

/**
 * Converts the given string to a hash
 * <word> becomes a key with a true value
 * !<word> becomes a keys with a false value
 * <word>=<string> becomes a key with value <string>
 *    - <string> must be quoted if it contains whitespace
 */

export strToHash := (str: string): hash =>

	assert isNonEmptyString(str), "Bad string: #{OL(str)}"
	h: hash := {}
	for word of str.split(/\s+/)
		if lMatches: string[] | null := word.match(///^
				(\!)?                    # negate value
				([A-Za-z][A-Za-z_0-9]*)  # identifier
				(?:
					(=)
					(.*)
					)?
				$///)
			[_, neg, ident, eqSign, str] := lMatches
			if isNonEmptyString(eqSign)
				assert notdefined(neg) || (neg == ''),
						"negation with string value"

				# --- check if str is a valid number
				num := parseFloat(str)
				if Number.isNaN(num)
					# --- TO DO: interpret backslash escapes
					h[ident] = str
				else
					h[ident] = num
			else if neg
				h[ident] = false
			else
				h[ident] = true
		else
			croak "Invalid word #{OL(word)}"
	return h

# ---------------------------------------------------------------------------

/**
 * Adds any keys in hDefaults that are missing in hOptions
 * to hOptions with their given values
 */

export addDefaults := (hOptions: hash, hDefaults: hash): hash =>

	assert isObject(hOptions), "hOptions not an object: #{OL(hOptions)}"
	assert isObject(hDefaults), "hDefaults not an object: #{OL(hDefaults)}"

	# --- Fill in defaults for missing values
	for key of Object.keys(hDefaults)
		value := hDefaults[key]
		if not hOptions.hasOwnProperty(key) && defined(value)
			hOptions[key] = value
	return hOptions

# ---------------------------------------------------------------------------

/**
 * returns a hash of options with their values, using options
 * if it's a hash, or parsing options using strToHash() if
 * it's a string - adding any default values from hDefaults
 * if they're missing in the resulting hash
 */

export getOptions := (options: optionspec={}, hDefaults: hash={}): hash =>

	hOptions: hash := isString(options) ? strToHash(options) : options
	return addDefaults hOptions, hDefaults

# ---------------------------------------------------------------------------

/**
 * remove all keys from a hash that have either an empty name
 * or an empty value
 */

export removeEmptyKeys := (h: hash): hash =>

	hResult: hash := {}
	for key of keys(h)
		if nonEmpty(key) && nonEmpty(h[key])
			hResult[key] = h[key]
	return hResult

# ---------------------------------------------------------------------------

/**
 * return an array of all own keys in a hash
 */

export keys := (obj: hash, hOptions: optionspec={}) =>

	h := getOptions hOptions, {
		except: []
		}

	let except = h.except

	if isString(except)
		except = [except]
	lKeys: string[] := []
	for key of Object.keys(obj)
		if not except.includes(key)
			lKeys.push key
	return lKeys

# ---------------------------------------------------------------------------

/**
 * returns true if either `h` is not defined, or if `h` is
 * a hash that includes all the keys provided
 */

export hasKey := (h: hash, ...lKeys: string[]) =>

	if notdefined(h)
		return false
	assert isHash(h), "h not a hash: #{OL(h)}"
	for key of lKeys
		assert isString(key), "key not a string: #{OL(key)}"
		if not h.hasOwnProperty(key)
			return false
	return true

export hasKeys := hasKey

# ---------------------------------------------------------------------------

/**
 * merges the provided objects into a new object
 * NOTE: none of the provided arguments are modified
 */

export merge := (...lObjects: hash[]): hash =>

	return Object.assign({}, lObjects...)

# ---------------------------------------------------------------------------

export hit := (pct: number = 50): boolean =>

	return (100 * Math.random() < pct)

# ---------------------------------------------------------------------------
# --- ASYNC !

export sleep := (sec: number): void =>

	await new Promise((r) => setTimeout(r, 1000 * sec))
	return

# ---------------------------------------------------------------------------

/**
 * returns a string consisting of the given number
 * of space characters
 */

export spaces = (n: number): string =>

	return " ".repeat(n)

# ---------------------------------------------------------------------------

/**
 * returns a string consisting of the given number
 * of TAB characters
 */

export tabs = (n: number): string =>

	return "\t".repeat(n)
