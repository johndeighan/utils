"use strict";
// analyze.lib.civet

import {
	undef, allLinesIn, LOG, LOGVALUE, DBG, OL, DBGVALUE, croak,
	defined, notdefined, isEmpty, nonEmpty, assert, words, hashof,
	hash, isHash, integer, TextTable, hasKey, hasKeys, allMatches,
	} from './utils.lib.ts'

// ---------------------------------------------------------------------------

export type symbolKind = 'const'|'var'|'function'|'type'|'interface'|'enum'|'class'

export const isSymbolKind = (x: any): x is symbolKind => {

	return ['const','var','function','type','interface','enum','class'].includes(x)
}

export type symbolDesc = {
	kind: symbolKind
	name: string
	guardFor?: string   // for functions
	numTests?: integer
	status?: string
	}

export const isSymbolDesc = (x: any): x is symbolDesc => {

	if (!isHash(x)) {
		return false
	}
	if (!hasKeys(x, 'name', 'kind', 'numTests')) {
		return false
	}
	return (x.numTests >= 0)
}

export type testDesc = {
	kind: symbolKind
	name: string
	numTests: integer
	}

// ---------------------------------------------------------------------------

/**
 * parses line that begins with 'export',
 * except 'export {' or 'export type {'
 * returns a symbolDesc
 */

export const parseExportLine = (
	line: string
	): (symbolDesc | undefined) => {

	if (line.match(/^export(?:\s+type)?\s*\{/)) {
		DBG(`ignoring line ${OL(line)}`)
		return undef
	}

	// --- check for functions
	let ref;let ref1;if ((ref = line.match(/^export\s+([A-Za-z][A-Za-z0-9_]*)\s*(?:\:\s*[A-Za-z][A-Za-z0-9_]*\s*)?(\:?\=)\s*\((.*)$/))) {const lMatches = ref;
		const [_, name, sym, rest] = lMatches
		if (sym === '=') {
			LOG(`WARNING: function ${name} uses '=', not ':='`)
		}
		let ref2;if ((ref2 = rest.match(/\sis\s([A-Za-z][A-Za-z0-9_]*(?:\[\])?)/))) {const lGuard = ref2;
			return {
				name,
				kind: 'function',
				guardFor: lGuard[1]
				}
		}
		else {
			return {
				name,
				kind: 'function'
				}
		}
	}

	else if ((ref1 = line.match(/^export\s+(?:(let|var|const|type|function|interface|enum|class)\s+)?([A-Za-z0-9_]+(?:\<[A-Za-z]+\>)?)(.*)$/))) {const lMatches = ref1;
		DBG(`LINE: ${OL(line)}`)
		const [_, knd, name, tail] = lMatches
		const kind = (
			  notdefined(knd) ? 'const'
			: (knd === 'let')  ? 'var'
			:                  knd
			)
		if (isSymbolKind(kind)) {
			const lTailMatches = tail.match(/\s*\:?\=\s*\(([A-Za-z0-9_]+)\:\s*any\):\s*([A-Za-z0-9_]+)\s+is\s+([A-Za-z0-9_]+(?:\[\])?)/)
			if (defined(lTailMatches)) {
				const [_, var1, var2, typeName] = lTailMatches
				assert((var1 === var2),
						"var name mismatch in type guard")
				DBG(`   EXPORT: ${OL(name)}, kind = ${kind}, guard = ${name}`)
				return {
					name,
					kind
					}
			}
			else {
				DBG(`   EXPORT: ${OL(name)}, kind = ${kind}`)
				return {
					name,
					kind
					}
			}
		}
		else {
			croak(`Bad kind: ${kind}`)
		}
	}
	else {
		return undef
	}
}

// ---------------------------------------------------------------------------
// ASYNC GENERATOR

/**
 * yields symbolDesc objects for a civet file
 */

export const allExportsIn = async function*(
		path: string
		): AsyncGenerator<symbolDesc,void,void> {

	DBG("CALL allExportsIn()")

	// --- There might be multiple lines like 'export function X'
	//     due to function overloading

	const setYielded = new Set()

	for await (const line of allLinesIn(path)) {
		const h = parseExportLine(line)
		if (defined(h) && !setYielded.has(h.name)) {
			yield h
			setYielded.add(h.name)
		}
	}
	return
}

// ---------------------------------------------------------------------------
// ASYNC GENERATOR

export const allUnitTestsIn = async function*(
		path: string
		): AsyncGenerator<testDesc,void,void> {

	let lCurSymbols: testDesc[] = []
	let lineNum = 0
	for await (const line of allLinesIn(path)) {
		lineNum += 1
		if (line.indexOf('DBG ') === 0) {

			DBG(`LINE: '${line}'`)

			// --- Yield all current symbols, then reset array
			for (const sym of lCurSymbols) {
				yield sym
			}
			lCurSymbols = []

			// --- process all quoted strings on line
			for (const [_, lq, desc, rq] of allMatches(line, /(["'])([^"']*)(["'])/)) {
				assert((lq === rq), "Mismatched quotes")
				DBGVALUE('desc', desc)
				const errMsg = `Bad unit test header ${OL(desc)} at ${path}:${lineNum}`
				const lMatches = desc.trim().match(/^(?:(type|const|interface|enum|class|function)\s+)?([A-Za-z0-9_]+)(\(.*\))?(\<T\>)?(.*)$/)
				DBGVALUE("lMatches", lMatches)
				if (defined(lMatches)) {
					const [_, knd, name, funcArgs, subTypes, rest] = lMatches
					assert(isEmpty(rest),
								`${errMsg} - nonempty rest`)
					if (isEmpty(funcArgs)) {
						assert(nonEmpty(knd),
								`${errMsg} - no kind or funcArgs`)
					}
					else {
						assert((isEmpty(knd) || (knd === 'function')),
								`${errMsg} - funcArgs + nonempty kind but not 'function'`)
					}
					const kind = knd || 'function'
					const fullName = defined(subTypes) ? `${name}<T>` : name
					if (isSymbolKind(kind)) {
						lCurSymbols.push({
							name: fullName,
							kind,
							numTests: 0
							})
					}
					else {
						croak(`Bad kind: ${kind}`)
					}
				}
				else {
					LOG(`${errMsg} - no match`)
				}
			}
		}
		else {
			let ref3;if ((ref3 = line.match(/\b(equal|truthy|falsy|fails|succeeds|matches|like|listLike|includes|includesAll|isType|notType)\b/))) {const lMatches2 = ref3;
				DBG(`      - unit test ${lMatches2[1]}`)
				for (const h of lCurSymbols) {
					h.numTests += 1
				}
			}
		}
	}

	// --- Yield any remaining symbols
	for (const sym of lCurSymbols) {
		yield sym
	}
	return
}

// ---------------------------------------------------------------------------

/**
 * Returns an array of symbolDesc objects, including:
 * 	- objects in lExports that don't appear in lTests
 * 		with status = 'missing'
 * 	- objects in lTests that don't appear in lExports
 * 		with status = 'extra'
 */

export const mergeAnalyses = (
		lExports: symbolDesc[],
		lTests: testDesc[]
		): symbolDesc[] => {

	// --- Keep track of all type guard names so we can
	//     remove those functions from the returned list

	const results=[];for (const sym of lExports) {
		const {name, kind} = sym

		// --- find the corresponding testDesc, if any

		const utsym = lTests.find((h) => (h.name === sym.name))
		if (defined(utsym)) {
			results.push(({
				name,
				kind,
				numTests: utsym.numTests,
				status: (utsym.numTests === 0) ? 'missing' : 'ok'
				}))
		}
		else {
			results.push(({
				name,
				kind,
				numTests: 0,
				status: 'missing'
				}))
		}
	};const lResult: symbolDesc[] =results

	// --- find tested symbols, not exported from library
	for (const sym of lTests) {
		const {name, kind, numTests} = sym
		const exsym = lExports.find((h) => (h.name === sym.name))
		if (notdefined(exsym)) {
			lResult.push({
				name,
				kind,
				numTests,
				status: 'extra'
				})
		}
	}

	// --- Filter out any functions which are type guards
	return lResult
}

// ---------------------------------------------------------------------------

/**
 * logs a table of number of unit tests for each symbol
 * returns number of missing tests
 */

export const dumpSymbols = (
		label: string,
		lSymbols: symbolDesc[]
		): integer => {

	const table = new TextTable('l l l r%d')
	table.title(label)
	table.fullsep()
	table.labels(['name','kind','guardFor','# tests'])
	table.sep()
	let numMissing = 0
	for (const {name, kind, guardFor, numTests} of lSymbols) {
		if (numTests === 0) {
			numMissing += 1
		}
		if (kind === 'function') {
			table.data([name, kind, guardFor, numTests || 'missing'])
		}
		else {
			table.data([name, kind, guardFor, numTests || 'missing'])
		}
	}
	console.log(table.asString())
	return numMissing
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,