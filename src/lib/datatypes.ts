"use strict";
// datatypes.civet

/**
 * An alias for TypeScript type 'object' with string keys
 */

export interface hash {
	[key: string]: any
}

/**
 * An array containing anything
 */

export type array = any[]

/**
 * A function that takes no parameters and returns nothing
 */

export type voidFunc = () => void

/**
 * specifying options for function getOptions()
 */

export type optionspec = hash | string

// ---------------------------------------------------------------------------

/**
 * An alias for JavaScript's `undefined`
 * [(unit tests)](../test/datatypes.test.civet#:~:text=%23%20%2D%2D%2D%20undef)
 */

export const undef = undefined

// ---------------------------------------------------------------------------

/**
 * returns true if the provided value is defined
 * (i.e. not null or undefined), else returns false
 * [(unit tests)](../test/datatypes.test.civet#:~:text=%23%20%2D%2D%2D%20defined()))
 */

export const defined = (x: any): boolean => {

	return (x !== undef) && (x !== null)
}

// ---------------------------------------------------------------------------

/**
 * Returns true if all the values provided are not defined
 * (i.e. either null or undefined), else returns false
 * [(unit tests)](../test/datatypes.test.civet#:~:text=%23%20%2D%2D%2D%20notdefined())
 */

export const notdefined = (x: any): x is undefined => {

	return (x === undefined) || (x === null)
}

// ---------------------------------------------------------------------------

/**
 * returns true if (typeof item == 'string') or item instanceof String
 * [(unit tests)](../test/datatypes.test.civet#:~:text=%23%20%2D%2D%2D%20isString)
 */

export const isString = (x: any): x is string => {

	return (typeof x === 'string') || (x instanceof String)
}

// ---------------------------------------------------------------------------

/**
 * Test if something is a non-empty string,
 * i.e. isn't all whitespace
 * [(unit tests)](../test/datatypes.test.civet#:~:text=%23%20%2D%2D%2D%20isNonEmptyString)
 */

export const isNonEmptyString = (x: any): boolean => {

	// --- must contain non-whitespace character
	return isString(x) && defined(x.match(/\S/))
}

// ---------------------------------------------------------------------------

/**
 * Test if something is a boolean
 * [(unit tests)](../test/datatypes.test.civet#:~:text=%23%20%2D%2D%2D%20isBoolean)
 */

export const isBoolean = (x: any): x is boolean => {

	return (typeof x === 'boolean') || (x instanceof Boolean)
}

// ---------------------------------------------------------------------------

/**
 * Test if something is a number
 * [(unit tests)](../test/datatypes.test.civet#:~:text=%23%20%2D%2D%2D%20isNumber)
 */

export const isNumber = (x: any): x is number => {

	const type = typeof x
	return (type === 'bigint') || (type === 'number') || (x instanceof Number)
}

// ---------------------------------------------------------------------------

/**
 * Type integer
 */

export type integer = number

/**
 * Test if something is an integer
 * [(unit tests)](../test/datatypes.test.civet#:~:text=%23%20%2D%2D%2D%20isInteger)
 */

export const isInteger = (x: any): x is integer => {

	return isNumber(x) && Number.isInteger(x.valueOf())
}

// ---------------------------------------------------------------------------

/**
 * Test if something is an array
 * [(unit tests)](../test/datatypes.test.civet#:~:text=%23%20%2D%2D%2D%20isArray())
 */

export const isArray = (x: any): x is array => {

	return Array.isArray(x)
}

// ---------------------------------------------------------------------------

/**
 * Test if something is an array of strings
 * [(unit tests)](../test/datatypes.test.civet#:~:text=%23%20%2D%2D%2D%20isArrayOfStrings())
 */

export const isArrayOfStrings = (x: any): boolean => {

	if (!Array.isArray(x)) {
		return false
	}
	for (const item of x) {
		if (!isString(item)) {
			return false
		}
	}
	return true
}

// ---------------------------------------------------------------------------

/**
 * Type regexp - a regular expression
 */

type regexp = object

/**
 * Test if something is a regular expression
 * [(unit tests)](../test/datatypes.test.civet#:~:text=%23%20%2D%2D%2D%20isRegExp)
 */

export const isRegExp = (item: any): item is regexp => {

	return (item instanceof RegExp)
}

// ---------------------------------------------------------------------------

/**
 * Test if something is an object
 * [(unit tests)](../test/datatypes.test.civet#:~:text=%23%20%2D%2D%2D%20isObject)
 */

export const isObject = (item: any): item is object => {

	return (typeof item === 'object')
}

// ---------------------------------------------------------------------------

/**
 * Test if something is a hash
 * [(unit tests)](../test/datatypes.test.civet#:~:text=%23%20%2D%2D%2D%20isHash)
 */

export const isHash = (item: any): item is hash => {

	return isObject(item) && !(isArray(item) || isRegExp(item))
}

// ---------------------------------------------------------------------------

/**
 * returns true if any of these is true:
 * 	- x is null or undef
 * 	- x is a string consisting of only whitespace
 * 	- x is an array of length 0
 * 	- x is a hash that has no keys
 * else returns false
 * [(unit tests)](../test/datatypes.test.civet#:~:text=%23%20%2D%2D%2D%20isEmpty)
 */

export const isEmpty = (x: any): boolean => {

	if ((x === undef) || (x === null)) {
		return true
	}
	if (isString(x)) {
		return (x.match(/^\s*$/) !== null)
	}
	if (isArray(x)) {
		return (x.length === 0)
	}
	if (isHash(x)) {
		return (Object.keys(x).length === 0)
	}
	else {
		return false
	}
}

// ---------------------------------------------------------------------------

/**
 * returns not isEmpty(x)
 * [(unit tests)](../test/datatypes.test.civet#:~:text=%23%20%2D%2D%2D%20nonEmpty)
 */

export const nonEmpty = (x: any): boolean => {

	return !isEmpty(x)
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,