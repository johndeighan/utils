# parser.lib.civet

# ---------------------------------------------------------------------------

function locAt(text, newPos, {pos, line, column})

	while (pos < newPos)
		ch := text[pos++]
		if (ch == '\n')
			column = 1
			line++
		else
			column++
	return {pos, line, column}

# ---------------------------------------------------------------------------

markSeen := ($) =>

	if ($.pos > $.lastSeen.pos)
		Object.assign($.lastSeen, locAt($.text, $.pos, $.lastSeen))

# ---------------------------------------------------------------------------

export RegexToken := (pattern) => ($) =>

	markSeen($)

	match := pattern.exec($.text.substring($.pos))
	if (not match)
		return $

	# --- Token is matched
	#     push all captures to the stack and return the match
	$next := {
		...$,
		pos: $.pos + match[0].length,
		}

	for (let i = 1; i < match.length; i++)
		$.stack[$next.sp++] = match[i]

	return $next

# ---------------------------------------------------------------------------

export StringToken := (pattern) => ($) =>

	markSeen($)

	if ($.text.startsWith(pattern, $.pos))
		return {
			...$,
			pos: $.pos + pattern.length
			}
	return $

# ---------------------------------------------------------------------------

export function Use(rule)

	if (typeof(rule) == 'function')
		return rule
	if (rule instanceof RegExp)
		return RegexToken(rule)
	if (typeof(rule) == 'string')
		return StringToken(rule)
	throw new Error('Invalid rule');

# ---------------------------------------------------------------------------

export function Ignore(toIgnore, rule)

	rule = Use(rule)
	if (toIgnore)
		toIgnore = Ignore(null, Plus(toIgnore))

	return ($) =>
		$cur := toIgnore ? toIgnore($) : $

		$.ignore.push(toIgnore)
		$next := rule($cur)
		$.ignore.pop()

		return $next == $cur ? $ : toIgnore ? toIgnore($next) : $next

# ---------------------------------------------------------------------------

skipIgnored := ($) =>

	if ($.ignore.length == 0)
		return $

	toIgnore := $.ignore[$.ignore.length - 1]
	return toIgnore ? toIgnore($) : $

# ---------------------------------------------------------------------------
# --- Match a sequence of rules left to right

export function All(...rules)

	rules = rules.map(Use)

	return ($) =>
		let $cur = $
		for (let i = 0; i < rules.length; i++)
			$before := (i > 0) ? skipIgnored($cur) : $cur

			$after := rules[i]($before)
			if ($after == $before)
				# --- if one rule fails: fail all
				return $

			if ($after.pos > $before.pos) || ($after.sp > $before.sp)
				# --- Prevent adding whitespace if matched
				#     an optional rule last.
				#     Consequently All() will fail if
				#     all the rules don't make any progress
				#     and don't put anything on stack
				$cur = $after
		return $cur

# ---------------------------------------------------------------------------
# --- Match any of the rules with left-to-right preference

export function Any(...rules)

	rules = rules.map(Use)
	return ($) =>
		for (let i=0; i < rules.length; i++)
			$next := (rules[i])($)
			if ($next != $)
				return $next
		return $

# ---------------------------------------------------------------------------
# --- Match a rule 1 or more times

export function Plus(rule)

	rule = Use(rule);
	return ($) =>
		while (true)
			$cur := skipIgnored($)
			$next := rule($cur)
			if ($next == $cur)
				return $
			$ = $next

# ---------------------------------------------------------------------------
# --- Match a rule optionally

export function Optional(rule)

	rule = Use(rule)
	return ($) =>
		$next := rule($)
		if ($next != $)
			return $next

		# --- Otherwise return a shallow copy
		#     of the state to still indicate a match
		return {...$}

# ---------------------------------------------------------------------------

export function Node(rule, reducer)

	rule = Use(rule);
	return ($) =>
		$next := rule($)
		if ($next == $)
			return $

		# --- We have a match
		node := reducer($.stack.slice($.sp, $next.sp), $, $next)
		$next.sp = $.sp;
		if (node != null)
			$.stack[$next.sp++] = node

		return $next

# ---------------------------------------------------------------------------

export Star := (rule) => Optional(Plus(rule))

# --- Y combinator: often useful to define recursive grammars
export Y := (proc) => ((x) => proc(y => (x(x))(y)))(x => proc(y => (x(x))(y)))

# ---------------------------------------------------------------------------

export START := (text, pos = 0) => ({
	text,
	ignore: [],
	stack: [],
	sp: 0,
	lastSeen: locAt(text, pos, { pos: 0, line: 1, column: 1 }),
	pos,
	})

# ---------------------------------------------------------------------------

export function Parser(Grammar, pos = 0, partial = false)

	return (text) =>
		if (typeof text != 'string')
			throw new Error('string expected')

		$ := START(text, pos)
		$next := Grammar($)

		if ($ == $next) || (not partial && ($next.pos < text.length))
			# --- No match or haven't consumed the whole input
			{line, column, pos} := $.lastSeen
			throw new Error("""
				Unexpected token at #{line}:#{column}
				Remainder: #{text.splice(pos)}
				""")
		return $.stack[0]
