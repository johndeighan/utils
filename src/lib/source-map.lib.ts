"use strict";
// source-map.lib.civet

import {existsSync} from 'jsr:@std/fs'
import {RawSourceMap, SourceMapConsumer} from "npm:source-map-sync"

import {
	undef, defined, notdefined, assert, croak,
	} from 'datatypes'

const hSourceMapCache = new Map<string, RawSourceMap>()

// ---------------------------------------------------------------------------

export const stripSrcMap = (
		contents: string
		): [string, string?] => {

	const lMatches = contents.match(/^(.*)\/\/\#\s+sourceMappingURL=data:application\/json;(?:charset=utf-8;)?base64,(.*)$/s)
	if (defined(lMatches) && (lMatches.length === 3)) {
		const [_, src, srcMapStr] = lMatches
		return [src.trim(), srcMapStr.trim()]
	}
	else {
		const pos = contents.indexOf('//# sourceMappingURL')
		if (pos >= 0) {
			croak(`Bad source map: ${contents.substring(pos)}`)
		}
		return [contents.trim(), undef]
	}
}

// ---------------------------------------------------------------------------

export const extractSourceMap = (
		path: string
		): [string, RawSourceMap?] => {

	if (!existsSync(path)) {
		croak(`No such file: ${path}`)
	}

	const [src, srcMapStr] = stripSrcMap(Deno.readTextFileSync(path))

	if (defined(srcMapStr)) {
		const sourceMap = JSON.parse(atob(srcMapStr)) as RawSourceMap
		hSourceMapCache.set(path, sourceMap)
		return [src, sourceMap]
	}
	else {
		return [src, undef]
	}
}

// ---------------------------------------------------------------------------

export type TFilePos = {
	path: string
	line: number
	column: number
	}

// ---------------------------------------------------------------------------

export const mapSourcePos = (h: TFilePos): TFilePos => {

	const {path, line, column} = h
	const [source, hSrcMap] = extractSourceMap(path)
	if (defined(hSrcMap)) {
		const consumer = new SourceMapConsumer(hSrcMap)
		const hNew = consumer.originalPositionFor({line, column})
		if (
				   defined(hNew)
				&& defined(hNew.source)
				&& defined(hNew.line)
				&& defined(hNew.column)
				) {
			return {
				path:   hNew.source,
				line:   hNew.line,
				column: hNew.column
				}
		}
		else {
			return h
		}
	}
	else {
		return h
	}
}

// ---------------------------------------------------------------------------

//# sourceMappingURL=data:application/json;charset=utf-8;base64,