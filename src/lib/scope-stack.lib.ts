"use strict";
// scope-stack.lib.civet

import {
	undef, defined, notdefined, assert, croak, hash,
	} from 'datatypes'
import {hasKey} from 'llutils'

// ---------------------------------------------------------------------------

export class CScope {
	sDefined = new Set<string>()
	sUsed = new Set<string>()

	addDefined(name: string): void {
		this.sDefined.add(name)
		return
	}

	addUsed(name: string): void {
		this.sUsed.add(name)
		return
	}

	isDefined(name: string): boolean {
		return this.sDefined.has(name)
	}

	isUsed(name: string): boolean {
		return this.sUsed.has(name)
	}
}

// ---------------------------------------------------------------------------

export class CScopeStack {

	lScopes: CScope[]
	curScope: CScope
	finished: boolean   // --- set when last scope is ended

	// ..........................................................

	constructor(s: CScope = new CScope()) {

		this.curScope = s
		this.lScopes = [s]
		this.finished = false
	}

	// ..........................................................

	newScope(s: CScope = new CScope()): void {

		assert(!this.finished, "finished = true")
		this.curScope = s
		this.lScopes.push(s)
		return
	}

	// ..........................................................

	endScope(): CScope {

		switch(this.lScopes.length) {
			case 0: {
				croak("endScope() with no scopes");break;
			}
			case 1: {
				this.finished = true;break;
			}
			default: {
				this.curScope = this.lScopes.at(-2) as CScope
			}
		}
		return this.lScopes.pop() as CScope
	}

	// ..........................................................

	addDefined(name: string): void {

		assert(!this.finished, "finished = true")
		this.curScope.addDefined(name)
		return
	}

	// ..........................................................

	addUsed(name: string): void {

		assert(!this.finished, "finished = true")
		this.curScope.addUsed(name)
		return
	}

	// ..........................................................

	isDefined(name: string): boolean {

		for (const scope of [...this.lScopes].reverse()) {
			if (scope.isDefined(name)) {
				return true
			}
		}
		return false
	}

	// ..........................................................

	isUsed(name: string): boolean {

		for (const scope of [...this.lScopes].reverse()) {
			if (scope.isUsed(name)) {
				return true
			}
		}
		return false
	}
}

//# sourceMappingURL=data:application/json;base64,