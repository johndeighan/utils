"use strict";
// parser.lib.civet

type TPosition = {
	pos: number
	line: number
	column: number
	}

export type TState = {
	text: string
	ignore: any[]
	stack: any[]
	sp: number
	lastPos: TPosition
	pos: number
	}

export type TRule = ($: TState) => TState
type TLaxRule = (string | RegExp | TRule)   // --- can convet to TRule
type TReducer<T> = (lMatches: T[], $: TState, $next: TState) => (T | undefined)

// ---------------------------------------------------------------------------

export function getState(
		text: string,
		pos: number = 0
		): TState {

	return {
		text,
		ignore: [],
		stack: [],
		sp: 0,
		lastPos: {pos: 0, line: 1, column: 1},
		pos
		}
}

// ---------------------------------------------------------------------------

const locAt = (
		text: string,
		newPos: number,
		{pos, line, column}: TPosition
		): TPosition => {

	while (pos < newPos) {
		const ch = text[pos++]
		if (ch === '\n') {
			column = 1
			line++
		}
		else {
			column++
		}
	}
	return {pos, line, column}
}

// ---------------------------------------------------------------------------

const markSeen = ($: TState): void => {

	if ($.pos > $.lastPos.pos) {
		Object.assign($.lastPos, locAt($.text, $.pos, $.lastPos))
	}
	return
}

// ---------------------------------------------------------------------------

export const RegexMatcher = (re: RegExp) => ($: TState): TState => {

	markSeen($)

	const lMatches = re.exec($.text.substring($.pos))
	if (!lMatches) {
		return $
	}

	// --- Token is matched
	//     push all captures to the stack and return the match
	const $next = {
		...$,
		pos: $.pos + lMatches[0].length,
		}

	let i1 = 0;for (const str of lMatches) {const i = i1++;
		if (i > 0) {
			$.stack[$next.sp++] = str
		}
	}

	return $next
}

// ---------------------------------------------------------------------------

export const StringMatcher = (str: string) => ($: TState) => {

	markSeen($)

	if ($.text.startsWith(str, $.pos)) {
		return {
			...$,
			pos: $.pos + str.length
			}
	}
	else {
		return $
	}
}

// ---------------------------------------------------------------------------

export function Use(rule: TLaxRule): TRule {

	if (typeof (rule) === 'function') {
		return rule
	}
	if (rule instanceof RegExp) {
		return RegexMatcher(rule)
	}
	if (typeof (rule) === 'string') {
		return StringMatcher(rule)
	}
	throw new Error('Invalid rule')
}

// ---------------------------------------------------------------------------

export function Ignore(laxToIgnore: TLaxRule, laxRule: TLaxRule): TRule {

	const rule = Use(laxRule)
	const toIgnore = Use(laxToIgnore)
	return ($: TState) => {
		const $cur = toIgnore($)
		$.ignore.push(toIgnore)
		const $next = rule($cur)
		$.ignore.pop()

		return ($next === $cur) ? $ : toIgnore($next)
	}
}

// ---------------------------------------------------------------------------

const skipIgnored = ($: TState) => {

	if ($.ignore.length === 0) {
		return $
	}

	const toIgnore = $.ignore[$.ignore.length - 1]
	return toIgnore ? toIgnore($) : $
}

// ---------------------------------------------------------------------------
// --- Match a sequence of rules left to right

export function All(...lLaxRules: TLaxRule[]): TRule {

	const lRules = lLaxRules.map(Use)

	return ($: TState) => {
		let $cur = $
		for (let i = 0; i < lRules.length; i++) {
			const $before = (i > 0) ? skipIgnored($cur) : $cur

			const $after = lRules[i]($before)
			if ($after === $before) {
				// --- if one rule fails: fail all
				return $
			}

			if (($after.pos > $before.pos) || ($after.sp > $before.sp)) {
				// --- Prevent adding whitespace if matched
				//     an optional rule last.
				//     Consequently All() will fail if
				//     all the lRules don't make any progress
				//     and don't put anything on stack
				$cur = $after
			}
		}
		return $cur
	}
}

// ---------------------------------------------------------------------------
// --- Match any of the rules with left-to-right preference

export function Any(...lLaxRules: TLaxRule[]): TRule {

	const lRules = lLaxRules.map(Use)
	return ($: TState) => {
		for (let i=0; i < lRules.length; i++) {
			const $next = (lRules[i])($)
			if ($next !== $) {
				return $next
			}
		}
		return $
	}
}

// ---------------------------------------------------------------------------
// --- Match a rule 1 or more times

export function Plus(laxRule: TLaxRule): TRule {

	const rule = Use(laxRule)
	return ($: TState) => {
		while (true) {
			const $cur = skipIgnored($)
			const $next = rule($cur)
			if ($next === $cur) {
				return $
			}
			$ = $next
		}
	}
}

// ---------------------------------------------------------------------------
// --- Match a rule optionally

export function Optional(laxRule: TLaxRule): TRule {

	const rule = Use(laxRule)
	return ($: TState) => {
		const $next = rule($)
		if ($next !== $) {
			return $next
		}

		// --- Otherwise return a shallow copy
		//     of the state to still indicate a match
		return {...$}
	}
}

// ---------------------------------------------------------------------------

export function Star(laxRule: TLaxRule): TRule {

	return Optional(Plus(laxRule))
}

// ---------------------------------------------------------------------------

export function Node<T>(laxRule: TLaxRule, reducer: TReducer<T>): TRule {

	const rule = Use(laxRule)
	return ($: TState) => {
		const $next = rule($)
		if ($next === $) {
			return $
		}

		// --- We have a match
		const node = reducer($.stack.slice($.sp, $next.sp), $, $next)
		$next.sp = $.sp;
		if (node !== null) {
			$.stack[$next.sp++] = node
		}

		return $next
	}
}

// ---------------------------------------------------------------------------
// --- Returns a function that:
//        1. accepts a string
//        2. returns a T

type TStringMapper<T> = (str: string) => T

export function getParser<T>(
		Grammar: TRule,
		pos = 0,
		partial = false
		): TStringMapper<T> {

	return (text: string) => {
		const $ = getState(text, pos)
		const $next = Grammar($)

		if (($ === $next) || (!partial && ($next.pos < text.length))) {
			// --- No match or haven't consumed the whole input
			const {line, column, pos} = $.lastPos
			throw new Error(`Unexpected token at ${line}:${column}
Remainder: ${text.slice(pos)}`)
		}
		return $.stack[0]
	}
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3JjL2xpYi9wYXJzZXIubGliLmNpdmV0LnRzeCIsInNvdXJjZXMiOlsic3JjL2xpYi9wYXJzZXIubGliLmNpdmV0Il0sIm1hcHBpbmdzIjoiO0FBQUEsbUJBQWtCO0FBQ2xCLEFBQUE7QUFDQSxBQUFBLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDbEIsQUFBQSxDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQU07QUFDWixBQUFBLENBQUMsSUFBSSxDQUFDLENBQUMsTUFBTTtBQUNiLEFBQUEsQ0FBQyxNQUFNLENBQUMsQ0FBQyxNQUFNO0FBQ2YsQ0FBQyxDQUFDO0FBQ0YsQUFBQTtBQUNBLEFBQUEsQUFBQSxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUN0QixBQUFBLENBQUMsSUFBSSxDQUFDLENBQUMsTUFBTTtBQUNiLEFBQUEsQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUNkLEFBQUEsQ0FBQyxLQUFLLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUNiLEFBQUEsQ0FBQyxFQUFFLENBQUMsQ0FBQyxNQUFNO0FBQ1gsQUFBQSxDQUFDLE9BQU8sQ0FBQyxDQUFDLFNBQVM7QUFDbkIsQUFBQSxDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQU07QUFDWixDQUFDLENBQUM7QUFDRixBQUFBO0FBQ0EsQUFBQSxBQUFBLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxNQUFNO0FBQ3pDLEFBQUEsQUFBQSxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsR0FBRywwQkFBeUI7QUFDckUsQUFBQSxBQUFBLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEUsQyxDQUFFLEFBQUMsQyxZLENBQUU7QUFDbEUsQUFBQTtBQUNBLEFBQUEsOEVBQTZFO0FBQzdFLEFBQUE7QUFDQSxBQUFBLEFBQUEsTUFBTSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUM7QUFDekIsQUFBQSxFQUFFLElBQUksQ0FBQyxDQUFDLE1BQU0sQ0FBQTtBQUNkLEFBQUEsRUFBRSxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDakIsRUFBRSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUEsQ0FBQTtBQUNYLEFBQUE7QUFDQSxBQUFBLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDVCxBQUFBLEVBQUUsSUFBSSxDQUFBO0FBQ04sQUFBQSxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBO0FBQ1osQUFBQSxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBO0FBQ1gsQUFBQSxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQTtBQUNQLEFBQUEsRUFBRSxPQUFPLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBO0FBQ3ZDLEFBQUEsRUFBRSxHQUFHO0FBQ0wsRUFBRSxDO0FBQUMsQ0FBQTtBQUNILEFBQUE7QUFDQSxBQUFBLDhFQUE2RTtBQUM3RSxBQUFBO0FBQ0EsQUFBQSxBQUFLLE1BQUwsS0FBSyxDQUFDLENBQUUsQ0FBQyxDQUFDO0FBQ1YsQUFBQSxFQUFFLElBQUksQ0FBQyxDQUFDLE1BQU0sQ0FBQztBQUNmLEFBQUEsRUFBRSxNQUFNLENBQUMsQ0FBQyxNQUFNLENBQUM7QUFDakIsQUFBQSxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxTQUFTO0FBQ2hDLEVBQUUsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQSxDQUFBO0FBQ2pCLEFBQUE7QUFDQSxBQUFBLENBQUMsS0FBSyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQSxDQUFBO0FBQ3JCLEFBQUEsRUFBSSxNQUFGLEVBQUUsQ0FBQyxDQUFFLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO0FBQ25CLEFBQUEsRUFBRSxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQSxDQUFBO0FBQ2pCLEFBQUEsR0FBRyxNQUFNLEMsQ0FBRSxDQUFDLENBQUM7QUFDYixBQUFBLEdBQUcsSUFBSSxFO0VBQUUsQ0FBQTtBQUNULEFBQUEsRUFBRSxJQUFJLENBQUEsQ0FBQTtBQUNOLEFBQUEsR0FBRyxNQUFNLEU7RUFBRSxDO0NBQUEsQ0FBQTtBQUNYLEFBQUEsQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxNQUFNLEM7QUFBQyxDQUFBO0FBQzNCLEFBQUE7QUFDQSxBQUFBLDhFQUE2RTtBQUM3RSxBQUFBO0FBQ0EsQUFBQSxBQUFRLE1BQVIsUUFBUSxDQUFDLENBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQSxDQUFBO0FBQ2hDLEFBQUE7QUFDQSxBQUFBLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUEsQ0FBQTtBQUMzQixBQUFBLEVBQUUsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMs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QUFDLENBQUMsQztDQUFDLEM7QUFBQSxDQUFBO0FBQ25CIiwibmFtZXMiOltdLCJzb3VyY2VzQ29udGVudCI6WyIjIHBhcnNlci5saWIuY2l2ZXRcblxudHlwZSBUUG9zaXRpb24gPSB7XG5cdHBvczogbnVtYmVyXG5cdGxpbmU6IG51bWJlclxuXHRjb2x1bW46IG51bWJlclxuXHR9XG5cbmV4cG9ydCB0eXBlIFRTdGF0ZSA9IHtcblx0dGV4dDogc3RyaW5nXG5cdGlnbm9yZTogYW55W11cblx0c3RhY2s6IGFueVtdXG5cdHNwOiBudW1iZXJcblx0bGFzdFBvczogVFBvc2l0aW9uXG5cdHBvczogbnVtYmVyXG5cdH1cblxuZXhwb3J0IHR5cGUgVFJ1bGUgPSAoJDogVFN0YXRlKSA9PiBUU3RhdGVcbnR5cGUgVExheFJ1bGUgPSAoc3RyaW5nIHwgUmVnRXhwIHwgVFJ1bGUpICAgIyAtLS0gY2FuIGNvbnZldCB0byBUUnVsZVxudHlwZSBUUmVkdWNlcjxUPiA9IChsTWF0Y2hlczogVFtdLCAkOiBUU3RhdGUsICRuZXh0OiBUU3RhdGUpID0+IFQ/XG5cbiMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRTdGF0ZShcblx0XHR0ZXh0OiBzdHJpbmdcblx0XHRwb3M6IG51bWJlciA9IDBcblx0XHQpOiBUU3RhdGVcblxuXHRyZXR1cm4ge1xuXHRcdHRleHRcblx0XHRpZ25vcmU6IFtdXG5cdFx0c3RhY2s6IFtdXG5cdFx0c3A6IDBcblx0XHRsYXN0UG9zOiB7cG9zOiAwLCBsaW5lOiAxLCBjb2x1bW46IDF9XG5cdFx0cG9zXG5cdFx0fVxuXG4jIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG5sb2NBdCA6PSAoXG5cdFx0dGV4dDogc3RyaW5nLFxuXHRcdG5ld1BvczogbnVtYmVyLFxuXHRcdHtwb3MsIGxpbmUsIGNvbHVtbn06IFRQb3NpdGlvblxuXHRcdCk6IFRQb3NpdGlvbiA9PlxuXG5cdHdoaWxlIChwb3MgPCBuZXdQb3MpXG5cdFx0Y2ggOj0gdGV4dFtwb3MrK11cblx0XHRpZiAoY2ggPT0gJ1xcbicpXG5cdFx0XHRjb2x1bW4gPSAxXG5cdFx0XHRsaW5lKytcblx0XHRlbHNlXG5cdFx0XHRjb2x1bW4rK1xuXHRyZXR1cm4ge3BvcywgbGluZSwgY29sdW1ufVxuXG4jIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG5tYXJrU2VlbiA6PSAoJDogVFN0YXRlKTogdm9pZCA9PlxuXG5cdGlmICgkLnBvcyA+ICQubGFzdFBvcy5wb3MpXG5cdFx0T2JqZWN0LmFzc2lnbigkLmxhc3RQb3MsIGxvY0F0KCQudGV4dCwgJC5wb3MsICQubGFzdFBvcykpXG5cdHJldHVyblxuXG4jIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG5leHBvcnQgUmVnZXhNYXRjaGVyIDo9IChyZTogUmVnRXhwKSA9PiAoJDogVFN0YXRlKTogVFN0YXRlID0+XG5cblx0bWFya1NlZW4oJClcblxuXHRsTWF0Y2hlcyA6PSByZS5leGVjKCQudGV4dC5zdWJzdHJpbmcoJC5wb3MpKVxuXHRpZiAobm90IGxNYXRjaGVzKVxuXHRcdHJldHVybiAkXG5cblx0IyAtLS0gVG9rZW4gaXMgbWF0Y2hlZFxuXHQjICAgICBwdXNoIGFsbCBjYXB0dXJlcyB0byB0aGUgc3RhY2sgYW5kIHJldHVybiB0aGUgbWF0Y2hcblx0JG5leHQgOj0ge1xuXHRcdC4uLiQsXG5cdFx0cG9zOiAkLnBvcyArIGxNYXRjaGVzWzBdLmxlbmd0aCxcblx0XHR9XG5cblx0Zm9yIHN0cixpIG9mIGxNYXRjaGVzXG5cdFx0aWYgKGkgPiAwKVxuXHRcdFx0JC5zdGFja1skbmV4dC5zcCsrXSA9IHN0clxuXG5cdHJldHVybiAkbmV4dFxuXG4jIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG5leHBvcnQgU3RyaW5nTWF0Y2hlciA6PSAoc3RyOiBzdHJpbmcpID0+ICgkOiBUU3RhdGUpID0+XG5cblx0bWFya1NlZW4oJClcblxuXHRpZiAoJC50ZXh0LnN0YXJ0c1dpdGgoc3RyLCAkLnBvcykpXG5cdFx0cmV0dXJuIHtcblx0XHRcdC4uLiQsXG5cdFx0XHRwb3M6ICQucG9zICsgc3RyLmxlbmd0aFxuXHRcdFx0fVxuXHRlbHNlXG5cdFx0cmV0dXJuICRcblxuIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuZXhwb3J0IGZ1bmN0aW9uIFVzZShydWxlOiBUTGF4UnVsZSk6IFRSdWxlXG5cblx0aWYgKHR5cGVvZihydWxlKSA9PSAnZnVuY3Rpb24nKVxuXHRcdHJldHVybiBydWxlXG5cdGlmIChydWxlIGluc3RhbmNlb2YgUmVnRXhwKVxuXHRcdHJldHVybiBSZWdleE1hdGNoZXIocnVsZSlcblx0aWYgKHR5cGVvZihydWxlKSA9PSAnc3RyaW5nJylcblx0XHRyZXR1cm4gU3RyaW5nTWF0Y2hlcihydWxlKVxuXHR0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgcnVsZScpXG5cbiMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbmV4cG9ydCBmdW5jdGlvbiBJZ25vcmUobGF4VG9JZ25vcmU6IFRMYXhSdWxlLCBsYXhSdWxlOiBUTGF4UnVsZSk6IFRSdWxlXG5cblx0cnVsZSA6PSBVc2UobGF4UnVsZSlcblx0dG9JZ25vcmUgOj0gVXNlKGxheFRvSWdub3JlKVxuXHRyZXR1cm4gKCQ6IFRTdGF0ZSkgPT5cblx0XHQkY3VyIDo9IHRvSWdub3JlKCQpXG5cdFx0JC5pZ25vcmUucHVzaCh0b0lnbm9yZSlcblx0XHQkbmV4dCA6PSBydWxlKCRjdXIpXG5cdFx0JC5pZ25vcmUucG9wKClcblxuXHRcdHJldHVybiAoJG5leHQgPT0gJGN1cikgPyAkIDogdG9JZ25vcmUoJG5leHQpXG5cbiMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbnNraXBJZ25vcmVkIDo9ICgkOiBUU3RhdGUpID0+XG5cblx0aWYgKCQuaWdub3JlLmxlbmd0aCA9PSAwKVxuXHRcdHJldHVybiAkXG5cblx0dG9JZ25vcmUgOj0gJC5pZ25vcmVbJC5pZ25vcmUubGVuZ3RoIC0gMV1cblx0cmV0dXJuIHRvSWdub3JlID8gdG9JZ25vcmUoJCkgOiAkXG5cbiMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4jIC0tLSBNYXRjaCBhIHNlcXVlbmNlIG9mIHJ1bGVzIGxlZnQgdG8gcmlnaHRcblxuZXhwb3J0IGZ1bmN0aW9uIEFsbCguLi5sTGF4UnVsZXM6IFRMYXhSdWxlW10pOiBUUnVsZVxuXG5cdGxSdWxlcyA6PSBsTGF4UnVsZXMubWFwKFVzZSlcblxuXHRyZXR1cm4gKCQ6IFRTdGF0ZSkgPT5cblx0XHRsZXQgJGN1ciA9ICRcblx0XHRmb3IgKGxldCBpID0gMDsgaSA8IGxSdWxlcy5sZW5ndGg7IGkrKylcblx0XHRcdCRiZWZvcmUgOj0gKGkgPiAwKSA/IHNraXBJZ25vcmVkKCRjdXIpIDogJGN1clxuXG5cdFx0XHQkYWZ0ZXIgOj0gbFJ1bGVzW2ldKCRiZWZvcmUpXG5cdFx0XHRpZiAoJGFmdGVyID09ICRiZWZvcmUpXG5cdFx0XHRcdCMgLS0tIGlmIG9uZSBydWxlIGZhaWxzOiBmYWlsIGFsbFxuXHRcdFx0XHRyZXR1cm4gJFxuXG5cdFx0XHRpZiAoJGFmdGVyLnBvcyA+ICRiZWZvcmUucG9zKSB8fCAoJGFmdGVyLnNwID4gJGJlZm9yZS5zcClcblx0XHRcdFx0IyAtLS0gUHJldmVudCBhZGRpbmcgd2hpdGVzcGFjZSBpZiBtYXRjaGVkXG5cdFx0XHRcdCMgICAgIGFuIG9wdGlvbmFsIHJ1bGUgbGFzdC5cblx0XHRcdFx0IyAgICAgQ29uc2VxdWVudGx5IEFsbCgpIHdpbGwgZmFpbCBpZlxuXHRcdFx0XHQjICAgICBhbGwgdGhlIGxSdWxlcyBkb24ndCBtYWtlIGFueSBwcm9ncmVzc1xuXHRcdFx0XHQjICAgICBhbmQgZG9uJ3QgcHV0IGFueXRoaW5nIG9uIHN0YWNrXG5cdFx0XHRcdCRjdXIgPSAkYWZ0ZXJcblx0XHRyZXR1cm4gJGN1clxuXG4jIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuIyAtLS0gTWF0Y2ggYW55IG9mIHRoZSBydWxlcyB3aXRoIGxlZnQtdG8tcmlnaHQgcHJlZmVyZW5jZVxuXG5leHBvcnQgZnVuY3Rpb24gQW55KC4uLmxMYXhSdWxlczogVExheFJ1bGVbXSk6IFRSdWxlXG5cblx0bFJ1bGVzIDo9IGxMYXhSdWxlcy5tYXAoVXNlKVxuXHRyZXR1cm4gKCQ6IFRTdGF0ZSkgPT5cblx0XHRmb3IgKGxldCBpPTA7IGkgPCBsUnVsZXMubGVuZ3RoOyBpKyspXG5cdFx0XHQkbmV4dCA6PSAobFJ1bGVzW2ldKSgkKVxuXHRcdFx0aWYgKCRuZXh0ICE9ICQpXG5cdFx0XHRcdHJldHVybiAkbmV4dFxuXHRcdHJldHVybiAkXG5cbiMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4jIC0tLSBNYXRjaCBhIHJ1bGUgMSBvciBtb3JlIHRpbWVzXG5cbmV4cG9ydCBmdW5jdGlvbiBQbHVzKGxheFJ1bGU6IFRMYXhSdWxlKTogVFJ1bGVcblxuXHRydWxlIDo9IFVzZShsYXhSdWxlKVxuXHRyZXR1cm4gKCQ6IFRTdGF0ZSkgPT5cblx0XHR3aGlsZSAodHJ1ZSlcblx0XHRcdCRjdXIgOj0gc2tpcElnbm9yZWQoJClcblx0XHRcdCRuZXh0IDo9IHJ1bGUoJGN1cilcblx0XHRcdGlmICgkbmV4dCA9PSAkY3VyKVxuXHRcdFx0XHRyZXR1cm4gJFxuXHRcdFx0JCA9ICRuZXh0XG5cbiMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4jIC0tLSBNYXRjaCBhIHJ1bGUgb3B0aW9uYWxseVxuXG5leHBvcnQgZnVuY3Rpb24gT3B0aW9uYWwobGF4UnVsZTogVExheFJ1bGUpOiBUUnVsZVxuXG5cdHJ1bGUgOj0gVXNlKGxheFJ1bGUpXG5cdHJldHVybiAoJDogVFN0YXRlKSA9PlxuXHRcdCRuZXh0IDo9IHJ1bGUoJClcblx0XHRpZiAoJG5leHQgIT0gJClcblx0XHRcdHJldHVybiAkbmV4dFxuXG5cdFx0IyAtLS0gT3RoZXJ3aXNlIHJldHVybiBhIHNoYWxsb3cgY29weVxuXHRcdCMgICAgIG9mIHRoZSBzdGF0ZSB0byBzdGlsbCBpbmRpY2F0ZSBhIG1hdGNoXG5cdFx0cmV0dXJuIHsuLi4kfVxuXG4jIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG5leHBvcnQgZnVuY3Rpb24gU3RhcihsYXhSdWxlOiBUTGF4UnVsZSk6IFRSdWxlXG5cblx0cmV0dXJuIE9wdGlvbmFsKFBsdXMobGF4UnVsZSkpXG5cbiMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbmV4cG9ydCBmdW5jdGlvbiBOb2RlPFQ+KGxheFJ1bGU6IFRMYXhSdWxlLCByZWR1Y2VyOiBUUmVkdWNlcjxUPik6IFRSdWxlXG5cblx0cnVsZSA6PSBVc2UobGF4UnVsZSlcblx0cmV0dXJuICgkOiBUU3RhdGUpID0+XG5cdFx0JG5leHQgOj0gcnVsZSgkKVxuXHRcdGlmICgkbmV4dCA9PSAkKVxuXHRcdFx0cmV0dXJuICRcblxuXHRcdCMgLS0tIFdlIGhhdmUgYSBtYXRjaFxuXHRcdG5vZGUgOj0gcmVkdWNlcigkLnN0YWNrLnNsaWNlKCQuc3AsICRuZXh0LnNwKSwgJCwgJG5leHQpXG5cdFx0JG5leHQuc3AgPSAkLnNwO1xuXHRcdGlmIChub2RlICE9IG51bGwpXG5cdFx0XHQkLnN0YWNrWyRuZXh0LnNwKytdID0gbm9kZVxuXG5cdFx0cmV0dXJuICRuZXh0XG5cbiMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4jIC0tLSBSZXR1cm5zIGEgZnVuY3Rpb24gdGhhdDpcbiMgICAgICAgIDEuIGFjY2VwdHMgYSBzdHJpbmdcbiMgICAgICAgIDIuIHJldHVybnMgYSBUXG5cbnR5cGUgVFN0cmluZ01hcHBlcjxUPiA9IChzdHI6IHN0cmluZykgPT4gVFxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0UGFyc2VyPFQ+KFxuXHRcdEdyYW1tYXI6IFRSdWxlLFxuXHRcdHBvcyA9IDAsXG5cdFx0cGFydGlhbCA9IGZhbHNlXG5cdFx0KTogVFN0cmluZ01hcHBlcjxUPlxuXG5cdHJldHVybiAodGV4dDogc3RyaW5nKSA9PlxuXHRcdCQgOj0gZ2V0U3RhdGUodGV4dCwgcG9zKVxuXHRcdCRuZXh0IDo9IEdyYW1tYXIoJClcblxuXHRcdGlmICgkID09ICRuZXh0KSB8fCAobm90IHBhcnRpYWwgJiYgKCRuZXh0LnBvcyA8IHRleHQubGVuZ3RoKSlcblx0XHRcdCMgLS0tIE5vIG1hdGNoIG9yIGhhdmVuJ3QgY29uc3VtZWQgdGhlIHdob2xlIGlucHV0XG5cdFx0XHR7bGluZSwgY29sdW1uLCBwb3N9IDo9ICQubGFzdFBvc1xuXHRcdFx0dGhyb3cgbmV3IEVycm9yKFwiXCJcIlxuXHRcdFx0XHRVbmV4cGVjdGVkIHRva2VuIGF0ICN7bGluZX06I3tjb2x1bW59XG5cdFx0XHRcdFJlbWFpbmRlcjogI3t0ZXh0LnNsaWNlKHBvcyl9XG5cdFx0XHRcdFwiXCJcIilcblx0XHRyZXR1cm4gJC5zdGFja1swXVxuIl19