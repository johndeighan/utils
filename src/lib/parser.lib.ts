"use strict";
// parser.lib.civet

import {sprintf} from "@std/fmt/printf"

import {
	undef, defined, notdefined,
	char, array, hash, isEmpty, nonEmpty,
	} from './datatypes.lib.ts'
import {
	getOptions, escapeStr, spaces,
	} from './llutils.lib.ts'
import {logIndent} from './log-formatter.lib.ts'
import {
	getLogLevel, setLogLevel,
	DBG, INDENT, UNDENT,
	TFormatter, TreeLogger,
	} from './logger.lib.ts'

// ---------------------------------------------------------------------------

export class State {
	text: string = ''
	pos: number = 0

	// --- optional fields
	skipRule?: TRule
	lMatches?: string[]
	stack?: any[]
	logr?: TreeLogger<[State, State]>

	constructor(
			src: string | State,
			n: number = 0,
			hProps: Object = {}
			) {
		if (typeof src === 'string') {
			this.text = src
			this.pos = n
			Object.assign(this, hProps)
		}
		else {
			Object.assign(this, src)
			this.pos += n
		}
	}
}

export const isFinished = ($: State): boolean => {
	const {text, pos, skipRule} = $
	if (pos === text.length) {
		return true
	}
	else if (skipRule) {
		// --- try running skip rule
		delete $.skipRule     // prevent rule running the skip rule
		const $next = skipRule($)
		if (defined($next)) {
			return ($next.pos === $next.text.length)
		}
		else {
			return false
		}
	}
	else {
		return false
	}
}

export type TRuleFunc = ($: State) => (State | undefined)
export type TCallback = (lMatches: string[]) => void
export type TRule = TRuleFunc & {
	type: string
	label?: string
	lCallbacks?: TCallback[]
	}

// --- Anything that can be converted to a TRule
type TLaxRule = (string | RegExp | TRule)

// ---------------------------------------------------------------------------

const nbuf = 24
const digs = 1

const DBGMATCH = (
		desc: string,    // Describe what we're trying to match
		$: State,
		$next: State
		): void => {

	const str = escapeStr($.text.substring($.pos, $next.pos))
	const buf = spaces(nbuf - str.length - 1 - 3*logIndent)
	const i = sprintf(`%${digs}d`, $.pos)
	DBG(`[${i} +] ${str}${buf}${desc}`)
	return
}

// ---------------------------------------------------------------------------

const DBGNOMATCH = (
		desc: string,    // Describe what we're trying to match
		$: State
		): void => {

	const buf = spaces(nbuf - 3*logIndent)
	const i = sprintf(`%${digs}d`, $.pos)
	DBG(`[${i} -]${buf}${desc}`)
	return
}

// ---------------------------------------------------------------------------
// --- returns $ if no skip rule OR rule doesn't match

const skipIgnored = ($: State): State => {

	// --- Will always return a defined value
	const {skipRule} = $
	if (notdefined(skipRule)) {
		return $
	}

	// --- make sure skip is only tried once
	delete ($.skipRule)
	const $next = skipRule($)
	if (defined($next)) {
		$.skipRule = skipRule    // still need to restore
		return Object.assign($next, {skipRule})
	}
	else {
		return Object.assign($, {skipRule})
	}
}

// ---------------------------------------------------------------------------

export const RegexMatcher = (re: RegExp): TRule => {

	const func = ($: State): (State | undefined) => {

		const $cur = skipIgnored($)
		const lMatches = re.exec($cur.text.substring($cur.pos))
		if (defined(lMatches)) {

			// --- Token is matched, add matches to state,
			//     return the next state
			const numChars = lMatches[0].length
//			$next := {
//				...$cur,
//				pos: $cur.pos + numChars,
//				}
			const $next = new State($cur, numChars)
			$.lMatches = lMatches
			DBGMATCH(re.toString(), $cur, $next)
			return $next
		}
		else {
			DBGNOMATCH(re.toString(), $cur)
			return undef
		}
	}
	func.type = 'r'
	return func
}

// ---------------------------------------------------------------------------

export const StringMatcher = (str: string): TRule => {

	const func = ($: State): (State | undefined) => {

		const $cur = skipIgnored($)
		if ($cur.text.startsWith(str, $cur.pos)) {
			const $next = new State($cur, str.length)
//			$next := {
//				...$cur,
//				pos: $cur.pos + str.length
//				}
			DBGMATCH(`'${escapeStr(str)}'`, $cur, $next)
			return $next
		}
		else {
			DBGNOMATCH(`'${escapeStr(str)}'`, $cur)
			return undef
		}
	}
	func.type = 'f'
	return func
}

// ---------------------------------------------------------------------------

export function getRule(rule: TLaxRule): TRule {

	if (typeof (rule) === 'function') {
		rule.type = 'f'
		return rule
	}
	if (rule instanceof RegExp) {
		return RegexMatcher(rule)
	}
	if (typeof (rule) === 'string') {
		return StringMatcher(rule)
	}
	throw new Error(`Invalid rule: ${rule}`)
}

// ---------------------------------------------------------------------------

export const ruleLabel = (rule: TRule, ch: (char | undefined)=undef): string => {

	if (defined(ch)) {
		return (rule.label || 'X') + ch
	}
	else {
		return rule.label || 'X'
	}
}

// ---------------------------------------------------------------------------

export const ruleSetLabel = (lRules: TRule[], ch: char): string => {

	return lRules.map((r) => ruleLabel(r)).join(` ${ch} `)
}

// ---------------------------------------------------------------------------
// --- Match a sequence of rules left to right

export function All(lLaxRules: TLaxRule[]): TRule {

	const lRules = lLaxRules.map(getRule)
	const label = lRules.map((r) => r.label || 'X').join(' ')
	const func = ($: State) => {
		DBG(label, INDENT)
		let i1 = 0;for (const rule of lRules) {const i = i1++;
			DBG("-----")
			const $next = rule($)
			if (notdefined($next)) {
				DBG('FAIL', UNDENT)
				return undef
			}
			$ = $next
		}

		DBG('OK', UNDENT)
		return $
	}
	func.type = '&'
	return func
}

// ---------------------------------------------------------------------------
// --- Match any of the rules, check left to right

export function Any(lLaxRules: TLaxRule[]): TRule {

	const lRules = lLaxRules.map(getRule)
	const label = lRules.map((r) => r.label || 'X').join(' | ')
	const func = ($: State) => {
		DBG(label, INDENT)
		let i2 = 0;for (const rule of lRules) {const i = i2++;
			DBG("-----")
			const $next = rule($)
			if (defined($next)) {
				DBG('OK', UNDENT)
				return $next
			}
		}
		DBG('FAIL', UNDENT)
		return undef
	}
	func.type = '|'
	return func
}

// ---------------------------------------------------------------------------
// --- Match a rule 1 or more times

export function Plus(laxRule: TLaxRule): TRule {

	const rule = getRule(laxRule)
	const func = ($: State) => {
		DBG("+", INDENT)
		const $first = rule($)
		if (notdefined($first)) {
			DBG("FAIL", UNDENT)
			return undef
		}
		$ = $first
		while(true) {
			const $next = rule($)
			if (notdefined($next)) {
				DBG("OK", UNDENT)
				return $next
			}
			$ = $next
		}
	}
	func.type = '+'
	return func
}

// ---------------------------------------------------------------------------
// --- Match a rule optionally

export function Optional(laxRule: TLaxRule): TRule {

	const rule = getRule(laxRule)
	const func = ($: State) => {
		DBG("?", INDENT)
		const $next = rule($)
		if (defined($next)) {
			DBG("OK - matched", UNDENT)
			return $next
		}
		else {
			// --- Still succeed since it was optional
			DBG("OK - not matched", UNDENT)
			return $
		}
	}
	func.type = '?'
	return func
}

// ---------------------------------------------------------------------------

export function Star(laxRule: TLaxRule): TRule {

	const rule = getRule(laxRule)
	const func = ($: State) => {
		DBG("*", INDENT)
		while(true) {
			const $next = rule($)
			if (notdefined($next)) {
				DBG("OK", UNDENT)
				return $
			}
			$ = $next
		}
	}
	func.type = '*'
	return func
}

// ---------------------------------------------------------------------------

type TReducer<T> = (
	$: State,
	$next: State
	) => (T | undefined)

export function Node<T>(
		laxRule: TLaxRule,
		reducer: TReducer<T>
		): TRule {

	const rule = getRule(laxRule)
	const func = ($: State) => {
		const $next = rule($)
		if (notdefined($next)) {
			return $
		}

		// --- We have a match
		const node = reducer($, $next)
		if (defined(node)) {
			if ($next.stack) {
				$next.stack.push(node)
			}
			else {
				$next.stack = [node]
			}
		}
		return $next
	}
	func.type = 'N'
	return func
}

// ---------------------------------------------------------------------------

export const getLineAndColumn = (text: string, pos: number) => {

	const countChars = (str: string, ch: string): number => {
		let count = 0
		let pos = -1
		while ((pos = str.indexOf(ch, pos+1)) !== -1) {
			count += 1
		}
		return count
	}


	// --- Get line number by counting number of \n chars
	//        before the current position
	//     Get column number by finding closest previous position
	//        of a \n and computing the difference

	const shortStr = text.substring(0, pos)
	return [
		countChars(shortStr, "\n") + 1,
		pos - shortStr.lastIndexOf('\n')
		]
}

// ---------------------------------------------------------------------------
// --- Returns a function that:
//        1. accepts a string
//        2. returns given type

type TParser<T> = (str: string) => (T | undefined)

export function getParser<T>(
		laxRule: TLaxRule,
		hOptions: hash = {}
		): TParser<T> {

	const {pos, partial, reSkip} = getOptions(hOptions, {
		pos: 0,
		partial: false,
		reSkip: /^\s+/
		})
	const rule = getRule(laxRule)

	return (text: string): (T | undefined) => {
		DBG(`parse ${escapeStr(text)}`)
		const skipRule = defined(reSkip) ? RegexMatcher(reSkip) : undef

		const $ = new State(text, 0, {skipRule})

		const $next = rule($)

		if (defined($next) && (isFinished($next) || partial)) {
			return $next.stack ? $next.stack[0] : undef
		}
		else {
			const [line, column] = getLineAndColumn(text, $.pos)
			throw new SyntaxError(`No match at pos ${$.pos}
Remainder: ${escapeStr(text.slice($.pos))}`)
		}
	}
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,