"use strict";
// parser.lib.civet

import {sprintf} from "@std/fmt/printf"

import {
	undef, defined, notdefined,
	char, array, hash, isEmpty, nonEmpty,
	} from './datatypes.lib.ts'
import {
	getOptions, escapeStr, spaces,
	} from './llutils.lib.ts'
import {logIndent} from './log-formatter.lib.ts'
import {
	getLogLevel, setLogLevel,
	DBG, INDENT, UNDENT,
	TFormatter, TreeLogger,
	} from './logger.lib.ts'

// ---------------------------------------------------------------------------
// --- generator

const labelGen = function*(): Generator<string, void, void> {

	for (let i1 = 65; i1 <= 90; ++i1) {const ch = String.fromCharCode(i1);
		yield ch
	}
	return
}

// --- Create an iterator from the generator
const labels = labelGen()

export const randomLabel = (): string => {
	const label = labels.next()
	return label.done ? 'ERR!' : label.value
}

// ---------------------------------------------------------------------------

export class State {
	text: string = ''
	pos: number = 0

	// --- optional fields
	skipRule?: Rule
	lMatches?: string[]
	stack?: any[]
	logr?: TreeLogger<[State, State]>

	constructor(
			src: string | State,
			n: number = 0,
			hProps: Object = {}
			) {
		if (typeof src === 'string') {
			this.text = src
			this.pos = n
			Object.assign(this, hProps)
		}
		else {
			Object.assign(this, src)
			this.pos += n
		}
	}
}

export const isFinished = ($: State): boolean => {
	const {text, pos, skipRule} = $
	if (pos === text.length) {
		return true
	}
	else if (skipRule) {
		// --- try running skip rule
		delete $.skipRule     // prevent rule running the skip rule
		const $next = skipRule.next($)
		if (defined($next)) {
			return ($next.pos === $next.text.length)
		}
		else {
			return false
		}
	}
	else {
		return false
	}
}

export type TRuleFunc = ($: State) => (State | undefined)
export type TCallback = () => void

class Rule {
	type: string
	func: TRuleFunc
	label: string = randomLabel()
	lChildren: Rule[] = []
	lCallbacks: TCallback[] = []

	constructor(
			type: string,
			func: TRuleFunc,
			lChildren: Rule[] = []
			) {
		this.type = type
		this.func = func
		this.lChildren = []
	}

	addCallback(cb: TCallback): Rule {
		this.lCallbacks.push(cb)
		return this
	}

	next($: State): (State | undefined) {
		return this.func($)
	}
}

// --- Anything that can be converted to a Rule
type TLaxRule = (string | RegExp | Rule)

// ---------------------------------------------------------------------------

const nbuf = 24
const digs = 1

const DBGMATCH = (
		desc: string,    // Describe what we're trying to match
		$: State,
		$next: State
		): void => {

	const str = escapeStr($.text.substring($.pos, $next.pos))
	const buf = spaces(nbuf - str.length - 1 - 3*logIndent)
	const i = sprintf(`%${digs}d`, $.pos)
	DBG(`[${i} +] ${str}${buf}${desc}`)
	return
}

// ---------------------------------------------------------------------------

const DBGNOMATCH = (
		desc: string,    // Describe what we're trying to match
		$: State
		): void => {

	const buf = spaces(nbuf - 3*logIndent)
	const i = sprintf(`%${digs}d`, $.pos)
	DBG(`[${i} -]${buf}${desc}`)
	return
}

// ---------------------------------------------------------------------------
// --- returns $ if no skip rule OR rule doesn't match

const skipIgnored = ($: State): State => {

	// --- Will always return a defined value
	const {skipRule} = $
	if (notdefined(skipRule)) {
		return $
	}

	// --- make sure skip is only tried once
	delete ($.skipRule)
	const $next = skipRule.next($)
	if (defined($next)) {
		$.skipRule = skipRule    // still need to restore
		return Object.assign($next, {skipRule})
	}
	else {
		return Object.assign($, {skipRule})
	}
}

// ---------------------------------------------------------------------------

export const RegexMatcher = (
		re: RegExp,
		cb: (TCallback | undefined) = undef
		): Rule => {

	const func = ($: State): (State | undefined) => {

		const $cur = skipIgnored($)
		const lMatches = re.exec($cur.text.substring($cur.pos))
		if (defined(lMatches)) {

			// --- Token is matched, add matches to state,
			//     return the next state
			const numChars = lMatches[0].length
			const $next = new State($cur, numChars)
			$.lMatches = lMatches
			DBGMATCH(re.toString(), $cur, $next)
			return $next
		}
		else {
			DBGNOMATCH(re.toString(), $cur)
			return undef
		}
	}
	const newRule = new Rule('r', func)
	return defined(cb) ? newRule.addCallback(cb) : newRule
}

// ---------------------------------------------------------------------------

export const StringMatcher = (
		str: string,
		cb: (TCallback | undefined) = undef
		): Rule => {

	const func = ($: State): (State | undefined) => {

		const $cur = skipIgnored($)
		if ($cur.text.startsWith(str, $cur.pos)) {
			const $next = new State($cur, str.length)
			DBGMATCH(`'${escapeStr(str)}'`, $cur, $next)
			return $next
		}
		else {
			DBGNOMATCH(`'${escapeStr(str)}'`, $cur)
			return undef
		}
	}
	const newRule = new Rule('s', func)
	return defined(cb) ? newRule.addCallback(cb) : newRule
}

// ---------------------------------------------------------------------------

export function getRule(
		laxRule: TLaxRule,
		cb: (TCallback | undefined) = undef
		): Rule {

	if (laxRule instanceof Rule) {
		return defined(cb) ? laxRule.addCallback(cb) : laxRule
	}
	if (laxRule instanceof RegExp) {
		return RegexMatcher(laxRule, cb)
	}
	if (typeof laxRule === 'string') {
		return StringMatcher(laxRule, cb)
	}
	throw new Error(`Invalid rule: ${laxRule}`)
}

// ---------------------------------------------------------------------------
// --- Match a sequence of rules in order

export function All(
		lLaxRules: TLaxRule[],
		cb: (TCallback | undefined) = undef
		): Rule {

	const results=[];for (const laxRule of lLaxRules) {
		results.push(getRule(laxRule))
	};const lRules =results
	const func = ($: State) => {
		DBG('All', INDENT)
		let i2 = 0;for (const rule of lRules) {const i = i2++;
			DBG("-----")
			const $next = rule.next($)
			if (notdefined($next)) {
				DBG('FAIL', UNDENT)
				return undef
			}
			$ = $next
		}

		DBG('OK', UNDENT)
		return $
	}
	const newRule = new Rule('&', func, lRules)
	return defined(cb) ? newRule.addCallback(cb) : newRule
}

// ---------------------------------------------------------------------------
// --- Match any of the rules, check left to right

export function Any(
		lLaxRules: TLaxRule[],
		cb: (TCallback | undefined) = undef
		): Rule {

	const results1=[];for (const laxRule of lLaxRules) {
		results1.push(getRule(laxRule))
	};const lRules =results1
	const func = ($: State) => {
		DBG('Any', INDENT)
		let i3 = 0;for (const rule of lRules) {const i = i3++;
			DBG("-----")
			const $next = rule.next($)
			if (defined($next)) {
				DBG('OK', UNDENT)
				return $next
			}
		}
		DBG('FAIL', UNDENT)
		return undef
	}
	const newRule = new Rule('|', func, lRules)
	return defined(cb) ? newRule.addCallback(cb) : newRule
}

// ---------------------------------------------------------------------------
// --- Match a rule 1 or more times

export function Plus(
		laxRule: TLaxRule,
		cb: (TCallback | undefined) = undef
		): Rule {

	const rule = getRule(laxRule)
	const func = ($: State) => {
		DBG("+", INDENT)
		const $first = rule.next($)
		if (notdefined($first)) {
			DBG("FAIL", UNDENT)
			return undef
		}
		$ = $first
		while(true) {
			const $next = rule.next($)
			if (notdefined($next)) {
				DBG("OK", UNDENT)
				return $next
			}
			$ = $next
		}
	}
	const newRule = new Rule('+', func, [rule])
	return defined(cb) ? newRule.addCallback(cb) : newRule
}

// ---------------------------------------------------------------------------
// --- Match a rule optionally

export function Optional(
		laxRule: TLaxRule,
		cb: (TCallback | undefined) = undef
		): Rule {

	const rule = getRule(laxRule)
	const func = ($: State) => {
		DBG("?", INDENT)
		const $next = rule.next($)
		if (defined($next)) {
			DBG("OK - matched", UNDENT)
			return $next
		}
		else {
			// --- Still succeed since it was optional
			DBG("OK - not matched", UNDENT)
			return $
		}
	}
	const newRule = new Rule('?', func, [rule])
	return defined(cb) ? newRule.addCallback(cb) : newRule
}

// ---------------------------------------------------------------------------

export function Star(
		laxRule: TLaxRule,
		cb: (TCallback | undefined) = undef
		): Rule {

	const rule = getRule(laxRule)
	const func = ($: State) => {
		DBG("*", INDENT)
		while(true) {
			const $next = rule.next($)
			if (notdefined($next)) {
				DBG("OK", UNDENT)
				return $
			}
			$ = $next
		}
	}
	const newRule = new Rule('*', func, [rule])
	return defined(cb) ? newRule.addCallback(cb) : newRule
}

// ---------------------------------------------------------------------------

type TReducer<T> = (
	$: State,
	$next: State
	) => (T | undefined)

export function Node<T>(
		laxRule: TLaxRule,
		reducer: TReducer<T>
		): Rule {

	const rule = getRule(laxRule)
	const func = ($: State) => {
		const $next = rule.next($)
		if (notdefined($next)) {
			return $
		}

		// --- We have a match
		const node = reducer($, $next)
		if (defined(node)) {
			if ($next.stack) {
				$next.stack.push(node)
			}
			else {
				$next.stack = [node]
			}
		}
		return $next
	}
	return new Rule('N', func, [rule])
}

// ---------------------------------------------------------------------------

export const getLineAndColumn = (text: string, pos: number) => {

	const countChars = (str: string, ch: string): number => {
		let count = 0
		let pos = -1
		while ((pos = str.indexOf(ch, pos+1)) !== -1) {
			count += 1
		}
		return count
	}


	// --- Get line number by counting number of \n chars
	//        before the current position
	//     Get column number by finding closest previous position
	//        of a \n and computing the difference

	const shortStr = text.substring(0, pos)
	return [
		countChars(shortStr, "\n") + 1,
		pos - shortStr.lastIndexOf('\n')
		]
}

// ---------------------------------------------------------------------------
// --- Returns a function that:
//        1. accepts a string
//        2. returns given type

type TParser<T> = (str: string) => (T | undefined)

export function getParser<T>(
		laxRule: TLaxRule,
		hOptions: hash = {}
		): TParser<T> {

	const {pos, partial, reSkip, callback} = getOptions(hOptions, {
		pos: 0,
		partial: false,
		reSkip: /^\s+/,
		callbacks: []
		})
	const rule = getRule(laxRule)

	return (text: string): (T | undefined) => {
		DBG(`parse ${escapeStr(text)}`)
		const skipRule = defined(reSkip) ? RegexMatcher(reSkip) : undef

		const $ = new State(text, 0, {skipRule})

		const $next = rule.next($)
		for (const func of rule.lCallbacks) {
			func()
		}

		if (defined($next) && (isFinished($next) || partial)) {
			return $next.stack ? $next.stack[0] : undef
		}
		else {
			const [line, column] = getLineAndColumn(text, $.pos)
			throw new SyntaxError(`No match at pos ${$.pos}
Remainder: ${escapeStr(text.slice($.pos))}`)
		}
	}
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,