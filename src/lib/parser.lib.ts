"use strict";
// parser.lib.civet

import {sprintf} from "@std/fmt/printf"
import {
	undef, defined, notdefined,
	array, hash, isEmpty, nonEmpty,
	} from './datatypes.lib.ts'
import {
	getOptions, escapeStr, spaces,
	} from './llutils.lib.ts'
import {logIndent} from './log-formatter.lib.ts'
import {
	getLogLevel, setLogLevel,
	pushLogLevel, popLogLevel, DBG, INDENT, UNDENT,
	} from './logger.lib.ts'

// ---------------------------------------------------------------------------

export type TState = {
	text: string
	ignore: any[]
	lMatches: string[]
	stack?: any[]
	pos: number
	nolog?: boolean
	}

export type TRule = ($: TState) => TState

// --- Anything that can be converted to a TRule
type TLaxRule = (string | RegExp | TRule)

// ---------------------------------------------------------------------------

export const getNewState = (
		text: string,
		pos: number = 0
		): TState => {

	return {
		text,
		ignore: [],
		lMatches: [],
		pos
		}
}

// ---------------------------------------------------------------------------

const nbuf = 24

const DBGMATCH = (
		desc: string,    // Describe what we're trying to match
		$: TState,
		$next: TState
		): void => {

	if ($.nolog) {
		return
	}
	const str = escapeStr($.text.substring($.pos, $next.pos))
	const buf = spaces(nbuf - str.length - 1 - 3*logIndent)
	DBG(`[+${sprintf('%3d', $.pos)}] ${str}${buf}${desc}`)
	return
}

// ---------------------------------------------------------------------------

const DBGNOMATCH = (
		desc: string,    // Describe what we're trying to match
		$: TState
		): void => {

	if ($.nolog) {
		return
	}
	const buf = spaces(nbuf - 3*logIndent)
	DBG(`[-${sprintf('%3d', $.pos)}]${buf}${desc}`)
	return
}

// ---------------------------------------------------------------------------

const skipIgnored = ($: TState): TState => {

	if (isEmpty($.ignore)) {
		return $
	}
	else {
		$.ignore.push((x: TState): TState => { return x })
//		$.nolog = true
		const result = $.ignore.at(-1)($)
//		$.nolog = false
		$.ignore.pop()
		return result
	}
}

// ---------------------------------------------------------------------------

export const RegexMatcher = (re: RegExp): TRule => {

	return ($: TState): TState => {

		const $cur = skipIgnored($)
		const lMatches = re.exec($cur.text.substring($.pos))
		if (!lMatches) {
			DBGNOMATCH(re.toString(), $)
			return $
		}

		// --- Token is matched, add matches to state,
		//     return the next state
		const numChars = lMatches[0].length
		const $next = {
			...$cur,
			pos: $.pos + numChars,
			}
		$.lMatches = lMatches
		DBGMATCH(re.toString(), $, $next)
		return $next
	}
}

// ---------------------------------------------------------------------------

export const StringMatcher = (str: string): TRule => {

	return ($: TState): TState => {

		const $cur = skipIgnored($)
		if ($cur.text.startsWith(str, $cur.pos)) {
			const $next = {
				...$cur,
				pos: $cur.pos + str.length
				}
			DBGMATCH(`'${escapeStr(str)}'`, $, $next)
			return $next
		}
		else {
			DBGNOMATCH(`'${escapeStr(str)}'`, $)
			return $
		}
	}
}

// ---------------------------------------------------------------------------

export function getRule(rule: TLaxRule): TRule {

	if (typeof (rule) === 'function') {
		return rule
	}
	if (rule instanceof RegExp) {
		return RegexMatcher(rule)
	}
	if (typeof (rule) === 'string') {
		return StringMatcher(rule)
	}
	throw new Error('Invalid rule')
}

// ---------------------------------------------------------------------------

const unpackList = (lArgs: array): [string, TRule[]] => {

	if (typeof lArgs[0] === 'string') {
		return [lArgs[0], lArgs[1].map(getRule)]
	}
	else {
		return ['', lArgs[0].map(getRule)]
	}
}

// ---------------------------------------------------------------------------

const unpackOne = (lArgs: array): [string, TRule] => {

	if (typeof lArgs[0] === 'string') {
		return [lArgs[0], getRule(lArgs[1])]
	}
	else {
		return ['', getRule(lArgs[0])]
	}
}

// ---------------------------------------------------------------------------
// --- Match a sequence of rules left to right

export function All(...lArgs: array): TRule {

	const [name, lRules] = unpackList(lArgs)
	return ($) => {
		DBG(`${name} &`, INDENT)
		const $org = $   // save to use as return value on failure
		$ = Object.assign({}, $org)
		let i1 = 0;for (const rule of lRules) {const i = i1++;
			DBG("-----")
			const $next = rule($)
			if ($next === $) {
				DBG('FAIL', UNDENT)
				return $org
			}
			$ = $next
		}

		DBG('OK', UNDENT)
		return $
	}
}

// ---------------------------------------------------------------------------
// --- Match any of the rules, check left to right

export function Any(...lArgs: array): TRule {

	const [name, lRules] = unpackList(lArgs)
	return ($) => {
		DBG(`${name} |`, INDENT)
		let i2 = 0;for (const rule of lRules) {const i = i2++;
			DBG("-----")
			const $next = rule($)
			if ($next !== $) {
				DBG('OK', UNDENT)
				return $next
			}
		}
		DBG('FAIL', UNDENT)
		return $
	}
}

// ---------------------------------------------------------------------------
// --- Match a rule 1 or more times

export function Plus(...lArgs: array): TRule {

	const [name, rule] = unpackOne(lArgs)
	return ($) => {
		DBG(`${name} +`, INDENT)
		const $first = rule($)
		if ($first === $) {
			DBG("FAIL", UNDENT)
			return $
		}     // --- no match
		$ = $first
		while(true) {
			const $next = rule($)
			if ($next === $) {
				DBG("OK", UNDENT)
				return $next
			}
			$ = $next
		}
	}
}

// ---------------------------------------------------------------------------
// --- Match a rule optionally

export function Optional(...lArgs: array): TRule {

	const [name, rule] = unpackOne(lArgs)
	return ($) => {
		DBG(`${name} ?`, INDENT)
		const $next = rule($)
		if ($next !== $) {
			DBG("OK - matched", UNDENT)
			return $next
		}
		else {
			// --- Otherwise return a shallow copy
			//     of the state to still indicate success
			DBG("OK - not matched", UNDENT)
			return Object.assign({}, $)
		}
	}
}

// ---------------------------------------------------------------------------

export function Star(...lArgs: array): TRule {

	const [name, rule] = unpackOne(lArgs)
	return ($) => {
		DBG(`${name} *`, INDENT)
		$ = Object.assign({}, $);
		while(true) {
			const $next = rule($)
			if ($next === $) {
				DBG("OK", UNDENT)
				return $next
			}
			$ = $next
		}
	}
}

// ---------------------------------------------------------------------------

type TReducer<T> = (
	$: TState,
	$next: TState
	) => (T | undefined)

export function Node<T>(
		laxRule: TLaxRule,
		reducer: TReducer<T>
		): TRule {

	const rule = getRule(laxRule)
	return ($) => {
		const $next = rule($)
		if ($next === $) {
			return $
		}

		// --- We have a match
		const node = reducer($, $next)
		if (defined(node)) {
			if ($next.stack) {
				$next.stack.push(node)
			}
			else {
				$next.stack = [node]
			}
		}
		return $next
	}
}

// ---------------------------------------------------------------------------

export const getLineAndColumn = (text: string, pos: number) => {

	const countChars = (str: string, ch: string): number => {
		let count = 0
		let pos = -1
		while ((pos = str.indexOf(ch, pos+1)) !== -1) {
			count += 1
		}
		return count
	}


	// --- Get line number by counting number of \n chars
	//        before the current position
	//     Get column number by finding closest previous position
	//        of a \n and computing the difference

	const shortStr = text.substring(0, pos)
	return [
		countChars(shortStr, "\n") + 1,
		pos - shortStr.lastIndexOf('\n')
		]
}

// ---------------------------------------------------------------------------

export function Ignore(
		laxToIgnore: TLaxRule,
		laxRule: TLaxRule
		): TRule {

	const rule = getRule(laxRule)
	const toIgnore = getRule(laxToIgnore)
	return ($: TState) => {
		const $cur = toIgnore($)
		$.ignore.push(toIgnore)
		const $next = rule($cur)
		$.ignore.pop()
		return ($next === $cur) ? $ : toIgnore($next)
	}
}

// ---------------------------------------------------------------------------
// --- Returns a function that:
//        1. accepts a string
//        2. returns void

type TParser = (str: string) => void

export function getParser<T>(
		laxRule: TLaxRule,
		hOptions: hash = {}
		): TParser {

	const {pos, partial, reSkip} = getOptions(hOptions, {
		pos: 0,
		partial: false,
		reSkip: /^\s+/
		})
	const rule = getRule(laxRule)

	return (text: string): (T | undefined) => {
		const $ = {
			text,
			ignore: defined(reSkip) ? [RegexMatcher(reSkip)] : [],
			lMatches: [],
			pos: 0
			}
		const $next = rule($)

		if ($ === $next) {
			const [line, column] = getLineAndColumn(text, $.pos)
			throw new SyntaxError(`No match at pos ${$.pos}
Remainder: ${escapeStr(text.slice($.pos))}`)
		}
		if (!partial && ($next.pos < text.length)) {
			// --- Not all input consumed
			const [line, column] = getLineAndColumn(text, $.pos)
			throw new SyntaxError(`Stopped at pos ${$.pos}
Remainder: ${escapeStr(text.slice($.pos))}`)
		}
		return $next.stack ? $next.stack[0] : undef
	}
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,