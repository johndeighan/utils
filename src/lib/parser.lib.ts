"use strict";
// parser.lib.civet

import {sprintf} from "@std/fmt/printf"

import {
	undef, defined, notdefined, isArray,
	char, array, hash, isEmpty, nonEmpty,
	} from './datatypes.lib.ts'
import {
	getOptions, escapeStr, spaces, randomLabel,
	} from './llutils.lib.ts'
import {logIndent} from './log-formatter.lib.ts'
import {
	getLogLevel, setLogLevel,
	TFormatter, TreeLogger,
	} from './logger.lib.ts'

// ---------------------------------------------------------------------------

export class State {
	text: string = ''
	pos: number = 0

	// --- optional fields
	skipRule?: Rule

	constructor(
			src: string | State,
			n: number = 0,
			hProps: Object = {}
			) {
		if (typeof src === 'string') {
			this.text = src
			this.pos = n
			Object.assign(this, hProps)
		}
		else {
			Object.assign(this, src)
			this.pos += n
		}
	}
}

export const isFinished = ($: State): boolean => {
	const {text, pos, skipRule} = $
	if (pos === text.length) {
		return true
	}
	else if (skipRule) {
		// --- try running skip rule
		delete $.skipRule     // prevent rule running the skip rule
		const $next = skipRule.next($)
		if (defined($next)) {
			return ($next.pos === $next.text.length)
		}
		else {
			return false
		}
	}
	else {
		return false
	}
}

export type TRuleFunc = ($: State) => (State | undefined)

export class Rule {
	type: string
	func: TRuleFunc
	label: string = randomLabel()
	lChildren: Rule[] = []

	constructor(
			type: string,
			func: TRuleFunc,
			lChildren: Rule[] = []
			) {
		this.type = type
		this.func = func
		this.lChildren = []
	}

	next($: State): (State | undefined) {
		return this.func($)
	}
}

// --- Anything that can be converted to a Rule
type TLaxRule = (string | RegExp | Rule | TLaxRule[])

// ---------------------------------------------------------------------------
// --- returns $ if no skip rule OR rule doesn't match

const skipIgnored = ($: State): State => {

	// --- Will always return a defined value
	const {skipRule} = $
	if (notdefined(skipRule)) {
		return $
	}

	// --- make sure skip is only tried once
	delete ($.skipRule)
	const $next = skipRule.next($)
	if (defined($next)) {
		$.skipRule = skipRule    // still need to restore
		return Object.assign($next, {skipRule})
	}
	else {
		return Object.assign($, {skipRule})
	}
}

// ---------------------------------------------------------------------------

export type TCallback = (rule: Rule, lMatches: string[]) => void

// ---------------------------------------------------------------------------

export const RegexMatcher = (
		re: RegExp,
		...lCallbacks: TCallback[]
		): Rule => {

	const rule = new Rule('r', ($: State): (State | undefined) => {

		const $cur = skipIgnored($)
		const lMatches = re.exec($cur.text.substring($cur.pos))
		if (lMatches === null) {
			return undef
		}

		// --- Token is matched, add matches to state,
		//     return the next state
		const numChars = lMatches[0].length
		const $next = new State($cur, numChars)
		for (const cb of lCallbacks) {
			cb(rule, lMatches)
		}
		return $next
	}
		)
	return rule
}

// ---------------------------------------------------------------------------

export const StringMatcher = (
		str: string,
		...lCallbacks: TCallback[]
		): Rule => {

	const newRule = new Rule('s', ($: State): (State | undefined) => {

		const $cur = skipIgnored($)
		if (!$cur.text.startsWith(str, $cur.pos)) {
			return undef
		}

		const $next = new State($cur, str.length)
		for (const cb of lCallbacks) {
			cb(newRule, [str])
		}
		return $next
	}
		)
	return newRule
}

// ---------------------------------------------------------------------------

export function getRule(
		laxRule: TLaxRule,
		...lCallbacks: TCallback[]
		): Rule {

	if (laxRule instanceof Rule) {
		return laxRule
	}
	if (isArray(laxRule)) {
		const results=[];for (const r of laxRule) {
			results.push(getRule(r))
		};const lRules =results
		return All(lRules)
	}
	if (laxRule instanceof RegExp) {
		return RegexMatcher(laxRule, ...lCallbacks)
	}
	if (typeof laxRule === 'string') {
		return StringMatcher(laxRule, ...lCallbacks)
	}
	throw new Error(`Invalid rule: ${laxRule}`)
}

// ---------------------------------------------------------------------------
// --- Match a sequence of rules in order

export function All(
		lLaxRules: TLaxRule[],
		...lCallbacks: TCallback[]
		): Rule {

	const results1=[];for (const laxRule of lLaxRules) {
		results1.push(getRule(laxRule, ...lCallbacks))
	};const lRules =results1

	const newRule = new Rule('&', ($: State) => {
		let i1 = 0;for (const rule of lRules) {const i = i1++;
			const $next = rule.next($)
			if (notdefined($next)) {
				return undef
			}
			$ = $next
		}

		for (const cb of lCallbacks) {
			cb(newRule, [])
		}
		return $
	}
		)

	return newRule
}

// ---------------------------------------------------------------------------
// --- Match any of the rules, check left to right

export function Any(
		lLaxRules: TLaxRule[],
		...lCallbacks: TCallback[]
		): Rule {

	const results2=[];for (const laxRule of lLaxRules) {
		results2.push(getRule(laxRule))
	};const lRules =results2

	const newRule = new Rule('|', ($: State) => {
		let i2 = 0;for (const rule of lRules) {const i = i2++;
			const $next = rule.next($)
			if (defined($next)) {
				for (const cb of lCallbacks) {
					cb(newRule, [])
				}
				return $next
			}
		}
		return undef
	}
		)
	return newRule
}

// ---------------------------------------------------------------------------
// --- Match a rule 1 or more times

export function Plus(
		laxRule: TLaxRule,
		...lCallbacks: TCallback[]
		): Rule {

	const rule = getRule(laxRule)

	const newRule = new Rule('+', ($: State) => {
		const $first = rule.next($)
		if (notdefined($first)) {
			return undef
		}
		$ = $first
		while(true) {
			const $next = rule.next($)
			if (notdefined($next)) {
				for (const cb of lCallbacks) {
					cb(newRule, [])
				}
				return $next
			}
			$ = $next
		}
	}
		)
	return newRule
}

// ---------------------------------------------------------------------------
// --- Match a rule optionally

export function Optional(
		laxRule: TLaxRule,
		...lCallbacks: TCallback[]
		): Rule {

	const rule = getRule(laxRule)

	const newRule = new Rule('?', ($: State) => {
		const $next = rule.next($)
		if (defined($next)) {
			for (const cb of lCallbacks) {
				cb(newRule, [])
			}
			return $next
		}
		else {
			// --- Still succeed since it was optional
			return $
		}
	}
		)

	return newRule
}

// ---------------------------------------------------------------------------

export function Star(
		laxRule: TLaxRule,
		...lCallbacks: TCallback[]
		): Rule {

	const rule = getRule(laxRule)

	const newRule = new Rule('*', ($: State) => {
		while(true) {
			const $next = rule.next($)
			if (notdefined($next)) {
				for (const cb of lCallbacks) {
					cb(newRule, [])
				}
				return $
			}
			$ = $next
		}
	}
		)
	return newRule
}

// ---------------------------------------------------------------------------

export const getLineAndColumn = (text: string, pos: number) => {

	const countChars = (str: string, ch: string): number => {
		let count = 0
		let pos = -1
		while ((pos = str.indexOf(ch, pos+1)) !== -1) {
			count += 1
		}
		return count
	}


	// --- Get line number by counting number of \n chars
	//        before the current position
	//     Get column number by finding closest previous position
	//        of a \n and computing the difference

	const shortStr = text.substring(0, pos)
	return [
		countChars(shortStr, "\n") + 1,
		pos - shortStr.lastIndexOf('\n')
		]
}

// ---------------------------------------------------------------------------
// --- Returns a function that:
//        1. accepts a string
//        2. returns true or false

type TParser = (str: string) => boolean

export function getParser(
		laxRule: TLaxRule,
		hOptions: hash = {}
		): TParser {

	const {pos, partial, reSkip} = getOptions(hOptions, {
		pos: 0,
		partial: false,
		reSkip: /^\s+/
		})
	const rule = getRule(laxRule)

	return (text: string): boolean => {
		const skipRule = defined(reSkip) ? RegexMatcher(reSkip) : undef

		const $ = new State(text, 0, {skipRule})

		const $next = rule.next($)

		if (defined($next) && (isFinished($next) || partial)) {
			return true
		}
		else {
			const [line, column] = getLineAndColumn(text, $.pos)
			throw new SyntaxError(`No match at pos ${$.pos}
Remainder: ${escapeStr(text.slice($.pos))}`)
		}
	}
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3JjL2xpYi9wYXJzZXIubGliLmNpdmV0LnRzeCIsInNvdXJjZXMiOlsic3JjL2xpYi9wYXJzZXIubGliLmNpdmV0Il0sIm1hcHBpbmdzIjoiO0FBQUEsbUJBQWtCO0FBQ2xCLEFBQUE7QUFDQSxBQUFBLE1BQU0sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FBQyxpQkFBaUI7QUFDdkMsQUFBQTtBQUNBLEFBQUEsQUFBQSxNQUFNLENBQUMsQ0FBQztBQUNSLENBQUMsS0FBSyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsT0FBTyxDQUFDO0FBQ3JDLENBQUMsSUFBSSxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsUUFBUSxDQUFDO0FBQ3RDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxvQkFBb0I7QUFDNUIsQUFBQSxBQUFBLE1BQU0sQ0FBQyxDQUFDO0FBQ1IsQ0FBQyxVQUFVLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxXQUFXLENBQUM7QUFDNUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLGtCQUFrQjtBQUMxQixBQUFBLEFBQUEsTUFBTSxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsSUFBSSxDQUFDLHdCQUF3QjtBQUNoRCxBQUFBLEFBQUEsTUFBTSxDQUFDLENBQUM7QUFDUixDQUFDLFdBQVcsQ0FBQyxDQUFDLFdBQVcsQ0FBQztBQUMxQixDQUFDLFVBQVUsQ0FBQyxDQUFDLFVBQVUsQ0FBQztBQUN4QixDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsaUJBQWlCO0FBQ3pCLEFBQUE7QUFDQSxBQUFBLDhFQUE2RTtBQUM3RSxBQUFBO0FBQ0EsQUFBQSxBQUFBLE1BQU0sQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFBLENBQUE7QUFDbEIsQUFBQSxDQUFDLElBQUksQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRTtBQUNsQixBQUFB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LENBQUMsR0FBRyxDQUFDO0FBQzVCLFdBQWUsRUFBRSxTQUFTLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxBQUMxQyxDQUFHLEM7RUFBQyxDO0NBQUEsQztBQUFBLENBQUE7QUFDUiIsIm5hbWVzIjpbXSwic291cmNlc0NvbnRlbnQiOlsiIyBwYXJzZXIubGliLmNpdmV0XHJcblxyXG5pbXBvcnQge3NwcmludGZ9IGZyb20gXCJAc3RkL2ZtdC9wcmludGZcIlxyXG5cclxuaW1wb3J0IHtcclxuXHR1bmRlZiwgZGVmaW5lZCwgbm90ZGVmaW5lZCwgaXNBcnJheSxcclxuXHRjaGFyLCBhcnJheSwgaGFzaCwgaXNFbXB0eSwgbm9uRW1wdHksXHJcblx0fSBmcm9tICcuL2RhdGF0eXBlcy5saWIudHMnXHJcbmltcG9ydCB7XHJcblx0Z2V0T3B0aW9ucywgZXNjYXBlU3RyLCBzcGFjZXMsIHJhbmRvbUxhYmVsLFxyXG5cdH0gZnJvbSAnLi9sbHV0aWxzLmxpYi50cydcclxuaW1wb3J0IHtsb2dJbmRlbnR9IGZyb20gJy4vbG9nLWZvcm1hdHRlci5saWIudHMnXHJcbmltcG9ydCB7XHJcblx0Z2V0TG9nTGV2ZWwsIHNldExvZ0xldmVsLFxyXG5cdFRGb3JtYXR0ZXIsIFRyZWVMb2dnZXIsXHJcblx0fSBmcm9tICcuL2xvZ2dlci5saWIudHMnXHJcblxyXG4jIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cclxuZXhwb3J0IGNsYXNzIFN0YXRlXHJcblx0dGV4dDogc3RyaW5nID0gJydcclxuXHRwb3M6IG51bWJlciA9IDBcclxuXHJcblx0IyAtLS0gb3B0aW9uYWwgZmllbGRzXHJcblx0c2tpcFJ1bGU/OiBSdWxlXHJcblxyXG5cdGNvbnN0cnVjdG9yKFxyXG5cdFx0XHRzcmM6IHN0cmluZyB8IFN0YXRlXHJcblx0XHRcdG46IG51bWJlciA9IDBcclxuXHRcdFx0aFByb3BzOiBPYmplY3QgPSB7fVxyXG5cdFx0XHQpXHJcblx0XHRpZiAodHlwZW9mIHNyYyA9PSAnc3RyaW5nJylcclxuXHRcdFx0QHRleHQgPSBzcmNcclxuXHRcdFx0QHBvcyA9IG5cclxuXHRcdFx0T2JqZWN0LmFzc2lnbihALCBoUHJvcHMpXHJcblx0XHRlbHNlXHJcblx0XHRcdE9iamVjdC5hc3NpZ24oQCwgc3JjKVxyXG5cdFx0XHRALnBvcyArPSBuXHJcblxyXG5leHBvcnQgaXNGaW5pc2hlZCA6PSAoJDogU3RhdGUpOiBib29sZWFuID0+XHJcblx0e3RleHQsIHBvcywgc2tpcFJ1bGV9IDo9ICRcclxuXHRpZiAocG9zID09IHRleHQubGVuZ3RoKVxyXG5cdFx0cmV0dXJuIHRydWVcclxuXHRlbHNlIGlmIChza2lwUnVsZSlcclxuXHRcdCMgLS0tIHRyeSBydW5uaW5nIHNraXAgcnVsZVxyXG5cdFx0ZGVsZXRlICQuc2tpcFJ1bGUgICAgICMgcHJldmVudCBydWxlIHJ1bm5pbmcgdGhlIHNraXAgcnVsZVxyXG5cdFx0JG5leHQgOj0gc2tpcFJ1bGUubmV4dCgkKVxyXG5cdFx0aWYgZGVmaW5lZCgkbmV4dClcclxuXHRcdFx0cmV0dXJuICgkbmV4dC5wb3MgPT0gJG5leHQudGV4dC5sZW5ndGgpXHJcblx0XHRlbHNlXHJcblx0XHRcdHJldHVybiBmYWxzZVxyXG5cdGVsc2VcclxuXHRcdHJldHVybiBmYWxzZVxyXG5cclxuZXhwb3J0IHR5cGUgVFJ1bGVGdW5jID0gKCQ6IFN0YXRlKSA9PiBTdGF0ZT9cclxuXHJcbmV4cG9ydCBjbGFzcyBSdWxlXHJcblx0dHlwZTogc3RyaW5nXHJcblx0ZnVuYzogVFJ1bGVGdW5jXHJcblx0bGFiZWw6IHN0cmluZyA9IHJhbmRvbUxhYmVsKClcclxuXHRsQ2hpbGRyZW46IFJ1bGVbXSA9IFtdXHJcblxyXG5cdGNvbnN0cnVjdG9yKFxyXG5cdFx0XHR0eXBlOiBzdHJpbmcsXHJcblx0XHRcdGZ1bmM6IFRSdWxlRnVuYyxcclxuXHRcdFx0bENoaWxkcmVuOiBSdWxlW10gPSBbXVxyXG5cdFx0XHQpXHJcblx0XHRAdHlwZSA9IHR5cGVcclxuXHRcdEBmdW5jID0gZnVuY1xyXG5cdFx0QGxDaGlsZHJlbiA9IFtdXHJcblxyXG5cdG5leHQoJDogU3RhdGUpOiBTdGF0ZT9cclxuXHRcdHJldHVybiBAZnVuYygkKVxyXG5cclxuIyAtLS0gQW55dGhpbmcgdGhhdCBjYW4gYmUgY29udmVydGVkIHRvIGEgUnVsZVxyXG50eXBlIFRMYXhSdWxlID0gKHN0cmluZyB8IFJlZ0V4cCB8IFJ1bGUgfCBUTGF4UnVsZVtdKVxyXG5cclxuIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuIyAtLS0gcmV0dXJucyAkIGlmIG5vIHNraXAgcnVsZSBPUiBydWxlIGRvZXNuJ3QgbWF0Y2hcclxuXHJcbnNraXBJZ25vcmVkIDo9ICgkOiBTdGF0ZSk6IFN0YXRlID0+XHJcblxyXG5cdCMgLS0tIFdpbGwgYWx3YXlzIHJldHVybiBhIGRlZmluZWQgdmFsdWVcclxuXHR7c2tpcFJ1bGV9IDo9ICRcclxuXHRpZiBub3RkZWZpbmVkKHNraXBSdWxlKVxyXG5cdFx0cmV0dXJuICRcclxuXHJcblx0IyAtLS0gbWFrZSBzdXJlIHNraXAgaXMgb25seSB0cmllZCBvbmNlXHJcblx0ZGVsZXRlKCQuc2tpcFJ1bGUpXHJcblx0JG5leHQgOj0gc2tpcFJ1bGUubmV4dCgkKVxyXG5cdGlmIGRlZmluZWQoJG5leHQpXHJcblx0XHQkLnNraXBSdWxlID0gc2tpcFJ1bGUgICAgIyBzdGlsbCBuZWVkIHRvIHJlc3RvcmVcclxuXHRcdHJldHVybiBPYmplY3QuYXNzaWduICRuZXh0LCB7c2tpcFJ1bGV9XHJcblx0ZWxzZVxyXG5cdFx0cmV0dXJuIE9iamVjdC5hc3NpZ24gJCwge3NraXBSdWxlfVxyXG5cclxuIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuXHJcbmV4cG9ydCB0eXBlIFRDYWxsYmFjayA9IChydWxlOiBSdWxlLCBsTWF0Y2hlczogc3RyaW5nW10pID0+IHZvaWRcclxuXHJcbiMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblxyXG5leHBvcnQgUmVnZXhNYXRjaGVyIDo9IChcclxuXHRcdHJlOiBSZWdFeHBcclxuXHRcdC4uLmxDYWxsYmFja3M6IFRDYWxsYmFja1tdXHJcblx0XHQpOiBSdWxlID0+XHJcblxyXG5cdHJ1bGUgOj0gbmV3IFJ1bGUoJ3InLCAoJDogU3RhdGUpOiBTdGF0ZT8gPT5cclxuXHJcblx0XHQkY3VyIDo9IHNraXBJZ25vcmVkKCQpXHJcblx0XHRsTWF0Y2hlcyA6PSByZS5leGVjKCRjdXIudGV4dC5zdWJzdHJpbmcoJGN1ci5wb3MpKVxyXG5cdFx0aWYgKGxNYXRjaGVzID09IG51bGwpXHJcblx0XHRcdHJldHVybiB1bmRlZlxyXG5cclxuXHRcdCMgLS0tIFRva2VuIGlzIG1hdGNoZWQsIGFkZCBtYXRjaGVzIHRvIHN0YXRlLFxyXG5cdFx0IyAgICAgcmV0dXJuIHRoZSBuZXh0IHN0YXRlXHJcblx0XHRudW1DaGFycyA6PSBsTWF0Y2hlc1swXS5sZW5ndGhcclxuXHRcdCRuZXh0IDo9IG5ldyBTdGF0ZSgkY3VyLCBudW1DaGFycylcclxuXHRcdGZvciBjYiBvZiBsQ2FsbGJhY2tzXHJcblx0XHRcdGNiKHJ1bGUsIGxNYXRjaGVzKVxyXG5cdFx0cmV0dXJuICRuZXh0XHJcblx0XHQpXHJcblx0cmV0dXJuIHJ1bGVcclxuXHJcbiMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblxyXG5leHBvcnQgU3RyaW5nTWF0Y2hlciA6PSAoXHJcblx0XHRzdHI6IHN0cmluZ1xyXG5cdFx0Li4ubENhbGxiYWNrczogVENhbGxiYWNrW11cclxuXHRcdCk6IFJ1bGUgPT5cclxuXHJcblx0bmV3UnVsZSA6PSBuZXcgUnVsZSgncycsICgkOiBTdGF0ZSk6IFN0YXRlPyA9PlxyXG5cclxuXHRcdCRjdXIgOj0gc2tpcElnbm9yZWQoJClcclxuXHRcdGlmIG5vdCAkY3VyLnRleHQuc3RhcnRzV2l0aChzdHIsICRjdXIucG9zKVxyXG5cdFx0XHRyZXR1cm4gdW5kZWZcclxuXHJcblx0XHQkbmV4dCA6PSBuZXcgU3RhdGUoJGN1ciwgc3RyLmxlbmd0aClcclxuXHRcdGZvciBjYiBvZiBsQ2FsbGJhY2tzXHJcblx0XHRcdGNiKG5ld1J1bGUsIFtzdHJdKVxyXG5cdFx0cmV0dXJuICRuZXh0XHJcblx0XHQpXHJcblx0cmV0dXJuIG5ld1J1bGVcclxuXHJcbiMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZ2V0UnVsZShcclxuXHRcdGxheFJ1bGU6IFRMYXhSdWxlXHJcblx0XHQuLi5sQ2FsbGJhY2tzOiBUQ2FsbGJhY2tbXVxyXG5cdFx0KTogUnVsZVxyXG5cclxuXHRpZiAobGF4UnVsZSBpbnN0YW5jZW9mIFJ1bGUpXHJcblx0XHRyZXR1cm4gbGF4UnVsZVxyXG5cdGlmIGlzQXJyYXkobGF4UnVsZSlcclxuXHRcdGxSdWxlcyA6PSBmb3IgciBvZiBsYXhSdWxlXHJcblx0XHRcdGdldFJ1bGUgclxyXG5cdFx0cmV0dXJuIEFsbCBsUnVsZXNcclxuXHRpZiAobGF4UnVsZSBpbnN0YW5jZW9mIFJlZ0V4cClcclxuXHRcdHJldHVybiBSZWdleE1hdGNoZXIobGF4UnVsZSwgbENhbGxiYWNrcy4uLilcclxuXHRpZiAodHlwZW9mIGxheFJ1bGUgPT0gJ3N0cmluZycpXHJcblx0XHRyZXR1cm4gU3RyaW5nTWF0Y2hlcihsYXhSdWxlLCBsQ2FsbGJhY2tzLi4uKVxyXG5cdHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgcnVsZTogI3tsYXhSdWxlfVwiKVxyXG5cclxuIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuIyAtLS0gTWF0Y2ggYSBzZXF1ZW5jZSBvZiBydWxlcyBpbiBvcmRlclxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIEFsbChcclxuXHRcdGxMYXhSdWxlczogVExheFJ1bGVbXVxyXG5cdFx0Li4ubENhbGxiYWNrczogVENhbGxiYWNrW11cclxuXHRcdCk6IFJ1bGVcclxuXHJcblx0bFJ1bGVzIDo9IGZvciBsYXhSdWxlIG9mIGxMYXhSdWxlc1xyXG5cdFx0Z2V0UnVsZSBsYXhSdWxlLCBsQ2FsbGJhY2tzLi4uXHJcblxyXG5cdG5ld1J1bGUgOj0gbmV3IFJ1bGUoJyYnLCAoJDogU3RhdGUpID0+XHJcblx0XHRmb3IgcnVsZSxpIG9mIGxSdWxlc1xyXG5cdFx0XHQkbmV4dCA6PSBydWxlLm5leHQoJClcclxuXHRcdFx0aWYgbm90ZGVmaW5lZCgkbmV4dClcclxuXHRcdFx0XHRyZXR1cm4gdW5kZWZcclxuXHRcdFx0JCA9ICRuZXh0XHJcblxyXG5cdFx0Zm9yIGNiIG9mIGxDYWxsYmFja3NcclxuXHRcdFx0Y2IobmV3UnVsZSwgW10pXHJcblx0XHRyZXR1cm4gJFxyXG5cdFx0KVxyXG5cclxuXHRyZXR1cm4gbmV3UnVsZVxyXG5cclxuIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuIyAtLS0gTWF0Y2ggYW55IG9mIHRoZSBydWxlcywgY2hlY2sgbGVmdCB0byByaWdodFxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIEFueShcclxuXHRcdGxMYXhSdWxlczogVExheFJ1bGVbXVxyXG5cdFx0Li4ubENhbGxiYWNrczogVENhbGxiYWNrW11cclxuXHRcdCk6IFJ1bGVcclxuXHJcblx0bFJ1bGVzIDo9IGZvciBsYXhSdWxlIG9mIGxMYXhSdWxlc1xyXG5cdFx0Z2V0UnVsZSBsYXhSdWxlXHJcblxyXG5cdG5ld1J1bGUgOj0gbmV3IFJ1bGUoJ3wnLCAoJDogU3RhdGUpID0+XHJcblx0XHRmb3IgcnVsZSxpIG9mIGxSdWxlc1xyXG5cdFx0XHQkbmV4dCA6PSBydWxlLm5leHQoJClcclxuXHRcdFx0aWYgZGVmaW5lZCgkbmV4dClcclxuXHRcdFx0XHRmb3IgY2Igb2YgbENhbGxiYWNrc1xyXG5cdFx0XHRcdFx0Y2IobmV3UnVsZSwgW10pXHJcblx0XHRcdFx0cmV0dXJuICRuZXh0XHJcblx0XHRyZXR1cm4gdW5kZWZcclxuXHRcdClcclxuXHRyZXR1cm4gbmV3UnVsZVxyXG5cclxuIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuIyAtLS0gTWF0Y2ggYSBydWxlIDEgb3IgbW9yZSB0aW1lc1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIFBsdXMoXHJcblx0XHRsYXhSdWxlOiBUTGF4UnVsZVxyXG5cdFx0Li4ubENhbGxiYWNrczogVENhbGxiYWNrW11cclxuXHRcdCk6IFJ1bGVcclxuXHJcblx0cnVsZSA6PSBnZXRSdWxlKGxheFJ1bGUpXHJcblxyXG5cdG5ld1J1bGUgOj0gbmV3IFJ1bGUoJysnLCAoJDogU3RhdGUpID0+XHJcblx0XHQkZmlyc3QgOj0gcnVsZS5uZXh0KCQpXHJcblx0XHRpZiBub3RkZWZpbmVkKCRmaXJzdClcclxuXHRcdFx0cmV0dXJuIHVuZGVmXHJcblx0XHQkID0gJGZpcnN0XHJcblx0XHRsb29wXHJcblx0XHRcdCRuZXh0IDo9IHJ1bGUubmV4dCgkKVxyXG5cdFx0XHRpZiBub3RkZWZpbmVkKCRuZXh0KVxyXG5cdFx0XHRcdGZvciBjYiBvZiBsQ2FsbGJhY2tzXHJcblx0XHRcdFx0XHRjYihuZXdSdWxlLCBbXSlcclxuXHRcdFx0XHRyZXR1cm4gJG5leHRcclxuXHRcdFx0JCA9ICRuZXh0XHJcblx0XHQpXHJcblx0cmV0dXJuIG5ld1J1bGVcclxuXHJcbiMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiMgLS0tIE1hdGNoIGEgcnVsZSBvcHRpb25hbGx5XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gT3B0aW9uYWwoXHJcblx0XHRsYXhSdWxlOiBUTGF4UnVsZVxyXG5cdFx0Li4ubENhbGxiYWNrczogVENhbGxiYWNrW11cclxuXHRcdCk6IFJ1bGVcclxuXHJcblx0cnVsZSA6PSBnZXRSdWxlKGxheFJ1bGUpXHJcblxyXG5cdG5ld1J1bGUgOj0gbmV3IFJ1bGUoJz8nLCAoJDogU3RhdGUpID0+XHJcblx0XHQkbmV4dCA6PSBydWxlLm5leHQoJClcclxuXHRcdGlmIGRlZmluZWQoJG5leHQpXHJcblx0XHRcdGZvciBjYiBvZiBsQ2FsbGJhY2tzXHJcblx0XHRcdFx0Y2IobmV3UnVsZSwgW10pXHJcblx0XHRcdHJldHVybiAkbmV4dFxyXG5cdFx0ZWxzZVxyXG5cdFx0XHQjIC0tLSBTdGlsbCBzdWNjZWVkIHNpbmNlIGl0IHdhcyBvcHRpb25hbFxyXG5cdFx0XHRyZXR1cm4gJFxyXG5cdFx0KVxyXG5cclxuXHRyZXR1cm4gbmV3UnVsZVxyXG5cclxuIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBTdGFyKFxyXG5cdFx0bGF4UnVsZTogVExheFJ1bGVcclxuXHRcdC4uLmxDYWxsYmFja3M6IFRDYWxsYmFja1tdXHJcblx0XHQpOiBSdWxlXHJcblxyXG5cdHJ1bGUgOj0gZ2V0UnVsZShsYXhSdWxlKVxyXG5cclxuXHRuZXdSdWxlIDo9IG5ldyBSdWxlKCcqJywgKCQ6IFN0YXRlKSA9PlxyXG5cdFx0bG9vcFxyXG5cdFx0XHQkbmV4dCA6PSBydWxlLm5leHQoJClcclxuXHRcdFx0aWYgbm90ZGVmaW5lZCgkbmV4dClcclxuXHRcdFx0XHRmb3IgY2Igb2YgbENhbGxiYWNrc1xyXG5cdFx0XHRcdFx0Y2IobmV3UnVsZSwgW10pXHJcblx0XHRcdFx0cmV0dXJuICRcclxuXHRcdFx0JCA9ICRuZXh0XHJcblx0XHQpXHJcblx0cmV0dXJuIG5ld1J1bGVcclxuXHJcbiMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblxyXG5leHBvcnQgZ2V0TGluZUFuZENvbHVtbiA6PSAodGV4dDogc3RyaW5nLCBwb3M6IG51bWJlcikgPT5cclxuXHJcblx0Y291bnRDaGFycyA6PSAoc3RyOiBzdHJpbmcsIGNoOiBzdHJpbmcpOiBudW1iZXIgPT5cclxuXHRcdGxldCBjb3VudCA9IDBcclxuXHRcdGxldCBwb3MgPSAtMVxyXG5cdFx0d2hpbGUgKHBvcyA9IHN0ci5pbmRleE9mKGNoLCBwb3MrMSkpICE9IC0xXHJcblx0XHRcdGNvdW50ICs9IDFcclxuXHRcdHJldHVybiBjb3VudFxyXG5cclxuXHJcblx0IyAtLS0gR2V0IGxpbmUgbnVtYmVyIGJ5IGNvdW50aW5nIG51bWJlciBvZiBcXG4gY2hhcnNcclxuXHQjICAgICAgICBiZWZvcmUgdGhlIGN1cnJlbnQgcG9zaXRpb25cclxuXHQjICAgICBHZXQgY29sdW1uIG51bWJlciBieSBmaW5kaW5nIGNsb3Nlc3QgcHJldmlvdXMgcG9zaXRpb25cclxuXHQjICAgICAgICBvZiBhIFxcbiBhbmQgY29tcHV0aW5nIHRoZSBkaWZmZXJlbmNlXHJcblxyXG5cdHNob3J0U3RyIDo9IHRleHQuc3Vic3RyaW5nKDAsIHBvcylcclxuXHRyZXR1cm4gW1xyXG5cdFx0Y291bnRDaGFycyhzaG9ydFN0ciwgXCJcXG5cIikgKyAxLFxyXG5cdFx0cG9zIC0gc2hvcnRTdHIubGFzdEluZGV4T2YoJ1xcbicpXHJcblx0XHRdXHJcblxyXG4jIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4jIC0tLSBSZXR1cm5zIGEgZnVuY3Rpb24gdGhhdDpcclxuIyAgICAgICAgMS4gYWNjZXB0cyBhIHN0cmluZ1xyXG4jICAgICAgICAyLiByZXR1cm5zIHRydWUgb3IgZmFsc2VcclxuXHJcbnR5cGUgVFBhcnNlciA9IChzdHI6IHN0cmluZykgPT4gYm9vbGVhblxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGdldFBhcnNlcihcclxuXHRcdGxheFJ1bGU6IFRMYXhSdWxlXHJcblx0XHRoT3B0aW9uczogaGFzaCA9IHt9XHJcblx0XHQpOiBUUGFyc2VyXHJcblxyXG5cdHtwb3MsIHBhcnRpYWwsIHJlU2tpcH0gOj0gZ2V0T3B0aW9ucyBoT3B0aW9ucywge1xyXG5cdFx0cG9zOiAwXHJcblx0XHRwYXJ0aWFsOiBmYWxzZVxyXG5cdFx0cmVTa2lwOiAvXlxccysvXHJcblx0XHR9XHJcblx0cnVsZSA6PSBnZXRSdWxlIGxheFJ1bGVcclxuXHJcblx0cmV0dXJuICh0ZXh0OiBzdHJpbmcpOiBib29sZWFuID0+XHJcblx0XHRza2lwUnVsZSA6PSBkZWZpbmVkKHJlU2tpcCkgPyBSZWdleE1hdGNoZXIocmVTa2lwKSA6IHVuZGVmXHJcblxyXG5cdFx0JCA6PSBuZXcgU3RhdGUodGV4dCwgMCwge3NraXBSdWxlfSlcclxuXHJcblx0XHQkbmV4dCA6PSBydWxlLm5leHQoJClcclxuXHJcblx0XHRpZiBkZWZpbmVkKCRuZXh0KSAmJiAoaXNGaW5pc2hlZCgkbmV4dCkgfHwgcGFydGlhbClcclxuXHRcdFx0cmV0dXJuIHRydWVcclxuXHRcdGVsc2VcclxuXHRcdFx0W2xpbmUsIGNvbHVtbl0gOj0gZ2V0TGluZUFuZENvbHVtbih0ZXh0LCAkLnBvcylcclxuXHRcdFx0dGhyb3cgbmV3IFN5bnRheEVycm9yKFwiXCJcIlxyXG5cdFx0XHRcdE5vIG1hdGNoIGF0IHBvcyAjeyQucG9zfVxyXG5cdFx0XHRcdFJlbWFpbmRlcjogI3tlc2NhcGVTdHIodGV4dC5zbGljZSgkLnBvcykpfVxyXG5cdFx0XHRcdFwiXCJcIilcclxuIl19