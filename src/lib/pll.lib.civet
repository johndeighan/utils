# pll.lib.civet

import {
	undef, defined, notdefined, hash, isEmpty, nonEmpty,
	} from './datatypes.lib.ts'
import {
	getOptions, allLinesInBlock, escapeStr,
	} from './llutils.lib.ts'
import {DBG, DBGVALUE} from './logger.lib.ts'
import {
	oneIndent, indentLevel, splitLine,
	} from './indent.lib.ts'
import {TextTable} from './text-table.lib.ts'

# ---------------------------------------------------------------------------
# ---------------------------------------------------------------------------
# --- Common token types:
#        'line', 'empty', 'indent', 'undent', 'eof'

export type TPLLToken = {
	kind: string
	str: string
	name?: string
	value?: any
	}

export tkEOF := {kind: 'eof', str: ''}
export tkIndent := {kind: 'indent', str: ''}
export tkUndent := {kind: 'undent', str: ''}

# ---------------------------------------------------------------------------

export type TTokenGenerator = (
		line: string
		) => Generator<TPLLToken, void, void>

identTokenGen: TTokenGenerator := (line: string) ->
	yield {kind: 'line', str: line}
	return

export allTokensIn := (
		iterable: Iterable<string>,
		gen: TTokenGenerator = identTokenGen
		hOptions: hash={}
		): Generator<TPLLToken, void, void> ->

	{lTypes} := getOptions hOptions, {
		lTypes: ['indent','undent']
		}
	let level = 0
	for str of iterable
		DBG "LINE: '#{escapeStr(str)}'"
		if isEmpty(str)
			if lTypes.includes('empty')
				yield {kind: 'empty', str}
		else
			# --- NOTE: If indent > 0, oneIndent will be set
			[indent, line] := splitLine(str)
			if lTypes.includes('indent') && (indent > level)
				level += 1
				yield tkIndent
				while (indent > level)
					level += 1
					yield tkIndent
			if lTypes.includes('undent') && (indent < level)
				level -= 1
				yield tkUndent
				while (indent < level)
					level -= 1
					yield tkUndent
			for tok of gen(line)
				yield tok
	if lTypes.includes('undent')
		while (level > 0)
			yield tkUndent
			level -= 1
	return

# ---------------------------------------------------------------------------

export allTokensInBlock := (
		block: string
		gen: TTokenGenerator = identTokenGen
		): Generator<TPLLToken, void, void> ->

	for tok of allTokensIn(allLinesInBlock(block), gen)
		yield tok
	return

# ---------------------------------------------------------------------------

export tokenTable := (
		lTokens: Iterable<TPLLToken>
		title='Tokens'
		): string =>

	table := new TextTable 'l l'
	table.fullsep '='
	table.title title
	table.fullsep '='
	table.labels ['kind', 'str']
	table.sep()
	for tok of lTokens
		table.data [tok.kind, tok.str]
	table.fullsep '='
	return table.asString()
