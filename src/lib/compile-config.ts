"use strict";
// compile-config.civet

type AutoPromise<T> = Promise<Awaited<T>>;
import {
	undef, defined, notdefined, hash, optionspec,
	isString, isHash, isArray,
	} from './datatypes.ts'
import {
	croak, assert, pass, keys, hasKey, hasKeys, OL, getOptions,
	} from './llutils.ts'
import {
	isFile, fileExt, withExt, rmFile, mkpath, parsePath,
	relpath, newerDestFileExists,
	} from './fs.ts'
import {
	pushLogLevel, popLogLevel,
	INDENT, UNDENT,
	DBG, LOG, WARN, ERR,
	} from './logger.ts'
import {
	execCmd, execCmdSync, cmdSucceeds,
	} from './exec-utils.ts'

// ---------------------------------------------------------------------------

export type configHash = {
	hCompilers: hash
	hPostProcessors: hash
	}

export const isConfigHash = (h: any): h is configHash => {

	try {
		assert(defined(h), "hCompilerConfig not defined")
		assert(hasKeys(h, 'hCompilers', 'hPostProcessors'),
			"Missing key(s) in hCompilerConfig")
		const {hCompilers, hPostProcessors} = h

		assert(hasKeys(hCompilers, '.dot', '.cielo', '.civet'),
			"Missing key(s) in hCompilers")
		assert(hasKeys(hPostProcessors, 'testDir', 'libDir', 'binDir'),
			"Missing key(s) in hPostProcessors")
		for (const ext of keys(hCompilers)) {
			const h2 = hCompilers[ext]
			assert(hasKeys(h2, 'outExt', 'tester', 'compiler'),
				"Missing key(s) in hCompilers")
			const {outExt, tester, compiler} = h2

			pushLogLevel('silent')
			const works = tester()
			popLogLevel()

			if (!works) {
				DBG(`Deleting compiler for ext ${OL(ext)}`)
				delete hCompilers[ext]
			}
		}
		return true
	}
	catch (err: any) {
		console.error(`ERROR: ${err.message}`)
		return false
	}
}

// ---------------------------------------------------------------------------

export const checkConfigHash = (h: any): void => {

	if (isConfigHash(h)) {
		DBG("Config Hash OK")
	}
	else {
		DBG("Bad Config Hash")
	}
	return
}

// ---------------------------------------------------------------------------
// --- will eventually pre-process the .cielo code

const cielo2civet = (path: string, civetPath: string): void => {

	assert(isFile(path), `No such file: ${OL(path)} (cielo2civet)`)
	assert((fileExt(path) === '.cielo'), `Not a cielo file: ${OL(path)}`)
	execCmdSync('cp', [path, civetPath])
	assert(isFile(civetPath), `File not created: ${OL(civetPath)}`)
	return
}

// ---------------------------------------------------------------------------

const civet2ts = (path: string, tsPath: string): void => {

	assert(isFile(path), `No such file: ${OL(path)} (civet2js)`)
	assert((fileExt(path) === '.civet'), `Not a civet file: ${OL(path)}`)

	execCmdSync('civet', [
		'--inline-map',
		'-o',
		tsPath,
		'-c',
		path
		])

	assert(isFile(tsPath), `File not created: ${OL(tsPath)}`)
	return
}

// ---------------------------------------------------------------------------
// ASYNC

export const installDenoExe = async (stub: string): AutoPromise<void> => {

	await execCmd('deno', [
		'compile',
		'-A',
		'--no-check',
		`src/bin/${stub}.ts`
		])
	return
}

// ---------------------------------------------------------------------------

export const isStub = (str: string): boolean => {

	// --- a stub cannot contain any of '.', '\\', '/'
	return notdefined(str.match(/[\.\\\/]/))
}

// ---------------------------------------------------------------------------

export const isDirSpec = (dirspec: string): boolean => {

	return hasKey(hCompilerConfig.hPostProcessors, dirspec)
}

// ---------------------------------------------------------------------------
// --- Returns {path, dirspec}

export type foundSource = {
	path: string
	dirspec: string
	}

export const findSourceFile = (
	dirspec: string,
	stub: string,
	purpose: (string | undefined) = undef
	): (foundSource | undefined) => {

	assert(isStub(stub), `Bad stub: ${OL(stub)}`)
	if (notdefined(dirspec)) {
		// --- If dirspec is undef, we search all possible dirspecs
		//     but throw exception if it's found in more than one

		let foundPath: (string | undefined) = undef
		let dspec: (string | undefined) = undef

		for (const ds of keys(hCompilerConfig.hPostProcessors)) {
			const h = findSourceFile(ds, stub, purpose)
			if (notdefined(h)) {
				pass()
			}
			else {
				const {path, dirspec} = h
				if (notdefined(path) || notdefined(dirspec)) {
					pass()
				}
				else {
					assert(notdefined(foundPath),
							`Ambiguous: [${dirspec}, ${stub}]`)
					foundPath = path
					dspec = dirspec
				}
			}
		}
		if (notdefined(foundPath) || notdefined(dspec)) {
			return undef
		}
		else {
			return {
				path: foundPath,
				dirspec: dspec
				}
		}
	}
	else {
		assert(isDirSpec(dirspec), `Bad dirspec: ${OL(dirspec)}`)
		const dir = hCompilerConfig.hPostProcessors[dirspec].dir

		// --- Try every supported file extension
		for (const ext of keys(hCompilerConfig.hCompilers)) {
			const path = (
				defined(purpose)
					? mkpath(dir, `${stub}.${purpose}${ext}`)
					: mkpath(dir, `${stub}${ext}`)
				)
			if (isFile(path)) {
				return {path, dirspec}
			}
		}
		return undef
	}
}

// ---------------------------------------------------------------------------
// --- returns {path, relPath, dirspec, stub, purpose, ext}
//        returns undef if the file does not exist
//        dirspec and stub are undef if file exists, but
//           isn't in ./src/lib, ./src/bin or ./test folders

type fileSpec = string[]

export const isFileSpec = (x: any): x is fileSpec => {
	return Array.isArray(x) && (x.length === 2)
}

export type srcInfo = {
	path: string
	relPath: string
	dirspec: (string | undefined)  // will be undef if file exists, but not in a std dir
	stub: (string | undefined)
	purpose: (string | undefined)
	ext: (string | undefined)
	}

export const getSrcInfo = (src: string | fileSpec): (srcInfo | undefined) => {

	if (isString(src)) {
		if (isFile(src)) {
			const {stub, purpose, ext, relPath} = parsePath(src)
			const dirspec = (
				  relPath.startsWith('src/lib/')   ? 'libDir'
				: relPath.startsWith('./src/lib/') ? 'libDir'
				: relPath.startsWith('src/bin/')   ? 'binDir'
				: relPath.startsWith('./src/bin/') ? 'binDir'
				: relPath.startsWith('test/')      ? 'testDir'
				: relPath.startsWith('./test/')    ? 'testDir'
				:                                    undef)
			return {
				path: src,
				relPath,
				dirspec,
				stub: defined(dirspec) ? stub : undef,
				purpose,
				ext
				}
		}
		else {
			return undef
		}
	}
	else if ((src === undef) || (src === null)) {
		return undef
	}
	else {
		// -- NOTE: src can be [undef, <stub>, purpose],
		//          in which case there can be only one dirspec
		//          that results in an existing file

		const [dspec, stub, purpose] = src
		const h = findSourceFile(dspec, stub, purpose)
		if (h === undef) {
			return undef
		}
		const {path, dirspec} = h
		if (isFile(path)) {
			const {stub, purpose, ext, relPath} = parsePath(path)
			return {
				path,
				relPath,
				dirspec,
				stub,
				purpose,
				ext
				}
		}
		else {
			return undef
		}
	}
}

// ---------------------------------------------------------------------------
// --- returns [compiler, outExt]
//     or [undef, undef] if there is no compiler

export const getCompiler = (ext: string): any[] => {

	const h = hCompilerConfig.hCompilers[ext]
	if (notdefined(h)) {
		DBG(`Not compiling - no compiler for ${ext} files`)
		return [undef, undef]
	}

	assert(isHash(h), `hCompilers[${ext}] not a hash: ${OL(h)}`)
	const {outExt, compiler} = h
	assert(defined(compiler), `Missing compiler in config for ${OL(ext)}`)
	assert(defined(outExt), `Missing outExt in config for ${OL(ext)}`)
	return [compiler, outExt]
}

// ---------------------------------------------------------------------------
// --- src can be a full path or [dirspec, stub, purpose]
//        where dirspec can be 'lib', 'bin' or 'test'
//     throws error if file does not exist
//
//     Possible status values:
//        'temp'       - it was a temp file, not compiled
//        'nocompiler' - has no compiler, not compiled
//        'exists'     - newer compiled file already exists
//        'failed'     - compiling failed
//        'compiled'   - successfully compiled

type compileStatus = (
	  'nofile'
	| 'temp'
	| 'nocompiler'
	| 'exists'
	| 'failed'
	| 'compiled'
	)

export type compileResult = {
	status: compileStatus
	path: string
	relPath: (string | undefined)
	outPath: (string | undefined)
	}

export const compileFile = (
	src: string | fileSpec,
	): compileResult => {

	DBG(`COMPILE: ${OL(src)}`, INDENT)

	const hSrcInfo = getSrcInfo(src)
	if (hSrcInfo === undef) {
		throw new Error(`No such file: ${OL(src)}`)
	}
	const {dirspec, stub, path: orgPath, relPath, purpose, ext} = hSrcInfo
	const path = orgPath || ((typeof src === 'string') ? src : src.join('/'))
	if (notdefined(relPath)) {
		ERR(`No such file: ${OL(src)} (compileFile)`, UNDENT)
		return {
			status: 'nofile',
			path,
			relPath: undef,
			outPath: undef
			}
	}
	if (purpose === 'temp') {
		DBG(`Not compiling temp file ${OL(relPath)}`, UNDENT)
		return {
			status: 'temp',
			path,
			relPath,
			outPath: undef
			}
	}

	if (ext === undef) {
		DBG(`Not compiling - no file extension in ${relPath}`, UNDENT)
		return {
			status: 'nocompiler',
			path,
			relPath,
			outPath: undef
			}
	}

	const [compiler, outExt] = getCompiler(ext)
	if (notdefined(compiler)) {
		DBG(`Not compiling - no compiler for ${ext}`, UNDENT)
		return {
			status: 'nocompiler',
			path,
			relPath,
			outPath: undef
			}
	}

	const outPath = withExt(relPath, outExt)
	if (newerDestFileExists(relPath, outPath)) {
		DBG(`Not compiling, newer ${outPath} exists`, UNDENT)
		return {
			status: 'exists',
			path,
			relPath,
			outPath
			}
	}

	DBG("No newer dest file exists")
	if (isFile(outPath)) {
		DBG(`removing older ${outPath}`)
		rmFile(outPath)
	}

	DBG(`compiling ${OL(relPath)}`)
	compiler(relPath)     // produces file outPath, may throw

	if (isFile(outPath)) {
		// --- If first line is a file name with original extension,
		//     replace the file extension
		const contents = Deno.readTextFileSync(outPath)
		const lLines = contents.split("\n")
		lLines[0].replace(ext, outExt)
		Deno.writeTextFileSync(outPath, lLines.join("\n"))
	}
	else {
		ERR(`Output file ${relpath(outPath)} not produced`, UNDENT)
		return {
			status: 'failed',
			path,
			relPath,
			outPath
			}
	}

	// --- If there's a post-processor, run it
	if (notdefined(dirspec)) {
		// --- if no dirspec here, file is not in a standard directory
		//     so there can't be a post-processor
		pass()
	}
	else {
		const postProc = hCompilerConfig.hPostProcessors[dirspec].postProcessor
		if (notdefined(postProc)) {
			pass()
		}
		else {
			DBG("post-processing file")
			postProc(stub)
		}
	}

	DBG(UNDENT)
	return {
		status: 'compiled',
		path,
		relPath,
		outPath
		}
}

// ---------------------------------------------------------------------------
// --- NOTES:
//        1. compiler doesn't need to check if the file exists
//        2. compiler doesn't need to check the file extension

export const hDefaultConfig: configHash = {

	hCompilers: {
		// --- keys are file extensions
		//     NOTE: compilers must be synchronous!!!

		'.dot': {
			outExt: '.svg',
			tester: (): boolean => {
				return cmdSucceeds('dot', ['--version'], 'quiet')
			},
			compiler: (path: string): void => {
				const svgPath = withExt(path, '.svg')
				rmFile(svgPath)
				execCmdSync('dot', ['-Tsvg', path])
				return
			},
		},

		'.cielo': {
			outExt: '.ts',
			tester: (): boolean => {
				return true
			},
			compiler: (path: string): void => {
				const civetPath = withExt(path, '.temp.civet')
				rmFile(civetPath)
				cielo2civet(path, civetPath)
				civet2ts(civetPath, withExt(path, '.ts'))
				return
			},
		},

		'.civet': {
			outExt: '.ts',
			tester: (): boolean => {
				return cmdSucceeds('civet', ['--version'], 'quiet')
			},
			compiler: (path: string): void => {
				civet2ts(path, withExt(path, '.ts'))
				return
			}
		}

		},

	hPostProcessors: {
		// --- Keys are dirspecs

		testDir: {
			dir: 'test',    // --- no post processing
			postProcessor: (stub: string): void => {
				return
			},
		},

		libDir: {
			dir: 'src/lib',
			postProcessor: (stub: string): void => {
				const h = findSourceFile('test', stub, 'test')
				if (notdefined(h)) {
					return
				}
				const {path} = h
				if (notdefined(path)) {
					return
				}
				// --- will also run unit test if it exists
				const {status} = compileFile(path)
				DBG(`Compile of ${stub}: status = ${status}`)
				return
			},
		},

		binDir: {
			dir: 'src/bin',
			postProcessor: (stub: string): void => {
				LOG(`- installing command ${stub}`)
				installDenoExe(stub)
				return
			}
		}
		}
	}

// ---------------------------------------------------------------------------

// --- resolves '.' to current dir, not current file location
export const userConfigPath: string = mkpath('./compile.config.ts')
checkConfigHash(hDefaultConfig)

export let hCompilerConfig: configHash = hDefaultConfig
if (isFile(userConfigPath)) {
	DBG(`using user config path = ${userConfigPath}`)
	const module = await import(`file:///${userConfigPath}`)
	const hCompilerConfig = module.default as configHash
	checkConfigHash(hCompilerConfig)
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,