"use strict";
// compile-config.civet

type AutoPromise<T> = Promise<Awaited<T>>;
import {
	undef, defined, notdefined, hash, optionspec,
	isString, isHash, isArray,
	} from './datatypes.ts'
import {
	croak, assert, pass, keys, hasKey, hasKeys, OL, getOptions,
	} from './llutils.ts'
import {
	isFile, fileExt, withExt, rmFile, mkpath, parsePath,
	relpath, newerDestFileExists,
	} from './fs.ts'
import {
	pushLogLevel, popLogLevel,
	INDENT, UNDENT,
	DBG, LOG, WARN, ERR,
	} from './logger.ts'
import {
	execCmd, execCmdSync, cmdSucceeds,
	} from './exec-utils.ts'

/**
 * @module compile-config - configuring the compiler
 */

// ---------------------------------------------------------------------------

export type configHash = {
	hCompilers: hash
	hPostProcessors: hash
	}

export const isConfigHash = (h: any): h is configHash => {

	try {
		assert(defined(h), "hCompilerConfig not defined")
		assert(hasKeys(h, 'hCompilers', 'hPostProcessors'),
			"Missing key(s) in hCompilerConfig")
		const {hCompilers, hPostProcessors} = h

		assert(hasKeys(hCompilers, '.dot', '.cielo', '.civet'),
			"Missing key(s) in hCompilers")
		assert(hasKeys(hPostProcessors, 'testDir', 'libDir', 'binDir'),
			"Missing key(s) in hPostProcessors")
		for (const ext of keys(hCompilers)) {
			const h2 = hCompilers[ext]
			assert(hasKeys(h2, 'outExt', 'tester', 'compiler'),
				"Missing key(s) in hCompilers")
			const {outExt, tester, compiler} = h2

			pushLogLevel('silent')
			const works = tester()
			popLogLevel()

			if (!works) {
				DBG(`Deleting compiler for ext ${OL(ext)}`)
				delete hCompilers[ext]
			}
		}
		return true
	}
	catch (err: any) {
		console.error(`ERROR: ${err.message}`)
		return false
	}
}

// ---------------------------------------------------------------------------

export const checkConfigHash = (h: any): void => {

	if (isConfigHash(h)) {
		DBG("Config Hash OK")
	}
	else {
		DBG("Bad Config Hash")
	}
	return
}

// ---------------------------------------------------------------------------
// --- will eventually pre-process the .cielo code

const cielo2civet = (path: string, civetPath: string): void => {

	assert(isFile(path), `No such file: ${OL(path)} (cielo2civet)`)
	assert((fileExt(path) === '.cielo'), `Not a cielo file: ${OL(path)}`)
	execCmdSync('cp', [path, civetPath])
	assert(isFile(civetPath), `File not created: ${OL(civetPath)}`)
	return
}

// ---------------------------------------------------------------------------

const civet2ts = (path: string, tsPath: string): void => {

	assert(isFile(path), `No such file: ${OL(path)} (civet2js)`)
	assert((fileExt(path) === '.civet'), `Not a civet file: ${OL(path)}`)

	execCmdSync('civet', [
		'--inline-map',
		'-o',
		tsPath,
		'-c',
		path
		])

	assert(isFile(tsPath), `File not created: ${OL(tsPath)}`)
	return
}

// ---------------------------------------------------------------------------
// ASYNC

export const installDenoExe = async (stub: string): AutoPromise<void> => {

	await execCmd('deno', [
		'compile',
		'-A',
		'--no-check',
		`src/bin/${stub}.ts`
		])
	return
}

// ---------------------------------------------------------------------------

export const isStub = (str: string): boolean => {

	// --- a stub cannot contain any of '.', '\\', '/'
	return notdefined(str.match(/[\.\\\/]/))
}

// ---------------------------------------------------------------------------

export const isDirSpec = (dirspec: string): boolean => {

	return hasKey(hCompilerConfig.hPostProcessors, dirspec)
}

// ---------------------------------------------------------------------------
// --- Returns {path, dirspec}

export type foundSource = {
	path: string
	dirspec: string
	}

export const findSourceFile = (
	dirspec: string,
	stub: string,
	purpose: (string | undefined) = undef
	): (foundSource | undefined) => {

	assert(isStub(stub), `Bad stub: ${OL(stub)}`)
	if (notdefined(dirspec)) {
		// --- If dirspec is undef, we search all possible dirspecs
		//     but throw exception if it's found in more than one

		let foundPath: (string | undefined) = undef
		let dspec: (string | undefined) = undef

		for (const ds of keys(hCompilerConfig.hPostProcessors)) {
			const h = findSourceFile(ds, stub, purpose)
			if (notdefined(h)) {
				pass()
			}
			else {
				const {path, dirspec} = h
				if (notdefined(path) || notdefined(dirspec)) {
					pass()
				}
				else {
					assert(notdefined(foundPath),
							`Ambiguous: [${dirspec}, ${stub}]`)
					foundPath = path
					dspec = dirspec
				}
			}
		}
		if (notdefined(foundPath) || notdefined(dspec)) {
			return undef
		}
		else {
			return {
				path: foundPath,
				dirspec: dspec
				}
		}
	}
	else {
		assert(isDirSpec(dirspec), `Bad dirspec: ${OL(dirspec)}`)
		const dir = hCompilerConfig.hPostProcessors[dirspec].dir

		// --- Try every supported file extension
		for (const ext of keys(hCompilerConfig.hCompilers)) {
			const path = (
				defined(purpose)
					? mkpath(dir, `${stub}.${purpose}${ext}`)
					: mkpath(dir, `${stub}${ext}`)
				)
			if (isFile(path)) {
				return {path, dirspec}
			}
		}
		return undef
	}
}

// ---------------------------------------------------------------------------
// --- returns {path, relPath, dirspec, stub, purpose, ext}
//        returns undef if the file does not exist
//        dirspec and stub are undef if file exists, but
//           isn't in ./src/lib, ./src/bin or ./test folders

type fileSpec = string[]

export const isFileSpec = (x: any): x is fileSpec => {
	return Array.isArray(x) && (x.length === 2)
}

export type srcInfo = {
	path: string
	relPath: string
	dirspec: (string | undefined)  // will be undef if file exists, but not in a std dir
	stub: (string | undefined)
	purpose: (string | undefined)
	ext: (string | undefined)
	}

export const getSrcInfo = (src: string | fileSpec): (srcInfo | undefined) => {

	if (isString(src)) {
		if (isFile(src)) {
			const {stub, purpose, ext, relPath} = parsePath(src)
			const dirspec = (
				  relPath.startsWith('src/lib/')   ? 'libDir'
				: relPath.startsWith('./src/lib/') ? 'libDir'
				: relPath.startsWith('src/bin/')   ? 'binDir'
				: relPath.startsWith('./src/bin/') ? 'binDir'
				: relPath.startsWith('test/')      ? 'testDir'
				: relPath.startsWith('./test/')    ? 'testDir'
				:                                    undef)
			return {
				path: src,
				relPath,
				dirspec,
				stub: defined(dirspec) ? stub : undef,
				purpose,
				ext
				}
		}
		else {
			return undef
		}
	}
	else if ((src === undef) || (src === null)) {
		return undef
	}
	else {
		// -- NOTE: src can be [undef, <stub>, purpose],
		//          in which case there can be only one dirspec
		//          that results in an existing file

		const [dspec, stub, purpose] = src
		const h = findSourceFile(dspec, stub, purpose)
		if (h === undef) {
			return undef
		}
		const {path, dirspec} = h
		if (isFile(path)) {
			const {stub, purpose, ext, relPath} = parsePath(path)
			return {
				path,
				relPath,
				dirspec,
				stub,
				purpose,
				ext
				}
		}
		else {
			return undef
		}
	}
}

// ---------------------------------------------------------------------------
// --- returns [compiler, outExt]
//     or [undef, undef] if there is no compiler

export const getCompiler = (ext: string): any[] => {

	const h = hCompilerConfig.hCompilers[ext]
	if (notdefined(h)) {
		DBG(`Not compiling - no compiler for ${ext} files`)
		return [undef, undef]
	}

	assert(isHash(h), `hCompilers[${ext}] not a hash: ${OL(h)}`)
	const {outExt, compiler} = h
	assert(defined(compiler), `Missing compiler in config for ${OL(ext)}`)
	assert(defined(outExt), `Missing outExt in config for ${OL(ext)}`)
	return [compiler, outExt]
}

// ---------------------------------------------------------------------------
// --- src can be a full path or [dirspec, stub, purpose]
//        where dirspec can be 'lib', 'bin' or 'test'
//     throws error if file does not exist
//
//     Possible status values:
//        'temp'       - it was a temp file, not compiled
//        'nocompiler' - has no compiler, not compiled
//        'exists'     - newer compiled file already exists
//        'failed'     - compiling failed
//        'compiled'   - successfully compiled

type compileStatus = (
	  'nofile'
	| 'temp'
	| 'nocompiler'
	| 'exists'
	| 'failed'
	| 'compiled'
	)

export type compileResult = {
	status: compileStatus
	path: string
	relPath: (string | undefined)
	outPath: (string | undefined)
	}

export const compileFile = (
	src: string | fileSpec,
	): compileResult => {

	DBG(`COMPILE: ${OL(src)}`, INDENT)

	const hSrcInfo = getSrcInfo(src)
	if (hSrcInfo === undef) {
		throw new Error(`No such file: ${OL(src)}`)
	}
	const {dirspec, stub, path: orgPath, relPath, purpose, ext} = hSrcInfo
	const path = orgPath || ((typeof src === 'string') ? src : src.join('/'))
	if (notdefined(relPath)) {
		ERR(`No such file: ${OL(src)} (compileFile)`, UNDENT)
		return {
			status: 'nofile',
			path,
			relPath: undef,
			outPath: undef
			}
	}
	if (purpose === 'temp') {
		DBG(`Not compiling temp file ${OL(relPath)}`, UNDENT)
		return {
			status: 'temp',
			path,
			relPath,
			outPath: undef
			}
	}

	if (ext === undef) {
		DBG(`Not compiling - no file extension in ${relPath}`, UNDENT)
		return {
			status: 'nocompiler',
			path,
			relPath,
			outPath: undef
			}
	}

	const [compiler, outExt] = getCompiler(ext)
	if (notdefined(compiler)) {
		DBG(`Not compiling - no compiler for ${ext}`, UNDENT)
		return {
			status: 'nocompiler',
			path,
			relPath,
			outPath: undef
			}
	}

	const outPath = withExt(relPath, outExt)
	if (newerDestFileExists(relPath, outPath)) {
		DBG(`Not compiling, newer ${outPath} exists`, UNDENT)
		return {
			status: 'exists',
			path,
			relPath,
			outPath
			}
	}

	DBG("No newer dest file exists")
	if (isFile(outPath)) {
		DBG(`removing older ${outPath}`)
		rmFile(outPath)
	}

	DBG(`compiling ${OL(relPath)}`)
	compiler(relPath)     // produces file outPath, may throw

	if (isFile(outPath)) {
		// --- If first line is a file name with original extension,
		//     replace the file extension
		const contents = Deno.readTextFileSync(outPath)
		const lLines = contents.split("\n")
		lLines[0].replace(ext, outExt)
		Deno.writeTextFileSync(outPath, lLines.join("\n"))
	}
	else {
		ERR(`Output file ${relpath(outPath)} not produced`, UNDENT)
		return {
			status: 'failed',
			path,
			relPath,
			outPath
			}
	}

	// --- If there's a post-processor, run it
	if (notdefined(dirspec)) {
		// --- if no dirspec here, file is not in a standard directory
		//     so there can't be a post-processor
		pass()
	}
	else {
		const postProc = hCompilerConfig.hPostProcessors[dirspec].postProcessor
		if (notdefined(postProc)) {
			pass()
		}
		else {
			DBG("post-processing file")
			postProc(stub)
		}
	}

	DBG(UNDENT)
	return {
		status: 'compiled',
		path,
		relPath,
		outPath
		}
}

// ---------------------------------------------------------------------------
// --- NOTES:
//        1. compiler doesn't need to check if the file exists
//        2. compiler doesn't need to check the file extension

export const hDefaultConfig: configHash = {

	hCompilers: {
		// --- keys are file extensions
		//     NOTE: compilers must be synchronous!!!

		'.dot': {
			outExt: '.svg',
			tester: (): boolean => {
				return cmdSucceeds('dot', ['--version'], 'quiet')
			},
			compiler: (path: string): void => {
				const svgPath = withExt(path, '.svg')
				rmFile(svgPath)
				execCmdSync('dot', ['-Tsvg', path])
				return
			},
		},

		'.cielo': {
			outExt: '.ts',
			tester: (): boolean => {
				return true
			},
			compiler: (path: string): void => {
				const civetPath = withExt(path, '.temp.civet')
				rmFile(civetPath)
				cielo2civet(path, civetPath)
				civet2ts(civetPath, withExt(path, '.ts'))
				return
			},
		},

		'.civet': {
			outExt: '.ts',
			tester: (): boolean => {
				return cmdSucceeds('civet', ['--version'], 'quiet')
			},
			compiler: (path: string): void => {
				civet2ts(path, withExt(path, '.ts'))
				return
			}
		}

		},

	hPostProcessors: {
		// --- Keys are dirspecs

		testDir: {
			dir: 'test',    // --- no post processing
			postProcessor: (stub: string): void => {
				return
			},
		},

		libDir: {
			dir: 'src/lib',
			postProcessor: (stub: string): void => {
				const h = findSourceFile('testDir', stub, 'test')
				if (notdefined(h)) {
					return
				}
				const {path} = h
				if (notdefined(path)) {
					return
				}
				// --- will also run unit test if it exists
				const {status} = compileFile(path)
				DBG(`Compile of ${stub}: status = ${status}`)
				return
			},
		},

		binDir: {
			dir: 'src/bin',
			postProcessor: (stub: string): void => {
				LOG(`- installing command ${stub}`)
				installDenoExe(stub)
				return
			}
		}
		}
	}

// ---------------------------------------------------------------------------

// --- resolves '.' to current dir, not current file location
export const userConfigPath: string = mkpath('./compile.config.ts')
checkConfigHash(hDefaultConfig)

export let hCompilerConfig: configHash = hDefaultConfig
if (isFile(userConfigPath)) {
	DBG(`using user config path = ${userConfigPath}`)
	const module = await import(`file:///${userConfigPath}`)
	const hCompilerConfig = module.default as configHash
	checkConfigHash(hCompilerConfig)
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3JjL2xpYi9jb21waWxlLWNvbmZpZy5jaXZldC50c3giLCJzb3VyY2VzIjpbInNyYy9saWIvY29tcGlsZS1jb25maWcuY2l2ZXQiXSwibWFwcGluZ3MiOiI7QUFBQSx1QkFBc0I7QUFDdEIsQUFBQTtBQUNBLEssVyx5QjtBQUFBLE1BQU0sQ0FBQyxDQUFDO0FBQ1IsQ0FBQyxLQUFLLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxVQUFVLENBQUM7QUFDOUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxPQUFPLENBQUM7QUFDM0IsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLGdCQUFnQjtBQUN4QixBQUFBLEFBQUEsTUFBTSxDQUFDLENBQUM7QUFDUixDQUFDLEtBQUssQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLFVBQVUsQ0FBQztBQUM1RCxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsY0FBYztBQUN0QixBQUFBLEFBQUEsTUFBTSxDQUFDLENBQUM7QUFDUixDQUFDLE1BQU0sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLFNBQVMsQ0FBQztBQUNyRCxDQUFDLE9BQU8sQ0FBQyxDQUFDLG1CQUFtQixDQUFDO0FBQzlCLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxTQUFTO0FBQ2pCLEFBQUEsQUFBQSxNQUFNLENBQUMsQ0FBQztBQUNSLENBQUMsWUFBWSxDQUFDLENBQUMsV0FBVyxDQUFDO0FBQzNCLENBQUMsTUFBTSxDQUFDLENBQUMsTUFBTSxDQUFDO0FBQ2hCLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDO0FBQ3JC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RyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUEsQ0FBQTtBQUN6QixBQUFBLElBQUksTUFBTSxDQUFDLEk7R0FBSSxDQUFBLENBQUE7QUFDZixBQUFBLEdBQUcsUUFBUSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUEsQ0FBQTtBQUNwQyxBQUFBLElBQWEsTUFBVCxTQUFTLENBQUMsQ0FBRSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxhQUFhLENBQUM7QUFDN0MsQUFBQSxJQUFJLE1BQU0sQ0FBQSxBQUFDLFNBQVMsQ0FBQTtBQUNwQixBQUFBLElBQUksV0FBVyxDQUFBLEFBQUMsSUFBSSxDQUFDLENBQUMsU0FBUyxDQUFBO0FBQy9CLEFBQUEsSUFBSSxRQUFRLENBQUEsQUFBQyxTQUFTLENBQUMsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUE7QUFDNUMsQUFBQSxJQUFJLE07R0FBTSxDQUFBLEM7RUFBQSxDQUFBLENBQUE7QUFDVixBQUFBO0FBQ0EsQUFBQSxFQUFFLFFBQVEsQ0FBQyxDQUFBLENBQUE7QUFDWCxBQUFBLEdBQUcsTUFBTSxDQUFDLENBQUMsS0FBSyxDQUFBO0FBQ2hCLEFBQUEsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUEsQ0FBQTtBQUN6QixBQUFBLElBQUksTUFBTSxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsT0FBTyxDO0dBQUMsQ0FBQSxDQUFBO0FBQ3ZELEFBQUEsR0FBRyxRQUFRLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQSxDQUFBO0FBQ3BDLEFBQUEsSUFBSSxRQUFRLENBQUEsQUFBQyxJQUFJLENBQUMs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QUEsQUFBQyxjQUFjLENBQUEsQ0FBQSxDQUFBLENBQUE7QUFDeEIsQUFBQSxDQUFDLEdBQUcsQ0FBQSxBQUFDLENBQUMseUJBQXlCLEVBQUUsY0FBYyxDQUFDLENBQUMsQ0FBQTtBQUNqRCxBQUFBLENBQU8sTUFBTixNQUFNLENBQUMsQ0FBRSxDQUFDLEtBQUssQyxNQUFPLENBQUMsQ0FBQyxRQUFRLEVBQUUsY0FBYyxDQUFDLENBQUMsQ0FBQztBQUNwRCxBQUFBLENBQWdCLE1BQWYsZUFBZSxDQUFDLENBQUUsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxVQUFVO0FBQ2hELEFBQUEsQ0FBQyxlQUFlLENBQUEsQUFBQyxlQUFlLEM7QUFBQSxDQUFBO0FBQ2hDIiwibmFtZXMiOltdLCJzb3VyY2VzQ29udGVudCI6WyIjIGNvbXBpbGUtY29uZmlnLmNpdmV0XG5cbmltcG9ydCB7XG5cdHVuZGVmLCBkZWZpbmVkLCBub3RkZWZpbmVkLCBoYXNoLCBvcHRpb25zcGVjLFxuXHRpc1N0cmluZywgaXNIYXNoLCBpc0FycmF5LFxuXHR9IGZyb20gJy4vZGF0YXR5cGVzLnRzJ1xuaW1wb3J0IHtcblx0Y3JvYWssIGFzc2VydCwgcGFzcywga2V5cywgaGFzS2V5LCBoYXNLZXlzLCBPTCwgZ2V0T3B0aW9ucyxcblx0fSBmcm9tICcuL2xsdXRpbHMudHMnXG5pbXBvcnQge1xuXHRpc0ZpbGUsIGZpbGVFeHQsIHdpdGhFeHQsIHJtRmlsZSwgbWtwYXRoLCBwYXJzZVBhdGgsXG5cdHJlbHBhdGgsIG5ld2VyRGVzdEZpbGVFeGlzdHMsXG5cdH0gZnJvbSAnLi9mcy50cydcbmltcG9ydCB7XG5cdHB1c2hMb2dMZXZlbCwgcG9wTG9nTGV2ZWwsXG5cdElOREVOVCwgVU5ERU5ULFxuXHREQkcsIExPRywgV0FSTiwgRVJSLFxuXHR9IGZyb20gJy4vbG9nZ2VyLnRzJ1xuaW1wb3J0IHtcblx0ZXhlY0NtZCwgZXhlY0NtZFN5bmMsIGNtZFN1Y2NlZWRzLFxuXHR9IGZyb20gJy4vZXhlYy11dGlscy50cydcblxuLyoqXG4gKiBAbW9kdWxlIGNvbXBpbGUtY29uZmlnIC0gY29uZmlndXJpbmcgdGhlIGNvbXBpbGVyXG4gKi9cblxuIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuZXhwb3J0IHR5cGUgY29uZmlnSGFzaCA9IHtcblx0aENvbXBpbGVyczogaGFzaFxuXHRoUG9zdFByb2Nlc3NvcnM6IGhhc2hcblx0fVxuXG5leHBvcnQgaXNDb25maWdIYXNoIDo9IChoOiBhbnkpOiBoIGlzIGNvbmZpZ0hhc2ggPT5cblxuXHR0cnlcblx0XHRhc3NlcnQgZGVmaW5lZChoKSwgXCJoQ29tcGlsZXJDb25maWcgbm90IGRlZmluZWRcIlxuXHRcdGFzc2VydCBoYXNLZXlzKGgsICdoQ29tcGlsZXJzJywgJ2hQb3N0UHJvY2Vzc29ycycpLFxuXHRcdFx0XCJNaXNzaW5nIGtleShzKSBpbiBoQ29tcGlsZXJDb25maWdcIlxuXHRcdHtoQ29tcGlsZXJzLCBoUG9zdFByb2Nlc3NvcnN9IDo9IGhcblxuXHRcdGFzc2VydCBoYXNLZXlzKGhDb21waWxlcnMsICcuZG90JywgJy5jaWVsbycsICcuY2l2ZXQnKSxcblx0XHRcdFwiTWlzc2luZyBrZXkocykgaW4gaENvbXBpbGVyc1wiXG5cdFx0YXNzZXJ0IGhhc0tleXMoaFBvc3RQcm9jZXNzb3JzLCAndGVzdERpcicsICdsaWJEaXInLCAnYmluRGlyJyksXG5cdFx0XHRcIk1pc3Npbmcga2V5KHMpIGluIGhQb3N0UHJvY2Vzc29yc1wiXG5cdFx0Zm9yIGV4dCBvZiBrZXlzKGhDb21waWxlcnMpXG5cdFx0XHRoMiA6PSBoQ29tcGlsZXJzW2V4dF1cblx0XHRcdGFzc2VydCBoYXNLZXlzKGgyLCAnb3V0RXh0JywgJ3Rlc3RlcicsICdjb21waWxlcicpLFxuXHRcdFx0XHRcIk1pc3Npbmcga2V5KHMpIGluIGhDb21waWxlcnNcIlxuXHRcdFx0e291dEV4dCwgdGVzdGVyLCBjb21waWxlcn0gOj0gaDJcblxuXHRcdFx0cHVzaExvZ0xldmVsICdzaWxlbnQnXG5cdFx0XHR3b3JrcyA6PSB0ZXN0ZXIoKVxuXHRcdFx0cG9wTG9nTGV2ZWwoKVxuXG5cdFx0XHRpZiBub3Qgd29ya3Ncblx0XHRcdFx0REJHIFwiRGVsZXRpbmcgY29tcGlsZXIgZm9yIGV4dCAje09MKGV4dCl9XCJcblx0XHRcdFx0ZGVsZXRlIGhDb21waWxlcnNbZXh0XVxuXHRcdHJldHVybiB0cnVlXG5cdGNhdGNoIGVycjogYW55XG5cdFx0Y29uc29sZS5lcnJvciBcIkVSUk9SOiAje2Vyci5tZXNzYWdlfVwiXG5cdFx0cmV0dXJuIGZhbHNlXG5cbiMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbmV4cG9ydCBjaGVja0NvbmZpZ0hhc2ggOj0gKGg6IGFueSk6IHZvaWQgPT5cblxuXHRpZiBpc0NvbmZpZ0hhc2ggaFxuXHRcdERCRyBcIkNvbmZpZyBIYXNoIE9LXCJcblx0ZWxzZVxuXHRcdERCRyBcIkJhZCBDb25maWcgSGFzaFwiXG5cdHJldHVyblxuXG4jIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuIyAtLS0gd2lsbCBldmVudHVhbGx5IHByZS1wcm9jZXNzIHRoZSAuY2llbG8gY29kZVxuXG5jaWVsbzJjaXZldCA6PSAocGF0aDogc3RyaW5nLCBjaXZldFBhdGg6IHN0cmluZyk6IHZvaWQgPT5cblxuXHRhc3NlcnQgaXNGaWxlKHBhdGgpLCBcIk5vIHN1Y2ggZmlsZTogI3tPTChwYXRoKX0gKGNpZWxvMmNpdmV0KVwiXG5cdGFzc2VydCAoZmlsZUV4dChwYXRoKSA9PSAnLmNpZWxvJyksIFwiTm90IGEgY2llbG8gZmlsZTogI3tPTChwYXRoKX1cIlxuXHRleGVjQ21kU3luYyAnY3AnLCBbcGF0aCwgY2l2ZXRQYXRoXVxuXHRhc3NlcnQgaXNGaWxlKGNpdmV0UGF0aCksIFwiRmlsZSBub3QgY3JlYXRlZDogI3tPTChjaXZldFBhdGgpfVwiXG5cdHJldHVyblxuXG4jIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG5jaXZldDJ0cyA6PSAocGF0aDogc3RyaW5nLCB0c1BhdGg6IHN0cmluZyk6IHZvaWQgPT5cblxuXHRhc3NlcnQgaXNGaWxlKHBhdGgpLCBcIk5vIHN1Y2ggZmlsZTogI3tPTChwYXRoKX0gKGNpdmV0MmpzKVwiXG5cdGFzc2VydCAoZmlsZUV4dChwYXRoKSA9PSAnLmNpdmV0JyksIFwiTm90IGEgY2l2ZXQgZmlsZTogI3tPTChwYXRoKX1cIlxuXG5cdGV4ZWNDbWRTeW5jICdjaXZldCcsIFtcblx0XHQnLS1pbmxpbmUtbWFwJyxcblx0XHQnLW8nLFxuXHRcdHRzUGF0aCxcblx0XHQnLWMnLFxuXHRcdHBhdGhcblx0XHRdXG5cblx0YXNzZXJ0IGlzRmlsZSh0c1BhdGgpLCBcIkZpbGUgbm90IGNyZWF0ZWQ6ICN7T0wodHNQYXRoKX1cIlxuXHRyZXR1cm5cblxuIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiMgQVNZTkNcblxuZXhwb3J0IGluc3RhbGxEZW5vRXhlIDo9IChzdHViOiBzdHJpbmcpOiB2b2lkID0+XG5cblx0YXdhaXQgZXhlY0NtZCAnZGVubycsIFtcblx0XHQnY29tcGlsZSdcblx0XHQnLUEnXG5cdFx0Jy0tbm8tY2hlY2snXG5cdFx0XCJzcmMvYmluLyN7c3R1Yn0udHNcIlxuXHRcdF1cblx0cmV0dXJuXG5cbiMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbmV4cG9ydCBpc1N0dWIgOj0gKHN0cjogc3RyaW5nKTogYm9vbGVhbiA9PlxuXG5cdCMgLS0tIGEgc3R1YiBjYW5ub3QgY29udGFpbiBhbnkgb2YgJy4nLCAnXFxcXCcsICcvJ1xuXHRyZXR1cm4gbm90ZGVmaW5lZChzdHIubWF0Y2goL1tcXC5cXFxcXFwvXS8pKVxuXG4jIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG5leHBvcnQgaXNEaXJTcGVjIDo9IChkaXJzcGVjOiBzdHJpbmcpOiBib29sZWFuID0+XG5cblx0cmV0dXJuIGhhc0tleShoQ29tcGlsZXJDb25maWcuaFBvc3RQcm9jZXNzb3JzLCBkaXJzcGVjKVxuXG4jIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuIyAtLS0gUmV0dXJucyB7cGF0aCwgZGlyc3BlY31cblxuZXhwb3J0IHR5cGUgZm91bmRTb3VyY2UgPSB7XG5cdHBhdGg6IHN0cmluZ1xuXHRkaXJzcGVjOiBzdHJpbmdcblx0fVxuXG5leHBvcnQgZmluZFNvdXJjZUZpbGUgOj0gKFxuXHRkaXJzcGVjOiBzdHJpbmcsXG5cdHN0dWI6IHN0cmluZyxcblx0cHVycG9zZTogc3RyaW5nPyA9IHVuZGVmXG5cdCk6IGZvdW5kU291cmNlPyA9PlxuXG5cdGFzc2VydCBpc1N0dWIoc3R1YiksIFwiQmFkIHN0dWI6ICN7T0woc3R1Yil9XCJcblx0aWYgbm90ZGVmaW5lZChkaXJzcGVjKVxuXHRcdCMgLS0tIElmIGRpcnNwZWMgaXMgdW5kZWYsIHdlIHNlYXJjaCBhbGwgcG9zc2libGUgZGlyc3BlY3Ncblx0XHQjICAgICBidXQgdGhyb3cgZXhjZXB0aW9uIGlmIGl0J3MgZm91bmQgaW4gbW9yZSB0aGFuIG9uZVxuXG5cdFx0bGV0IGZvdW5kUGF0aDogc3RyaW5nPyA9IHVuZGVmXG5cdFx0bGV0IGRzcGVjOiBzdHJpbmc/ID0gdW5kZWZcblxuXHRcdGZvciBkcyBvZiBrZXlzKGhDb21waWxlckNvbmZpZy5oUG9zdFByb2Nlc3NvcnMpXG5cdFx0XHRoIDo9IGZpbmRTb3VyY2VGaWxlIGRzLCBzdHViLCBwdXJwb3NlXG5cdFx0XHRpZiBub3RkZWZpbmVkKGgpXG5cdFx0XHRcdHBhc3MoKVxuXHRcdFx0ZWxzZVxuXHRcdFx0XHR7cGF0aCwgZGlyc3BlY30gOj0gaFxuXHRcdFx0XHRpZiBub3RkZWZpbmVkKHBhdGgpIHx8IG5vdGRlZmluZWQoZGlyc3BlYylcblx0XHRcdFx0XHRwYXNzKClcblx0XHRcdFx0ZWxzZVxuXHRcdFx0XHRcdGFzc2VydCBub3RkZWZpbmVkKGZvdW5kUGF0aCksXG5cdFx0XHRcdFx0XHRcdFwiQW1iaWd1b3VzOiBbI3tkaXJzcGVjfSwgI3tzdHVifV1cIlxuXHRcdFx0XHRcdGZvdW5kUGF0aCA9IHBhdGhcblx0XHRcdFx0XHRkc3BlYyA9IGRpcnNwZWNcblx0XHRpZiBub3RkZWZpbmVkKGZvdW5kUGF0aCkgfHwgbm90ZGVmaW5lZChkc3BlYylcblx0XHRcdHJldHVybiB1bmRlZlxuXHRcdGVsc2Vcblx0XHRcdHJldHVybiB7XG5cdFx0XHRcdHBhdGg6IGZvdW5kUGF0aCxcblx0XHRcdFx0ZGlyc3BlYzogZHNwZWNcblx0XHRcdFx0fVxuXHRlbHNlXG5cdFx0YXNzZXJ0IGlzRGlyU3BlYyhkaXJzcGVjKSwgXCJCYWQgZGlyc3BlYzogI3tPTChkaXJzcGVjKX1cIlxuXHRcdGRpciA6PSBoQ29tcGlsZXJDb25maWcuaFBvc3RQcm9jZXNzb3JzW2RpcnNwZWNdLmRpclxuXG5cdFx0IyAtLS0gVHJ5IGV2ZXJ5IHN1cHBvcnRlZCBmaWxlIGV4dGVuc2lvblxuXHRcdGZvciBleHQgb2Yga2V5cyhoQ29tcGlsZXJDb25maWcuaENvbXBpbGVycylcblx0XHRcdHBhdGggOj0gKFxuXHRcdFx0XHRkZWZpbmVkKHB1cnBvc2UpXG5cdFx0XHRcdFx0PyBta3BhdGgoZGlyLCBcIiN7c3R1Yn0uI3twdXJwb3NlfSN7ZXh0fVwiKVxuXHRcdFx0XHRcdDogbWtwYXRoKGRpciwgXCIje3N0dWJ9I3tleHR9XCIpXG5cdFx0XHRcdClcblx0XHRcdGlmIGlzRmlsZSBwYXRoXG5cdFx0XHRcdHJldHVybiB7cGF0aCwgZGlyc3BlY31cblx0XHRyZXR1cm4gdW5kZWZcblxuIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiMgLS0tIHJldHVybnMge3BhdGgsIHJlbFBhdGgsIGRpcnNwZWMsIHN0dWIsIHB1cnBvc2UsIGV4dH1cbiMgICAgICAgIHJldHVybnMgdW5kZWYgaWYgdGhlIGZpbGUgZG9lcyBub3QgZXhpc3RcbiMgICAgICAgIGRpcnNwZWMgYW5kIHN0dWIgYXJlIHVuZGVmIGlmIGZpbGUgZXhpc3RzLCBidXRcbiMgICAgICAgICAgIGlzbid0IGluIC4vc3JjL2xpYiwgLi9zcmMvYmluIG9yIC4vdGVzdCBmb2xkZXJzXG5cbnR5cGUgZmlsZVNwZWMgPSBzdHJpbmdbXVxuXG5leHBvcnQgaXNGaWxlU3BlYyA6PSAoeDogYW55KTogeCBpcyBmaWxlU3BlYyA9PlxuXHRyZXR1cm4gQXJyYXkuaXNBcnJheSh4KSAmJiAoeC5sZW5ndGggPT0gMilcblxuZXhwb3J0IHR5cGUgc3JjSW5mbyA9IHtcblx0cGF0aDogc3RyaW5nXG5cdHJlbFBhdGg6IHN0cmluZ1xuXHRkaXJzcGVjOiBzdHJpbmc/ICAjIHdpbGwgYmUgdW5kZWYgaWYgZmlsZSBleGlzdHMsIGJ1dCBub3QgaW4gYSBzdGQgZGlyXG5cdHN0dWI6IHN0cmluZz9cblx0cHVycG9zZTogc3RyaW5nP1xuXHRleHQ6IHN0cmluZz9cblx0fVxuXG5leHBvcnQgZ2V0U3JjSW5mbyA6PSAoc3JjOiBzdHJpbmcgfCBmaWxlU3BlYyk6IHNyY0luZm8/ID0+XG5cblx0aWYgaXNTdHJpbmcgc3JjXG5cdFx0aWYgaXNGaWxlIHNyY1xuXHRcdFx0e3N0dWIsIHB1cnBvc2UsIGV4dCwgcmVsUGF0aH0gOj0gcGFyc2VQYXRoKHNyYylcblx0XHRcdGRpcnNwZWMgOj0gKFxuXHRcdFx0XHQgIHJlbFBhdGguc3RhcnRzV2l0aCgnc3JjL2xpYi8nKSAgID8gJ2xpYkRpcidcblx0XHRcdFx0OiByZWxQYXRoLnN0YXJ0c1dpdGgoJy4vc3JjL2xpYi8nKSA/ICdsaWJEaXInXG5cdFx0XHRcdDogcmVsUGF0aC5zdGFydHNXaXRoKCdzcmMvYmluLycpICAgPyAnYmluRGlyJ1xuXHRcdFx0XHQ6IHJlbFBhdGguc3RhcnRzV2l0aCgnLi9zcmMvYmluLycpID8gJ2JpbkRpcidcblx0XHRcdFx0OiByZWxQYXRoLnN0YXJ0c1dpdGgoJ3Rlc3QvJykgICAgICA/ICd0ZXN0RGlyJ1xuXHRcdFx0XHQ6IHJlbFBhdGguc3RhcnRzV2l0aCgnLi90ZXN0LycpICAgID8gJ3Rlc3REaXInXG5cdFx0XHRcdDogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1bmRlZilcblx0XHRcdHJldHVybiB7XG5cdFx0XHRcdHBhdGg6IHNyY1xuXHRcdFx0XHRyZWxQYXRoXG5cdFx0XHRcdGRpcnNwZWNcblx0XHRcdFx0c3R1YjogZGVmaW5lZChkaXJzcGVjKSA/IHN0dWIgOiB1bmRlZlxuXHRcdFx0XHRwdXJwb3NlXG5cdFx0XHRcdGV4dFxuXHRcdFx0XHR9XG5cdFx0ZWxzZVxuXHRcdFx0cmV0dXJuIHVuZGVmXG5cdGVsc2UgaWYgKHNyYyA9PSB1bmRlZikgfHwgKHNyYyA9PSBudWxsKVxuXHRcdHJldHVybiB1bmRlZlxuXHRlbHNlXG5cdFx0IyAtLSBOT1RFOiBzcmMgY2FuIGJlIFt1bmRlZiwgPHN0dWI+LCBwdXJwb3NlXSxcblx0XHQjICAgICAgICAgIGluIHdoaWNoIGNhc2UgdGhlcmUgY2FuIGJlIG9ubHkgb25lIGRpcnNwZWNcblx0XHQjICAgICAgICAgIHRoYXQgcmVzdWx0cyBpbiBhbiBleGlzdGluZyBmaWxlXG5cblx0XHRbZHNwZWMsIHN0dWIsIHB1cnBvc2VdIDo9IHNyY1xuXHRcdGggOj0gZmluZFNvdXJjZUZpbGUgZHNwZWMsIHN0dWIsIHB1cnBvc2Vcblx0XHRpZiAoaCA9PSB1bmRlZilcblx0XHRcdHJldHVybiB1bmRlZlxuXHRcdHtwYXRoLCBkaXJzcGVjfSA6PSBoXG5cdFx0aWYgaXNGaWxlIHBhdGhcblx0XHRcdHtzdHViLCBwdXJwb3NlLCBleHQsIHJlbFBhdGh9IDo9IHBhcnNlUGF0aChwYXRoKVxuXHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0cGF0aFxuXHRcdFx0XHRyZWxQYXRoXG5cdFx0XHRcdGRpcnNwZWNcblx0XHRcdFx0c3R1YlxuXHRcdFx0XHRwdXJwb3NlXG5cdFx0XHRcdGV4dFxuXHRcdFx0XHR9XG5cdFx0ZWxzZVxuXHRcdFx0cmV0dXJuIHVuZGVmXG5cbiMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4jIC0tLSByZXR1cm5zIFtjb21waWxlciwgb3V0RXh0XVxuIyAgICAgb3IgW3VuZGVmLCB1bmRlZl0gaWYgdGhlcmUgaXMgbm8gY29tcGlsZXJcblxuZXhwb3J0IGdldENvbXBpbGVyIDo9IChleHQ6IHN0cmluZyk6IGFueVtdID0+XG5cblx0aCA6PSBoQ29tcGlsZXJDb25maWcuaENvbXBpbGVyc1tleHRdXG5cdGlmIG5vdGRlZmluZWQoaClcblx0XHREQkcgXCJOb3QgY29tcGlsaW5nIC0gbm8gY29tcGlsZXIgZm9yICN7ZXh0fSBmaWxlc1wiXG5cdFx0cmV0dXJuIFt1bmRlZiwgdW5kZWZdXG5cblx0YXNzZXJ0IGlzSGFzaChoKSwgXCJoQ29tcGlsZXJzWyN7ZXh0fV0gbm90IGEgaGFzaDogI3tPTChoKX1cIlxuXHR7b3V0RXh0LCBjb21waWxlcn0gOj0gaFxuXHRhc3NlcnQgZGVmaW5lZChjb21waWxlciksIFwiTWlzc2luZyBjb21waWxlciBpbiBjb25maWcgZm9yICN7T0woZXh0KX1cIlxuXHRhc3NlcnQgZGVmaW5lZChvdXRFeHQpLCBcIk1pc3Npbmcgb3V0RXh0IGluIGNvbmZpZyBmb3IgI3tPTChleHQpfVwiXG5cdHJldHVybiBbY29tcGlsZXIsIG91dEV4dF1cblxuIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiMgLS0tIHNyYyBjYW4gYmUgYSBmdWxsIHBhdGggb3IgW2RpcnNwZWMsIHN0dWIsIHB1cnBvc2VdXG4jICAgICAgICB3aGVyZSBkaXJzcGVjIGNhbiBiZSAnbGliJywgJ2Jpbicgb3IgJ3Rlc3QnXG4jICAgICB0aHJvd3MgZXJyb3IgaWYgZmlsZSBkb2VzIG5vdCBleGlzdFxuI1xuIyAgICAgUG9zc2libGUgc3RhdHVzIHZhbHVlczpcbiMgICAgICAgICd0ZW1wJyAgICAgICAtIGl0IHdhcyBhIHRlbXAgZmlsZSwgbm90IGNvbXBpbGVkXG4jICAgICAgICAnbm9jb21waWxlcicgLSBoYXMgbm8gY29tcGlsZXIsIG5vdCBjb21waWxlZFxuIyAgICAgICAgJ2V4aXN0cycgICAgIC0gbmV3ZXIgY29tcGlsZWQgZmlsZSBhbHJlYWR5IGV4aXN0c1xuIyAgICAgICAgJ2ZhaWxlZCcgICAgIC0gY29tcGlsaW5nIGZhaWxlZFxuIyAgICAgICAgJ2NvbXBpbGVkJyAgIC0gc3VjY2Vzc2Z1bGx5IGNvbXBpbGVkXG5cbnR5cGUgY29tcGlsZVN0YXR1cyA9IChcblx0ICAnbm9maWxlJ1xuXHR8ICd0ZW1wJ1xuXHR8ICdub2NvbXBpbGVyJ1xuXHR8ICdleGlzdHMnXG5cdHwgJ2ZhaWxlZCdcblx0fCAnY29tcGlsZWQnXG5cdClcblxuZXhwb3J0IHR5cGUgY29tcGlsZVJlc3VsdCA9IHtcblx0c3RhdHVzOiBjb21waWxlU3RhdHVzXG5cdHBhdGg6IHN0cmluZ1xuXHRyZWxQYXRoOiBzdHJpbmc/XG5cdG91dFBhdGg6IHN0cmluZz9cblx0fVxuXG5leHBvcnQgY29tcGlsZUZpbGUgOj0gKFxuXHRzcmM6IHN0cmluZyB8IGZpbGVTcGVjLFxuXHQpOiBjb21waWxlUmVzdWx0ID0+XG5cblx0REJHIFwiQ09NUElMRTogI3tPTChzcmMpfVwiLCBJTkRFTlRcblxuXHRoU3JjSW5mbyA6PSBnZXRTcmNJbmZvIHNyY1xuXHRpZiAoaFNyY0luZm8gPT0gdW5kZWYpXG5cdFx0dGhyb3cgbmV3IEVycm9yIFwiTm8gc3VjaCBmaWxlOiAje09MKHNyYyl9XCJcblx0e2RpcnNwZWMsIHN0dWIsIHBhdGg6IG9yZ1BhdGgsIHJlbFBhdGgsIHB1cnBvc2UsIGV4dH0gOj0gaFNyY0luZm9cblx0cGF0aCA6PSBvcmdQYXRoIHx8ICgodHlwZW9mIHNyYyA9PSAnc3RyaW5nJykgPyBzcmMgOiBzcmMuam9pbignLycpKVxuXHRpZiBub3RkZWZpbmVkKHJlbFBhdGgpXG5cdFx0RVJSIFwiTm8gc3VjaCBmaWxlOiAje09MKHNyYyl9IChjb21waWxlRmlsZSlcIiwgVU5ERU5UXG5cdFx0cmV0dXJuIHtcblx0XHRcdHN0YXR1czogJ25vZmlsZSdcblx0XHRcdHBhdGhcblx0XHRcdHJlbFBhdGg6IHVuZGVmXG5cdFx0XHRvdXRQYXRoOiB1bmRlZlxuXHRcdFx0fVxuXHRpZiAocHVycG9zZSA9PSAndGVtcCcpXG5cdFx0REJHIFwiTm90IGNvbXBpbGluZyB0ZW1wIGZpbGUgI3tPTChyZWxQYXRoKX1cIiwgVU5ERU5UXG5cdFx0cmV0dXJuIHtcblx0XHRcdHN0YXR1czogJ3RlbXAnXG5cdFx0XHRwYXRoXG5cdFx0XHRyZWxQYXRoXG5cdFx0XHRvdXRQYXRoOiB1bmRlZlxuXHRcdFx0fVxuXG5cdGlmIChleHQgPT0gdW5kZWYpXG5cdFx0REJHIFwiTm90IGNvbXBpbGluZyAtIG5vIGZpbGUgZXh0ZW5zaW9uIGluICN7cmVsUGF0aH1cIiwgVU5ERU5UXG5cdFx0cmV0dXJuIHtcblx0XHRcdHN0YXR1czogJ25vY29tcGlsZXInXG5cdFx0XHRwYXRoXG5cdFx0XHRyZWxQYXRoXG5cdFx0XHRvdXRQYXRoOiB1bmRlZlxuXHRcdFx0fVxuXG5cdFtjb21waWxlciwgb3V0RXh0XSA6PSBnZXRDb21waWxlcihleHQpXG5cdGlmIG5vdGRlZmluZWQoY29tcGlsZXIpXG5cdFx0REJHIFwiTm90IGNvbXBpbGluZyAtIG5vIGNvbXBpbGVyIGZvciAje2V4dH1cIiwgVU5ERU5UXG5cdFx0cmV0dXJuIHtcblx0XHRcdHN0YXR1czogJ25vY29tcGlsZXInXG5cdFx0XHRwYXRoXG5cdFx0XHRyZWxQYXRoXG5cdFx0XHRvdXRQYXRoOiB1bmRlZlxuXHRcdFx0fVxuXG5cdG91dFBhdGggOj0gd2l0aEV4dChyZWxQYXRoLCBvdXRFeHQpXG5cdGlmIG5ld2VyRGVzdEZpbGVFeGlzdHMocmVsUGF0aCwgb3V0UGF0aClcblx0XHREQkcgXCJOb3QgY29tcGlsaW5nLCBuZXdlciAje291dFBhdGh9IGV4aXN0c1wiLCBVTkRFTlRcblx0XHRyZXR1cm4ge1xuXHRcdFx0c3RhdHVzOiAnZXhpc3RzJ1xuXHRcdFx0cGF0aFxuXHRcdFx0cmVsUGF0aFxuXHRcdFx0b3V0UGF0aFxuXHRcdFx0fVxuXG5cdERCRyBcIk5vIG5ld2VyIGRlc3QgZmlsZSBleGlzdHNcIlxuXHRpZiBpc0ZpbGUob3V0UGF0aClcblx0XHREQkcgXCJyZW1vdmluZyBvbGRlciAje291dFBhdGh9XCJcblx0XHRybUZpbGUgb3V0UGF0aFxuXG5cdERCRyBcImNvbXBpbGluZyAje09MKHJlbFBhdGgpfVwiXG5cdGNvbXBpbGVyIHJlbFBhdGggICAgICMgcHJvZHVjZXMgZmlsZSBvdXRQYXRoLCBtYXkgdGhyb3dcblxuXHRpZiBpc0ZpbGUob3V0UGF0aClcblx0XHQjIC0tLSBJZiBmaXJzdCBsaW5lIGlzIGEgZmlsZSBuYW1lIHdpdGggb3JpZ2luYWwgZXh0ZW5zaW9uLFxuXHRcdCMgICAgIHJlcGxhY2UgdGhlIGZpbGUgZXh0ZW5zaW9uXG5cdFx0Y29udGVudHMgOj0gRGVuby5yZWFkVGV4dEZpbGVTeW5jIG91dFBhdGhcblx0XHRsTGluZXMgOj0gY29udGVudHMuc3BsaXQgXCJcXG5cIlxuXHRcdGxMaW5lc1swXS5yZXBsYWNlIGV4dCwgb3V0RXh0XG5cdFx0RGVuby53cml0ZVRleHRGaWxlU3luYyBvdXRQYXRoLCBsTGluZXMuam9pbihcIlxcblwiKVxuXHRlbHNlXG5cdFx0RVJSIFwiT3V0cHV0IGZpbGUgI3tyZWxwYXRoKG91dFBhdGgpfSBub3QgcHJvZHVjZWRcIiwgVU5ERU5UXG5cdFx0cmV0dXJuIHtcblx0XHRcdHN0YXR1czogJ2ZhaWxlZCdcblx0XHRcdHBhdGhcblx0XHRcdHJlbFBhdGhcblx0XHRcdG91dFBhdGhcblx0XHRcdH1cblxuXHQjIC0tLSBJZiB0aGVyZSdzIGEgcG9zdC1wcm9jZXNzb3IsIHJ1biBpdFxuXHRpZiBub3RkZWZpbmVkKGRpcnNwZWMpXG5cdFx0IyAtLS0gaWYgbm8gZGlyc3BlYyBoZXJlLCBmaWxlIGlzIG5vdCBpbiBhIHN0YW5kYXJkIGRpcmVjdG9yeVxuXHRcdCMgICAgIHNvIHRoZXJlIGNhbid0IGJlIGEgcG9zdC1wcm9jZXNzb3Jcblx0XHRwYXNzKClcblx0ZWxzZVxuXHRcdHBvc3RQcm9jIDo9IGhDb21waWxlckNvbmZpZy5oUG9zdFByb2Nlc3NvcnNbZGlyc3BlY10ucG9zdFByb2Nlc3NvclxuXHRcdGlmIG5vdGRlZmluZWQocG9zdFByb2MpXG5cdFx0XHRwYXNzKClcblx0XHRlbHNlXG5cdFx0XHREQkcgXCJwb3N0LXByb2Nlc3NpbmcgZmlsZVwiXG5cdFx0XHRwb3N0UHJvYyBzdHViXG5cblx0REJHIFVOREVOVFxuXHRyZXR1cm4ge1xuXHRcdHN0YXR1czogJ2NvbXBpbGVkJ1xuXHRcdHBhdGhcblx0XHRyZWxQYXRoXG5cdFx0b3V0UGF0aFxuXHRcdH1cblxuIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiMgLS0tIE5PVEVTOlxuIyAgICAgICAgMS4gY29tcGlsZXIgZG9lc24ndCBuZWVkIHRvIGNoZWNrIGlmIHRoZSBmaWxlIGV4aXN0c1xuIyAgICAgICAgMi4gY29tcGlsZXIgZG9lc24ndCBuZWVkIHRvIGNoZWNrIHRoZSBmaWxlIGV4dGVuc2lvblxuXG5leHBvcnQgaERlZmF1bHRDb25maWc6IGNvbmZpZ0hhc2ggOj0ge1xuXG5cdGhDb21waWxlcnM6IHtcblx0XHQjIC0tLSBrZXlzIGFyZSBmaWxlIGV4dGVuc2lvbnNcblx0XHQjICAgICBOT1RFOiBjb21waWxlcnMgbXVzdCBiZSBzeW5jaHJvbm91cyEhIVxuXG5cdFx0Jy5kb3QnOlxuXHRcdFx0b3V0RXh0OiAnLnN2Zydcblx0XHRcdHRlc3RlcjogKCk6IGJvb2xlYW4gPT5cblx0XHRcdFx0cmV0dXJuIGNtZFN1Y2NlZWRzKCdkb3QnLCBbJy0tdmVyc2lvbiddLCAncXVpZXQnKVxuXHRcdFx0Y29tcGlsZXI6IChwYXRoOiBzdHJpbmcpOiB2b2lkID0+XG5cdFx0XHRcdHN2Z1BhdGggOj0gd2l0aEV4dChwYXRoLCAnLnN2ZycpXG5cdFx0XHRcdHJtRmlsZSBzdmdQYXRoXG5cdFx0XHRcdGV4ZWNDbWRTeW5jICdkb3QnLCBbJy1Uc3ZnJywgcGF0aF1cblx0XHRcdFx0cmV0dXJuXG5cblx0XHQnLmNpZWxvJzpcblx0XHRcdG91dEV4dDogJy50cydcblx0XHRcdHRlc3RlcjogKCk6IGJvb2xlYW4gPT5cblx0XHRcdFx0cmV0dXJuIHRydWVcblx0XHRcdGNvbXBpbGVyOiAocGF0aDogc3RyaW5nKTogdm9pZCA9PlxuXHRcdFx0XHRjaXZldFBhdGggOj0gd2l0aEV4dChwYXRoLCAnLnRlbXAuY2l2ZXQnKVxuXHRcdFx0XHRybUZpbGUgY2l2ZXRQYXRoXG5cdFx0XHRcdGNpZWxvMmNpdmV0IHBhdGgsIGNpdmV0UGF0aFxuXHRcdFx0XHRjaXZldDJ0cyBjaXZldFBhdGgsIHdpdGhFeHQocGF0aCwgJy50cycpXG5cdFx0XHRcdHJldHVyblxuXG5cdFx0Jy5jaXZldCc6XG5cdFx0XHRvdXRFeHQ6ICcudHMnXG5cdFx0XHR0ZXN0ZXI6ICgpOiBib29sZWFuID0+XG5cdFx0XHRcdHJldHVybiBjbWRTdWNjZWVkcygnY2l2ZXQnLCBbJy0tdmVyc2lvbiddLCAncXVpZXQnKVxuXHRcdFx0Y29tcGlsZXI6IChwYXRoOiBzdHJpbmcpOiB2b2lkID0+XG5cdFx0XHRcdGNpdmV0MnRzIHBhdGgsIHdpdGhFeHQocGF0aCwgJy50cycpXG5cdFx0XHRcdHJldHVyblxuXG5cdFx0fVxuXG5cdGhQb3N0UHJvY2Vzc29yczoge1xuXHRcdCMgLS0tIEtleXMgYXJlIGRpcnNwZWNzXG5cblx0XHR0ZXN0RGlyOlxuXHRcdFx0ZGlyOiAndGVzdCcgICAgIyAtLS0gbm8gcG9zdCBwcm9jZXNzaW5nXG5cdFx0XHRwb3N0UHJvY2Vzc29yOiAoc3R1Yjogc3RyaW5nKTogdm9pZCA9PlxuXHRcdFx0XHRyZXR1cm5cblxuXHRcdGxpYkRpcjpcblx0XHRcdGRpcjogJ3NyYy9saWInXG5cdFx0XHRwb3N0UHJvY2Vzc29yOiAoc3R1Yjogc3RyaW5nKTogdm9pZCA9PlxuXHRcdFx0XHRoIDo9IGZpbmRTb3VyY2VGaWxlKCd0ZXN0RGlyJywgc3R1YiwgJ3Rlc3QnKVxuXHRcdFx0XHRpZiBub3RkZWZpbmVkKGgpXG5cdFx0XHRcdFx0cmV0dXJuXG5cdFx0XHRcdHtwYXRofSA6PSBoXG5cdFx0XHRcdGlmIG5vdGRlZmluZWQocGF0aClcblx0XHRcdFx0XHRyZXR1cm5cblx0XHRcdFx0IyAtLS0gd2lsbCBhbHNvIHJ1biB1bml0IHRlc3QgaWYgaXQgZXhpc3RzXG5cdFx0XHRcdHtzdGF0dXN9IDo9IGNvbXBpbGVGaWxlKHBhdGgpXG5cdFx0XHRcdERCRyBcIkNvbXBpbGUgb2YgI3tzdHVifTogc3RhdHVzID0gI3tzdGF0dXN9XCJcblx0XHRcdFx0cmV0dXJuXG5cblx0XHRiaW5EaXI6XG5cdFx0XHRkaXI6ICdzcmMvYmluJ1xuXHRcdFx0cG9zdFByb2Nlc3NvcjogKHN0dWI6IHN0cmluZyk6IHZvaWQgPT5cblx0XHRcdFx0TE9HIFwiLSBpbnN0YWxsaW5nIGNvbW1hbmQgI3tzdHVifVwiXG5cdFx0XHRcdGluc3RhbGxEZW5vRXhlIHN0dWJcblx0XHRcdFx0cmV0dXJuXG5cdFx0fVxuXHR9XG5cbiMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiMgLS0tIHJlc29sdmVzICcuJyB0byBjdXJyZW50IGRpciwgbm90IGN1cnJlbnQgZmlsZSBsb2NhdGlvblxuZXhwb3J0IHVzZXJDb25maWdQYXRoOiBzdHJpbmcgOj0gbWtwYXRoKCcuL2NvbXBpbGUuY29uZmlnLnRzJylcbmNoZWNrQ29uZmlnSGFzaCBoRGVmYXVsdENvbmZpZ1xuXG5leHBvcnQgbGV0IGhDb21waWxlckNvbmZpZzogY29uZmlnSGFzaCA9IGhEZWZhdWx0Q29uZmlnXG5pZiBpc0ZpbGUgdXNlckNvbmZpZ1BhdGhcblx0REJHIFwidXNpbmcgdXNlciBjb25maWcgcGF0aCA9ICN7dXNlckNvbmZpZ1BhdGh9XCJcblx0bW9kdWxlIDo9IGF3YWl0IGltcG9ydChcImZpbGU6Ly8vI3t1c2VyQ29uZmlnUGF0aH1cIilcblx0aENvbXBpbGVyQ29uZmlnIDo9IG1vZHVsZS5kZWZhdWx0IGFzIGNvbmZpZ0hhc2hcblx0Y2hlY2tDb25maWdIYXNoIGhDb21waWxlckNvbmZpZ1xuIl19