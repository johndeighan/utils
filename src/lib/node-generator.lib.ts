"use strict";
// node-generator.lib.civet

import {
	integer, isNonPrimitive,
	} from './datatypes.lib.ts'

// ---------------------------------------------------------------------------
// GENERATOR

export type TNodeInfo = {
	node: any
	level: integer
	}

export class NodeGenerator {

	// --- data fields
	setYielded = new WeakSet<any>()

	filter(x: any): boolean {

		return isNonPrimitive(x)
	}

	*allNodes(
			obj: any,
			objLevel: integer = 0
			): Generator<TNodeInfo, void, void> {

		if (objLevel === 0) {
			this.setYielded = new WeakSet<any>()
		}
		if (this.setYielded.has(obj)) {
			return
		}
		if (this.filter(obj)) {
			yield {
				node: obj,
				level: objLevel
				}
			this.setYielded.add(obj)
		}
		if (Array.isArray(obj)) {
			for (const item of obj) {
				for (const {node, level} of this.allNodes(item, objLevel+1)) {
					yield {node, level}
					this.setYielded.add(node)
				}
			}
		}
		else if (isNonPrimitive(obj)) {
			for (const key of Object.keys(obj)) {
				const value = obj[key]
				for (const {node, level} of this.allNodes(value, objLevel+1)) {
					yield {node, level}
					this.setYielded.add(node)
				}
			}
		}
		return
	}
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3JjL2xpYi9ub2RlLWdlbmVyYXRvci5saWIuY2l2ZXQudHN4Iiwic291cmNlcyI6WyJzcmMvbGliL25vZGUtZ2VuZXJhdG9yLmxpYi5jaXZldCJdLCJtYXBwaW5ncyI6IjtBQUFBLDJCQUEwQjtBQUMxQixBQUFBO0FBQ0EsQUFBQSxNQUFNLENBQUMsQ0FBQztBQUNSLENBQUMsT0FBTyxDQUFDLENBQUMsY0FBYyxDQUFDO0FBQ3pCLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxvQkFBb0I7QUFDNUIsQUFBQTtBQUNBLEFBQUEsOEVBQTZFO0FBQzdFLEFBQUEsWUFBVztBQUNYLEFBQUE7QUFDQSxBQUFBLEFBQUEsTUFBTSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDekIsQUFBQSxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUc7QUFDVixBQUFBLENBQUMsS0FBSyxDQUFDLENBQUMsT0FBTztBQUNmLENBQUMsQ0FBQztBQUNGLEFBQUE7QUFDQSxBQUFBLEFBQUEsTUFBTSxDQUFDLEtBQUssQ0FBQyxhQUFhLENBQUEsQ0FBQTtBQUMxQixBQUFBO0FBQ0EsQUFBQSxDQUFDLGtCQUFpQjtBQUNsQixBQUFBLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7QUFDaEMsQUFBQTtBQUNBLEFBQUEsQyxNQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUEsQ0FBQTtBQUN4QixBQUFBO0FBQ0EsQUFBQSxFQUFFLE1BQU0sQ0FBQyxjQUFjLENBQUMsQ0FBQyxDO0NBQUMsQ0FBQTtBQUMxQixBQUFBO0FBQ0EsQUFBQSxDLEMsUUFBUyxDQUFDO0FBQ1YsQUFBQSxHQUFHLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQTtBQUNYLEFBQUEsR0FBRyxRQUFRLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDeEIsR0FBRyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUEsQ0FBQTtBQUN0QyxBQUFBO0FBQ0EsQUFBQSxFQUFFLEdBQUcsQ0FBQyxRQUFRLENBQUMsR0FBRSxDQUFDLENBQUMsQ0FBQyxDQUFBLENBQUE7QUFDcEIsQUFBQSxHQUFHLEksQ0FBQyxVQUFVLEMsQ0FBRSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsQztFQUFDLENBQUE7QUFDbkMsQUFBQSxFQUFFLEdBQUcsQ0FBQSxJLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQSxDQUFBLENBQUE7QUFDekIsQUFBQSxHQUFHLE07RUFBTSxDQUFBO0FBQ1QsQUFBQSxFQUFFLEdBQUcsQ0FBQSxJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFBLENBQUEsQ0FBQTtBQUNqQixBQUFBLEdBQUcsS0FBSyxDQUFDLENBQUM7QUFDVixBQUFBLElBQUksSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDO0FBQ2QsQUFBQSxJQUFJLEtBQUssQ0FBQyxDQUFDLFFBQVE7QUFDbkIsSUFBSSxDQUFDO0FBQ0wsQUFBQSxHQUFHLEksQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFBLEFBQUMsR0FBRyxDO0VBQUEsQ0FBQTtBQUN0QixBQUFBLEVBQUUsR0FBRyxDQUFBLEtBQUssQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUEsQ0FBQSxDQUFBO0FBQ3ZCLEFBQUEsR0FBRyxHQUFHLENBQUMsQ0FBQSxNQUFBLElBQUksQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFBLENBQUEsQ0FBQTtBQUNsQixBQUFBLElBQUksR0FBRyxDQUFDLENBQUEsTUFBQSxDQUFDLElBQUksQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQSxDQUFBLENBQUE7QUFDcEQsQUFBQSxLQUFLLEtBQUssQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLEtBQUssQ0FBQztBQUN4QixBQUFBLEtBQUssSSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUEsQUFBQyxJQUFJLEM7SUFBQSxDO0dBQUEsQztFQUFBLENBQUE7QUFDekIsQUFBQSxFQUFFLElBQUksQ0FBQyxHQUFHLENBQUEsY0FBYyxDQUFDLEdBQUcsQ0FBQyxDQUFBLENBQUEsQ0FBQTtBQUM3QixBQUFBLEdBQUcsR0FBRyxDQUFDLENBQUEsTUFBQSxHQUFHLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUEsQ0FBQSxDQUFBO0FBQzlCLEFBQUEsSUFBUyxNQUFMLEtBQUssQ0FBQyxDQUFFLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQztBQUNyQixBQUFBLElBQUksR0FBRyxDQUFDLENBQUEsTUFBQSxDQUFDLElBQUksQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxJLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQSxDQUFBLENBQUE7QUFDckQsQUFBQSxLQUFLLEtBQUssQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLEtBQUssQ0FBQztBQUN4QixBQUFBLEtBQUssSSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUEsQUFBQyxJQUFJLEM7SUFBQSxDO0dBQUEsQztFQUFBLENBQUE7QUFDekIsQUFBQSxFQUFFLE07Q0FBTSxDO0FBQUEsQ0FBQTtBQUNSIiwibmFtZXMiOltdLCJzb3VyY2VzQ29udGVudCI6WyIjIG5vZGUtZ2VuZXJhdG9yLmxpYi5jaXZldFxuXG5pbXBvcnQge1xuXHRpbnRlZ2VyLCBpc05vblByaW1pdGl2ZSxcblx0fSBmcm9tICcuL2RhdGF0eXBlcy5saWIudHMnXG5cbiMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4jIEdFTkVSQVRPUlxuXG5leHBvcnQgdHlwZSBUTm9kZUluZm8gPSB7XG5cdG5vZGU6IGFueVxuXHRsZXZlbDogaW50ZWdlclxuXHR9XG5cbmV4cG9ydCBjbGFzcyBOb2RlR2VuZXJhdG9yXG5cblx0IyAtLS0gZGF0YSBmaWVsZHNcblx0c2V0WWllbGRlZCA9IG5ldyBXZWFrU2V0PGFueT4oKVxuXG5cdGZpbHRlcih4OiBhbnkpOiBib29sZWFuXG5cblx0XHRyZXR1cm4gaXNOb25QcmltaXRpdmUoeClcblxuXHRhbGxOb2Rlcyhcblx0XHRcdG9iajogYW55XG5cdFx0XHRvYmpMZXZlbDogaW50ZWdlciA9IDBcblx0XHRcdCk6IEdlbmVyYXRvcjxUTm9kZUluZm8sIHZvaWQsIHZvaWQ+XG5cblx0XHRpZiAob2JqTGV2ZWwgPT0gMClcblx0XHRcdEBzZXRZaWVsZGVkID0gbmV3IFdlYWtTZXQ8YW55PigpXG5cdFx0aWYgQHNldFlpZWxkZWQuaGFzKG9iailcblx0XHRcdHJldHVyblxuXHRcdGlmIEBmaWx0ZXIob2JqKVxuXHRcdFx0eWllbGQge1xuXHRcdFx0XHRub2RlOiBvYmosXG5cdFx0XHRcdGxldmVsOiBvYmpMZXZlbFxuXHRcdFx0XHR9XG5cdFx0XHRAc2V0WWllbGRlZC5hZGQgb2JqXG5cdFx0aWYgQXJyYXkuaXNBcnJheShvYmopXG5cdFx0XHRmb3IgaXRlbSBvZiBvYmpcblx0XHRcdFx0Zm9yIHtub2RlLCBsZXZlbH0gb2YgQGFsbE5vZGVzKGl0ZW0sIG9iakxldmVsKzEpXG5cdFx0XHRcdFx0eWllbGQge25vZGUsIGxldmVsfVxuXHRcdFx0XHRcdEBzZXRZaWVsZGVkLmFkZCBub2RlXG5cdFx0ZWxzZSBpZiBpc05vblByaW1pdGl2ZShvYmopXG5cdFx0XHRmb3Iga2V5IG9mIE9iamVjdC5rZXlzKG9iailcblx0XHRcdFx0dmFsdWUgOj0gb2JqW2tleV1cblx0XHRcdFx0Zm9yIHtub2RlLCBsZXZlbH0gb2YgQGFsbE5vZGVzKHZhbHVlLCBvYmpMZXZlbCsxKVxuXHRcdFx0XHRcdHlpZWxkIHtub2RlLCBsZXZlbH1cblx0XHRcdFx0XHRAc2V0WWllbGRlZC5hZGQgbm9kZVxuXHRcdHJldHVyblxuIl19