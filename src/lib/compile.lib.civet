# compile.lib.civet

import {
	undef, defined, notdefined, assert, croak,
	hash, hashof, isHash,
	nonEmptyString, isNonEmptyString, nonEmpty,
	} from 'datatypes'
import {
	pass, keys, hasKey, hasKeys, missingKeys,
	OL, o, getOptions,
	} from 'llutils'
import {
	DBG, LOG, WARN, ERR, LOGVALUE, DBGVALUE,
	INDENT, UNDENT,
	pushLogLevel, popLogLevel,
	} from 'logger'
import {
	isFile, isDir, fileExt, withExt, rmFile, mkpath, parsePath,
	relpath, newerDestFileExists, slurp, barf, isStub,
	allFilesMatching, TPathInfo,
	patchFirstLine,
	} from 'fsys'
import {execCmd, execCmdSync, cmdSucceeds} from 'exec'
import {configFromFile} from 'cielo'

/**
 * @module compile.lib - compile files
 */

# ---------------------------------------------------------------------------
#   TYPES
# ---------------------------------------------------------------------------

# --- A function to test if compiling a file is even possible
export type TTesterFunc = () => boolean

export type TCompileStatus =
	'temp'       |    # --- it's an intermediate file, not compiled
	'nocompiler' |    #     no compiler configured for this file
	'exists'     |    #     newer output files exist, not compiled
	'failed'     |    #     compiling failed
	'compiled'        #     compiling succeeded, output file exists

export type TCompilerFunc = (path: string) => TCompileStatus
export type TPostProcessor = (path: string) => void

export type TCompilerInfo = {
	tester: TTesterFunc
	compiler: TCompilerFunc
	getOutPaths: (path: string) => string[]
	}

export type TCompilerConfig = {
	hCompilers: hashof<TCompilerInfo>         # <string>: <TCompilerInfo>
	hPostProcessors: hashof<TPostProcessor>   # <string>: <TPostProcessor>
	}

export isCompilerInfo := (x: any): x is TCompilerInfo =>
	return isHash(x) && hasKeys(x, 'tester', 'compiler', 'getOutPaths')

export isCompilerConfig := (x: any): x is TCompilerConfig =>
	return isHash(x) && hasKeys(x, 'hCompilers', 'hPostProcessors')

export type TCompileResult = {
	status: TCompileStatus
	path: string
	lOutPaths?: string[]
	postProcStatus?: any
	}

export type TUnitTestResult = {
	stub: string
	success: boolean
	msg?: string
	code?: number
	signal?: string
	}

# ---------------------------------------------------------------------------

let hCompilerConfig: TCompilerConfig? = undef   # --- loaded when needed

getConfig := (): TCompilerConfig =>

	if defined(hCompilerConfig)
		return hCompilerConfig
	else
		return getCompilerConfig()

# ---------------------------------------------------------------------------

/**
 * getCompilerConfig(path) - return compiler configuration from a file
 */

export getCompilerConfig := (
	path: string = 'src/lib/compile.config.civet'
	): TCompilerConfig =>

	assert isFile(path), "No such compile config file: #{OL(path)}"
	DBG "load compiler config from #{path}"
	hConfig := configFromFile(path)
	DBGVALUE 'hConfig', hConfig
	if isCompilerConfig(hConfig)

		# --- Remove any compilers for which the actual compiler
		#     has not been installed

		hCompilers := hConfig.hCompilers
		for ext of keys(hCompilers)
			{tester} := hCompilers[ext]
			pushLogLevel 'silent'
			works := tester()
			popLogLevel()

			if not works
				DBG "Deleting compiler for ext #{OL(ext)}"
				delete hCompilers[ext]
		return hConfig
	else
		return {
			hCompilers: {}
			hPostProcessors: {}
			}

# ---------------------------------------------------------------------------
# --- returns a TCompilerInfo or undef

export getCompilerInfo := (
		ext: string
		): TCompilerInfo? =>

	hConfig := getConfig()
	hInfo := hConfig.hCompilers[ext]
	if defined(hInfo)
		return hInfo
	else
		DBG "No compiler for #{ext} files"
		return undef

# ---------------------------------------------------------------------------

export getPostProcessor := (purpose: string): TPostProcessor? =>

	hConfig := getConfig()
	pp := hConfig.hPostProcessors[purpose]
	if defined(pp)
		return pp
	else
		DBG "No post processor for #{purpose} files"
		return undef

# ---------------------------------------------------------------------------
# --- src can be a full or relative path
#     throws error if file does not exist
#
#     Possible status values:
#        'temp'       - it was a temp file, not compiled
#        'nocompiler' - has no compiler, not compiled
#        'exists'     - newer compiled file already exists
#        'failed'     - compiling failed
#        'compiled'   - successfully compiled

export compileFile := (
	path: string,
	hOptions: hash={}
	): TCompileResult =>

	assert isFile(path), "No such file: #{OL(path)}"
	DBG "COMPILE: #{OL(path)}", INDENT

	type opt = {
		nopp: boolean
		}
	{nopp} := getOptions<opt> hOptions, {
		nopp: false
		}

	hPathInfo := parsePath path
	{relPath, stub, purpose, ext} := hPathInfo

	if notdefined(ext)
		DBG "Not compiling - no file extension in #{OL(path)}", UNDENT
		return {status: 'nocompiler', path: relPath}

	hCompilerInfo := getCompilerInfo(ext)
	if notdefined(hCompilerInfo)
		DBG "Not compiling - no compiler for #{OL(ext)}", UNDENT
		return {status: 'nocompiler', path: relPath}

	{compiler, getOutPaths} := hCompilerInfo
	lOutPaths := getOutPaths(relPath)
	DBG "lOutPaths = #{OL(lOutPaths)}"

	let allNewer = true
	for outPath of lOutPaths
		if not newerDestFileExists(relPath, outPath)
			allNewer = false
			break
	if allNewer
		DBG "Not compiling, newer #{OL(lOutPaths)} exist", UNDENT
		return {status: 'exists', path: relPath, lOutPaths}

	DBG "compiling #{OL(path)} to #{OL(lOutPaths)}"
	status := compiler path
	let postProcStatus: any? = undef
	if (status == 'compiled') && defined(purpose) && not nopp
		postProc := getPostProcessor(purpose)
		if defined(postProc)
			DBG "post-processing file"
			try
				postProc path
			catch err
				postProcStatus = err
	DBG UNDENT
	if defined(postProcStatus)
		return {status, path: relPath, lOutPaths, postProcStatus}
	else
		return {status, path: relPath, lOutPaths}

# ---------------------------------------------------------------------------

export getCompilerGlobPattern := (root: string='**'): string =>

	hConfig := getConfig()
	lKeys := keys(hConfig.hCompilers)
	pattern := (
		(lKeys.length == 1) ? "#{root}/*#{lKeys[0]}"
		                    : "#{root}/*{#{lKeys.join(',')}}"
		)
	DBG "compiler glob: #{OL(pattern)}"
	return pattern

# ---------------------------------------------------------------------------
# --- GENERATOR

export allCompilableFiles := (
		hOptions: hash={}
		): Generator<TPathInfo, void, void> ->

	type opt = {
		root: string
		filter: Function?
		}
	{root, filter} := getOptions hOptions, {
		root: '**'
		filter: undef
		}
	pattern := getCompilerGlobPattern(root)
	DBG "pattern = #{pattern}"
	for hFileInfo of allFilesMatching(pattern, {filter})
		yield hFileInfo
	return

# ---------------------------------------------------------------------------

# --- a generator

export runUnitTestsFor := (
	stub: nonEmptyString
	hOptions: hash={}
	): Generator<TUnitTestResult, void, void> ->

	{verbose} := getOptions hOptions, {
		verbose: false
		}

	DBG "Running unit tests for #{stub}"
	if not verbose
		pushLogLevel 'silent'

	# --- Ensure that matching lib & cmd files are compiled
	#     (no error if there is no compiler for the file)
	for {path} of allFilesMatching("**/#{stub}.*")
		{status} := compileFile path, o'nopp'
		assert (status != 'failed'), "compile of #{path} failed"

	# --- Compile and run all unit tests for stub
	for {path} of allFilesMatching("**/#{stub}*.test.*")
		{status, lOutPaths} := compileFile path, o'nopp'
		assert (status != 'failed'), "compile of #{path} failed"
		if notdefined(lOutPaths)
			continue
		for outPath of lOutPaths
			assert isFile(outPath), "File #{OL(outPath)} not found"

		# --- Compile all files in subdir if it exists
		if isDir("test/#{stub}")
			for {path} of allFilesMatching("test/#{stub}/*")
				{status, lOutPaths} := compileFile path
				assert (status != 'failed'), "Compile of #{path} failed"
				if notdefined(lOutPaths)
					WARN "File #{OL(path)} not compiled to #{OL(lOutPaths)}"

		# --- Run the unit tests, yield results
		for outPath of lOutPaths
			{success, code, signal} := execCmdSync 'deno', [
					'test',
					'-qA',
					outPath
					]
			yield {stub, success, code, signal}
	if not verbose
		popLogLevel()
	return

# ---------------------------------------------------------------------------
# --- a generator

export runAllUnitTests := (
		): Generator<TUnitTestResult, void, void> ->

	DBG "Running all unit tests"

	hGlobOptions := {
		exclude: ['node_modules/**', '.git/**']
		}

	pattern := '**/*.{lib,cmd}.ts'
	DBG "pattern = #{OL(pattern)}"
	for {path, stub} of allFilesMatching(pattern, hGlobOptions)
		if (stub == undef)
			WARN "No stub found in #{OL(path)}"
		else
			DBG "UNIT TEST: #{path}"
			for hResult of runUnitTestsFor(stub)
				yield hResult
	return

# ---------------------------------------------------------------------------

# --- userConfigPath resolves '.' to current working directory,
#     not the current file location

export userConfigPath: string := mkpath('./compiler.config.ts')

# ---------------------------------------------------------------------------
# ASYNC

export installCmd := (path: string, name: string?=undef): void =>

	if notdefined(name)
		await execCmd 'deno', [
			'install'
			'-fgA'
			'--config'
			'deno.jsonc'
			path
			]
	else
		await execCmd 'deno', [
			'install'
			'-fgA'
			'-n'
			name
			'--config'
			'deno.jsonc'
			path
			]
	return

# ---------------------------------------------------------------------------
# ASYNC

export uninstallCmd := (path: string, name: string?=undef): void =>

	if notdefined(name)
		await execCmd 'deno', [
			'uninstall'
			'-g'
			path
			]
	else
		await execCmd 'deno', [
			'uninstall'
			'-g'
			'-n'
			name
			path
			]
	return
