"use strict";
// ast-builder.lib.civet

import {
	undef, defined, notdefined, array, hash, hashof, croak,
	nonEmpty, isNonEmptyString, assert, isArray, isHash, isString,
	} from 'datatypes'
import {OL} from 'llutils'
import {resetOneIndent, indented} from 'indent'

// ---------------------------------------------------------------------------

export type TNodeDesc = (
	  string
	| [string]
	| [string, hash]
	| [string, hash, TNodeDesc[]]   // --- [name, hAttr, lChildren]
	)

// ---------------------------------------------------------------------------

export type TAstKeys = {
	kindKey: string
	childrenKey: string
	}

const hStdKeys: TAstKeys = {
	kindKey: 'kind',
	childrenKey: 'lChildren'
	}

export const toAst = (
		node: TNodeDesc,
		hKeys: TAstKeys = hStdKeys
		): hash => {

	// --- These are string keys
	const {kindKey, childrenKey} = hKeys

	if (isString(node)) {
		return {[kindKey]: node}
	}

	// --- kind will be a defined string
	//     hAttr may be undef, else is a hash
	//     lChildren may be undef, else is TNodeDesc[]
	const [kind, hAttr, lChildren] = node

	assert(isNonEmptyString(kind), `Bad kind: ${OL(kind)}`)
	if (defined(hAttr)) {
		assert(!(kindKey in hAttr), `${kindKey} in hAttr`)
		assert(!(childrenKey in hAttr), `${childrenKey} in hAttr`)
	}

	const h: hash = (
		  defined(hAttr)
		? Object.assign({[kindKey]: kind}, hAttr)
		: {[kindKey]: kind}
		)
	if (defined(lChildren)) {
		const results=[];for (const child of lChildren) {
			results.push(toAst(child, hKeys))
		};const lSubs =results
		h[childrenKey] = lSubs
	}
	return h
}

// ---------------------------------------------------------------------------

export const ast2str = (
		hAst: hash | string,
		hKeys: hashof<string> = hStdKeys
		): string => {

	if (typeof hAst === 'string') {
		return `- ${hAst}`
	}

	// --- These are string keys
	const {kindKey, childrenKey} = hKeys

	const lAttr: string[] = []
	const lChildren: string[] = []
	for (const key in hAst) {const val = hAst[key];
		if (key === childrenKey) {
			if (isArray(val)) {
				for (const child of val) {
					if (isHash(child) || isString(child)) {
						lChildren.push(indented(ast2str(child)))
					}
					else {
						croak(`Child not hash or string: ${OL(child)}`)
					}
				}
			}
			else {
				croak(`Value for key ${childrenKey} not an array`)
			}
		}
		else if (key !== kindKey) {
			lAttr.push(indented(`${key}: ${val}`))
		}
	}

	return [
		`- ${hAst[kindKey]}`,
		...lAttr,
		...lChildren
		].join('\n')
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,