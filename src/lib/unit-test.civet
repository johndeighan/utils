# unit-test.civet

import {
	assert, assertEquals, assertNotEquals, assertObjectMatch,
	assertStringIncludes, assertMatch, assertArrayIncludes,
	} from '@std/assert'

import {
	undef, defined, notdefined, isArray, isHash, isString, hash,
	} from './datatypes.ts'
import {
	pushLogLevel, popLogLevel, DBG,
	} from './logger.ts'
import {getMyOutsideCaller} from './v8-stack.ts'

/**
 * unit-test - provides functions for use in unit tests
 * available tests:
 *    equal
 *    truthy
 *    falsy
 *    fails
 *    succeeds
 *    matches
 *    like
 *    listLike
 *    includes
 *    includesAll
 *
 * @module
 */

# ---------------------------------------------------------------------------

/**
 * Generate a test name using the source line number
 */

export getTestName := (): string =>

	pushLogLevel 'silent'
	frame := getMyOutsideCaller()
	line := (frame == undef) ? 0 : frame.line
	popLogLevel()
	return "line #{line}"

# ---------------------------------------------------------------------------

/**
 * In a unit test, checks if  value is deeply equal to
 * the expected value. Reports line number of the test.
 *
 * @param {any} value - any JavaScript value
 * @param {any} expected - any JavaScript value
 * @returns {void} - nothing
 *
 * @example
 * ```js
 * equal 2+2, 4
 * ```
 * This test will pass.
 */

export equal := (value: any, expected: any) : void =>

	name := getTestName()
	DBG "equal ?, #{JSON.stringify(expected)} (#{name})"
	Deno.test name, () => assertEquals(value, expected)
	return

# ---------------------------------------------------------------------------

/**
 * In a unit test, tests if value is truthy
 * Reports line number of the test.

 * @param {any} value - any JavaScript value
 * @returns {void} - nothing
 *
 * @example
 * ```js
 * truthy isString('abc')
 * ```
 * This test will pass.
 */

export truthy := (value: any): void =>

	name := getTestName()
	DBG "truthy #{JSON.stringify(value)} (#{name})"
	Deno.test name, () => assert value
	return

# ---------------------------------------------------------------------------

/**
 * In a unit test, tests if value is falsy
 * Reports line number of the test.
 *
 * @param {any} value - any JavaScript value
 * @returns {void} - nothing
 *
 * @example
 * ```js
 * falsy isString(42)
 * ```
 * This test will pass.
 */

export falsy := (value: any): void =>

	name := getTestName()
	DBG "falsy #{JSON.stringify(value)} (#{name})"
	Deno.test name, () => assert (not value)
	return

# ---------------------------------------------------------------------------

/**
 * In a unit test, tests if calling the provided function
 * throws an exception. Reports line number of the test.
 *
 * @param {any => any} func - any JavaScript function
 * @returns {void} - nothing
 *
 * @example
 * ```js
 * fails () => throw new Error('bad')
 * ```
 * This test will pass.
 */

export fails := (func: () => void): void =>

	assert (typeof func == 'function'), "test fails() passed non-function"
	pushLogLevel 'silent'
	name := getTestName()
	DBG "fails <func> (#{name})"
	Deno.test name, () => assert(llthrows(func))
	popLogLevel()
	return

# ---------------------------------------------------------------------------

/**
 * In a unit test, tests if calling the provided function
 * runs without throwing an exception.
 * Reports line number of the test.
 *
 * @param {any => any} func - any JavaScript function
 * @returns {void} - nothing
 *
 * @example
 * ```js
 * succeeds () => return 42
 * ```
 * This test will pass.
 */

export succeeds := (func: () => void): void =>

	assert (typeof func == 'function'), "test succeeds() passed non-function"
	name := getTestName()
	DBG "succeeds <func> (#{name})"
	Deno.test name, () => assert not llthrows(func)
	return

# ---------------------------------------------------------------------------

/**
 * In a unit test, tests a value, which must be a string,
 * matches either a substring or a regular expression.
 * Reports line number of the test.
 *
 * @param {any} value - any JavaScript value
 * @param {any} expected - any JavaScript value
 * @returns {void} - nothing
 *
 * @example
 * ```js
 * matches 'abcde', 'bce'
 * ```
 * This test will pass.
 *
 * @example
 * ```js
 * matches 'aabbcc', /a+b+c+/
 * ```
 * This test will pass.
 */

export matches := (value: any, expected: any) =>

	assert isString(value), "Not a string: #{value}"
	name := getTestName()
	DBG "matches ?, #{JSON.stringify(expected)} (#{name})"
	if isString(expected)
		Deno.test name, () => assertStringIncludes value, expected
	else if (expected instanceof RegExp)
		Deno.test name, () => assertMatch value, expected
	else
		Deno.test name, () => assert false
	return

# ---------------------------------------------------------------------------

/**
 * In a unit test, tests if one hash matches another hash.
 * the first hash must have all the properties in the second hash,
 * but extra properties are allowed.
 * Reports line number of the test.
 *
 * @param {hash} value - any JavaScript object
 * @param {hash} expected - any JavaScript object
 * @returns {void} - nothing
 *
 * @example
 * ```js
 * like {a:1, b:2, c:3}, {a:1, c:3}
 * ```
 * This test will pass.
 */

export like := (value: hash?, expected: hash): void =>

	# @ts-ignore
	name := getTestName()
	DBG "like ?, #{JSON.stringify(expected)} (#{name})"
	if notdefined(value)
		Deno.test name, () => assertEquals value, undef
	else
		Deno.test name, () => assertObjectMatch value, expected
	return

# ---------------------------------------------------------------------------

/**
 * In a unit test, tests a value, which must be an array or object,
 * matches another array or object. For objects, the value must
 * have all the properties in the expected value, but extra
 * properties are allowed. For arrays, the value must have
 * at least the length of the expected array, and each item in
 * the value array must be an object that has at least all of the
 * properties that the object in the expected array at the
 * same position has.
 * Reports line number of the test.
 *
 * @param {array | object} value - any JavaScript value
 * @param {array | object} expected - any JavaScript value
 * @returns {void} - nothing
 *
 * @example
 * ```js
 * like {a:1, b:2, c:3}, {a:1, c:3}
 * ```
 * This test will pass.
 *
 * @example
 * ```js
 * like [{a:1, b:2, c:3}, {a:3, b:5, c:23}], [{a:1, b:2}]
 * ```
 * This test will pass.
 */

export listLike := (value: hash[], expected: hash[]): void =>

	name := getTestName()
	DBG "listLike ?, #{JSON.stringify(expected)} (#{name})"

	len := value.length
	Deno.test "#{name}/len", () => assertEquals len, expected.length
	for i of [0..len-1]
		# @ts-ignore
		Deno.test "#{name}/#{i}", () => assertObjectMatch value[i], expected[i]
	return

# ---------------------------------------------------------------------------

/**
 * In a unit test, tests a value, which must be an array,
 * includes the expected value.
 * Reports line number of the test
 *
 * @param {Array<any>} value - an array
 * @param {any} expected - any JavaScript value
 * @returns {void} - nothing
 *
 * @example
 * ```js
 * includes ['a', 'b', 'c'], 'b'
 * ```
 * This test will pass.
 */

export includes := (value: any, expected: any) =>

	assert Array.isArray(value), "not an array: #{value}"
	name := getTestName()
	DBG "includes ?, #{JSON.stringify(expected)} (#{name})"
	Deno.test name, () => assertArrayIncludes(value, [expected])
	return

# ---------------------------------------------------------------------------

/**
 * In a unit test, tests a value, which must be an array,
 * includes all of the items in the expected array.
 * Reports line number of the test
 *
 * @param {Array<any>} value - an array
 * @param {Array<any>} expected - an array
 * @returns {void} - nothing
 *
 * @example
 * ```js
 * includesAll ['a', 'b', 'c'], ['b', 'c']
 * ```
 * This test will pass.
 */

export includesAll := (value: any, expected: any) =>

	assert Array.isArray(value), "not an array: #{value}"
	assert Array.isArray(expected), "not an array: #{expected}"
	name := getTestName()
	DBG "includesAll ?, #{JSON.stringify(expected)} (#{name})"
	Deno.test name, () => assertArrayIncludes(value, expected)
	return

# ---------------------------------------------------------------------------

export llthrows := (func: () => any): boolean =>

	try
		func()
		return false
	catch err
		return true
