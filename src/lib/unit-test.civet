# unit-test.civet

import {
	assert, assertEquals, assertNotEquals, assertObjectMatch,
	assertStringIncludes, assertMatch, assertArrayIncludes,
	} from '@std/assert'
import {
	OL, isArray, isHash, range, pushLogLevel, popLogLevel,
	} from '@jdeighan/utils/llutils.js'
import {getMyOutsideCaller} from '@jdeighan/utils/v8-stack.js'

/**
 * unit-test - provides functions for use in unit tests
 *
 * @module
 */

# ---------------------------------------------------------------------------
# typeof x may return
#    'number'
#    'string'
#    'boolean'
#    'undefined'
#    'bigint'
#    'symbol'
#    'object'
#    'function'
# ---------------------------------------------------------------------------
# available tests
#    equal
#    truthy
#    falsy
#    fails
#    succeeds
#    matches
#    like
#    includes
#    includesAll
# ---------------------------------------------------------------------------

isString := (x) =>

	return (typeof x == 'string') || (x instanceof String)

# ---------------------------------------------------------------------------

/**
 * In a unit test, checks if  value is deeply equal to
 * the expected value. Reports line number of the test.
 *
 * @param value {any} - any JavaScript value
 * @param expected {any} - any JavaScript value
 * @returns {void} - nothing
 *
 * @example
 * ```js
 * equal 2+2, 4
 * ```
 * This test will pass.
 */

export equal := (value: any, expected: any) : void =>

	label := getTestName()
	Deno.test label, () => assertEquals(value, expected)
	return

# ---------------------------------------------------------------------------

/**
 * In a unit test, tests if value is truthy
 * Reports line number of the test.

 * @param value {any} - any JavaScript value
 * @returns {void} - nothing
 *
 * @example
 * ```js
 * truthy isString('abc')
 * ```
 * This test will pass.
 */

export truthy := (value: any) =>

	label := getTestName()
	Deno.test label, () => assert value
	return

# ---------------------------------------------------------------------------

/**
 * In a unit test, tests if value is falsy
 * Reports line number of the test.
 *
 * @param value {any} - any JavaScript value
 * @returns {void} - nothing
 *
 * @example
 * ```js
 * falsy isString(42)
 * ```
 * This test will pass.
 */

export falsy := (value) =>

	label := getTestName()
	Deno.test label, () => assert (not value)
	return

# ---------------------------------------------------------------------------

/**
 * In a unit test, tests if calling the provided function
 * throws an exception. Reports line number of the test.
 *
 * @param func {any => any} - any JavaScript function
 * @returns {void} - nothing
 *
 * @example
 * ```js
 * fails () => throw new Error('bad')
 * ```
 * This test will pass.
 */

export fails := (func): void =>

	assert (typeof func == 'function'), "test fails() passed non-function"
	label := getTestName()
	pushLogLevel 'silent'
	Deno.test label, () => assert llthrows(func)
	popLogLevel()
	return

# ---------------------------------------------------------------------------

/**
 * In a unit test, tests if calling the provided function
 * runs without throwing an exception.
 * Reports line number of the test.
 *
 * @param func {any => any} - any JavaScript function
 * @returns {void} - nothing
 *
 * @example
 * ```js
 * succeeds () => return 42
 * ```
 * This test will pass.
 */

export succeeds := (func): void =>

	assert (typeof func == 'function'), "test succeeds() passed non-function"
	label := getTestName()
	Deno.test label, () => assert not llthrows(func)
	return

# ---------------------------------------------------------------------------

/**
 * In a unit test, tests a value, which must be a string,
 * matches either a substring or a regular expression.
 * Reports line number of the test.
 *
 * @param value {any} - any JavaScript value
 * @param expected {any} - any JavaScript value
 * @returns {void} - nothing
 *
 * @example
 * ```js
 * matches 'abcde', 'bce'
 * ```
 * This test will pass.
 *
 * @example
 * ```js
 * matches 'aabbcc', /a+b+c+/
 * ```
 * This test will pass.
 */

export matches := (value, expected) =>

	label := getTestName()
	assert isString(value), "Not a string: #{value}"
	if isString(expected)
		Deno.test label, () => assertStringIncludes value, expected
	else if (expected instanceof RegExp)
		Deno.test label, () => assertMatch value, expected
	else
		Deno.test label, () => assert false
	return

# ---------------------------------------------------------------------------

/**
 * In a unit test, tests a value, which must be an array or object,
 * matches another array or object. For objects, the value must
 * have all the properties in the expected value, but extra
 * properties are allowed. For arrays, the value must have
 * at least the length of the expected array, and each item in
 * the value array must be an object that has at least all of the
 * properties that the object in the expected array at the
 * same position has.
 * Reports line number of the test.
 *
 * @param value {array | object} - any JavaScript value
 * @param expected {array | object} - any JavaScript value
 * @returns {void} - nothing
 *
 * @example
 * ```js
 * like {a:1, b:2, c:3}, {a:1, c:3}
 * ```
 * This test will pass.
 *
 * @example
 * ```js
 * like [{a:1, b:2, c:3}, {a:3, b:5, c:23}], [{a:1, b:2}]
 * ```
 * This test will pass.
 */

export like := (value, expected) =>

	label := getTestName()
	if isHash(value) && isHash(expected)
		Deno.test label, () => assertObjectMatch value, expected
	else if isArray(value) && isArray(expected)
		valLen := value.length
		expLen := expected.length
		max := (valLen >= expLen) ? valLen : expLen
		for i of range(max)
			actObj := value[i] || {}
			expObj := expected[i] || {bad: 'bad'}
			Deno.test label, () => assertObjectMatch actObj, expObj
	return

# ---------------------------------------------------------------------------

/**
 * In a unit test, tests a value, which must be an array,
 * includes the expected value.
 * Reports line number of the test
 *
 * @param value {array} - an array
 * @param expected {any} - any JavaScript value
 * @returns {void} - nothing
 *
 * @example
 * ```js
 * includes ['a', 'b', 'c'], 'b'
 * ```
 * This test will pass.
 */

export includes := (value, expected) =>

	label := getTestName()
	assert Array.isArray(value), "not an array: #{value}"
	Deno.test label, () => assertArrayIncludes(value, [expected])
	return

# ---------------------------------------------------------------------------

/**
 * In a unit test, tests a value, which must be an array,
 * includes all of the items in the expected array.
 * Reports line number of the test
 *
 * @param value {array} - an array
 * @param expected {array} - an array
 * @returns {void} - nothing
 *
 * @example
 * ```js
 * includesAll ['a', 'b', 'c'], ['b', 'c']
 * ```
 * This test will pass.
 */

export includesAll := (value, expected) =>

	label := getTestName()
	assert Array.isArray(value), "not an array: #{value}"
	assert Array.isArray(expected), "not an array: #{expected}"
	Deno.test label, () => assertArrayIncludes(value, expected)
	return

# ---------------------------------------------------------------------------
# ---------------------------------------------------------------------------

export getTestName := () =>

	pushLogLevel 'silent'
	frame := getMyOutsideCaller()
	popLogLevel()
	return "line #{frame.line}"

# ---------------------------------------------------------------------------

export llthrows := (func) =>

	try
		func()
		return false
	catch err
		return true
