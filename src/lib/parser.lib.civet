# parser.lib.civet

import {sprintf} from "@std/fmt/printf"
import {
	undef, defined, notdefined,
	array, hash, isEmpty, nonEmpty,
	} from './datatypes.lib.ts'
import {
	getOptions, escapeStr, spaces,
	} from './llutils.lib.ts'
import {logIndent} from './log-formatter.lib.ts'
import {
	getLogLevel, setLogLevel,
	pushLogLevel, popLogLevel, DBG, INDENT, UNDENT,
	} from './logger.lib.ts'

# ---------------------------------------------------------------------------

export type TState = {
	text: string
	ignore: any[]
	lMatches: string[]
	stack?: any[]
	pos: number
	nolog?: boolean
	}

export type TRule = ($: TState) => TState

# --- Anything that can be converted to a TRule
type TLaxRule = (string | RegExp | TRule)

# ---------------------------------------------------------------------------

export getNewState := (
		text: string
		pos: number = 0
		): TState =>

	return {
		text
		ignore: []
		lMatches: []
		pos
		}

# ---------------------------------------------------------------------------

nbuf := 24

DBGMATCH := (
		desc: string    # Describe what we're trying to match
		$: TState
		$next: TState
		): void =>

	if $.nolog
		return
	str := escapeStr($.text.substring($.pos, $next.pos))
	buf := spaces(nbuf - str.length - 1 - 3*logIndent)
	DBG "[+#{sprintf('%3d', $.pos)}] #{str}#{buf}#{desc}"
	return

# ---------------------------------------------------------------------------

DBGNOMATCH := (
		desc: string    # Describe what we're trying to match
		$: TState
		): void =>

	if $.nolog
		return
	buf := spaces(nbuf - 3*logIndent)
	DBG "[-#{sprintf('%3d', $.pos)}]#{buf}#{desc}"
	return

# ---------------------------------------------------------------------------

skipIgnored := ($: TState): TState =>

	if isEmpty($.ignore)
		return $
	else
		$.ignore.push (x: TState): TState => return x
#		$.nolog = true
		result := $.ignore.at(-1)($)
#		$.nolog = false
		$.ignore.pop()
		return result

# ---------------------------------------------------------------------------

export RegexMatcher := (re: RegExp): TRule =>

	return ($: TState): TState =>

		$cur := skipIgnored($)
		lMatches := re.exec($cur.text.substring($.pos))
		if (not lMatches)
			DBGNOMATCH re.toString(), $
			return $

		# --- Token is matched, add matches to state,
		#     return the next state
		numChars := lMatches[0].length
		$next := {
			...$cur,
			pos: $.pos + numChars,
			}
		$.lMatches = lMatches
		DBGMATCH re.toString(), $, $next
		return $next

# ---------------------------------------------------------------------------

export StringMatcher := (str: string): TRule =>

	return ($: TState): TState =>

		$cur := skipIgnored($)
		if ($cur.text.startsWith(str, $cur.pos))
			$next := {
				...$cur,
				pos: $cur.pos + str.length
				}
			DBGMATCH "'#{escapeStr(str)}'", $, $next
			return $next
		else
			DBGNOMATCH "'#{escapeStr(str)}'", $
			return $

# ---------------------------------------------------------------------------

export function getRule(rule: TLaxRule): TRule

	if (typeof(rule) == 'function')
		return rule
	if (rule instanceof RegExp)
		return RegexMatcher(rule)
	if (typeof(rule) == 'string')
		return StringMatcher(rule)
	throw new Error('Invalid rule')

# ---------------------------------------------------------------------------

unpackList := (lArgs: array): [string, TRule[]] =>

	if (typeof lArgs[0] == 'string')
		return [lArgs[0], lArgs[1].map(getRule)]
	else
		return ['', lArgs[0].map(getRule)]

# ---------------------------------------------------------------------------

unpackOne := (lArgs: array): [string, TRule] =>

	if (typeof lArgs[0] == 'string')
		return [lArgs[0], getRule(lArgs[1])]
	else
		return ['', getRule(lArgs[0])]

# ---------------------------------------------------------------------------
# --- Match a sequence of rules left to right

export function All(...lArgs: array): TRule

	[name, lRules] := unpackList(lArgs)
	return ($) =>
		DBG "#{name} &", INDENT
		$org := $   # save to use as return value on failure
		$ = Object.assign({}, $org)
		for rule,i of lRules
			DBG "-----"
			$next := rule($)
			if ($next == $)
				DBG 'FAIL', UNDENT
				return $org
			$ = $next

		DBG 'OK', UNDENT
		return $

# ---------------------------------------------------------------------------
# --- Match any of the rules, check left to right

export function Any(...lArgs: array): TRule

	[name, lRules] := unpackList(lArgs)
	return ($) =>
		DBG "#{name} |", INDENT
		for rule,i of lRules
			DBG "-----"
			$next := rule($)
			if ($next != $)
				DBG 'OK', UNDENT
				return $next
		DBG 'FAIL', UNDENT
		return $

# ---------------------------------------------------------------------------
# --- Match a rule 1 or more times

export function Plus(...lArgs: array): TRule

	[name, rule] := unpackOne(lArgs)
	return ($) =>
		DBG "#{name} +", INDENT
		$first := rule($)
		if ($first == $)
			DBG "FAIL", UNDENT
			return $     # --- no match
		$ = $first
		loop
			$next := rule($)
			if ($next == $)
				DBG "OK", UNDENT
				return $next
			$ = $next

# ---------------------------------------------------------------------------
# --- Match a rule optionally

export function Optional(...lArgs: array): TRule

	[name, rule] := unpackOne(lArgs)
	return ($) =>
		DBG "#{name} ?", INDENT
		$next := rule($)
		if ($next != $)
			DBG "OK - matched", UNDENT
			return $next
		else
			# --- Otherwise return a shallow copy
			#     of the state to still indicate success
			DBG "OK - not matched", UNDENT
			return Object.assign({}, $)

# ---------------------------------------------------------------------------

export function Star(...lArgs: array): TRule

	[name, rule] := unpackOne(lArgs)
	return ($) =>
		DBG "#{name} *", INDENT
		$ = Object.assign({}, $);
		loop
			$next := rule($)
			if ($next == $)
				DBG "OK", UNDENT
				return $next
			$ = $next

# ---------------------------------------------------------------------------

type TReducer<T> = (
	$: TState
	$next: TState
	) => T?

export function Node<T>(
		laxRule: TLaxRule,
		reducer: TReducer<T>
		): TRule

	rule := getRule laxRule
	return ($) =>
		$next := rule($)
		if ($next == $)
			return $

		# --- We have a match
		node := reducer($, $next)
		if defined(node)
			if $next.stack
				$next.stack.push node
			else
				$next.stack = [node]
		return $next

# ---------------------------------------------------------------------------

export getLineAndColumn := (text: string, pos: number) =>

	countChars := (str: string, ch: string): number =>
		let count = 0
		let pos = -1
		while (pos = str.indexOf(ch, pos+1)) != -1
			count += 1
		return count


	# --- Get line number by counting number of \n chars
	#        before the current position
	#     Get column number by finding closest previous position
	#        of a \n and computing the difference

	shortStr := text.substring(0, pos)
	return [
		countChars(shortStr, "\n") + 1,
		pos - shortStr.lastIndexOf('\n')
		]

# ---------------------------------------------------------------------------

export function Ignore(
		laxToIgnore: TLaxRule,
		laxRule: TLaxRule
		): TRule

	rule := getRule laxRule
	toIgnore := getRule laxToIgnore
	return ($: TState) =>
		$cur := toIgnore($)
		$.ignore.push(toIgnore)
		$next := rule($cur)
		$.ignore.pop()
		return ($next == $cur) ? $ : toIgnore($next)

# ---------------------------------------------------------------------------
# --- Returns a function that:
#        1. accepts a string
#        2. returns void

type TParser = (str: string) => void

export function getParser<T>(
		laxRule: TLaxRule
		hOptions: hash = {}
		): TParser

	{pos, partial, reSkip} := getOptions hOptions, {
		pos: 0
		partial: false
		reSkip: /^\s+/
		}
	rule := getRule laxRule

	return (text: string): T? =>
		$ := {
			text
			ignore: defined(reSkip) ? [RegexMatcher(reSkip)] : []
			lMatches: []
			pos: 0
			}
		$next := rule($)

		if ($ == $next)
			[line, column] := getLineAndColumn(text, $.pos)
			throw new SyntaxError("""
				No match at pos #{$.pos}
				Remainder: #{escapeStr(text.slice($.pos))}
				""")
		if not partial && ($next.pos < text.length)
			# --- Not all input consumed
			[line, column] := getLineAndColumn(text, $.pos)
			throw new SyntaxError("""
				Stopped at pos #{$.pos}
				Remainder: #{escapeStr(text.slice($.pos))}
				""")
		return $next.stack ? $next.stack[0] : undef
