# parser.lib.civet

import {sprintf} from "@std/fmt/printf"

import {
	undef, defined, notdefined,
	char, array, hash, isEmpty, nonEmpty,
	} from './datatypes.lib.ts'
import {
	getOptions, escapeStr, spaces,
	} from './llutils.lib.ts'
import {logIndent} from './log-formatter.lib.ts'
import {
	getLogLevel, setLogLevel,
	DBG, INDENT, UNDENT,
	TFormatter, TreeLogger,
	} from './logger.lib.ts'

# ---------------------------------------------------------------------------

export class State
	text: string = ''
	pos: number = 0

	# --- optional fields
	skipRule?: TRule
	lMatches?: string[]
	stack?: any[]
	logr?: TreeLogger<[State, State]>

	constructor(
			src: string | State
			n: number = 0
			hProps: Object = {}
			)
		if (typeof src == 'string')
			@text = src
			@pos = n
			Object.assign(@, hProps)
		else
			Object.assign(@, src)
			@.pos += n

export isFinished := ($: State): boolean =>
	{text, pos, skipRule} := $
	if (pos == text.length)
		return true
	else if (skipRule)
		# --- try running skip rule
		delete $.skipRule     # prevent rule running the skip rule
		$next := skipRule($)
		if defined($next)
			return ($next.pos == $next.text.length)
		else
			return false
	else
		return false

export type TRuleFunc = ($: State) => State?
export type TCallback = (lMatches: string[]) => void
export type TRule = TRuleFunc & {
	type: string
	label?: string
	lCallbacks?: TCallback[]
	}

# --- Anything that can be converted to a TRule
type TLaxRule = (string | RegExp | TRule)

# ---------------------------------------------------------------------------

nbuf := 24
digs := 1

DBGMATCH := (
		desc: string    # Describe what we're trying to match
		$: State
		$next: State
		): void =>

	str := escapeStr($.text.substring($.pos, $next.pos))
	buf := spaces(nbuf - str.length - 1 - 3*logIndent)
	i := sprintf("%#{digs}d", $.pos)
	DBG "[#{i} +] #{str}#{buf}#{desc}"
	return

# ---------------------------------------------------------------------------

DBGNOMATCH := (
		desc: string    # Describe what we're trying to match
		$: State
		): void =>

	buf := spaces(nbuf - 3*logIndent)
	i := sprintf("%#{digs}d", $.pos)
	DBG "[#{i} -]#{buf}#{desc}"
	return

# ---------------------------------------------------------------------------
# --- returns $ if no skip rule OR rule doesn't match

skipIgnored := ($: State): State =>

	# --- Will always return a defined value
	{skipRule} := $
	if notdefined(skipRule)
		return $

	# --- make sure skip is only tried once
	delete($.skipRule)
	$next := skipRule($)
	if defined($next)
		$.skipRule = skipRule    # still need to restore
		return Object.assign $next, {skipRule}
	else
		return Object.assign $, {skipRule}

# ---------------------------------------------------------------------------

export RegexMatcher := (re: RegExp): TRule =>

	func := ($: State): State? =>

		$cur := skipIgnored($)
		lMatches := re.exec($cur.text.substring($cur.pos))
		if defined(lMatches)

			# --- Token is matched, add matches to state,
			#     return the next state
			numChars := lMatches[0].length
#			$next := {
#				...$cur,
#				pos: $cur.pos + numChars,
#				}
			$next := new State($cur, numChars)
			$.lMatches = lMatches
			DBGMATCH re.toString(), $cur, $next
			return $next
		else
			DBGNOMATCH re.toString(), $cur
			return undef
	func.type = 'r'
	return func

# ---------------------------------------------------------------------------

export StringMatcher := (str: string): TRule =>

	func := ($: State): State? =>

		$cur := skipIgnored($)
		if ($cur.text.startsWith(str, $cur.pos))
			$next := new State($cur, str.length)
#			$next := {
#				...$cur,
#				pos: $cur.pos + str.length
#				}
			DBGMATCH "'#{escapeStr(str)}'", $cur, $next
			return $next
		else
			DBGNOMATCH "'#{escapeStr(str)}'", $cur
			return undef
	func.type = 'f'
	return func

# ---------------------------------------------------------------------------

export function getRule(rule: TLaxRule): TRule

	if (typeof(rule) == 'function')
		rule.type = 'f'
		return rule
	if (rule instanceof RegExp)
		return RegexMatcher(rule)
	if (typeof(rule) == 'string')
		return StringMatcher(rule)
	throw new Error("Invalid rule: #{rule}")

# ---------------------------------------------------------------------------

export ruleLabel := (rule: TRule, ch: char?=undef): string =>

	if defined(ch)
		return (rule.label || 'X') + ch
	else
		return rule.label || 'X'

# ---------------------------------------------------------------------------

export ruleSetLabel := (lRules: TRule[], ch: char): string =>

	return lRules.map((r) => ruleLabel(r)).join(" #{ch} ")

# ---------------------------------------------------------------------------
# --- Match a sequence of rules left to right

export function All(lLaxRules: TLaxRule[]): TRule

	lRules := lLaxRules.map(getRule)
	label := lRules.map((r) => r.label || 'X').join(' ')
	func := ($: State) =>
		DBG label, INDENT
		for rule,i of lRules
			DBG "-----"
			$next := rule($)
			if notdefined($next)
				DBG 'FAIL', UNDENT
				return undef
			$ = $next

		DBG 'OK', UNDENT
		return $
	func.type = '&'
	return func

# ---------------------------------------------------------------------------
# --- Match any of the rules, check left to right

export function Any(lLaxRules: TLaxRule[]): TRule

	lRules := lLaxRules.map(getRule)
	label := lRules.map((r) => r.label || 'X').join(' | ')
	func := ($: State) =>
		DBG label, INDENT
		for rule,i of lRules
			DBG "-----"
			$next := rule($)
			if defined($next)
				DBG 'OK', UNDENT
				return $next
		DBG 'FAIL', UNDENT
		return undef
	func.type = '|'
	return func

# ---------------------------------------------------------------------------
# --- Match a rule 1 or more times

export function Plus(laxRule: TLaxRule): TRule

	rule := getRule(laxRule)
	func := ($: State) =>
		DBG "+", INDENT
		$first := rule($)
		if notdefined($first)
			DBG "FAIL", UNDENT
			return undef
		$ = $first
		loop
			$next := rule($)
			if notdefined($next)
				DBG "OK", UNDENT
				return $next
			$ = $next
	func.type = '+'
	return func

# ---------------------------------------------------------------------------
# --- Match a rule optionally

export function Optional(laxRule: TLaxRule): TRule

	rule := getRule(laxRule)
	func := ($: State) =>
		DBG "?", INDENT
		$next := rule($)
		if defined($next)
			DBG "OK - matched", UNDENT
			return $next
		else
			# --- Still succeed since it was optional
			DBG "OK - not matched", UNDENT
			return $
	func.type = '?'
	return func

# ---------------------------------------------------------------------------

export function Star(laxRule: TLaxRule): TRule

	rule := getRule(laxRule)
	func := ($: State) =>
		DBG "*", INDENT
		loop
			$next := rule($)
			if notdefined($next)
				DBG "OK", UNDENT
				return $
			$ = $next
	func.type = '*'
	return func

# ---------------------------------------------------------------------------

type TReducer<T> = (
	$: State
	$next: State
	) => T?

export function Node<T>(
		laxRule: TLaxRule,
		reducer: TReducer<T>
		): TRule

	rule := getRule laxRule
	func := ($: State) =>
		$next := rule($)
		if notdefined($next)
			return $

		# --- We have a match
		node := reducer($, $next)
		if defined(node)
			if $next.stack
				$next.stack.push node
			else
				$next.stack = [node]
		return $next
	func.type = 'N'
	return func

# ---------------------------------------------------------------------------

export getLineAndColumn := (text: string, pos: number) =>

	countChars := (str: string, ch: string): number =>
		let count = 0
		let pos = -1
		while (pos = str.indexOf(ch, pos+1)) != -1
			count += 1
		return count


	# --- Get line number by counting number of \n chars
	#        before the current position
	#     Get column number by finding closest previous position
	#        of a \n and computing the difference

	shortStr := text.substring(0, pos)
	return [
		countChars(shortStr, "\n") + 1,
		pos - shortStr.lastIndexOf('\n')
		]

# ---------------------------------------------------------------------------
# --- Returns a function that:
#        1. accepts a string
#        2. returns given type

type TParser<T> = (str: string) => T?

export function getParser<T>(
		laxRule: TLaxRule
		hOptions: hash = {}
		): TParser<T>

	{pos, partial, reSkip} := getOptions hOptions, {
		pos: 0
		partial: false
		reSkip: /^\s+/
		}
	rule := getRule laxRule

	return (text: string): T? =>
		DBG "parse #{escapeStr(text)}"
		skipRule := defined(reSkip) ? RegexMatcher(reSkip) : undef

		$ := new State(text, 0, {skipRule})

		$next := rule($)

		if defined($next) && (isFinished($next) || partial)
			return $next.stack ? $next.stack[0] : undef
		else
			[line, column] := getLineAndColumn(text, $.pos)
			throw new SyntaxError("""
				No match at pos #{$.pos}
				Remainder: #{escapeStr(text.slice($.pos))}
				""")
