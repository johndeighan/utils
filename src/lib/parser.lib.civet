# parser.lib.civet

import {sprintf} from "@std/fmt/printf"

import {
	undef, defined, notdefined, isArray,
	char, array, hash, isEmpty, nonEmpty,
	} from './datatypes.lib.ts'
import {
	getOptions, escapeStr, spaces, randomLabel,
	} from './llutils.lib.ts'
import {logIndent} from './log-formatter.lib.ts'
import {
	getLogLevel, setLogLevel,
	TFormatter, TreeLogger,
	} from './logger.lib.ts'

# ---------------------------------------------------------------------------

export class State
	text: string = ''
	pos: number = 0

	# --- optional fields
	skipRule?: Rule

	constructor(
			src: string | State
			n: number = 0
			hProps: Object = {}
			)
		if (typeof src == 'string')
			@text = src
			@pos = n
			Object.assign(@, hProps)
		else
			Object.assign(@, src)
			@.pos += n

export isFinished := ($: State): boolean =>
	{text, pos, skipRule} := $
	if (pos == text.length)
		return true
	else if (skipRule)
		# --- try running skip rule
		delete $.skipRule     # prevent rule running the skip rule
		$next := skipRule.next($)
		if defined($next)
			return ($next.pos == $next.text.length)
		else
			return false
	else
		return false

export type TRuleFunc = ($: State) => State?

export class Rule
	type: string
	func: TRuleFunc
	label: string = randomLabel()
	lChildren: Rule[] = []

	constructor(
			type: string,
			func: TRuleFunc,
			lChildren: Rule[] = []
			)
		@type = type
		@func = func
		@lChildren = []

	next($: State): State?
		return @func($)

# --- Anything that can be converted to a Rule
type TLaxRule = (string | RegExp | Rule | TLaxRule[])

# ---------------------------------------------------------------------------
# --- returns $ if no skip rule OR rule doesn't match

skipIgnored := ($: State): State =>

	# --- Will always return a defined value
	{skipRule} := $
	if notdefined(skipRule)
		return $

	# --- make sure skip is only tried once
	delete($.skipRule)
	$next := skipRule.next($)
	if defined($next)
		$.skipRule = skipRule    # still need to restore
		return Object.assign $next, {skipRule}
	else
		return Object.assign $, {skipRule}

# ---------------------------------------------------------------------------

export type TCallback = (rule: Rule, lMatches: string[]) => void

# ---------------------------------------------------------------------------

export RegexMatcher := (
		re: RegExp
		...lCallbacks: TCallback[]
		): Rule =>

	rule := new Rule('r', ($: State): State? =>

		$cur := skipIgnored($)
		lMatches := re.exec($cur.text.substring($cur.pos))
		if (lMatches == null)
			return undef

		# --- Token is matched, add matches to state,
		#     return the next state
		numChars := lMatches[0].length
		$next := new State($cur, numChars)
		for cb of lCallbacks
			cb(rule, lMatches)
		return $next
		)
	return rule

# ---------------------------------------------------------------------------

export StringMatcher := (
		str: string
		...lCallbacks: TCallback[]
		): Rule =>

	newRule := new Rule('s', ($: State): State? =>

		$cur := skipIgnored($)
		if not $cur.text.startsWith(str, $cur.pos)
			return undef

		$next := new State($cur, str.length)
		for cb of lCallbacks
			cb(newRule, [str])
		return $next
		)
	return newRule

# ---------------------------------------------------------------------------

export function getRule(
		laxRule: TLaxRule
		...lCallbacks: TCallback[]
		): Rule

	if (laxRule instanceof Rule)
		return laxRule
	if isArray(laxRule)
		lRules := for r of laxRule
			getRule r
		return All lRules
	if (laxRule instanceof RegExp)
		return RegexMatcher(laxRule, lCallbacks...)
	if (typeof laxRule == 'string')
		return StringMatcher(laxRule, lCallbacks...)
	throw new Error("Invalid rule: #{laxRule}")

# ---------------------------------------------------------------------------
# --- Match a sequence of rules in order

export function All(
		lLaxRules: TLaxRule[]
		...lCallbacks: TCallback[]
		): Rule

	lRules := for laxRule of lLaxRules
		getRule laxRule, lCallbacks...

	newRule := new Rule('&', ($: State) =>
		for rule,i of lRules
			$next := rule.next($)
			if notdefined($next)
				return undef
			$ = $next

		for cb of lCallbacks
			cb(newRule, [])
		return $
		)

	return newRule

# ---------------------------------------------------------------------------
# --- Match any of the rules, check left to right

export function Any(
		lLaxRules: TLaxRule[]
		...lCallbacks: TCallback[]
		): Rule

	lRules := for laxRule of lLaxRules
		getRule laxRule

	newRule := new Rule('|', ($: State) =>
		for rule,i of lRules
			$next := rule.next($)
			if defined($next)
				for cb of lCallbacks
					cb(newRule, [])
				return $next
		return undef
		)
	return newRule

# ---------------------------------------------------------------------------
# --- Match a rule 1 or more times

export function Plus(
		laxRule: TLaxRule
		...lCallbacks: TCallback[]
		): Rule

	rule := getRule(laxRule)

	newRule := new Rule('+', ($: State) =>
		$first := rule.next($)
		if notdefined($first)
			return undef
		$ = $first
		loop
			$next := rule.next($)
			if notdefined($next)
				for cb of lCallbacks
					cb(newRule, [])
				return $next
			$ = $next
		)
	return newRule

# ---------------------------------------------------------------------------
# --- Match a rule optionally

export function Optional(
		laxRule: TLaxRule
		...lCallbacks: TCallback[]
		): Rule

	rule := getRule(laxRule)

	newRule := new Rule('?', ($: State) =>
		$next := rule.next($)
		if defined($next)
			for cb of lCallbacks
				cb(newRule, [])
			return $next
		else
			# --- Still succeed since it was optional
			return $
		)

	return newRule

# ---------------------------------------------------------------------------

export function Star(
		laxRule: TLaxRule
		...lCallbacks: TCallback[]
		): Rule

	rule := getRule(laxRule)

	newRule := new Rule('*', ($: State) =>
		loop
			$next := rule.next($)
			if notdefined($next)
				for cb of lCallbacks
					cb(newRule, [])
				return $
			$ = $next
		)
	return newRule

# ---------------------------------------------------------------------------

export getLineAndColumn := (text: string, pos: number) =>

	countChars := (str: string, ch: string): number =>
		let count = 0
		let pos = -1
		while (pos = str.indexOf(ch, pos+1)) != -1
			count += 1
		return count


	# --- Get line number by counting number of \n chars
	#        before the current position
	#     Get column number by finding closest previous position
	#        of a \n and computing the difference

	shortStr := text.substring(0, pos)
	return [
		countChars(shortStr, "\n") + 1,
		pos - shortStr.lastIndexOf('\n')
		]

# ---------------------------------------------------------------------------
# --- Returns a function that:
#        1. accepts a string
#        2. returns true or false

type TParser = (str: string) => boolean

export function getParser(
		laxRule: TLaxRule
		hOptions: hash = {}
		): TParser

	{pos, partial, reSkip} := getOptions hOptions, {
		pos: 0
		partial: false
		reSkip: /^\s+/
		}
	rule := getRule laxRule

	return (text: string): boolean =>
		skipRule := defined(reSkip) ? RegexMatcher(reSkip) : undef

		$ := new State(text, 0, {skipRule})

		$next := rule.next($)

		if defined($next) && (isFinished($next) || partial)
			return true
		else
			[line, column] := getLineAndColumn(text, $.pos)
			throw new SyntaxError("""
				No match at pos #{$.pos}
				Remainder: #{escapeStr(text.slice($.pos))}
				""")
