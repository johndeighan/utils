"use strict";
// tokens.lib.civet

import {undef, isEmpty, nonEmpty} from './datatypes.lib.ts'
import {allLinesInBlock, escapeStr} from './llutils.lib.ts'
import {DBG} from './logger.lib.ts'
import {indentLevel, splitLine} from './indent.lib.ts'
import {TextTable} from './text-table.lib.ts'

// ---------------------------------------------------------------------------
// ---------------------------------------------------------------------------
// --- Common token types:
//        'line', 'empty', 'indent', 'undent'

export type Token = {
	kind: string
	str: string
	}

// ---------------------------------------------------------------------------

export type tokenGenerator = (line: string) => Generator<Token, void, void>

const identTokenGen: tokenGenerator = function*(line: string) {
	yield {kind: 'line', str: line}
	return
}

export const allTokensIn = function*(
		iterable: Iterable<string>,
		gen: tokenGenerator = identTokenGen
		): Generator<Token, void, void> {

	let level = 0
	for (const str of iterable) {
		DBG(`LINE: '${escapeStr(str)}'`)
		if (isEmpty(str)) {
			yield {kind: 'empty', str}
		}
		else {
			const [indent, line] = splitLine(str)
			while (indent > level) {
				level += 1
				yield {kind: 'indent', str: ''}
			}
			while (indent < level) {
				level -= 1
				yield {kind: 'undent', str: ''}
			}
			for (const tok of gen(line)) {
				yield tok
			}
		}
	}
	while (level > 0) {
		yield {kind: 'undent', str: ''}
		level -= 1
	}
	return
}

// ---------------------------------------------------------------------------

export const allTokensInBlock = function*(
		block: string,
		gen: tokenGenerator = identTokenGen
		): Generator<Token, void, void> {

	for (const tok of allTokensIn(allLinesInBlock(block), gen)) {
		yield tok
	}
	return
}

// ---------------------------------------------------------------------------

export const tokenTable = (
		lTokens: Token[],
		title='Tokens'
		): string => {

	const table = new TextTable('l l')
	table.fullsep('=')
	table.title(title)
	table.fullsep('=')
	table.labels(['kind', 'str'])
	table.sep()
	for (const tok of lTokens) {
		table.data([tok.kind, tok.str])
	}
	table.fullsep('=')
	return table.asString()
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,