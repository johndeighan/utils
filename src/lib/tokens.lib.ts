"use strict";
// tokens.lib.civet

import {
	undef, defined, notdefined, hash, isEmpty, nonEmpty,
	} from './datatypes.lib.ts'
import {
	getOptions, allLinesInBlock, escapeStr,
	} from './llutils.lib.ts'
import {DBG, DBGVALUE} from './logger.lib.ts'
import {
	oneIndent, indentLevel, splitLine,
	} from './indent.lib.ts'
import {TextTable} from './text-table.lib.ts'

// ---------------------------------------------------------------------------
// ---------------------------------------------------------------------------
// --- Common token types:
//        'line', 'empty', 'indent', 'undent'

export type Token = {
	kind: string
	str: string
	name?: string
	value?: any
	}

// ---------------------------------------------------------------------------

export type TTokenGenerator = (
		line: string
		) => Generator<Token, void, void>

const identTokenGen: TTokenGenerator = function*(line: string) {
	yield {kind: 'line', str: line}
	return
}

export const allTokensIn = function*(
		iterable: Iterable<string>,
		gen: TTokenGenerator = identTokenGen,
		hOptions: hash={}
		): Generator<Token, void, void> {

	const {lTypes} = getOptions(hOptions, {
		lTypes: ['indent','undent']
		})
	let level = 0
	for (const str of iterable) {
		DBG(`LINE: '${escapeStr(str)}'`)
		if (isEmpty(str)) {
			if (lTypes.includes('empty')) {
				yield {kind: 'empty', str}
			}
		}
		else {
			// --- NOTE: If indent > 0, oneIndent will be set
			const [indent, line] = splitLine(str)
			if (lTypes.includes('indent') && (indent > level)) {
				level += 1
				yield {kind: 'indent', str: ''}
				while (indent > level) {
					level += 1
					yield {kind: 'indent', str: oneIndent || ''}
				}
			}
			if (lTypes.includes('undent') && (indent < level)) {
				level -= 1
				yield {kind: 'undent', str: oneIndent || ''}
				while (indent < level) {
					level -= 1
					yield {kind: 'undent', str: ''}
				}
			}
			for (const tok of gen(line)) {
				yield tok
			}
		}
	}
	if (lTypes.includes('undent')) {
		while (level > 0) {
			yield {kind: 'undent', str: ''}
			level -= 1
		}
	}
	return
}

// ---------------------------------------------------------------------------

export const allTokensInBlock = function*(
		block: string,
		gen: TTokenGenerator = identTokenGen
		): Generator<Token, void, void> {

	for (const tok of allTokensIn(allLinesInBlock(block), gen)) {
		yield tok
	}
	return
}

// ---------------------------------------------------------------------------

export const tokenTable = (
		lTokens: Iterable<Token>,
		title='Tokens'
		): string => {

	const table = new TextTable('l l')
	table.fullsep('=')
	table.title(title)
	table.fullsep('=')
	table.labels(['kind', 'str'])
	table.sep()
	for (const tok of lTokens) {
		table.data([tok.kind, tok.str])
	}
	table.fullsep('=')
	return table.asString()
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,