"use strict";
// logger.lib.civet

import {existsSync} from "@std/fs"
import {sprintf} from "@std/fmt/printf"
import {
	ConsoleHandler, FileHandler, setup, getLogger,
	LogRecord,
	} from "@std/log"

import {
	undef, defined, notdefined, assert,
	hash, isString,
	} from './datatypes.lib.ts'
import {
	croak, pass, sinceLoadStr, OL, ML,
	} from './llutils.lib.ts'

/**
 * @module logger - logging utilities
 */

const Deno = globalThis.Deno
const logFileName : string = "./logs/logs.txt"
const sepdash : string = '-'.repeat(32)
const sepeq : string   = '='.repeat(32)

// --- These are not exported
const isSep = (str : string): boolean => {
	return (str === sepdash) || (str === sepeq)
}

const getMainModule = (): string => {
	const path: string = new URL(Deno.mainModule).pathname
	return path.slice(1)
}

let indent : number = 0
const prefix = () => '   '.repeat(indent)

const hFileLabel: hash = {
	DEBUG: 'D ',
	INFO:  'I ',
	WARN:  'W ',
	ERROR: 'ERROR: '
	}

const hConsoleLabel: hash = {
	DEBUG: '',
	INFO:  '',
	WARN:  '',
	ERROR: ''
	}

// ---------------------------------------------------------------------------

const hLoggerConfig: hash = {
	handlers: {

		profile: new ConsoleHandler('DEBUG', {
			formatter: ((rec: LogRecord) => {
				const {datetime, msg, levelName} = rec
				const ts = sinceLoadStr()
				const label = hConsoleLabel[levelName]
				return `[${ts}] ${label}${prefix()}${msg}`
			}
				)
			}),

		pfile: new FileHandler('DEBUG', {
			filename: logFileName,
			mode: 'a',
			formatter: (rec) => {
				const {datetime, msg, levelName} = rec
				const ts = sinceLoadStr()
				const label = hFileLabel[levelName]
				return `[${ts}] ${label}${prefix()}${msg}`
			}
			}),

		console: new ConsoleHandler('DEBUG', {
			formatter: ((rec) => {
				const {levelName, msg} = rec
				assert(isString(msg), `Not a string: ${msg}`)
				if (msg.startsWith('=====  ')) {
					return ''
				}
				const label = hConsoleLabel[levelName]
				assert(defined(label), `No label for ${levelName}`)
				return `${label}${prefix()}${msg}`
			}
				)
			}),

		file: new FileHandler('DEBUG', {
			filename: logFileName,
			mode: 'a',
			formatter: (rec) => {
				const {levelName, msg} = rec
				if (isSep(msg)) {
					return msg
				}
				else if (msg.startsWith('=====  ')) {
					return msg
				}
				else {
					const label = hFileLabel[levelName]
					assert(defined(label), `No label for ${levelName}`)
					return `${label}${prefix()}${msg}`
				}
			}
				}),
	},

	// --- assign handlers to loggers
	//     must include:
	//        'profile', 'debug', 'info', 'warn', 'error', 'file' and 'silent'
	loggers: {
		profile: {
			level: "DEBUG",
			num: 1,
			handlers: ["profile", "pfile"]
			},
		debug: {
			level: "DEBUG",
			num: 2,
			handlers: ["console", "file"]
			},
		info: {
			level: "INFO",
			num: 3,
			handlers: ["console", "file"]
			},
		warn: {
			level: "WARN",
			num: 4,
			handlers: ["console", "file"]
			},
		error: {
			level: "ERROR",
			num: 5,
			handlers: ["console", "file"]
			},
		file: {
			level: "DEBUG",
			num: 6,
			handlers: ["file"]
			},
		silent: {
			level: "ERROR",
			num: 7,
			handlers: []
			}
		}
	}

await setup(hLoggerConfig)

export const INDENT = Symbol('indent')
export const UNDENT = Symbol('undent')
export const CLEAR  = Symbol('clear')

// ---------------------------------------------------------------------------
// levels: profile, debug, info, warn, error, file, silent

class LoggerEx {

	defLevel: string       = Deno.env.get('DEFAULT_LOGGER') || 'info'
	lLoggerStack: string[] = [this.defLevel]
	hConfig: hash          = hLoggerConfig
	hLoggers: hash         = this.hConfig.loggers
	silent: boolean        = false
	mainModule: string     = getMainModule()

	constructor() {
		this.check(this.defLevel)
	}

	curLevel(): string {
		const result = this.lLoggerStack.at(-1)
		if (result === undef) {
			throw new Error("empty stack")
		}
		else {
			return result
		}
	}

	levelChanged(): void {
		return
	}

	setLevel(level: string): void {
		this.check(level)
		this.lLoggerStack[this.lLoggerStack.length-1] = level
		this.levelChanged()
		return
	}

	pushLevel(level: string): void {
		this.check(level)
		this.lLoggerStack.push(level)
		this.levelChanged()
		return
	}

	popLevel(): string {
		assert((this.lLoggerStack.length > 0), "Empty logger stack")
		const level = this.lLoggerStack.pop()
		if (level === undef) {
			throw new Error("empty stack")
		}
		this.levelChanged()
		return level
	}

	isActive(level: string): boolean {
		this.check(level)
		const curNum = this.hLoggers[this.curLevel()].num
		const lvlNum = this.hLoggers[level].num
		return (lvlNum >= curNum)
	}

	output(level: string, lItems: any[]): void {
		const main = getMainModule()
		if (main !== this.mainModule) {
			const logger = getLogger('debug')
			logger.debug(`=====  ${main}  =====`)
			this.mainModule = main
		}
		if (this.isActive(level)) {
			for (const item of lItems) {
				switch(item) {
					case INDENT: {
						indent += 1;break;
					}
					case UNDENT: {
						indent = (indent===0) ? 0 : indent-1;break;
					}
					case CLEAR: {
						this.clearLog();break;
					}
					default: {
						const str = (
							isString(item)
								? item
								: ML(item)
							)
						const logger = getLogger(this.curLevel())
						switch(level) {
//							when 'profile'
//								logger.profile str
							case 'debug': {
								logger.debug(str);break;
							}
							case 'info': {
								logger.info(str);break;
							}
							case 'warn': {
								logger.warn(str);break;
							}
							case 'error': {
								logger.error(str);break;
							}
//							when 'file'
//								logger.file str
							case 'silent': {
								pass();break;
							}
							default: {
								logger.debug(str)
							}
						}
					}
				}
			}
		}
		return
	}

	flush(): void {
		this.hConfig.handlers.file.flush()
		this.hConfig.handlers.pfile.flush()
		return
	}

	clearLog(): void {
		this.flush()
		Deno.writeTextFileSync(logFileName, '')
		return
	}

	getFullLog(): string {
		this.flush()
		const text = Deno.readTextFileSync(logFileName)
		return text ? text.trim() : ''
	}

	getLog(): string {
		const text = this.getFullLog()
		const lLines = text ? text.split('\n') : []
		const lNewLines = lLines.filter((x) => !x.match(/^=====\s\s/))
		const resultStr = lNewLines.join('\n')
		return resultStr
	}

	check(level: string): void {
		assert(this.hLoggers[level], `Bad logger level: '${level}'`)
		return
	}
}

const logger: LoggerEx = new LoggerEx()

// ---------------------------------------------------------------------------

export const setLogLevel  = (level: string): void => logger.setLevel(level)
export const pushLogLevel = (level: string): void => logger.pushLevel(level)
export const popLogLevel  = (): string => { return logger.popLevel() }
export const curLogLevel  = (): string => { return logger.curLevel() }

export const DBG  = (...lItems: any[]): void => logger.output('debug', lItems)
export const LOG  = (...lItems: any[]): void => logger.output('info', lItems)
export const WARN = (...lItems: any[]): void => logger.output('warn', lItems)
export const ERR  = (...lItems: any[]): void => logger.output('error', lItems)
export const LOGVALUE = (label: string, value: any): void => {
	LOG(`${label} = ${ML(value)}`)
	return
}
export const DBGVALUE = (label: string, value: any): void => {
	DBG(`${label} = ${ML(value)}`)
}

export const getFullLog   = (): string => { return logger.getFullLog() }
export const getLog       = (): string => { return logger.getLog() }
export const clearLog     = (): void => logger.clearLog()

//# sourceMappingURL=data:application/json;charset=utf-8;base64,