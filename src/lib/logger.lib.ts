"use strict";
// logger.lib.civet

import {
	existsSync,
	} from '@std/fs'
import {LogLevels} from "@std/log/levels"
import {
	ConsoleHandler, FileHandler, setup, getLogger, LogRecord,
	} from '@std/log'

import {
	getPrefix,
	} from './unicode.lib.ts'
import {
	undef, defined, notdefined, hash, isString, nonEmpty,
	} from './datatypes.lib.ts'
import {
	spaces, o, sinceLoadStr, getOptions, OL, ML, pass, croak,
	} from './llutils.lib.ts'
import {
	TLogLevel, isLogLevel, getLogLevel, setLogLevel,
	pushLogLevel, popLogLevel, resetLogLevel,
	isInactiveLevel,
	} from './log-levels.lib.ts'
import {
	getFormatter, indentLog, undentLog,
	getConsoleLog, clearConsoleLog, logIndent,
	} from './log-formatter.lib.ts'

export {
	getLogLevel, isLogLevel, setLogLevel,
	pushLogLevel, popLogLevel,
	indentLog, undentLog,
	clearConsoleLog, getConsoleLog,
	}
export type {TLogLevel}

// ---------------------------------------------------------------------------

const mainModule: string = new URL(Deno.mainModule).pathname.slice(1)

const logFileName = (() => {
	const lMatches = mainModule.match(/[A-Za-z0-9_\-\.]+$/)
	if (defined(lMatches)) {
		const label = lMatches[0].replaceAll('.', '_')
		const time = new Date().toISOString().replaceAll(':','-')
		return `logs/${label} ${time}.log`
	}
	else {
		return "logs/dummy.log"
	}
}
	)()

// ---------------------------------------------------------------------------

export const getLog = (from: string): string => {

	switch(from) {
		case 'console': {
			return getConsoleLog()
		}
		case 'file': {
			if (existsSync(logFileName)) {
				const data = Deno.readFileSync(logFileName)
				const decoder = new TextDecoder("utf-8")
				return decoder.decode(data)
			}
			else {
				return ''
			}
		}
		default: {
			croak(`getLog(): invalid from = ${from}`)
			return ''
		}
	}
}

// ---------------------------------------------------------------------------

export const clearLog = (which: string): void => {

	switch(which) {
		case 'console': {
			clearConsoleLog();break;
		}
		case 'file': {
			const encoder = new TextEncoder();
			const str = encoder.encode('')
			Deno.writeFileSync(logFileName, str);break;
		}
		case 'both': {
			clearConsoleLog()
			const encoder = new TextEncoder();
			const str = encoder.encode('')
			Deno.writeFileSync(logFileName, str);break;
		}
		default: {
			pass()
		}
	}
	return
}

// ---------------------------------------------------------------------------

const hConfig: hash = {

	handlers: {

		console: new ConsoleHandler('DEBUG', {
			formatter: getFormatter('$msg', 'console')
			}),

		file: new FileHandler('DEBUG', {
			filename: logFileName,
			mode: 'a',
			formatter: getFormatter('$ll $msg', 'file')
			}),

		console_prof: new ConsoleHandler('DEBUG', {
			formatter: getFormatter('[$ts] $msg', 'console')
			}),

		file_prof: new FileHandler('DEBUG', {
			filename: logFileName,
			mode: 'a',
			formatter: getFormatter('[$ts] $ll $msg', 'file')
			}),
	},

	// --- assign handlers to loggers
	//     order from most verbose to least verbose

	loggers: {
		profile: {
			level: "DEBUG",
			num: 1,
			handlers: ["console_prof", "file_prof"]
			},
		debug: {
			level: "DEBUG",
			num: 2,
			handlers: ["console", "file"]
			},
		info: {
			level: "INFO",
			num: 3,
			handlers: ["console", "file"]
			},
		warn: {
			level: "WARN",
			num: 4,
			handlers: ["console", "file"]
			},
		error: {
			level: "ERROR",
			num: 5,
			handlers: ["console", "file"]
			},
		file: {
			level: "DEBUG",
			num: 6,
			handlers: ["file"]
			},
		silent: {
			level: "ERROR",
			num: 7,
			handlers: []
			}
		}
	}

setup(hConfig)
const hLoggers = hConfig.loggers
const hHandlers = hConfig.handlers

export const INDENT = Symbol('indent')
export const UNDENT = Symbol('undent')

// ---------------------------------------------------------------------------

const output = (level: TLogLevel, lItems: any[]): void => {

	if (isInactiveLevel(level)) {
		return
	}

	let logger = getLogger(getLogLevel())
	for (const item of lItems) {
		switch(item) {
			case INDENT: {
				indentLog();break;
			}
			case UNDENT: {
				undentLog();break;
			}
			default: {
				const str = isString(item) ? item : ML(item)
				if (nonEmpty(str)) {
					switch(level) {
						case 'debug': { logger.debug(str);break;
						}
						case 'info': {  logger.info(str);break;
						}
						case 'warn': {  logger.warn(str);break;
						}
						case 'error': { logger.error(str);break;
						}
						default: { pass() }
					}
				}
			}
		}
	}

	return
}

// ---------------------------------------------------------------------------

export const DBG  = (...lItems: any[]): void => {
	output('debug', lItems)
	return
}

export const LOG  = (...lItems: any[]): void => {
	output('info', lItems)
	return
}

export const WARN = (...lItems: any[]): void => {
	output('warn', lItems)
	return
}

export const ERR  = (...lItems: any[]): void => {
	output('error', lItems)
	return
}

export const LOGVALUE = (label: string, value: any): void => {
	if (isInactiveLevel('info')) {
		return
	}
	LOG(`${label} = ${ML(value)}`)
	return
}

export const DBGVALUE = (label: string, value: any): void => {
	if (isInactiveLevel('debug')) {
		return
	}
	DBG(`${label} = ${ML(value)}`)
	return
}

// ---------------------------------------------------------------------------

export const removeLogFile = (): void => {

	Deno.removeSync(logFileName)
	return
}

// ---------------------------------------------------------------------------

export type TFormatter<T> = (desc: string, item: (T | undefined)) => string

export class TreeLogger<T> {

	// --- data fields
	indentLevel: number = 0
	logLevel: TLogLevel = 'debug'
	formatter: TFormatter<T>

	// --- methods
	constructor(
			formatter1 = (desc: string, item: (T | undefined)) => desc,
			logLevel: string = 'debug'
			) {
		this.formatter = formatter1;
		if (isLogLevel(logLevel)) {
			this.logLevel = logLevel
		}
	}

	start(desc: string, item: (T | undefined)=undef): void {
		const str = this.formatter(desc, item)
		const pre = getPrefix(this.indentLevel, 'plain')
		output(this.logLevel, [pre + str])
		this.indentLevel += 1
		return
	}

	log(desc: string, item: (T | undefined)=undef): void {
		const str = this.formatter(desc, item)
		const pre = getPrefix(this.indentLevel, 'plain')
		output(this.logLevel,  [pre + str])
		return
	}

	succeed(desc: string, item: (T | undefined)=undef): void {
		const str = this.formatter(desc, item)
		const pre = getPrefix(this.indentLevel, 'withArrow')
		output(this.logLevel,  [pre + str])
		this.indentLevel -= 1
		return
	}

	fail(desc: string, item: (T | undefined)=undef): void {
		const str = this.formatter(desc, item)
		const pre = getPrefix(this.indentLevel, 'withArrow')
		output(this.logLevel,  [pre + str])
		this.indentLevel -= 1
		return
	}
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,