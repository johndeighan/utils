# extract.lib.civet

import {sep} from 'base-utils'
import {
	undef, defined, notdefined, isString, isArray, isEmpty, nonEmpty,
	integer,
	assert, assertIsString, assertIsNumber, assertIsArray,
	} from 'datatypes'
import {o} from 'llutils'
import {toNice} from 'to-nice'

# ---------------------------------------------------------------------------

export type TPathItem = string | number

export getDsPath := (lPath: TPathItem[]): string =>

	lParts := for x of lPath
		isString(x) ? ".#{x}" : "[#{x}]"
	return lParts.join('')

# ---------------------------------------------------------------------------

export extract := (
		x: unknown,
		dspath: string | TPathItem[]
		): unknown =>

	pathstr := isArray(dspath) ? getDsPath(dspath) : dspath
	if nonEmpty(pathstr)
		expr := "x = x#{pathstr}"
		try
			eval expr
		catch err
			msg: string := (
				  isString(err)          ? err
				: (err instanceof Error) ? err.message
				:                          'Unknown error'
				)
			try
				console.log sep("EVAL ERROR in #{expr}", '=')
				console.log msg
				console.log sep(undef, '=')
				console.log toNice(x, o'ignoreEmptyValues')
				console.log sep(undef, '=')
			console.log "EVAL ERROR in '#{expr}'"
			console.log sep(undef, '=')
			Deno.exit 99
	return x

# ---------------------------------------------------------------------------

export getString := (
		x: unknown,
		dspath: string | TPathItem[]
		value: string? = undef
		): string =>

	val := extract(x, dspath)
	assertIsString(val)
	if value
		assert (val == value), "Expected #{value}, got #{val}"
	return val

# ---------------------------------------------------------------------------

export getNumber := (
		x: unknown,
		dspath: string | TPathItem[]
		value: number? = undef
		): number =>

	val := extract(x, dspath)
	assertIsNumber(val)
	if value
		assert (val == value), "Expected #{value}, got #{val}"
	return val

# ---------------------------------------------------------------------------

export getArray := (
		x: unknown,
		dspath: string | TPathItem[]
		len: integer? = undef
		): unknown[] =>

	val := extract(x, dspath)
	assertIsArray(val)
	if len
		assert (val.length == len), "Expected #{len} len array, got #{val}"
	return val
