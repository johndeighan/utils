"use strict";
// ast-walker.lib.civet

import type {SourceFile} from 'npm:typescript'

import {
	undef, defined, notdefined, integer,
	isArray, isHash, isNonPrimitive, TFilterFunc, TDefined,
	} from 'datatypes'

// ---------------------------------------------------------------------------

export type TNodeInfo = {
	node: unknown
	kindStr?: string
	level: integer
	key?: string
	parent?: TNodeInfo
	}

// ---------------------------------------------------------------------------

export const getAstWalker = (
		item: TDefined | SourceFile,
		filter: TFilterFunc = isNonPrimitive,
		level: number = 0,
		setVisited: WeakSet<object> = new WeakSet(),
		parent: (TNodeInfo | undefined) = undef
		) => {

	return function*(): Generator<TNodeInfo, void, void> {

		const cur = {
			node: item,
			level,
			parent
			}
		if ((typeof item === 'object') && setVisited.has(item)) {
			return
		}
		if (filter(item)) {
			yield cur
		}
		if ((typeof item === 'object') && (item !== null)) {
			setVisited.add(item)
		}

		if (isArray(item)) {
			for (const val of item) {
				if (defined(val)) {
					for (const info of getAstWalker(val, filter, level+1, setVisited, cur)()) {
						yield info
					}
				}
			}
		}
		else if (isHash(item)) {
			for (const key in item) {const val = item[key];
				if (defined(val)) {
					for (const info of getAstWalker(val, filter, level+1, setVisited, cur)()) {
						yield info
					}
				}
			}
		}
		return
	}
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3JjL2xpYi9hc3Qtd2Fsa2VyLmxpYi5jaXZldC50c3giLCJzb3VyY2VzIjpbInNyYy9saWIvYXN0LXdhbGtlci5saWIuY2l2ZXQiXSwibWFwcGluZ3MiOiI7QUFBQSx1QkFBc0I7QUFDdEIsQUFBQTtBQUNBLEFBQUEsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLElBQUksQ0FBQyxnQkFBZ0I7QUFDOUMsQUFBQTtBQUNBLEFBQUEsQUFBQSxNQUFNLENBQUMsQ0FBQztBQUNSLENBQUMsS0FBSyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsT0FBTyxDQUFDO0FBQ3JDLENBQUMsT0FBTyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsY0FBYyxDQUFDLENBQUMsV0FBVyxDQUFDLENBQUMsUUFBUSxDQUFDO0FBQ3hELENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxXQUFXO0FBQ25CLEFBQUE7QUFDQSxBQUFBLDhFQUE2RTtBQUM3RSxBQUFBO0FBQ0EsQUFBQSxBQUFBLE1BQU0sQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ3pCLEFBQUEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxPQUFPO0FBQ2QsQUFBQSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsTUFBTTtBQUNqQixBQUFBLENBQUMsS0FBSyxDQUFDLENBQUMsT0FBTztBQUNmLEFBQUEsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLE1BQU07QUFDYixBQUFBLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxTQUFTO0FBQ25CLENBQUMsQ0FBQztBQUNGLEFBQUE7QUFDQSxBQUFBLDhFQUE2RTtBQUM3RSxBQUFBO0FBQ0EsQUFBQSxBQUFBLE1BQU0sQ0FBYSxNQUFaLFlBQVksQ0FBQyxDQUFFLENBQUMsQ0FBQztBQUN4QixBQUFBLEVBQUUsSUFBSSxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUM7QUFDOUIsQUFBQSxFQUFFLE1BQU0sQ0FBQyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsY0FBYyxDQUFBO0FBQ3RDLEFBQUEsRUFBRSxLQUFLLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQTtBQUNuQixBQUFBLEVBQUUsVUFBVSxDQUFDLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQTtBQUM3QyxBQUFBLEVBQUUsTUFBTSxDLEMsQ0FBQyxBQUFDLFMsWSxDQUFVLENBQUMsQ0FBQyxDQUFDLEtBQUs7QUFDNUIsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFBLENBQUE7QUFDTixBQUFBO0FBQ0EsQUFBQSxDQUFDLE1BQU0sQ0FBc0MsUSxDQUFyQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUksQ0FBQSxDQUFBO0FBQy9DLEFBQUE7QUFDQSxBQUFBLEVBQUssTUFBSCxHQUFHLENBQUMsQ0FBRSxDQUFDLENBQUM7QUFDVixBQUFBLEdBQUcsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFBO0FBQ2IsQUFBQSxHQUFHLEtBQUssQ0FBQTtBQUNSLEFBQUEsR0FBRyxNQUFNO0FBQ1QsR0FBRyxDQUFDO0FBQ0osQUFBQSxFQUFFLEdBQUcsQ0FBQSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRSxDQUFDLFFBQVEsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFBLENBQUEsQ0FBQTtBQUN0RCxBQUFBLEdBQUcsTTtFQUFNLENBQUE7QUFDVCxBQUFBLEVBQUUsR0FBRyxDQUFBLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQSxDQUFBLENBQUE7QUFDakIsQUFBQSxHQUFHLEtBQUssQ0FBQyxHO0VBQUcsQ0FBQTtBQUNaLEFBQUEsRUFBRSxHQUFHLENBQUEsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUUsQ0FBQyxRQUFRLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRSxDQUFDLElBQUksQ0FBQyxDQUFBLENBQUEsQ0FBQTtBQUNoRCxBQUFBLEdBQUcsVUFBVSxDQUFDLEdBQUcsQ0FBQSxBQUFDLElBQUksQztFQUFBLENBQUE7QUFDdEIsQUFBQTtBQUNBLEFBQUEsRUFBRSxHQUFHLENBQUEsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFBLENBQUEsQ0FBQTtBQUNsQixBQUFBLEdBQUcsR0FBRyxDQUFDLENBQUEsTUFBQSxHQUFHLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQSxDQUFBLENBQUE7QUFDbEIsQUFBQSxJQUFJLEdBQUcsQ0FBQSxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUEsQ0FBQSxDQUFBO0FBQ25CLEFBQUEsS0FBSyxHQUFHLENBQUMsQ0FBQSxNQUFBLElBQUksQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUEsQ0FBQSxDQUFBO0FBQ3RFLEFBQUEsTUFBTSxLQUFLLENBQUMsSTtLQUFJLEM7SUFBQSxDO0dBQUEsQztFQUFBLENBQUE7QUFDaEIsQUFBQSxFQUFFLElBQUksQ0FBQyxHQUFHLENBQUEsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFBLENBQUEsQ0FBQTtBQUN0QixBQUFBLEdBQUcsR0FBRyxDQUFDLENBQUEsTUFBQSxHQUFPLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQSxDQUFBLENBQVgsTUFBQSxHLEdBQU0sQUFBQyxJLENBQVgsRyxDLENBQWU7QUFDdEIsQUFBQSxJQUFJLEdBQUcsQ0FBQSxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUEsQ0FBQSxDQUFBO0FBQ25CLEFBQUEsS0FBSyxHQUFHLENBQUMsQ0FBQSxNQUFBLElBQUksQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUEsQ0FBQSxDQUFBO0FBQ3RFLEFBQUEsTUFBTSxLQUFLLENBQUMsSTtLQUFJLEM7SUFBQSxDO0dBQUEsQztFQUFBLENBQUE7QUFDaEIsQUFBQSxFQUFFLE07Q0FDRixDO0FBQUEiLCJuYW1lcyI6W10sInNvdXJjZXNDb250ZW50IjpbIiMgYXN0LXdhbGtlci5saWIuY2l2ZXRcblxuaW1wb3J0IHR5cGUge1NvdXJjZUZpbGV9IGZyb20gJ25wbTp0eXBlc2NyaXB0J1xuXG5pbXBvcnQge1xuXHR1bmRlZiwgZGVmaW5lZCwgbm90ZGVmaW5lZCwgaW50ZWdlcixcblx0aXNBcnJheSwgaXNIYXNoLCBpc05vblByaW1pdGl2ZSwgVEZpbHRlckZ1bmMsIFREZWZpbmVkLFxuXHR9IGZyb20gJ2RhdGF0eXBlcydcblxuIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuZXhwb3J0IHR5cGUgVE5vZGVJbmZvID0ge1xuXHRub2RlOiB1bmtub3duXG5cdGtpbmRTdHI/OiBzdHJpbmdcblx0bGV2ZWw6IGludGVnZXJcblx0a2V5Pzogc3RyaW5nXG5cdHBhcmVudD86IFROb2RlSW5mb1xuXHR9XG5cbiMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbmV4cG9ydCBnZXRBc3RXYWxrZXIgOj0gKFxuXHRcdGl0ZW06IFREZWZpbmVkIHwgU291cmNlRmlsZSxcblx0XHRmaWx0ZXI6IFRGaWx0ZXJGdW5jID0gaXNOb25QcmltaXRpdmVcblx0XHRsZXZlbDogbnVtYmVyID0gMFxuXHRcdHNldFZpc2l0ZWQ6IFdlYWtTZXQ8b2JqZWN0PiA9IG5ldyBXZWFrU2V0KClcblx0XHRwYXJlbnQ6IFROb2RlSW5mbz8gPSB1bmRlZlxuXHRcdCkgPT5cblxuXHRyZXR1cm4gKCk6IEdlbmVyYXRvcjxUTm9kZUluZm8sIHZvaWQsIHZvaWQ+IC0+XG5cblx0XHRjdXIgOj0ge1xuXHRcdFx0bm9kZTogaXRlbVxuXHRcdFx0bGV2ZWxcblx0XHRcdHBhcmVudFxuXHRcdFx0fVxuXHRcdGlmICh0eXBlb2YgaXRlbSA9PSAnb2JqZWN0JykgJiYgc2V0VmlzaXRlZC5oYXMoaXRlbSlcblx0XHRcdHJldHVyblxuXHRcdGlmIGZpbHRlcihpdGVtKVxuXHRcdFx0eWllbGQgY3VyXG5cdFx0aWYgKHR5cGVvZiBpdGVtID09ICdvYmplY3QnKSAmJiAoaXRlbSAhPSBudWxsKVxuXHRcdFx0c2V0VmlzaXRlZC5hZGQgaXRlbVxuXG5cdFx0aWYgaXNBcnJheShpdGVtKVxuXHRcdFx0Zm9yIHZhbCBvZiBpdGVtXG5cdFx0XHRcdGlmIGRlZmluZWQodmFsKVxuXHRcdFx0XHRcdGZvciBpbmZvIG9mIGdldEFzdFdhbGtlcih2YWwsIGZpbHRlciwgbGV2ZWwrMSwgc2V0VmlzaXRlZCwgY3VyKSgpXG5cdFx0XHRcdFx0XHR5aWVsZCBpbmZvXG5cdFx0ZWxzZSBpZiBpc0hhc2goaXRlbSlcblx0XHRcdGZvciBrZXksdmFsIGluIGl0ZW1cblx0XHRcdFx0aWYgZGVmaW5lZCh2YWwpXG5cdFx0XHRcdFx0Zm9yIGluZm8gb2YgZ2V0QXN0V2Fsa2VyKHZhbCwgZmlsdGVyLCBsZXZlbCsxLCBzZXRWaXNpdGVkLCBjdXIpKClcblx0XHRcdFx0XHRcdHlpZWxkIGluZm9cblx0XHRyZXR1cm4iXX0=