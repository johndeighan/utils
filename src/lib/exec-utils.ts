"use strict";
// exec-utils.civet

type AutoPromise<T> = Promise<Awaited<T>>;
import {stripAnsiCode} from "@std/fmt/colors"

import {
	undef, defined, notdefined,
	isString, isArray, isArrayOfStrings,
	hash, optionspec,
	} from './datatypes.ts'
import {
	getOptions, croak, assert, OL,
	} from './llutils.ts'
import {
	curLogLevel, pushLogLevel, popLogLevel,
	INDENT, UNDENT,
	DBG, LOG, WARN, ERR,
	} from './logger.ts'

/**
 * @module exec-utils - utilities for executing external code
 */

const textDecoder = new TextDecoder()

// ---------------------------------------------------------------------------

/**
 * convert ArrayBuffer, Int8Array, etc. to a string
 */

export const mkstr = (item: any): string => {

	if (defined(item)) {
		if (isString(item)) {
			return stripAnsiCode(item)
		}
		else if (isArray(item)) {
			return stripAnsiCode(item.join(''))
		}
		else {
			return stripAnsiCode(textDecoder.decode(item))
		}
	}
	else {
		return ''
	}
}

// ---------------------------------------------------------------------------

/**
 * build a command line from a command name and array of arguments
 */

export const getCmdLine = (cmdName: string, lArgs: string[]): string => {

	assert(isString(cmdName), `cmdName not a string: ${OL(cmdName)}`)
	assert(isArrayOfStrings(lArgs), `not an array of strings: ${OL(lArgs)}`)
	const cmdLine = `${cmdName} ${lArgs.join(' ')}`
	DBG(`cmdLine = ${OL(cmdLine)}`)
	return cmdLine
}

// ---------------------------------------------------------------------------

/**
 * build result hash to be returned by execCmd() or execCmdSync()
 */

export type execCmdResult = {
	success: boolean
	code: number
	signal: (string | undefined)
	stdout: (string | undefined)
	stderr: (string | undefined)
	}

export const getFinalResult = (
	hResult: hash,
	collect: boolean
	): execCmdResult => {

	let ref;if (collect) {
		ref = ({
			success: hResult.success,
			code:    hResult.code,
			signal:  hResult.signal,
			stdout:  mkstr(hResult.stdout),
			stderr:  mkstr(hResult.stderr)
			})
	}
	else {
		ref = ({
			success: hResult.success,
			code:    hResult.code,
			signal:  hResult.signal,
			stdout:  undef,
			stderr:  undef
			})
	};const hRes =ref
	DBG(`hResult = ${OL(hRes)}`)
	return hRes
}

// ---------------------------------------------------------------------------

/**
 * get options to pass to Deno.Command constructor
 * 2nd argument determines whether stdout and stderr are
 * sent to parent process's stdout and stderr or are
 * collected to be returned to the caller
 */

export const getProcOpt = (
	lArgs: string[],
	collect: boolean
	): Deno.CommandOptions => {

	const hEnv: hash = {
		DEFAULT_LOGGER: curLogLevel()
		}

	return (collect?
		({
			args: lArgs,
			env: hEnv,
			stdout: 'piped',
			stderr: 'piped'
			})
	:
		({
			args: lArgs,
			env: hEnv,
			stdout: 'inherit',
			stderr: 'inherit'
			}))
}

// ---------------------------------------------------------------------------
// ASYNC

export const execCmd = async (
	cmdName: string,
	lArgs: string[] = [],
	hOptions: optionspec = {}
	): AutoPromise<execCmdResult> => {

	const {collect, nolog} = getOptions(hOptions, {
		collect: false,
		nolog: false
		})
	if (nolog) {
		pushLogLevel('silent')
	}
	DBG(`EXEC: ${OL(getCmdLine(cmdName, lArgs))}`)
	DBG(INDENT)
	const hProcOpt = getProcOpt(lArgs, collect)
	const child = new Deno.Command(cmdName, hProcOpt)
	DBG(UNDENT)
	const hResult = await child.output()
	const hFinalResult = getFinalResult(hResult, collect)
	if (nolog) {
		popLogLevel()
	}
	return hFinalResult
}

// ---------------------------------------------------------------------------

export const execCmdSync = (
	cmdName: string,
	lArgs: string[] = [],
	hOptions: optionspec = {}
	): execCmdResult => {

	const {collect, nolog} = getOptions(hOptions, {
		collect: false,
		nolog: false
		})
	if (nolog) {
		pushLogLevel('silent')
	}
	DBG(`EXEC SYNC: ${OL(getCmdLine(cmdName, lArgs))}`)
	DBG(INDENT)
	const hProcOpt = getProcOpt(lArgs, collect)
	const child = new Deno.Command(cmdName, hProcOpt)
	DBG(UNDENT)
	const hResult = child.outputSync()
	const hFinalResult = getFinalResult(hResult, collect)
	if (nolog) {
		popLogLevel()
	}
	return hFinalResult
}

// ---------------------------------------------------------------------------

export const cmdSucceeds = (
	cmdName: string,
	lArgs: string[] = [],
	hOptions: optionspec = {}
	): boolean => {

	const {quiet} = getOptions(hOptions, {
		quiet: true
		})
	try {
		const h = quiet ? {collect: true, nolog: true} : {}
		execCmdSync(cmdName, lArgs, h)
		return true
	}
	catch (err) {
		return false
	}
}

// ---------------------------------------------------------------------------

//# sourceMappingURL=data:application/json;charset=utf-8;base64,