# civet.lib.civet

import {findInDir, findConfig, loadConfig} from "@danielx/civet/config"
import {compile, parseProgram} from "@danielx/civet"

import {
	undef, defined, notdefined, assert, hash,
	isString, isNumber, isBoolean, isPrimitive, isArray,
	stringify,
	} from './datatypes.lib.ts'
import {
	croak, pass, keys, hasKey, hasKeys, OL, NodeGenerator,
	} from './llutils.lib.ts'
import {
	LogCmd, DBG, LOG, WARN, ERR,
	pushLogLevel, popLogLevel,
	} from './logger.lib.ts'
import {
	isFile, fileExt, withExt, slurp, barf,
	} from './fs.lib.ts'
import {
	execCmdSync,
	} from './exec.lib.ts'

# ---------------------------------------------------------------------------
# --- ASYNC

/**
 * civet2ast() - convert civet code to civet AST
 */

export civet2ast := (civetCode: string): hash =>

	dir: string := process.cwd()
	path: string | null := await findConfig(dir)
	hConfig: hash := defined(path) ? await loadConfig(path) : {}
	hAST := await parseProgram(civetCode, hConfig)
	return hAST as hash

# ---------------------------------------------------------------------------

export pprintAST := (hAST: hash): string =>

	lLines := for key of keys(hAST)
		value := hAST[key]
		if (key == 'type')
			"[#{value}]"
		else if (key == 'parent')
			"parent: ??"
		else if isPrimitive(value)
			"#{key}: #{value}"
		else if isArray(value)
			stringify(value)
		else
			"#{key}: ?"
	return lLines.join('\n')

