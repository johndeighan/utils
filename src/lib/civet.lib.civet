# civet.lib.civet

import {SourceFile} from 'typescript'
import {
	undef, defined, notdefined, hash, assert,
	} from './datatypes.lib.ts'
import {
	OL, getOptions, o,
	} from './llutils.lib.ts'
import {
	isFile, fileExt, withExt, slurp, barf,
	} from './fs.lib.ts'
import {
	execCmdSync,
	} from './exec.lib.ts'
import {
	ts2ast,
	} from './typescript.lib.ts'

# ---------------------------------------------------------------------------

export civet2tsFile := (
		path: string
		hOptions: hash = {}
		): void =>

	assert isFile(path), "No such file: #{OL(path)} (civet2tsFile)"
	assert (fileExt(path) == '.civet'), "Not a civet file: #{OL(path)}"

	tsPath := withExt(path, '.ts')
	{inlineMap} := getOptions hOptions, {
		inlineMap: true
		}
	if inlineMap
		execCmdSync 'civet', [
			'--inline-map',
			'-o',
			tsPath,
			'-c',
			path
			]
	else
		execCmdSync 'civet', [
			'-o',
			tsPath,
			'-c',
			path
			]
	assert isFile(tsPath), "File not created: #{OL(tsPath)}"
	return

# ---------------------------------------------------------------------------

export civet2ts := (civetCode: string): string =>

	tempFilePath := Deno.makeTempFileSync {suffix: '.civet'}
	barf tempFilePath, civetCode
	civet2tsFile tempFilePath, o'!inlineMap'
	return slurp withExt(tempFilePath, '.ts')

# ---------------------------------------------------------------------------

export civet2ast := (civetCode: string): SourceFile =>

	tsCode := civet2ts civetCode
	return ts2ast(tsCode)

# ---------------------------------------------------------------------------
