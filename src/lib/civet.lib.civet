# civet.lib.civet

import {SourceFile} from 'npm:typescript'

import {
	undef, defined, notdefined, hash, assert,
	isString, isHash,
	} from 'datatypes'
import {OL, ML, getOptions, o} from 'llutils'
import {DBG, DBGVALUE} from 'logger'
import {
	isFile, fileExt, withExt, slurp, barf, barfTempFile,
	parsePath, findSrcFile,
	} from 'fsys'
import {
	TCmdDesc, TExecResult, execCmdSync, execCmd, execCmds,
	} from 'exec'
import {ts2ast} from 'typescript'

# ---------------------------------------------------------------------------
# ASYNC

export compileCivetFiles := (
		lNames: string[]
		purpose: string = 'lib'
		): TExecResult[] =>

	lCmds: TCmdDesc[] := []
	for name of lNames
		path := findSrcFile "#{name}.#{purpose}.civet"
		assert defined(path), "No such file: #{OL(path)}"
		if defined(path)
			lCmds.push ['civet', [
				'--inline-map',
				'-o', '.ts',
				'-c', path
				]]

	lResults := await execCmds lCmds
	return lResults

# ---------------------------------------------------------------------------

export civet2tsFile := (
		path: string
		tsPath: string = withExt(path, '.ts')
		hOptions: hash = {}
		): string =>

	assert isFile(path), "No such file: #{OL(path)} (civet2tsFile)"
	assert (fileExt(path) == '.civet'), "Not a civet file: #{OL(path)}"

	type opt = {
		inlineMap: boolean
		}
	{inlineMap} := getOptions<opt> hOptions, {
		inlineMap: true
		}
	if inlineMap
		execCmdSync 'civet', [
			'--inline-map',
			'-o',
			tsPath,
			'-c',
			path
			]
	else
		execCmdSync 'civet', [
			'-o',
			tsPath,
			'-c',
			path
			]
	assert isFile(tsPath), "File not created: #{OL(tsPath)}"
	return tsPath

# ---------------------------------------------------------------------------

export civet2ts := (civetCode: string): string =>

	tempFilePath := barfTempFile civetCode
	tsFilePath := withExt tempFilePath, '.ts'
	civet2tsFile tempFilePath, tsFilePath, o'!inlineMap'
	return slurp tsFilePath

# ---------------------------------------------------------------------------

export civet2ast := (civetCode: string): SourceFile =>

	return ts2ast(civet2ts(civetCode))
