# civet.lib.civet

import {SourceFile} from 'npm:typescript'

import {
	undef, defined, notdefined, hash, assert, isHash,
	} from 'datatypes'
import {
	OL, ML, getOptions, o, require,
	} from 'llutils'
import {
	DBG, DBGVALUE,
	} from 'logger'
import {
	isFile, fileExt, withExt, slurp, barf, barfTempFile,
	parsePath,
	} from 'fsys'
import {execCmdSync} from 'exec'
import {ts2ast} from 'typescript'

# ---------------------------------------------------------------------------

export civet2tsFile := (
		path: string
		tsPath: string = withExt(path, '.ts')
		hOptions: hash = {}
		): string =>

	assert isFile(path), "No such file: #{OL(path)} (civet2tsFile)"
	assert (fileExt(path) == '.civet'), "Not a civet file: #{OL(path)}"

	type opt = {
		inlineMap: boolean
		}
	{inlineMap} := getOptions<opt> hOptions, {
		inlineMap: true
		}
	if inlineMap
		execCmdSync 'civet', [
			'--inline-map',
			'-o',
			tsPath,
			'-c',
			path
			]
	else
		execCmdSync 'civet', [
			'-o',
			tsPath,
			'-c',
			path
			]
	assert isFile(tsPath), "File not created: #{OL(tsPath)}"
	return tsPath

# ---------------------------------------------------------------------------

export civet2jsFile := (
		path: string
		jsPath: string = withExt(path, '.js')
		hOptions: hash = {}
		): string =>

	assert isFile(path), "No such file: #{OL(path)} (civet2jsFile)"
	assert (fileExt(path) == '.civet'), "Not a civet file: #{OL(path)}"

	type opt = {
		inlineMap: boolean
		}
	{inlineMap} := getOptions<opt> hOptions, {
		inlineMap: true
		}
	if inlineMap
		execCmdSync 'civet', [
			'--js'
			'--inline-map',
			'-o',
			jsPath,
			'-c',
			path
			]
	else
		execCmdSync 'civet', [
			'--js'
			'-o',
			jsPath,
			'-c',
			path
			]
	assert isFile(jsPath), "File not created: #{OL(jsPath)}"
	return jsPath

# ---------------------------------------------------------------------------

export civet2ts := (civetCode: string): string =>

	tempFilePath := barfTempFile civetCode
	tsFilePath := withExt tempFilePath, '.ts'
	civet2tsFile tempFilePath, tsFilePath, o'!inlineMap'
	return slurp tsFilePath

# ---------------------------------------------------------------------------

export civet2js := (civetCode: string): string =>

	tempFilePath := Deno.makeTempFileSync {suffix: '.civet'}
	jsFilePath := withExt tempFilePath, '.js'
	barf tempFilePath, civetCode
	civet2jsFile tempFilePath, jsFilePath, o'!inlineMap'
	return slurp jsFilePath

# ---------------------------------------------------------------------------

export civet2ast := (civetCode: string): SourceFile =>

	tsCode := civet2ts civetCode
	return ts2ast(tsCode)
