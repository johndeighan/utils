"use strict";
// env-stack.lib.civet

import {undef, defined, notdefined, assert, hash} from 'datatypes'
import {hasKey} from 'llutils'

// ---------------------------------------------------------------------------

export class CEnvStack {

	lEnvs: hash[]

	// ..........................................................

	constructor(h: hash = {}) {

		this.lEnvs = [h]
	}

	// ..........................................................

	setVal(name: string, value: unknown): void {

		this.lEnvs[this.lEnvs.length-1][name] = value
		return
	}

	// ..........................................................

	getVal(name: string): unknown {

		for (let start = this.lEnvs.length-1, i1 = start, asc = start <= 0; asc ? i1 <= 0 : i1 >= 0; asc ? ++i1 : --i1) {const i = i1;
			if (hasKey(this.lEnvs[i], name)) {
				return this.lEnvs[i][name]
			}
		}
		return undef
	}

	// ..........................................................

	add(name: string): void {

		this.setVal(name, 1)
		return
	}

	// ..........................................................

	has(name: string): boolean {

		return defined(this.getVal(name))
	}

	// ..........................................................

	pushEnv(h: hash = {}): void {

		this.lEnvs.push(h)
		return
	}

	// ..........................................................

	popEnv(): (hash | undefined) {

		assert((this.lEnvs.length > 0), "Empty env stack")
		return this.lEnvs.pop()
	}
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQzpcXFVzZXJzXFxqb2huZFxcdXRpbHNcXHNyY1xcbGliXFxlbnYtc3RhY2subGliLmNpdmV0LnRzeCIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxqb2huZFxcdXRpbHNcXHNyY1xcbGliXFxlbnYtc3RhY2subGliLmNpdmV0Il0sIm1hcHBpbmdzIjoiO0FBQUEsc0JBQXFCO0FBQ3JCLEFBQUE7QUFDQSxBQUFBLE1BQU0sQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxXQUFXO0FBQ2xFLEFBQUEsQUFBQSxNQUFNLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLENBQUMsU0FBUztBQUM5QixBQUFBO0FBQ0EsQUFBQSw4RUFBNkU7QUFDN0UsQUFBQTtBQUNBLEFBQUEsQUFBQSxNQUFNLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQSxDQUFBO0FBQ3RCLEFBQUE7QUFDQSxBQUFBLENBQUMsS0FBSyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDZCxBQUFBO0FBQ0EsQUFBQSxDQUFDLDZEQUE0RDtBQUM3RCxBQUFBO0FBQ0EsQUFBQSxDLFdBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUEsQ0FBQTtBQUMxQixBQUFBO0FBQ0EsQUFBQSxFQUFFLEksQ0FBQyxLQUFLLEMsQ0FBRSxDQUFDLENBQUMsQ0FBQyxDO0NBQUMsQ0FBQTtBQUNkLEFBQUE7QUFDQSxBQUFBLENBQUMsNkRBQTREO0FBQzdELEFBQUE7QUFDQSxBQUFBLEMsTUFBTyxDQUFDLElBQUksQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFBLENBQUE7QUFDM0MsQUFBQTtBQUNBLEFBQUEsRUFBRSxJLENBQUMsS0FBSyxDQUFDLEksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDLENBQUUsQ0FBQyxLQUFLO0FBQ3ZDLEFBQUEsRUFBRSxNO0NBQU0sQ0FBQTtBQUNSLEFBQUE7QUFDQSxBQUFBLENBQUMsNkRBQTREO0FBQzdELEFBQUE7QUFDQSxBQUFBLEMsTUFBTyxDQUFDLElBQUksQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFBLENBQUE7QUFDOUIsQUFBQTtBQUNBLEFBQUEsRUFBRSxHQUFHLENBQUMsQyxJLEssR0FBTSxJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDLEUsRSxHLEssRSxHLEcsSyxJQUFHLEMsRSxHLEcsRSxJQUFBLEMsRyxFLElBQUEsQyxFLEcsSyxFLEssRUFBRSxDQUFBLENBQUEsQ0FBekIsTUFBQSxDLEcsRSxDQUF5QjtBQUMvQixBQUFBLEdBQUcsR0FBRyxDQUFBLE1BQU0sQ0FBQyxJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUEsQ0FBQSxDQUFBO0FBQzdCLEFBQUEsSUFBSSxNQUFNLENBQUMsSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLEM7R0FBQyxDO0VBQUEsQ0FBQTtBQUMxQixBQUFBLEVBQUUsTUFBTSxDQUFDLEs7Q0FBSyxDQUFBO0FBQ2QsQUFBQTtBQUNBLEFBQUEsQ0FBQyw2REFBNEQ7QUFDN0QsQUFBQTtBQUNBLEFBQUEsQyxHQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUEsQ0FBQTtBQUN4QixBQUFBO0FBQ0EsQUFBQSxFQUFFLEksQ0FBQyxNQUFNLENBQUEsQUFBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUE7QUFDakIsQUFBQSxFQUFFLE07Q0FBTSxDQUFBO0FBQ1IsQUFBQTtBQUNBLEFBQUEsQ0FBQyw2REFBNEQ7QUFDN0QsQUFBQTtBQUNBLEFBQUEsQyxHQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUEsQ0FBQTtBQUMzQixBQUFBO0FBQ0EsQUFBQSxFQUFFLE1BQU0sQ0FBQyxPQUFPLENBQUEsQUFBQyxJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDO0NBQUEsQ0FBQTtBQUM5QixBQUFBO0FBQ0EsQUFBQSxDQUFDLDZEQUE0RDtBQUM3RCxBQUFBO0FBQ0EsQUFBQSxDLE9BQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUEsQ0FBQTtBQUM1QixBQUFBO0FBQ0EsQUFBQSxFQUFFLEksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFBLEFBQUMsQ0FBQyxDQUFBO0FBQ2YsQUFBQSxFQUFFLE07Q0FBTSxDQUFBO0FBQ1IsQUFBQTtBQUNBLEFBQUEsQ0FBQyw2REFBNEQ7QUFDN0QsQUFBQTtBQUNBLEFBQUEsQyxNQUFPLENBQUMsQ0FBQyxDLEMsQ0FBQyxBQUFDLEksWSxDQUFLLENBQUEsQ0FBQTtBQUNoQixBQUFBO0FBQ0EsQUFBQSxFQUFFLE1BQU0sQ0FBQSxBQUFDLENBQUMsSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsaUJBQWlCLENBQUE7QUFDL0MsQUFBQSxFQUFFLE1BQU0sQ0FBQyxJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDO0NBQUMsQztBQUFBLENBQUE7QUFDckIiLCJuYW1lcyI6W10sInNvdXJjZXNDb250ZW50IjpbIiMgZW52LXN0YWNrLmxpYi5jaXZldFxuXG5pbXBvcnQge3VuZGVmLCBkZWZpbmVkLCBub3RkZWZpbmVkLCBhc3NlcnQsIGhhc2h9IGZyb20gJ2RhdGF0eXBlcydcbmltcG9ydCB7aGFzS2V5fSBmcm9tICdsbHV0aWxzJ1xuXG4jIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG5leHBvcnQgY2xhc3MgQ0VudlN0YWNrXG5cblx0bEVudnM6IGhhc2hbXVxuXG5cdCMgLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLlxuXG5cdGNvbnN0cnVjdG9yKGg6IGhhc2ggPSB7fSlcblxuXHRcdEBsRW52cyA9IFtoXVxuXG5cdCMgLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLlxuXG5cdHNldFZhbChuYW1lOiBzdHJpbmcsIHZhbHVlOiB1bmtub3duKTogdm9pZFxuXG5cdFx0QGxFbnZzW0BsRW52cy5sZW5ndGgtMV1bbmFtZV0gPSB2YWx1ZVxuXHRcdHJldHVyblxuXG5cdCMgLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLlxuXG5cdGdldFZhbChuYW1lOiBzdHJpbmcpOiB1bmtub3duXG5cblx0XHRmb3IgaSBvZiBbQGxFbnZzLmxlbmd0aC0xLi4wXVxuXHRcdFx0aWYgaGFzS2V5KEBsRW52c1tpXSwgbmFtZSlcblx0XHRcdFx0cmV0dXJuIEBsRW52c1tpXVtuYW1lXVxuXHRcdHJldHVybiB1bmRlZlxuXG5cdCMgLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLlxuXG5cdGFkZChuYW1lOiBzdHJpbmcpOiB2b2lkXG5cblx0XHRAc2V0VmFsIG5hbWUsIDFcblx0XHRyZXR1cm5cblxuXHQjIC4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi5cblxuXHRoYXMobmFtZTogc3RyaW5nKTogYm9vbGVhblxuXG5cdFx0cmV0dXJuIGRlZmluZWQgQGdldFZhbChuYW1lKVxuXG5cdCMgLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLlxuXG5cdHB1c2hFbnYoaDogaGFzaCA9IHt9KTogdm9pZFxuXG5cdFx0QGxFbnZzLnB1c2ggaFxuXHRcdHJldHVyblxuXG5cdCMgLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLlxuXG5cdHBvcEVudigpOiBoYXNoP1xuXG5cdFx0YXNzZXJ0IChAbEVudnMubGVuZ3RoID4gMCksIFwiRW1wdHkgZW52IHN0YWNrXCJcblx0XHRyZXR1cm4gQGxFbnZzLnBvcCgpXG4iXX0=