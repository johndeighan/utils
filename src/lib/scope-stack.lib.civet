# scope-stack.lib.civet

import {
	undef, defined, notdefined, assert, croak, hash,
	} from 'datatypes'
import {hasKey} from 'llutils'

# ---------------------------------------------------------------------------

export class CScope
	sDefined = new Set<string>()
	sUsed = new Set<string>()

	addDefined(name: string): void
		@sDefined.add name
		return

	addUsed(name: string): void
		@sUsed.add name
		return

	isDefined(name: string): boolean
		return @sDefined.has name

	isUsed(name: string): boolean
		return @sUsed.has name

# ---------------------------------------------------------------------------

export class CScopeStack

	lScopes: CScope[]
	curScope: CScope
	finished: boolean   # --- set when last scope is ended

	# ..........................................................

	constructor(s: CScope = new CScope())

		@curScope = s
		@lScopes = [s]
		@finished = false

	# ..........................................................

	newScope(s: CScope = new CScope()): void

		assert not @finished, "finished = true"
		@curScope = s
		@lScopes.push s
		return

	# ..........................................................

	endScope(): CScope

		switch @lScopes.length
			when 0
				croak "endScope() with no scopes"
			when 1
				@finished = true
			else
				@curScope = @lScopes.at(-2) as CScope
		return @lScopes.pop() as CScope

	# ..........................................................

	addDefined(name: string): void

		assert not @finished, "finished = true"
		@curScope.addDefined name
		return

	# ..........................................................

	addUsed(name: string): void

		assert not @finished, "finished = true"
		@curScope.addUsed name
		return

	# ..........................................................

	isDefined(name: string): boolean

		for scope of [@lScopes...].reverse()
			if scope.isDefined(name)
				return true
		return false

	# ..........................................................

	isUsed(name: string): boolean

		for scope of [@lScopes...].reverse()
			if scope.isUsed(name)
				return true
		return false
