"use strict";
// pllfile.lib.civet

import {
	undef, defined, notdefined, assert, croak, isEmpty, nonEmpty,
	isString, isNonEmptyString, isBoolean, isNumber, isInteger,
	isArray, isArrayOfStrings, isHash, isObject, isRegExp,
	integer, hash, voidFunc,
	} from 'datatypes'
import {
	OL, ML, getOptions, removeEmptyKeys, pass,
	spaces, sinceLoadStr, sleep, relpath,
	} from 'llutils'
import {indented} from 'indent'
import {
	pushLogLevel, popLogLevel, LOG, DBG, ERR,
	INDENT, UNDENT, DBGVALUE, DBGLABELED,
	} from 'logger'
import {TextTable} from 'text-table'
import {slurp, barf, mkDir, getPathType} from 'fsys'
import {
	TPLLToken, isKind, allTokensInBlock, tokenTable,
	} from 'pll'

// ---------------------------------------------------------------------------

export const allTokensInFile = function*(
		path: string
		): Generator<TPLLToken, void, void> {

	for (const tok of allTokensInBlock(slurp(path))) {
		yield tok
	}
	return
}

// ---------------------------------------------------------------------------
// --- Uses a recursive descent parser

export type TFileOp = {
	funcName: 'mkDir' | 'barf'
	path: string
	contents?: string
	}

export const setDirTree = (
		currentDir: string,
		contents: string,
		hOptions: hash = {}
		): TFileOp[] => {

	// --- Extract options
	type opt = {
		debug: boolean
		clear: boolean
		scaffold: boolean
		}
	const {debug, clear, scaffold} = getOptions<opt>(hOptions, {
		debug: false,
		clear: false,
		scaffold: false
		})

	if (!debug) {
		pushLogLevel('info')
	}
	let level: integer = 0

	// --- return calls made
	const lFileOps: TFileOp[] = []

	// ..........................................................

	const dbgEnter = (name: string, ...lArgs: unknown[]) => {
		const strArgs = (
			(()=>{const results=[];for (const arg of lArgs) {
				results.push(OL(arg))
			}return results})()
			).join(', ')
		DBG(`${'   '.repeat(level)}-> ${name}(${strArgs})`)
		level += 1
		return
	}

	// ..........................................................

	const dbgExit = (name: string, ...lArgs: unknown[]) => {
		const strArgs = (
			(()=>{const results1=[];for (const arg of lArgs) {
				results1.push(OL(arg))
			}return results1})()
			).join(', ')
		level -= 1
		DBG(`${'   '.repeat(level)}<- ${name}(${strArgs})`)
		return
	}

	// ..........................................................

	const dbg = (line: string) => {
		DBG(`${'   '.repeat(level)}-- ${OL(line)}`)
		return
	}

	// ..........................................................

	const doMakeDir = (
			dirPath: string
			): void => {

		const path = relpath(dirPath)
		lFileOps.push({
			funcName: 'mkDir',
			path
			})
		if (!scaffold) {
			mkDir(path, clear)
		}
		return
	}

	// ..........................................................

	const doBarf = (
			filePath: string,
			contents: string
			): void => {

		const path = relpath(filePath)
		lFileOps.push({
			funcName: "barf",
			path,
			contents
			})
		if (!scaffold) {
			barf(path, contents)
		}
		return
	}

	// ..........................................................

	const fileHandler = (
			filePath: string,
			lTokens: TPLLToken[]
			): void => {

		dbgEnter('fileHandler', filePath)
		let ref;if (isKind(lTokens[0], 'indent')) {
			lTokens.shift()
			const lLines = []
			let level = 0
			// @ts-ignore
			while ((level > 0) || !isKind(lTokens[0], 'undent')) {
				const tok = lTokens.shift()
				if (notdefined(tok)) {
					croak("No 'undent' in clock")
				}
				else {
					switch(tok.kind) {
						case 'indent': {
							level += 1;break;
						}
						case 'undent': {
							level -= 1
							assert((level >= 0), "Negative level in setDirTree()");break;
						}
						default: {
							if (defined(tok.str)) {
								const line = indented(tok.str, level)
								dbg(line)
								lLines.push(line)
							}
						}
					}
				}
			}

			// --- HERE: (level == 0) AND (lTokens[0].kind == 'undent')
			assert((level === 0), `after file contents, level = ${OL(level)}`)
			assert((lTokens[0].kind === 'undent'),
					`UNDENT expected after contents, got ${OL(lTokens[0])}`)
			lTokens.shift()
			ref = lLines.join('\n')
		}
		else {
			ref = ''
		};const contents =ref
		doBarf(filePath, contents)
		dbgExit('fileHandler', filePath)
		return
	}

	// ..........................................................

	const dirHandler = (
			dirPath: string,
			lTokens: TPLLToken[]
			): void => {

		dbgEnter('dirHandler', dirPath)
		doMakeDir(dirPath)
		if ((lTokens.length > 0) && isKind(lTokens[0], 'indent')) {
			lTokens.shift()
			blockHandler(dirPath, lTokens)
			// @ts-ignore
			assert(isKind(lTokens[0], 'undent'), "Missing UNDENT in dirHandler")
			lTokens.shift()
		}
		dbgExit('dirHandler', dirPath)
		return
	}

	// ..........................................................

	const blockHandler = (dirPath: string, lTokens: TPLLToken[]) => {
		dbgEnter('blockHandler', dirPath)
		while ((lTokens.length > 0) && (lTokens[0].kind !== 'undent')) {
			const tok: TPLLToken = lTokens[0]
			lTokens.shift()
			const {kind, str} = tok
			switch(kind) {
				case 'indent': {
					croak("Unexpected INDENT");break;
				}
				default: {
					if (defined(str) && str.startsWith('/')) {
						dirHandler(`${dirPath}${tok.str}`, lTokens)
					}
					else {
						fileHandler(`${dirPath}/${tok.str}`, lTokens)
					}
				}
			}
		}
		dbgExit('blockHandler')
		return
	}

	// ..........................................................

	const ptype = getPathType(currentDir)
	assert((ptype === 'dir') || (ptype === 'missing'),
			`currentDir is a ${ptype}`)

	// --- Clear the directory if it exists
	doMakeDir(currentDir)

	const lTokens = Array.from(allTokensInBlock(contents))
	DBG(tokenTable(lTokens))

	blockHandler(currentDir, lTokens)
	assert((lTokens.length === 0),
			`Tokens remaining after parse: ${OL(lTokens)}`)
	if (!debug) {
		popLogLevel()
	}
	return lFileOps
}

// ---------------------------------------------------------------------------

export const fileOpsTable = (lFileOps: TFileOp[]): string => {

	const tt = new TextTable("l l")
	tt.fullsep()
	tt.title('FILE OPS')
	tt.fullsep()
	for (const {funcName, path, contents} of lFileOps) {
		switch(funcName) {
			case 'mkDir': {
				tt.data(['mkdir', path]);break;
			}
			case 'barf': {
				tt.data(['barf', path])
				if (contents) {
					for (const line of contents.split('\n')) {
						tt.data(['', line.replace('\t', spaces(3))])
					}
				};break;
			}
		}
	}
	tt.fullsep()
	return tt.asString()
}


//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQzpcXFVzZXJzXFxqb2huZFxcdXRpbHNcXHNyY1xcbGliXFxwbGxmaWxlLmxpYi5jaXZldC50c3giLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcam9obmRcXHV0aWxzXFxzcmNcXGxpYlxccGxsZmlsZS5saWIuY2l2ZXQiXSwibWFwcGluZ3MiOiI7QUFBQSxvQkFBbUI7QUFDbkIsQUFBQTtBQUNBLEFBQUEsTUFBTSxDQUFDLENBQUM7QUFDUixDQUFDLEtBQUssQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLFFBQVEsQ0FBQztBQUM5RCxDQUFDLFFBQVEsQ0FBQyxDQUFDLGdCQUFnQixDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsU0FBUyxDQUFDO0FBQzVELENBQUMsT0FBTyxDQUFDLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxRQUFRLENBQUM7QUFDdkQsQ0FBQyxPQUFPLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxRQUFRLENBQUM7QUFDekIsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFdBQVc7QUFDbkIsQUFBQSxBQUFBLE1BQU0sQ0FBQyxDQUFDO0FBQ1IsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxlQUFlLENBQUMsQ0FBQyxJQUFJLENBQUM7QUFDM0MsQ0FBQyxNQUFNLENBQUMsQ0FBQyxZQUFZLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxPQUFPLENBQUM7QUFDdEMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVM7QUFDakIsQUFBQSxBQUFBLE1BQU0sQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLElBQUksQ0FBQyxRQUFRO0FBQy9CLEFBQUEsQUFBQSxNQUFNLENBQUMsQ0FBQztBQUNSLENBQUMsWUFBWSxDQUFDLENBQUMs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QUE2RTtBQUM3RSxBQUFBO0FBQ0EsQUFBQSxBQUFBLE1BQU0sQ0FBYSxNQUFaLFlBQVksQ0FBQyxDQUFFLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFBLENBQUE7QUFDdkQsQUFBQTtBQUNBLEFBQUEsQ0FBRyxNQUFGLEVBQUUsQ0FBQyxDQUFFLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUM7QUFDM0IsQUFBQSxDQUFDLEVBQUUsQ0FBQyxPQUFPLENBQUMsQ0FBQztBQUNiLEFBQUEsQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFBLEFBQUMsVUFBVSxDQUFBO0FBQ3BCLEFBQUEsQ0FBQyxFQUFFLENBQUMsT0FBTyxDQUFDLENBQUM7QUFDYixBQUFBLENBQUMsR0FBRyxDQUFDLENBQUEsTUFBQSxDQUFDLFFBQVEsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxRQUFRLENBQUEsQ0FBQSxDQUFBO0FBQzNDLEFBQUEsRUFBRSxNQUFNLENBQUEsQUFBQyxRQUFRLENBQUEsQ0FBQSxDQUFBO0FBQ2pCLEFBQUEsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFBLENBQUEsQ0FBQTtBQUNmLEFBQUEsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFBLEFBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQSxPO0dBQUEsQ0FBQTtBQUMzQixBQUFBLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQSxDQUFBLENBQUE7QUFDZCxBQUFBLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQSxBQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUE7QUFDMUIsQUFBQSxJQUFJLEdBQUcsQ0FBQSxRQUFRLENBQUEsQ0FBQSxDQUFBO0FBQ2YsQUFBQSxLQUFLLEdBQUcsQ0FBQyxDQUFBLE1BQUEsSUFBSSxDQUFDLEVBQUUsQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFBLENBQUEsQ0FBQTtBQUNyQyxBQUFBLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQSxBQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDO0tBQUEsQztJQUFBLENBQUEsTztHQUFBLEM7RUFBQSxDO0NBQUEsQ0FBQTtBQUNqRCxBQUFBLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0FBQ2IsQUFBQSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsUUFBUSxDQUFDLEM7QUFBQyxDQUFBO0FBQ3JCO0FBQ0EiLCJuYW1lcyI6W10sInNvdXJjZXNDb250ZW50IjpbIiMgcGxsZmlsZS5saWIuY2l2ZXRcblxuaW1wb3J0IHtcblx0dW5kZWYsIGRlZmluZWQsIG5vdGRlZmluZWQsIGFzc2VydCwgY3JvYWssIGlzRW1wdHksIG5vbkVtcHR5LFxuXHRpc1N0cmluZywgaXNOb25FbXB0eVN0cmluZywgaXNCb29sZWFuLCBpc051bWJlciwgaXNJbnRlZ2VyLFxuXHRpc0FycmF5LCBpc0FycmF5T2ZTdHJpbmdzLCBpc0hhc2gsIGlzT2JqZWN0LCBpc1JlZ0V4cCxcblx0aW50ZWdlciwgaGFzaCwgdm9pZEZ1bmMsXG5cdH0gZnJvbSAnZGF0YXR5cGVzJ1xuaW1wb3J0IHtcblx0T0wsIE1MLCBnZXRPcHRpb25zLCByZW1vdmVFbXB0eUtleXMsIHBhc3MsXG5cdHNwYWNlcywgc2luY2VMb2FkU3RyLCBzbGVlcCwgcmVscGF0aCxcblx0fSBmcm9tICdsbHV0aWxzJ1xuaW1wb3J0IHtpbmRlbnRlZH0gZnJvbSAnaW5kZW50J1xuaW1wb3J0IHtcblx0cHVzaExvZ0xldmVsLCBwb3BMb2dMZXZlbCwgTE9HLCBEQkcsIEVSUixcblx0SU5ERU5ULCBVTkRFTlQsIERCR1ZBTFVFLCBEQkdMQUJFTEVELFxuXHR9IGZyb20gJ2xvZ2dlcidcbmltcG9ydCB7VGV4dFRhYmxlfSBmcm9tICd0ZXh0LXRhYmxlJ1xuaW1wb3J0IHtzbHVycCwgYmFyZiwgbWtEaXIsIGdldFBhdGhUeXBlfSBmcm9tICdmc3lzJ1xuaW1wb3J0IHtcblx0VFBMTFRva2VuLCBpc0tpbmQsIGFsbFRva2Vuc0luQmxvY2ssIHRva2VuVGFibGUsXG5cdH0gZnJvbSAncGxsJ1xuXG4jIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG5leHBvcnQgYWxsVG9rZW5zSW5GaWxlIDo9IChcblx0XHRwYXRoOiBzdHJpbmdcblx0XHQpOiBHZW5lcmF0b3I8VFBMTFRva2VuLCB2b2lkLCB2b2lkPiAtPlxuXG5cdGZvciB0b2sgb2YgYWxsVG9rZW5zSW5CbG9jayhzbHVycChwYXRoKSlcblx0XHR5aWVsZCB0b2tcblx0cmV0dXJuXG5cbiMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4jIC0tLSBVc2VzIGEgcmVjdXJzaXZlIGRlc2NlbnQgcGFyc2VyXG5cbmV4cG9ydCB0eXBlIFRGaWxlT3AgPSB7XG5cdGZ1bmNOYW1lOiAnbWtEaXInIHwgJ2JhcmYnXG5cdHBhdGg6IHN0cmluZ1xuXHRjb250ZW50cz86IHN0cmluZ1xuXHR9XG5cbmV4cG9ydCBzZXREaXJUcmVlIDo9IChcblx0XHRjdXJyZW50RGlyOiBzdHJpbmcsXG5cdFx0Y29udGVudHM6IHN0cmluZyxcblx0XHRoT3B0aW9uczogaGFzaCA9IHt9XG5cdFx0KTogVEZpbGVPcFtdID0+XG5cblx0IyAtLS0gRXh0cmFjdCBvcHRpb25zXG5cdHR5cGUgb3B0ID0ge1xuXHRcdGRlYnVnOiBib29sZWFuXG5cdFx0Y2xlYXI6IGJvb2xlYW5cblx0XHRzY2FmZm9sZDogYm9vbGVhblxuXHRcdH1cblx0e2RlYnVnLCBjbGVhciwgc2NhZmZvbGR9IDo9IGdldE9wdGlvbnM8b3B0PiBoT3B0aW9ucywge1xuXHRcdGRlYnVnOiBmYWxzZVxuXHRcdGNsZWFyOiBmYWxzZVxuXHRcdHNjYWZmb2xkOiBmYWxzZVxuXHRcdH1cblxuXHRpZiBub3QgZGVidWdcblx0XHRwdXNoTG9nTGV2ZWwgJ2luZm8nXG5cdGxldCBsZXZlbDogaW50ZWdlciA9IDBcblxuXHQjIC0tLSByZXR1cm4gY2FsbHMgbWFkZVxuXHRsRmlsZU9wczogVEZpbGVPcFtdIDo9IFtdXG5cblx0IyAuLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uXG5cblx0ZGJnRW50ZXIgOj0gKG5hbWU6IHN0cmluZywgLi4ubEFyZ3M6IHVua25vd25bXSkgPT5cblx0XHRzdHJBcmdzIDo9IChcblx0XHRcdGZvciBhcmcgb2YgbEFyZ3Ncblx0XHRcdFx0T0woYXJnKVxuXHRcdFx0KS5qb2luKCcsICcpXG5cdFx0REJHIFwiI3snICAgJy5yZXBlYXQobGV2ZWwpfS0+ICN7bmFtZX0oI3tzdHJBcmdzfSlcIlxuXHRcdGxldmVsICs9IDFcblx0XHRyZXR1cm5cblxuXHQjIC4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi5cblxuXHRkYmdFeGl0IDo9IChuYW1lOiBzdHJpbmcsIC4uLmxBcmdzOiB1bmtub3duW10pID0+XG5cdFx0c3RyQXJncyA6PSAoXG5cdFx0XHRmb3IgYXJnIG9mIGxBcmdzXG5cdFx0XHRcdE9MKGFyZylcblx0XHRcdCkuam9pbignLCAnKVxuXHRcdGxldmVsIC09IDFcblx0XHREQkcgXCIjeycgICAnLnJlcGVhdChsZXZlbCl9PC0gI3tuYW1lfSgje3N0ckFyZ3N9KVwiXG5cdFx0cmV0dXJuXG5cblx0IyAuLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uXG5cblx0ZGJnIDo9IChsaW5lOiBzdHJpbmcpID0+XG5cdFx0REJHIFwiI3snICAgJy5yZXBlYXQobGV2ZWwpfS0tICN7T0wobGluZSl9XCJcblx0XHRyZXR1cm5cblxuXHQjIC4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi5cblxuXHRkb01ha2VEaXIgOj0gKFxuXHRcdFx0ZGlyUGF0aDogc3RyaW5nXG5cdFx0XHQpOiB2b2lkID0+XG5cblx0XHRwYXRoIDo9IHJlbHBhdGgoZGlyUGF0aClcblx0XHRsRmlsZU9wcy5wdXNoIHtcblx0XHRcdGZ1bmNOYW1lOiAnbWtEaXInXG5cdFx0XHRwYXRoXG5cdFx0XHR9XG5cdFx0aWYgbm90IHNjYWZmb2xkXG5cdFx0XHRta0RpciBwYXRoLCBjbGVhclxuXHRcdHJldHVyblxuXG5cdCMgLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLlxuXG5cdGRvQmFyZiA6PSAoXG5cdFx0XHRmaWxlUGF0aDogc3RyaW5nLFxuXHRcdFx0Y29udGVudHM6IHN0cmluZ1xuXHRcdFx0KTogdm9pZCA9PlxuXG5cdFx0cGF0aCA6PSByZWxwYXRoKGZpbGVQYXRoKVxuXHRcdGxGaWxlT3BzLnB1c2gge1xuXHRcdFx0ZnVuY05hbWU6IFwiYmFyZlwiXG5cdFx0XHRwYXRoXG5cdFx0XHRjb250ZW50c1xuXHRcdFx0fVxuXHRcdGlmIG5vdCBzY2FmZm9sZFxuXHRcdFx0YmFyZiBwYXRoLCBjb250ZW50c1xuXHRcdHJldHVyblxuXG5cdCMgLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLlxuXG5cdGZpbGVIYW5kbGVyIDo9IChcblx0XHRcdGZpbGVQYXRoOiBzdHJpbmcsXG5cdFx0XHRsVG9rZW5zOiBUUExMVG9rZW5bXVxuXHRcdFx0KTogdm9pZCA9PlxuXG5cdFx0ZGJnRW50ZXIgJ2ZpbGVIYW5kbGVyJywgZmlsZVBhdGhcblx0XHRjb250ZW50cyA6PSBpZiBpc0tpbmQobFRva2Vuc1swXSwgJ2luZGVudCcpXG5cdFx0XHRsVG9rZW5zLnNoaWZ0KClcblx0XHRcdGxMaW5lcyA6PSBbXVxuXHRcdFx0bGV0IGxldmVsID0gMFxuXHRcdFx0IyBAdHMtaWdub3JlXG5cdFx0XHR3aGlsZSAobGV2ZWwgPiAwKSB8fCBub3QgaXNLaW5kKGxUb2tlbnNbMF0sICd1bmRlbnQnKVxuXHRcdFx0XHR0b2sgOj0gbFRva2Vucy5zaGlmdCgpXG5cdFx0XHRcdGlmIG5vdGRlZmluZWQodG9rKVxuXHRcdFx0XHRcdGNyb2FrIFwiTm8gJ3VuZGVudCcgaW4gY2xvY2tcIlxuXHRcdFx0XHRlbHNlXG5cdFx0XHRcdFx0c3dpdGNoIHRvay5raW5kXG5cdFx0XHRcdFx0XHR3aGVuICdpbmRlbnQnXG5cdFx0XHRcdFx0XHRcdGxldmVsICs9IDFcblx0XHRcdFx0XHRcdHdoZW4gJ3VuZGVudCdcblx0XHRcdFx0XHRcdFx0bGV2ZWwgLT0gMVxuXHRcdFx0XHRcdFx0XHRhc3NlcnQgKGxldmVsID49IDApLCBcIk5lZ2F0aXZlIGxldmVsIGluIHNldERpclRyZWUoKVwiXG5cdFx0XHRcdFx0XHRlbHNlXG5cdFx0XHRcdFx0XHRcdGlmIGRlZmluZWQodG9rLnN0cilcblx0XHRcdFx0XHRcdFx0XHRsaW5lIDo9IGluZGVudGVkKHRvay5zdHIsIGxldmVsKVxuXHRcdFx0XHRcdFx0XHRcdGRiZyBsaW5lXG5cdFx0XHRcdFx0XHRcdFx0bExpbmVzLnB1c2ggbGluZVxuXG5cdFx0XHQjIC0tLSBIRVJFOiAobGV2ZWwgPT0gMCkgQU5EIChsVG9rZW5zWzBdLmtpbmQgPT0gJ3VuZGVudCcpXG5cdFx0XHRhc3NlcnQgKGxldmVsID09IDApLCBcImFmdGVyIGZpbGUgY29udGVudHMsIGxldmVsID0gI3tPTChsZXZlbCl9XCJcblx0XHRcdGFzc2VydCAobFRva2Vuc1swXS5raW5kID09ICd1bmRlbnQnKSxcblx0XHRcdFx0XHRcIlVOREVOVCBleHBlY3RlZCBhZnRlciBjb250ZW50cywgZ290ICN7T0wobFRva2Vuc1swXSl9XCJcblx0XHRcdGxUb2tlbnMuc2hpZnQoKVxuXHRcdFx0bExpbmVzLmpvaW4oJ1xcbicpXG5cdFx0ZWxzZVxuXHRcdFx0Jydcblx0XHRkb0JhcmYgZmlsZVBhdGgsIGNvbnRlbnRzXG5cdFx0ZGJnRXhpdCAnZmlsZUhhbmRsZXInLCBmaWxlUGF0aFxuXHRcdHJldHVyblxuXG5cdCMgLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLlxuXG5cdGRpckhhbmRsZXIgOj0gKFxuXHRcdFx0ZGlyUGF0aDogc3RyaW5nLFxuXHRcdFx0bFRva2VuczogVFBMTFRva2VuW11cblx0XHRcdCk6IHZvaWQgPT5cblxuXHRcdGRiZ0VudGVyICdkaXJIYW5kbGVyJywgZGlyUGF0aFxuXHRcdGRvTWFrZURpciBkaXJQYXRoXG5cdFx0aWYgKGxUb2tlbnMubGVuZ3RoID4gMCkgJiYgaXNLaW5kKGxUb2tlbnNbMF0sICdpbmRlbnQnKVxuXHRcdFx0bFRva2Vucy5zaGlmdCgpXG5cdFx0XHRibG9ja0hhbmRsZXIoZGlyUGF0aCwgbFRva2Vucylcblx0XHRcdCMgQHRzLWlnbm9yZVxuXHRcdFx0YXNzZXJ0IGlzS2luZChsVG9rZW5zWzBdLCAndW5kZW50JyksIFwiTWlzc2luZyBVTkRFTlQgaW4gZGlySGFuZGxlclwiXG5cdFx0XHRsVG9rZW5zLnNoaWZ0KClcblx0XHRkYmdFeGl0ICdkaXJIYW5kbGVyJywgZGlyUGF0aFxuXHRcdHJldHVyblxuXG5cdCMgLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLlxuXG5cdGJsb2NrSGFuZGxlciA6PSAoZGlyUGF0aDogc3RyaW5nLCBsVG9rZW5zOiBUUExMVG9rZW5bXSkgPT5cblx0XHRkYmdFbnRlciAnYmxvY2tIYW5kbGVyJywgZGlyUGF0aFxuXHRcdHdoaWxlIChsVG9rZW5zLmxlbmd0aCA+IDApICYmIChsVG9rZW5zWzBdLmtpbmQgIT0gJ3VuZGVudCcpXG5cdFx0XHR0b2s6IFRQTExUb2tlbiA6PSBsVG9rZW5zWzBdXG5cdFx0XHRsVG9rZW5zLnNoaWZ0KClcblx0XHRcdHtraW5kLCBzdHJ9IDo9IHRva1xuXHRcdFx0c3dpdGNoIGtpbmRcblx0XHRcdFx0d2hlbiAnaW5kZW50J1xuXHRcdFx0XHRcdGNyb2FrIFwiVW5leHBlY3RlZCBJTkRFTlRcIlxuXHRcdFx0XHRlbHNlXG5cdFx0XHRcdFx0aWYgZGVmaW5lZChzdHIpICYmIHN0ci5zdGFydHNXaXRoKCcvJylcblx0XHRcdFx0XHRcdGRpckhhbmRsZXIgXCIje2RpclBhdGh9I3t0b2suc3RyfVwiLCBsVG9rZW5zXG5cdFx0XHRcdFx0ZWxzZVxuXHRcdFx0XHRcdFx0ZmlsZUhhbmRsZXIgXCIje2RpclBhdGh9LyN7dG9rLnN0cn1cIiwgbFRva2Vuc1xuXHRcdGRiZ0V4aXQgJ2Jsb2NrSGFuZGxlcidcblx0XHRyZXR1cm5cblxuXHQjIC4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi5cblxuXHRwdHlwZSA6PSBnZXRQYXRoVHlwZShjdXJyZW50RGlyKVxuXHRhc3NlcnQgKHB0eXBlID09ICdkaXInKSB8fCAocHR5cGUgPT0gJ21pc3NpbmcnKSxcblx0XHRcdFwiY3VycmVudERpciBpcyBhICN7cHR5cGV9XCJcblxuXHQjIC0tLSBDbGVhciB0aGUgZGlyZWN0b3J5IGlmIGl0IGV4aXN0c1xuXHRkb01ha2VEaXIgY3VycmVudERpclxuXG5cdGxUb2tlbnMgOj0gQXJyYXkuZnJvbShhbGxUb2tlbnNJbkJsb2NrKGNvbnRlbnRzKSlcblx0REJHIHRva2VuVGFibGUobFRva2VucylcblxuXHRibG9ja0hhbmRsZXIoY3VycmVudERpciwgbFRva2Vucylcblx0YXNzZXJ0IChsVG9rZW5zLmxlbmd0aCA9PSAwKSxcblx0XHRcdFwiVG9rZW5zIHJlbWFpbmluZyBhZnRlciBwYXJzZTogI3tPTChsVG9rZW5zKX1cIlxuXHRpZiBub3QgZGVidWdcblx0XHRwb3BMb2dMZXZlbCgpXG5cdHJldHVybiBsRmlsZU9wc1xuXG4jIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG5leHBvcnQgZmlsZU9wc1RhYmxlIDo9IChsRmlsZU9wczogVEZpbGVPcFtdKTogc3RyaW5nID0+XG5cblx0dHQgOj0gbmV3IFRleHRUYWJsZShcImwgbFwiKVxuXHR0dC5mdWxsc2VwKClcblx0dHQudGl0bGUgJ0ZJTEUgT1BTJ1xuXHR0dC5mdWxsc2VwKClcblx0Zm9yIHtmdW5jTmFtZSwgcGF0aCwgY29udGVudHN9IG9mIGxGaWxlT3BzXG5cdFx0c3dpdGNoIGZ1bmNOYW1lXG5cdFx0XHR3aGVuICdta0Rpcidcblx0XHRcdFx0dHQuZGF0YSBbJ21rZGlyJywgcGF0aF1cblx0XHRcdHdoZW4gJ2JhcmYnXG5cdFx0XHRcdHR0LmRhdGEgWydiYXJmJywgcGF0aF1cblx0XHRcdFx0aWYgY29udGVudHNcblx0XHRcdFx0XHRmb3IgbGluZSBvZiBjb250ZW50cy5zcGxpdCgnXFxuJylcblx0XHRcdFx0XHRcdHR0LmRhdGEgWycnLCBsaW5lLnJlcGxhY2UoJ1xcdCcsIHNwYWNlcygzKSldXG5cdHR0LmZ1bGxzZXAoKVxuXHRyZXR1cm4gdHQuYXNTdHJpbmcoKVxuXG4iXX0=