"use strict";
// log-formatter.lib.civet

import {LogRecord} from '@std/log'
import {LogLevels} from "@std/log/levels"

import {
	spaces, sinceLoadStr, interpolate,
	} from 'llutils'
import {getLogLevel} from 'log-levels'

export let logIndent: number = 0
const getPrefix = () => spaces(3).repeat(logIndent)

// --- Everything returned by a formatter is also
//     appended to this string

const lConsoleLog: string[] = []

// ---------------------------------------------------------------------------

export const clearConsoleLog = () => {

	lConsoleLog.length = 0
	return
}

// ---------------------------------------------------------------------------

export const getConsoleLog = () => {

	return lConsoleLog.join('\n')
}

// ---------------------------------------------------------------------------

const levelStr = (level: number): string => {

	switch(level) {
		case LogLevels.DEBUG: { return 'D'
		}
		case LogLevels.INFO: { return 'I'
		}
		case LogLevels.WARN: { return 'W'
		}
		case LogLevels.ERROR: { return 'E'
		}
		default: { return 'UNKNOWN' }
	}
}

// ---------------------------------------------------------------------------
// --- str may contain:
//        $ts  - num milliseconds since start
//        $tt  - num milliseconds since last formatting
//        $ll  - log level as a single character
//        $msg - the message
// --- returns a function (rec: LogRecord) => string

export const getFormatter = (str: string, dest: string) => {

	return (rec: LogRecord): string => {
		const {datetime, level, msg} = rec
		const result = interpolate(str, {
			'$ts':  sinceLoadStr(datetime),
			'$tt':  sinceLoadStr(datetime),
			'$ll':  levelStr(level),
			'$msg': getPrefix() + msg
			})
		if (dest === 'console') {
			const patched = result.replaceAll('\t', '   ')
			lConsoleLog.push(patched)
			return patched
		}
		else {
			return result
		}
	}
}

// ---------------------------------------------------------------------------

export const indentLog = (): void => {

	logIndent += 1
	return
}

// ---------------------------------------------------------------------------

export const undentLog = (): void => {

	if (logIndent > 0) {
		logIndent -= 1
	}
	return
}

// ---------------------------------------------------------------------------

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3JjL2xpYi9sb2ctZm9ybWF0dGVyLmxpYi5jaXZldC50c3giLCJzb3VyY2VzIjpbInNyYy9saWIvbG9nLWZvcm1hdHRlci5saWIuY2l2ZXQiXSwibWFwcGluZ3MiOiI7QUFBQSwwQkFBeUI7QUFDekIsQUFBQTtBQUNBLEFBQUEsTUFBTSxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQVU7QUFDbEMsQUFBQSxBQUFBLE1BQU0sQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLElBQUksQ0FBQyxpQkFBaUI7QUFDekMsQUFBQTtBQUNBLEFBQUEsQUFBQSxNQUFNLENBQUMsQ0FBQztBQUNSLENBQUMsTUFBTSxDQUFDLENBQUMsWUFBWSxDQUFDLENBQUMsV0FBVyxDQUFDO0FBQ25DLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxTQUFTO0FBQ2pCLEFBQUEsQUFBQSxNQUFNLENBQUMsQ0FBQyxXQUFXLENBQUMsQ0FBQyxJQUFJLENBQUMsWUFBWTtBQUN0QyxBQUFBO0FBQ0EsQUFBQSxBQUFBLE1BQU0sQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ2hDLEFBQUEsQUFBUyxNQUFULFNBQVMsQ0FBQyxDQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDO0FBQzlDLEFBQUE7QUFDQSxBQUFBLGlEQUFnRDtBQUNoRCxBQUFBLDhCQUE2QjtBQUM3QixBQUFBO0FBQ0EsQUFBQSxBQUFxQixNQUFyQixXQUFXLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUUsQ0FBQyxDQUFDLENBQUM7QUFDM0IsQUFBQTtBQUNBLEFBQUEsOEVBQTZFO0FBQzdFLEFBQUE7QUFDQSxBQUFBLEFBQUEsTUFBTSxDQUFnQixNQUFmLGVBQWUsQ0FBQyxDQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFBLENBQUE7QUFD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QVUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxLQUFLLENBQUM7QUFDNUMsQUFBQSxHQUFHLFdBQVcsQ0FBQyxJQUFJLENBQUEsQUFBQyxPQUFPLENBQUE7QUFDM0IsQUFBQSxHQUFHLE1BQU0sQ0FBQyxPO0VBQU8sQ0FBQTtBQUNqQixBQUFBLEVBQUUsSUFBSSxDQUFBLENBQUE7QUFDTixBQUFBLEdBQUcsTUFBTSxDQUFDLE07RUFBTSxDO0NBQUEsQztBQUFBLENBQUE7QUFDaEIsQUFBQTtBQUNBLEFBQUEsOEVBQTZFO0FBQzdFLEFBQUE7QUFDQSxBQUFBLEFBQUEsTUFBTSxDQUFVLE1BQVQsU0FBUyxDQUFDLENBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUEsQ0FBQTtBQUMvQixBQUFBO0FBQ0EsQUFBQSxDQUFDLFNBQVMsQyxFQUFHLENBQUMsQ0FBQztBQUNmLEFBQUEsQ0FBQyxNO0FBQU0sQ0FBQTtBQUNQLEFBQUE7QUFDQSxBQUFBLDhFQUE2RTtBQUM3RSxBQUFBO0FBQ0EsQUFBQSxBQUFBLE1BQU0sQ0FBVSxNQUFULFNBQVMsQ0FBQyxDQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFBLENBQUE7QUFDL0IsQUFBQTtBQUNBLEFBQUEsQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQSxDQUFBO0FBQ25CLEFBQUEsRUFBRSxTQUFTLEMsRUFBRyxDQUFDLEM7Q0FBQyxDQUFBO0FBQ2hCLEFBQUEsQ0FBQyxNO0FBQU0sQ0FBQTtBQUNQO0FBQ0EsQUFBQSw4RUFBNkU7QUFDN0UiLCJuYW1lcyI6W10sInNvdXJjZXNDb250ZW50IjpbIiMgbG9nLWZvcm1hdHRlci5saWIuY2l2ZXRcclxuXHJcbmltcG9ydCB7TG9nUmVjb3JkfSBmcm9tICdAc3RkL2xvZydcclxuaW1wb3J0IHtMb2dMZXZlbHN9IGZyb20gXCJAc3RkL2xvZy9sZXZlbHNcIlxyXG5cclxuaW1wb3J0IHtcclxuXHRzcGFjZXMsIHNpbmNlTG9hZFN0ciwgaW50ZXJwb2xhdGUsXHJcblx0fSBmcm9tICdsbHV0aWxzJ1xyXG5pbXBvcnQge2dldExvZ0xldmVsfSBmcm9tICdsb2ctbGV2ZWxzJ1xyXG5cclxuZXhwb3J0IGxldCBsb2dJbmRlbnQ6IG51bWJlciA9IDBcclxuZ2V0UHJlZml4IDo9ICgpID0+IHNwYWNlcygzKS5yZXBlYXQobG9nSW5kZW50KVxyXG5cclxuIyAtLS0gRXZlcnl0aGluZyByZXR1cm5lZCBieSBhIGZvcm1hdHRlciBpcyBhbHNvXHJcbiMgICAgIGFwcGVuZGVkIHRvIHRoaXMgc3RyaW5nXHJcblxyXG5sQ29uc29sZUxvZzogc3RyaW5nW10gOj0gW11cclxuXHJcbiMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblxyXG5leHBvcnQgY2xlYXJDb25zb2xlTG9nIDo9ICgpID0+XHJcblxyXG5cdGxDb25zb2xlTG9nLmxlbmd0aCA9IDBcclxuXHRyZXR1cm5cclxuXHJcbiMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblxyXG5leHBvcnQgZ2V0Q29uc29sZUxvZyA6PSAoKSA9PlxyXG5cclxuXHRyZXR1cm4gbENvbnNvbGVMb2cuam9pbignXFxuJylcclxuXHJcbiMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblxyXG5sZXZlbFN0ciA6PSAobGV2ZWw6IG51bWJlcik6IHN0cmluZyA9PlxyXG5cclxuXHRzd2l0Y2ggbGV2ZWxcclxuXHRcdHdoZW4gTG9nTGV2ZWxzLkRFQlVHICAgdGhlbiByZXR1cm4gJ0QnXHJcblx0XHR3aGVuIExvZ0xldmVscy5JTkZPICAgIHRoZW4gcmV0dXJuICdJJ1xyXG5cdFx0d2hlbiBMb2dMZXZlbHMuV0FSTiAgICB0aGVuIHJldHVybiAnVydcclxuXHRcdHdoZW4gTG9nTGV2ZWxzLkVSUk9SICAgdGhlbiByZXR1cm4gJ0UnXHJcblx0XHRlbHNlIHJldHVybiAnVU5LTk9XTidcclxuXHJcbiMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiMgLS0tIHN0ciBtYXkgY29udGFpbjpcclxuIyAgICAgICAgJHRzICAtIG51bSBtaWxsaXNlY29uZHMgc2luY2Ugc3RhcnRcclxuIyAgICAgICAgJHR0ICAtIG51bSBtaWxsaXNlY29uZHMgc2luY2UgbGFzdCBmb3JtYXR0aW5nXHJcbiMgICAgICAgICRsbCAgLSBsb2cgbGV2ZWwgYXMgYSBzaW5nbGUgY2hhcmFjdGVyXHJcbiMgICAgICAgICRtc2cgLSB0aGUgbWVzc2FnZVxyXG4jIC0tLSByZXR1cm5zIGEgZnVuY3Rpb24gKHJlYzogTG9nUmVjb3JkKSA9PiBzdHJpbmdcclxuXHJcbmV4cG9ydCBnZXRGb3JtYXR0ZXIgOj0gKHN0cjogc3RyaW5nLCBkZXN0OiBzdHJpbmcpID0+XHJcblxyXG5cdHJldHVybiAocmVjOiBMb2dSZWNvcmQpOiBzdHJpbmcgPT5cclxuXHRcdHtkYXRldGltZSwgbGV2ZWwsIG1zZ30gOj0gcmVjXHJcblx0XHRyZXN1bHQgOj0gaW50ZXJwb2xhdGUoc3RyLCB7XHJcblx0XHRcdCckdHMnOiAgc2luY2VMb2FkU3RyKGRhdGV0aW1lKVxyXG5cdFx0XHQnJHR0JzogIHNpbmNlTG9hZFN0cihkYXRldGltZSlcclxuXHRcdFx0JyRsbCc6ICBsZXZlbFN0cihsZXZlbClcclxuXHRcdFx0JyRtc2cnOiBnZXRQcmVmaXgoKSArIG1zZ1xyXG5cdFx0XHR9KVxyXG5cdFx0aWYgKGRlc3QgPT0gJ2NvbnNvbGUnKVxyXG5cdFx0XHRwYXRjaGVkIDo9IHJlc3VsdC5yZXBsYWNlQWxsKCdcXHQnLCAnICAgJylcclxuXHRcdFx0bENvbnNvbGVMb2cucHVzaCBwYXRjaGVkXHJcblx0XHRcdHJldHVybiBwYXRjaGVkXHJcblx0XHRlbHNlXHJcblx0XHRcdHJldHVybiByZXN1bHRcclxuXHJcbiMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblxyXG5leHBvcnQgaW5kZW50TG9nIDo9ICgpOiB2b2lkID0+XHJcblxyXG5cdGxvZ0luZGVudCArPSAxXHJcblx0cmV0dXJuXHJcblxyXG4jIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cclxuZXhwb3J0IHVuZGVudExvZyA6PSAoKTogdm9pZCA9PlxyXG5cclxuXHRpZiAobG9nSW5kZW50ID4gMClcclxuXHRcdGxvZ0luZGVudCAtPSAxXHJcblx0cmV0dXJuXHJcblxyXG4jIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4iXX0=