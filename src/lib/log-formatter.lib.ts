"use strict";
// log-formatter.lib.civet

import {LogRecord} from '@std/log'
import {LogLevels} from "@std/log/levels"

import {
	spaces, sinceLoadStr, interpolate,
	} from './llutils.lib.ts'
import {getLogLevel} from './log-levels.lib.ts'

export let logIndent: number = 0
const getPrefix = () => spaces(3).repeat(logIndent)

// --- Everything returned by a formatter is also
//     appended to this string

const lConsoleLog: string[] = []

// ---------------------------------------------------------------------------

export const clearConsoleLog = () => {

	lConsoleLog.length = 0
	return
}

// ---------------------------------------------------------------------------

export const getConsoleLog = () => {

	return lConsoleLog.join('\n')
}

// ---------------------------------------------------------------------------

const levelStr = (level: number): string => {

	switch(level) {
		case LogLevels.DEBUG: { return 'D'
		}
		case LogLevels.INFO: { return 'I'
		}
		case LogLevels.WARN: { return 'W'
		}
		case LogLevels.ERROR: { return 'E'
		}
		default: { return 'UNKNOWN' }
	}
}

// ---------------------------------------------------------------------------
// --- str may contain:
//        $ts  - num milliseconds since start
//        $tt  - num milliseconds since last formatting
//        $ll  - log level as a single character
//        $msg - the message
// --- returns a function (rec: LogRecord) => string

export const getFormatter = (str: string, dest: string) => {

	return (rec: LogRecord): string => {
		const {datetime, level, msg} = rec
		const result = interpolate(str, {
			'$ts':  sinceLoadStr(datetime),
			'$tt':  sinceLoadStr(datetime),
			'$ll':  levelStr(level),
			'$msg': getPrefix() + msg
			})
		if (dest === 'console') {
			lConsoleLog.push(result)
		}
		return result
	}
}

// ---------------------------------------------------------------------------

export const indentLog = (): void => {

	logIndent += 1
	return
}

// ---------------------------------------------------------------------------

export const undentLog = (): void => {

	if (logIndent > 0) {
		logIndent -= 1
	}
	return
}

// ---------------------------------------------------------------------------

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3JjL2xpYi9sb2ctZm9ybWF0dGVyLmxpYi5jaXZldC50c3giLCJzb3VyY2VzIjpbInNyYy9saWIvbG9nLWZvcm1hdHRlci5saWIuY2l2ZXQiXSwibWFwcGluZ3MiOiI7QUFBQSwwQkFBeUI7QUFDekIsQUFBQTtBQUNBLEFBQUEsTUFBTSxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQVU7QUFDbEMsQUFBQSxBQUFBLE1BQU0sQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLElBQUksQ0FBQyxpQkFBaUI7QUFDekMsQUFBQTtBQUNBLEFBQUEsQUFBQSxNQUFNLENBQUMsQ0FBQztBQUNSLENBQUMsTUFBTSxDQUFDLENBQUMsWUFBWSxDQUFDLENBQUMsV0FBVyxDQUFDO0FBQ25DLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxrQkFBa0I7QUFDMUIsQUFBQSxBQUFBLE1BQU0sQ0FBQyxDQUFDLFdBQVcsQ0FBQyxDQUFDLElBQUksQ0FBQyxxQkFBcUI7QUFDL0MsQUFBQTtBQUNBLEFBQUEsQUFBQSxNQUFNLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNoQyxBQUFBLEFBQVMsTUFBVCxTQUFTLENBQUMsQ0FBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQztBQUM5QyxBQUFBO0FBQ0EsQUFBQSxpREFBZ0Q7QUFDaEQsQUFBQSw4QkFBNkI7QUFDN0IsQUFBQTtBQUNBLEFBQUEsQUFBcUIsTUFBckIsV0FBVyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFFLENBQUMsQ0FBQyxDQUFDO0FBQzNCLEFBQUE7QUFDQSxBQUFBLDhFQUE2RTtBQUM3RSxBQUFBO0FBQ0EsQUFBQSxBQUFBLE1BQU0sQ0FBZ0IsTUFBZixlQUFlLENBQUMsQ0FBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQSxDQUFB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QUFBLENBQUE7QUFDMUIsQUFBQSxFQUFFLE1BQU0sQ0FBQyxNO0NBQU0sQztBQUFBLENBQUE7QUFDZixBQUFBO0FBQ0EsQUFBQSw4RUFBNkU7QUFDN0UsQUFBQTtBQUNBLEFBQUEsQUFBQSxNQUFNLENBQVUsTUFBVCxTQUFTLENBQUMsQ0FBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQSxDQUFBO0FBQy9CLEFBQUE7QUFDQSxBQUFBLENBQUMsU0FBUyxDLEVBQUcsQ0FBQyxDQUFDO0FBQ2YsQUFBQSxDQUFDLE07QUFBTSxDQUFBO0FBQ1AsQUFBQTtBQUNBLEFBQUEsOEVBQTZFO0FBQzdFLEFBQUE7QUFDQSxBQUFBLEFBQUEsTUFBTSxDQUFVLE1BQVQsU0FBUyxDQUFDLENBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUEsQ0FBQTtBQUMvQixBQUFBO0FBQ0EsQUFBQSxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBLENBQUE7QUFDbkIsQUFBQSxFQUFFLFNBQVMsQyxFQUFHLENBQUMsQztDQUFDLENBQUE7QUFDaEIsQUFBQSxDQUFDLE07QUFBTSxDQUFBO0FBQ1A7QUFDQSxBQUFBLDhFQUE2RTtBQUM3RSIsIm5hbWVzIjpbXSwic291cmNlc0NvbnRlbnQiOlsiIyBsb2ctZm9ybWF0dGVyLmxpYi5jaXZldFxyXG5cclxuaW1wb3J0IHtMb2dSZWNvcmR9IGZyb20gJ0BzdGQvbG9nJ1xyXG5pbXBvcnQge0xvZ0xldmVsc30gZnJvbSBcIkBzdGQvbG9nL2xldmVsc1wiXHJcblxyXG5pbXBvcnQge1xyXG5cdHNwYWNlcywgc2luY2VMb2FkU3RyLCBpbnRlcnBvbGF0ZSxcclxuXHR9IGZyb20gJy4vbGx1dGlscy5saWIudHMnXHJcbmltcG9ydCB7Z2V0TG9nTGV2ZWx9IGZyb20gJy4vbG9nLWxldmVscy5saWIudHMnXHJcblxyXG5leHBvcnQgbGV0IGxvZ0luZGVudDogbnVtYmVyID0gMFxyXG5nZXRQcmVmaXggOj0gKCkgPT4gc3BhY2VzKDMpLnJlcGVhdChsb2dJbmRlbnQpXHJcblxyXG4jIC0tLSBFdmVyeXRoaW5nIHJldHVybmVkIGJ5IGEgZm9ybWF0dGVyIGlzIGFsc29cclxuIyAgICAgYXBwZW5kZWQgdG8gdGhpcyBzdHJpbmdcclxuXHJcbmxDb25zb2xlTG9nOiBzdHJpbmdbXSA6PSBbXVxyXG5cclxuIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuXHJcbmV4cG9ydCBjbGVhckNvbnNvbGVMb2cgOj0gKCkgPT5cclxuXHJcblx0bENvbnNvbGVMb2cubGVuZ3RoID0gMFxyXG5cdHJldHVyblxyXG5cclxuIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuXHJcbmV4cG9ydCBnZXRDb25zb2xlTG9nIDo9ICgpID0+XHJcblxyXG5cdHJldHVybiBsQ29uc29sZUxvZy5qb2luKCdcXG4nKVxyXG5cclxuIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuXHJcbmxldmVsU3RyIDo9IChsZXZlbDogbnVtYmVyKTogc3RyaW5nID0+XHJcblxyXG5cdHN3aXRjaCBsZXZlbFxyXG5cdFx0d2hlbiBMb2dMZXZlbHMuREVCVUcgICB0aGVuIHJldHVybiAnRCdcclxuXHRcdHdoZW4gTG9nTGV2ZWxzLklORk8gICAgdGhlbiByZXR1cm4gJ0knXHJcblx0XHR3aGVuIExvZ0xldmVscy5XQVJOICAgIHRoZW4gcmV0dXJuICdXJ1xyXG5cdFx0d2hlbiBMb2dMZXZlbHMuRVJST1IgICB0aGVuIHJldHVybiAnRSdcclxuXHRcdGVsc2UgcmV0dXJuICdVTktOT1dOJ1xyXG5cclxuIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuIyAtLS0gc3RyIG1heSBjb250YWluOlxyXG4jICAgICAgICAkdHMgIC0gbnVtIG1pbGxpc2Vjb25kcyBzaW5jZSBzdGFydFxyXG4jICAgICAgICAkdHQgIC0gbnVtIG1pbGxpc2Vjb25kcyBzaW5jZSBsYXN0IGZvcm1hdHRpbmdcclxuIyAgICAgICAgJGxsICAtIGxvZyBsZXZlbCBhcyBhIHNpbmdsZSBjaGFyYWN0ZXJcclxuIyAgICAgICAgJG1zZyAtIHRoZSBtZXNzYWdlXHJcbiMgLS0tIHJldHVybnMgYSBmdW5jdGlvbiAocmVjOiBMb2dSZWNvcmQpID0+IHN0cmluZ1xyXG5cclxuZXhwb3J0IGdldEZvcm1hdHRlciA6PSAoc3RyOiBzdHJpbmcsIGRlc3Q6IHN0cmluZykgPT5cclxuXHJcblx0cmV0dXJuIChyZWM6IExvZ1JlY29yZCk6IHN0cmluZyA9PlxyXG5cdFx0e2RhdGV0aW1lLCBsZXZlbCwgbXNnfSA6PSByZWNcclxuXHRcdHJlc3VsdCA6PSBpbnRlcnBvbGF0ZShzdHIsIHtcclxuXHRcdFx0JyR0cyc6ICBzaW5jZUxvYWRTdHIoZGF0ZXRpbWUpXHJcblx0XHRcdCckdHQnOiAgc2luY2VMb2FkU3RyKGRhdGV0aW1lKVxyXG5cdFx0XHQnJGxsJzogIGxldmVsU3RyKGxldmVsKVxyXG5cdFx0XHQnJG1zZyc6IGdldFByZWZpeCgpICsgbXNnXHJcblx0XHRcdH0pXHJcblx0XHRpZiAoZGVzdCA9PSAnY29uc29sZScpXHJcblx0XHRcdGxDb25zb2xlTG9nLnB1c2ggcmVzdWx0XHJcblx0XHRyZXR1cm4gcmVzdWx0XHJcblxyXG4jIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cclxuZXhwb3J0IGluZGVudExvZyA6PSAoKTogdm9pZCA9PlxyXG5cclxuXHRsb2dJbmRlbnQgKz0gMVxyXG5cdHJldHVyblxyXG5cclxuIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuXHJcbmV4cG9ydCB1bmRlbnRMb2cgOj0gKCk6IHZvaWQgPT5cclxuXHJcblx0aWYgKGxvZ0luZGVudCA+IDApXHJcblx0XHRsb2dJbmRlbnQgLT0gMVxyXG5cdHJldHVyblxyXG5cclxuIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuIl19