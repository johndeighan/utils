"use strict";
// log-levels.lib.civet

import {
	undef, defined, notdefined, assert, hashof,
	} from './datatypes.lib.ts'
import {
	croak,
	} from './llutils.lib.ts'

// ---------------------------------------------------------------------------

export type TLogLevel =
	'profile' |     // log everything, with timestamp
	'debug'   |     // log everything, no timestamp
	'info'    |
	'warn'    |
	'error'   |
	'silent'  |     // log only to file
	'none'          // log nothing

const hNum: hashof<number> = {
	profile: 1,
	debug:   2,
	info:    3,
	warn:    4,
	error:   5,
	silent:  6,
	none:    7
	}

// --- stack should never be empty
const lStack: TLogLevel[] = ['info']

// ---------------------------------------------------------------------------

export const getLogLevel = (): TLogLevel => {

	if (lStack.length === 0) {
		croak("empty stack")
		return 'none'
	}
	else {
		return lStack[lStack.length - 1]
	}
}

// ---------------------------------------------------------------------------

export const isLogLevel = (x: string): x is TLogLevel => {

	return defined(hNum[x])
}

// ---------------------------------------------------------------------------

export const isInactiveLevel = (level: TLogLevel): boolean => {

	return hNum[level] < hNum[getLogLevel()]
}

// ---------------------------------------------------------------------------

export const setLogLevel = (level: TLogLevel): void => {

	assert((lStack.length > 0), "empty stack")
	lStack[lStack.length-1] = level
	return
}

// ---------------------------------------------------------------------------

export const pushLogLevel = (level: TLogLevel): void => {

	lStack.push(level)
	return
}

// ---------------------------------------------------------------------------

export const popLogLevel = (): TLogLevel => {

	const result = lStack.pop()
	if (defined(result)) {
		return result
	}
	else {
		croak("empty stack")
		return 'none'
	}
}

// ---------------------------------------------------------------------------

export const resetLogLevel = (): void => {

	lStack.length = 0
	lStack.push('info')
	return
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3JjL2xpYi9sb2ctbGV2ZWxzLmxpYi5jaXZldC50c3giLCJzb3VyY2VzIjpbInNyYy9saWIvbG9nLWxldmVscy5saWIuY2l2ZXQiXSwibWFwcGluZ3MiOiI7QUFBQSx1QkFBc0I7QUFDdEIsQUFBQTtBQUNBLEFBQUEsTUFBTSxDQUFDLENBQUM7QUFDUixDQUFDLEtBQUssQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLE1BQU0sQ0FBQztBQUM1QyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsb0JBQW9CO0FBQzVCLEFBQUEsQUFBQSxNQUFNLENBQUMsQ0FBQztBQUNSLENBQUMsS0FBSyxDQUFDO0FBQ1AsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLGtCQUFrQjtBQUMxQixBQUFBO0FBQ0EsQUFBQSw4RUFBNkU7QUFDN0UsQUFBQTtBQUNBLEFBQUEsQUFBQSxNQUFNLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0FBQ3ZCLEFBQUEsQ0FBQyxTQUFTLENBQUMsQ0FBQyxLQUFLLGlDQUFnQztBQUNqRCxBQUFBLENBQUMsT0FBTyxHQUFHLENBQUMsS0FBSywrQkFBOEI7QUFDL0MsQUFBQSxDQUFDLE1BQU0sSUFBSSxDQUFDO0FBQ1osQUFBQSxDQUFDLE1BQU0sSUFBSSxDQUFDO0FBQ1osQUFBQSxDQUFDLE9BQU8sR0FBRyxDQUFDO0FBQ1osQUFBQSxDQUFDLFFBQVEsRUFBRSxDQUFDLEtBQUssbUJBQWtCO0FBQ25DLEFBQUEsQ0FBQyxNQUFNLFVBQVUsY0FBYTtBQUM5QixBQUFBO0FBQ0EsQUFBQSxBQUFvQixNQUFwQixJQUFJLENBQUMsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBRSxDQUFDLENBQUM7QUFDekIsQUFBQSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQTtBQUNYLEFBQUEsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUE7QUFDWCxBQUFBLENBQUMsSUFBSSxDQUFDLElB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O0FBQ2xCLEFBQUEsQ0FBQyxNO0FBQU0sQ0FBQTtBQUNQLEFBQUE7QUFDQSxBQUFBLDhFQUE2RTtBQUM3RSxBQUFBO0FBQ0EsQUFBQSxBQUFBLE1BQU0sQ0FBWSxNQUFYLFdBQVcsQ0FBQyxDQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsRUFBRSxDQUFBLENBQUE7QUFDdEMsQUFBQTtBQUNBLEFBQUEsQ0FBTyxNQUFOLE1BQU0sQ0FBQyxDQUFFLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQ3ZCLEFBQUEsQ0FBQyxHQUFHLENBQUEsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFBLENBQUEsQ0FBQTtBQUNuQixBQUFBLEVBQUUsTUFBTSxDQUFDLE07Q0FBTSxDQUFBO0FBQ2YsQUFBQSxDQUFDLElBQUksQ0FBQSxDQUFBO0FBQ0wsQUFBQSxFQUFFLEtBQUssQ0FBQSxBQUFDLGFBQWEsQ0FBQTtBQUNyQixBQUFBLEVBQUUsTUFBTSxDQUFDLE07Q0FBTSxDO0FBQUEsQ0FBQTtBQUNmLEFBQUE7QUFDQSxBQUFBLDhFQUE2RTtBQUM3RSxBQUFBO0FBQ0EsQUFBQSxBQUFBLE1BQU0sQ0FBYyxNQUFiLGFBQWEsQ0FBQyxDQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFBLENBQUE7QUFDbkMsQUFBQTtBQUNBLEFBQUEsQ0FBQyxNQUFNLENBQUMsTUFBTSxDLENBQUUsQ0FBQyxDQUFDO0FBQ2xCLEFBQUEsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFBLEFBQUMsTUFBTSxDQUFBO0FBQ25CLEFBQUEsQ0FBQyxNO0FBQ0QiLCJuYW1lcyI6W10sInNvdXJjZXNDb250ZW50IjpbIiMgbG9nLWxldmVscy5saWIuY2l2ZXRcblxuaW1wb3J0IHtcblx0dW5kZWYsIGRlZmluZWQsIG5vdGRlZmluZWQsIGFzc2VydCwgaGFzaG9mLFxuXHR9IGZyb20gJy4vZGF0YXR5cGVzLmxpYi50cydcbmltcG9ydCB7XG5cdGNyb2FrLFxuXHR9IGZyb20gJy4vbGx1dGlscy5saWIudHMnXG5cbiMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbmV4cG9ydCB0eXBlIFRMb2dMZXZlbCA9XG5cdCdwcm9maWxlJyB8ICAgICAjIGxvZyBldmVyeXRoaW5nLCB3aXRoIHRpbWVzdGFtcFxuXHQnZGVidWcnICAgfCAgICAgIyBsb2cgZXZlcnl0aGluZywgbm8gdGltZXN0YW1wXG5cdCdpbmZvJyAgICB8XG5cdCd3YXJuJyAgICB8XG5cdCdlcnJvcicgICB8XG5cdCdzaWxlbnQnICB8ICAgICAjIGxvZyBvbmx5IHRvIGZpbGVcblx0J25vbmUnICAgICAgICAgICMgbG9nIG5vdGhpbmdcblxuaE51bTogaGFzaG9mPG51bWJlcj4gOj0ge1xuXHRwcm9maWxlOiAxXG5cdGRlYnVnOiAgIDJcblx0aW5mbzogICAgM1xuXHR3YXJuOiAgICA0XG5cdGVycm9yOiAgIDVcblx0c2lsZW50OiAgNlxuXHRub25lOiAgICA3XG5cdH1cblxuIyAtLS0gc3RhY2sgc2hvdWxkIG5ldmVyIGJlIGVtcHR5XG5sU3RhY2s6IFRMb2dMZXZlbFtdIDo9IFsnaW5mbyddXG5cbiMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbmV4cG9ydCBnZXRMb2dMZXZlbCA6PSAoKTogVExvZ0xldmVsID0+XG5cblx0aWYgKGxTdGFjay5sZW5ndGggPT0gMClcblx0XHRjcm9hayBcImVtcHR5IHN0YWNrXCJcblx0XHRyZXR1cm4gJ25vbmUnXG5cdGVsc2Vcblx0XHRyZXR1cm4gbFN0YWNrW2xTdGFjay5sZW5ndGggLSAxXVxuXG4jIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG5leHBvcnQgaXNMb2dMZXZlbCA6PSAoeDogc3RyaW5nKTogeCBpcyBUTG9nTGV2ZWwgPT5cblxuXHRyZXR1cm4gZGVmaW5lZChoTnVtW3hdKVxuXG4jIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG5leHBvcnQgaXNJbmFjdGl2ZUxldmVsIDo9IChsZXZlbDogVExvZ0xldmVsKTogYm9vbGVhbiA9PlxuXG5cdHJldHVybiBoTnVtW2xldmVsXSA8IGhOdW1bZ2V0TG9nTGV2ZWwoKV1cblxuIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuZXhwb3J0IHNldExvZ0xldmVsIDo9IChsZXZlbDogVExvZ0xldmVsKTogdm9pZCA9PlxuXG5cdGFzc2VydCAobFN0YWNrLmxlbmd0aCA+IDApLCBcImVtcHR5IHN0YWNrXCJcblx0bFN0YWNrW2xTdGFjay5sZW5ndGgtMV0gPSBsZXZlbFxuXHRyZXR1cm5cblxuIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuZXhwb3J0IHB1c2hMb2dMZXZlbCA6PSAobGV2ZWw6IFRMb2dMZXZlbCk6IHZvaWQgPT5cblxuXHRsU3RhY2sucHVzaCBsZXZlbFxuXHRyZXR1cm5cblxuIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuZXhwb3J0IHBvcExvZ0xldmVsIDo9ICgpOiBUTG9nTGV2ZWwgPT5cblxuXHRyZXN1bHQgOj0gbFN0YWNrLnBvcCgpXG5cdGlmIGRlZmluZWQocmVzdWx0KVxuXHRcdHJldHVybiByZXN1bHRcblx0ZWxzZVxuXHRcdGNyb2FrIFwiZW1wdHkgc3RhY2tcIlxuXHRcdHJldHVybiAnbm9uZSdcblxuIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuZXhwb3J0IHJlc2V0TG9nTGV2ZWwgOj0gKCk6IHZvaWQgPT5cblxuXHRsU3RhY2subGVuZ3RoID0gMFxuXHRsU3RhY2sucHVzaCAnaW5mbydcblx0cmV0dXJuIl19