"use strict";
// log-levels.lib.civet

import {
	undef, defined, notdefined, assert, croak, hashof,
	} from 'datatypes'

// ---------------------------------------------------------------------------

export type TLogLevel =
	'profile' |     // log everything, with timestamp
	'debug'   |     // log everything, no timestamp
	'info'    |
	'warn'    |
	'error'   |
	'silent'  |     // log only to file
	'none'          // log nothing

const hNum: hashof<number> = {
	profile: 1,
	debug:   2,
	info:    3,
	warn:    4,
	error:   5,
	silent:  6,
	none:    7
	}

// --- stack should never be empty
const lStack: TLogLevel[] = ['info']

// ---------------------------------------------------------------------------

export const getLogLevel = (): TLogLevel => {

	if (lStack.length === 0) {
		croak("empty stack")
		return 'none'
	}
	else {
		return lStack[lStack.length - 1]
	}
}

// ---------------------------------------------------------------------------

export const isLogLevel = (x: string): x is TLogLevel => {

	return defined(hNum[x])
}

// ---------------------------------------------------------------------------

export const isInactiveLevel = (level: TLogLevel): boolean => {

	return hNum[level] < hNum[getLogLevel()]
}

// ---------------------------------------------------------------------------

export const setLogLevel = (level: TLogLevel): void => {

	assert((lStack.length > 0), "empty stack")
	lStack[lStack.length-1] = level
	return
}

// ---------------------------------------------------------------------------

export const pushLogLevel = (level: TLogLevel): void => {

	lStack.push(level)
	return
}

// ---------------------------------------------------------------------------

export const popLogLevel = (): TLogLevel => {

	const result = lStack.pop()
	if (defined(result)) {
		return result
	}
	else {
		console.error("empty logger stack")
		resetLogLevel()
		return 'none'
	}
}

// ---------------------------------------------------------------------------

export const resetLogLevel = (): void => {

	lStack.length = 0
	lStack.push('info')
	return
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQzpcXFVzZXJzXFxqb2huZFxcdXRpbHNcXHNyY1xcbGliXFxsb2ctbGV2ZWxzLmxpYi5jaXZldC50c3giLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcam9obmRcXHV0aWxzXFxzcmNcXGxpYlxcbG9nLWxldmVscy5saWIuY2l2ZXQiXSwibWFwcGluZ3MiOiI7QUFBQSx1QkFBc0I7QUFDdEIsQUFBQTtBQUNBLEFBQUEsTUFBTSxDQUFDLENBQUM7QUFDUixDQUFDLEtBQUssQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLE1BQU0sQ0FBQztBQUNuRCxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsV0FBVztBQUNuQixBQUFBO0FBQ0EsQUFBQSw4RUFBNkU7QUFDN0UsQUFBQTtBQUNBLEFBQUEsQUFBQSxNQUFNLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0FBQ3ZCLEFBQUEsQ0FBQyxTQUFTLENBQUMsQ0FBQyxLQUFLLGlDQUFnQztBQUNqRCxBQUFBLENBQUMsT0FBTyxHQUFHLENBQUMsS0FBSywrQkFBOEI7QUFDL0MsQUFBQSxDQUFDLE1BQU0sSUFBSSxDQUFDO0FBQ1osQUFBQSxDQUFDLE1BQU0sSUFBSSxDQUFDO0FBQ1osQUFBQSxDQUFDLE9BQU8sR0FBRyxDQUFDO0FBQ1osQUFBQSxDQUFDLFFBQVEsRUFBRSxDQUFDLEtBQUssbUJBQWtCO0FBQ25DLEFBQUEsQ0FBQyxNQUFNLFVBQVUsY0FBYTtBQUM5QixBQUFBO0FBQ0EsQUFBQSxBQUFvQixNQUFwQixJQUFJLENBQUMsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBRSxDQUFDLENBQUM7QUFDekIsQUFBQSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQTtBQUNYLEFBQUEsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUE7QUFDWCxBQUFBLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFBO0FBQ1gsQUFB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QU0sQ0FBQTtBQUNQLEFBQUE7QUFDQSxBQUFBLDhFQUE2RTtBQUM3RSxBQUFBO0FBQ0EsQUFBQSxBQUFBLE1BQU0sQ0FBWSxNQUFYLFdBQVcsQ0FBQyxDQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsRUFBRSxDQUFBLENBQUE7QUFDdEMsQUFBQTtBQUNBLEFBQUEsQ0FBTyxNQUFOLE1BQU0sQ0FBQyxDQUFFLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQ3ZCLEFBQUEsQ0FBQyxHQUFHLENBQUEsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFBLENBQUEsQ0FBQTtBQUNuQixBQUFBLEVBQUUsTUFBTSxDQUFDLE07Q0FBTSxDQUFBO0FBQ2YsQUFBQSxDQUFDLElBQUksQ0FBQSxDQUFBO0FBQ0wsQUFBQSxFQUFFLE9BQU8sQ0FBQyxLQUFLLENBQUEsQUFBQyxvQkFBb0IsQ0FBQTtBQUNwQyxBQUFBLEVBQUUsYUFBYSxDQUFDLENBQUM7QUFDakIsQUFBQSxFQUFFLE1BQU0sQ0FBQyxNO0NBQU0sQztBQUFBLENBQUE7QUFDZixBQUFBO0FBQ0EsQUFBQSw4RUFBNkU7QUFDN0UsQUFBQTtBQUNBLEFBQUEsQUFBQSxNQUFNLENBQWMsTUFBYixhQUFhLENBQUMsQ0FBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQSxDQUFBO0FBQ25DLEFBQUE7QUFDQSxBQUFBLENBQUMsTUFBTSxDQUFDLE1BQU0sQyxDQUFFLENBQUMsQ0FBQztBQUNsQixBQUFBLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQSxBQUFDLE1BQU0sQ0FBQTtBQUNuQixBQUFBLENBQUMsTTtBQUNEIiwibmFtZXMiOltdLCJzb3VyY2VzQ29udGVudCI6WyIjIGxvZy1sZXZlbHMubGliLmNpdmV0XG5cbmltcG9ydCB7XG5cdHVuZGVmLCBkZWZpbmVkLCBub3RkZWZpbmVkLCBhc3NlcnQsIGNyb2FrLCBoYXNob2YsXG5cdH0gZnJvbSAnZGF0YXR5cGVzJ1xuXG4jIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG5leHBvcnQgdHlwZSBUTG9nTGV2ZWwgPVxuXHQncHJvZmlsZScgfCAgICAgIyBsb2cgZXZlcnl0aGluZywgd2l0aCB0aW1lc3RhbXBcblx0J2RlYnVnJyAgIHwgICAgICMgbG9nIGV2ZXJ5dGhpbmcsIG5vIHRpbWVzdGFtcFxuXHQnaW5mbycgICAgfFxuXHQnd2FybicgICAgfFxuXHQnZXJyb3InICAgfFxuXHQnc2lsZW50JyAgfCAgICAgIyBsb2cgb25seSB0byBmaWxlXG5cdCdub25lJyAgICAgICAgICAjIGxvZyBub3RoaW5nXG5cbmhOdW06IGhhc2hvZjxudW1iZXI+IDo9IHtcblx0cHJvZmlsZTogMVxuXHRkZWJ1ZzogICAyXG5cdGluZm86ICAgIDNcblx0d2FybjogICAgNFxuXHRlcnJvcjogICA1XG5cdHNpbGVudDogIDZcblx0bm9uZTogICAgN1xuXHR9XG5cbiMgLS0tIHN0YWNrIHNob3VsZCBuZXZlciBiZSBlbXB0eVxubFN0YWNrOiBUTG9nTGV2ZWxbXSA6PSBbJ2luZm8nXVxuXG4jIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG5leHBvcnQgZ2V0TG9nTGV2ZWwgOj0gKCk6IFRMb2dMZXZlbCA9PlxuXG5cdGlmIChsU3RhY2subGVuZ3RoID09IDApXG5cdFx0Y3JvYWsgXCJlbXB0eSBzdGFja1wiXG5cdFx0cmV0dXJuICdub25lJ1xuXHRlbHNlXG5cdFx0cmV0dXJuIGxTdGFja1tsU3RhY2subGVuZ3RoIC0gMV1cblxuIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuZXhwb3J0IGlzTG9nTGV2ZWwgOj0gKHg6IHN0cmluZyk6IHggaXMgVExvZ0xldmVsID0+XG5cblx0cmV0dXJuIGRlZmluZWQoaE51bVt4XSlcblxuIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuZXhwb3J0IGlzSW5hY3RpdmVMZXZlbCA6PSAobGV2ZWw6IFRMb2dMZXZlbCk6IGJvb2xlYW4gPT5cblxuXHRyZXR1cm4gaE51bVtsZXZlbF0gPCBoTnVtW2dldExvZ0xldmVsKCldXG5cbiMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbmV4cG9ydCBzZXRMb2dMZXZlbCA6PSAobGV2ZWw6IFRMb2dMZXZlbCk6IHZvaWQgPT5cblxuXHRhc3NlcnQgKGxTdGFjay5sZW5ndGggPiAwKSwgXCJlbXB0eSBzdGFja1wiXG5cdGxTdGFja1tsU3RhY2subGVuZ3RoLTFdID0gbGV2ZWxcblx0cmV0dXJuXG5cbiMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbmV4cG9ydCBwdXNoTG9nTGV2ZWwgOj0gKGxldmVsOiBUTG9nTGV2ZWwpOiB2b2lkID0+XG5cblx0bFN0YWNrLnB1c2ggbGV2ZWxcblx0cmV0dXJuXG5cbiMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbmV4cG9ydCBwb3BMb2dMZXZlbCA6PSAoKTogVExvZ0xldmVsID0+XG5cblx0cmVzdWx0IDo9IGxTdGFjay5wb3AoKVxuXHRpZiBkZWZpbmVkKHJlc3VsdClcblx0XHRyZXR1cm4gcmVzdWx0XG5cdGVsc2Vcblx0XHRjb25zb2xlLmVycm9yIFwiZW1wdHkgbG9nZ2VyIHN0YWNrXCJcblx0XHRyZXNldExvZ0xldmVsKClcblx0XHRyZXR1cm4gJ25vbmUnXG5cbiMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbmV4cG9ydCByZXNldExvZ0xldmVsIDo9ICgpOiB2b2lkID0+XG5cblx0bFN0YWNrLmxlbmd0aCA9IDBcblx0bFN0YWNrLnB1c2ggJ2luZm8nXG5cdHJldHVybiJdfQ==