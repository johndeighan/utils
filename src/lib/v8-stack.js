// v8-stack.civet

import pathLib from 'path'
import fs from 'fs'
import sms from 'source-map-support'
import {sprintf} from '@std/fmt/printf'

import {
	undef, defined, notdefined, isEmpty, nonEmpty,
	assert, croak, hasKey, OL, ML, getOptions,
	isString, isNonEmptyString, isInteger, rpad, centered,
	isFile, mkpath, fileExt, withExt, normalizePath, relpath,
	DBG, LOG, WARN, ERR, INDENT, UNDENT,
	} from '@jdeighan/utils/llutils.js'

sms.install()
const mapSourcePosition = sms.mapSourcePosition
const width = 40

// ---------------------------------------------------------------------------
// Stack Frames have keys:
//    type         - eval | native | constructor | method | function | script
//    source
//    line
//    column
//    name          - name of function or method
//    isConstructor - true if a constructor function
//    isAsync       - true if an async function/method
//    objTye        - if type == 'method'

// ---------------------------------------------------------------------------

export var getV8Stack = () => {
	// --- ignores any stack frames from this module
	//     *.js files will be mapped to original source files
	//        if a source map is available

	try {
		const oldLimit = Error.stackTraceLimit
		const oldPreparer = Error.prepareStackTrace

		Error.stackTraceLimit = Infinity
		Error.prepareStackTrace = (error, lFrames) => {
			const lResultFrames = []
			DBG(`getV8Stack(): ${lFrames.length} stack frames`)
			let i1 = 0;for (const frame of lFrames) {const i = i1++;

				DBG(`FRAME ${i}`, INDENT)

				// --- Call functions on the frame
				const fileName      = frame.getFileName()
				const functionName  = frame.getFunctionName()
				const functionObj   = frame.getFunction()
				const methodName    = frame.getMethodName()
				const line          = frame.getLineNumber()
				const column        = frame.getColumnNumber()
				const isTopLevel    = frame.isToplevel()
				const isAsync       = frame.isAsync()
				const isEval        = frame.isEval()
				const isNative      = frame.isNative()
				const isConstructor = frame.isConstructor()
				const typeName      = frame.getTypeName()

				DBG(centered('from V8', width, '-'))
				DBG(`fileName = ${OL(fileName)}`)
				DBG(`functionName = ${OL(functionName)}`)
				DBG(`defined(functionObj) = ${OL(defined(functionObj))}`)
				DBG(`methodName = ${OL(methodName)}`)
				DBG(`line = ${OL(line)}`)
				DBG(`column = ${OL(column)}`)
				DBG(`isTopLevel = ${OL(isTopLevel)}`)
				DBG(`isAsync = ${OL(isAsync)}`)
				DBG(`isEval = ${OL(isEval)}`)
				DBG(`isNative = ${OL(isNative)}`)
				DBG(`isConstructor = ${OL(isConstructor)}`)
				DBG(`typeName = ${OL(typeName)}`)
				DBG('-'.repeat(width))

				const source = fileName
				if (defined(source) && (source.indexOf('v8-stack.js')  >= 0)) {
					DBG(`SKIP: source = '${source}'`, UNDENT)
					continue
				}

				const h = {
					source,
					line,
					column
					}

				if (defined(functionName)) {
					h.name = functionName
				}
				else if (defined(functionObj)) {
					h.name = '<anonymous>'
				}

				if (defined(methodName)) {
					h.name = methodName
				}

				// --- Set type
				h.type = (
					  isEval                  ? 'eval'
					: isNative                ? 'native'
					: isConstructor           ? 'constructor'
					: defined(methodName)   ? 'method'
					: defined(functionName) ? 'function'
					: isTopLevel              ? 'script'
					:                           croak('Unknown frame type')
					)

				if (isConstructor) {
					h.isConstructor = true
				}

				if (isAsync) {
					h.isAsync = true
				}

				if (h.type === 'method') {
					h.objType = typeName
				}

				// --- fix a bug in the V8 engine where calls inside a
				//     top level anonymous function is reported as
				//     being from the top level, i.e. type 'script'

				if (lResultFrames.length > 0) {
					const tos = lResultFrames.at(-1)    // --- i.e. previous frame
					if ((h.type === 'script') && (tos.type === 'script')) {
						DBG(`Patch current TOS (currently ${lResultFrames.length} frames)`)
						tos.type = 'function'
						tos.name = '<anonymous>'
					}
				}

				DBG(centered('return frame', width, '-'))
				DBG(ML(h))
				DBG('-'.repeat(width))

				// --- Ignore this entry and any before it
				if (h.objType === 'ModuleJob') {
					DBG("objType is 'ModuleJob' - stop processing")
					break
				}

				lResultFrames.push(h)
				DBG(UNDENT)
			}

			DBG('-'.repeat(width))
			return lResultFrames
		}

		const errObj = new Error()
		const lStack = errObj.stack

		// --- reset to previous values
		Error.stackTraceLimit = oldLimit
		Error.prepareStackTrace = oldPreparer

		for (const h of lStack) {
			DBG(`before mapping, h = ${ML(h)}`)
			const {source, line, column, name, type} = h
			const hNew = mapSourcePosition({
				source,
				line,
				column
				})
			const newExt = fileExt(hNew.source)
			if (newExt === fileExt(h.source)) {
				DBG("Not mapped - returning original position")
				h.source = relpath(h.source)
			}
			else {
				DBG(`got, hNew = ${ML(hNew)}`)
				h.source = relpath(withExt(h.source, newExt))
				h.line = hNew.line
				h.column = hNew.column
				DBG(`after mapping, h = ${ML(h)}`)
			}
		}

		return lStack
	}
	catch (e) {
		ERR(e.message)
		return []
	}
}

// ---------------------------------------------------------------------------

export const getV8StackStr = (hOptions={}) => {
	// --- ignores any stack frames from this module
	//     *.js files will be mapped to original source files
	//        if a source map is available

	const lLines = getV8Stack().map((h) => {
		const typeStr = sprintf("%-11s", h.type)
		return `[${typeStr}] ${h.source}:${h.line}:${h.column}`
	}
		)
	return lLines.join('\n')
}

// ---------------------------------------------------------------------------

export const getMyCaller = () => {

	try {
		const lStack = getV8Stack()
		return lStack[1]
	}
	catch (err) {
		console.log(`ERROR in getV8Stack(): ${err.message}`)
		return undef
	}
}

// ---------------------------------------------------------------------------

export const getMyOutsideCaller = () => {

	try {
		const lStack = getV8Stack()
		DBG(`Call stack has ${lStack.length} items`)
		const source = lStack[0].source
		DBG(`source = ${source}`)
		let i2 = 0;for (const frame of lStack) {const i = i2++;
			DBG(`frame[${i}].source = ${frame.source}`)
			if (frame.source !== source) {
				return frame
			}
		}
		return undef
	}
	catch (err) {
		console.log(`ERROR in getV8Stack(): ${err.message}`)
		return undef
	}
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,