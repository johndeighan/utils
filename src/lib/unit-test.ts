"use strict";
// unit-test.civet

import {
	assert, assertEquals, assertNotEquals, assertObjectMatch,
	assertStringIncludes, assertMatch, assertArrayIncludes,
	} from '@std/assert'

import {
	undef, defined, notdefined, isArray, isHash, isString, hash,
	} from './datatypes.ts'
import {
	pushLogLevel, popLogLevel,
	} from './logger.ts'
import {getMyOutsideCaller} from './v8-stack.ts'

/**
 * unit-test - provides functions for use in unit tests
 * available tests:
 *    equal
 *    truthy
 *    falsy
 *    fails
 *    succeeds
 *    matches
 *    like
 *    listLike
 *    includes
 *    includesAll
 *
 * @module
 */

// ---------------------------------------------------------------------------

/**
 * Generate a test name using the source line number
 */

export const getTestName = (): string => {

	pushLogLevel('silent')
	const frame = getMyOutsideCaller()
	console.dir(frame)      // DEBUG
	const line = (frame === undef) ? 0 : frame.line
	popLogLevel()
	return `line ${line}`
}

// ---------------------------------------------------------------------------

/**
 * In a unit test, checks if  value is deeply equal to
 * the expected value. Reports line number of the test.
 *
 * @param {any} value - any JavaScript value
 * @param {any} expected - any JavaScript value
 * @returns {void} - nothing
 *
 * @example
 * ```js
 * equal 2+2, 4
 * ```
 * This test will pass.
 */

export const equal = (value: any, expected: any) : void => {

	Deno.test(getTestName(), () => assertEquals(value, expected))
	return
}

// ---------------------------------------------------------------------------

/**
 * In a unit test, tests if value is truthy
 * Reports line number of the test.

 * @param {any} value - any JavaScript value
 * @returns {void} - nothing
 *
 * @example
 * ```js
 * truthy isString('abc')
 * ```
 * This test will pass.
 */

export const truthy = (value: any): void => {

	Deno.test(getTestName(), () => assert(value))
	return
}

// ---------------------------------------------------------------------------

/**
 * In a unit test, tests if value is falsy
 * Reports line number of the test.
 *
 * @param {any} value - any JavaScript value
 * @returns {void} - nothing
 *
 * @example
 * ```js
 * falsy isString(42)
 * ```
 * This test will pass.
 */

export const falsy = (value: any): void => {

	Deno.test(getTestName(), () => assert((!value)))
	return
}

// ---------------------------------------------------------------------------

/**
 * In a unit test, tests if calling the provided function
 * throws an exception. Reports line number of the test.
 *
 * @param {any => any} func - any JavaScript function
 * @returns {void} - nothing
 *
 * @example
 * ```js
 * fails () => throw new Error('bad')
 * ```
 * This test will pass.
 */

export const fails = (func: () => void): void => {

	assert((typeof func === 'function'), "test fails() passed non-function")
	pushLogLevel('silent')
	Deno.test(getTestName(), () => assert(llthrows(func)))
	popLogLevel()
	return
}

// ---------------------------------------------------------------------------

/**
 * In a unit test, tests if calling the provided function
 * runs without throwing an exception.
 * Reports line number of the test.
 *
 * @param {any => any} func - any JavaScript function
 * @returns {void} - nothing
 *
 * @example
 * ```js
 * succeeds () => return 42
 * ```
 * This test will pass.
 */

export const succeeds = (func: () => void): void => {

	assert((typeof func === 'function'), "test succeeds() passed non-function")
	Deno.test(getTestName(), () => assert(!llthrows(func)))
	return
}

// ---------------------------------------------------------------------------

/**
 * In a unit test, tests a value, which must be a string,
 * matches either a substring or a regular expression.
 * Reports line number of the test.
 *
 * @param {any} value - any JavaScript value
 * @param {any} expected - any JavaScript value
 * @returns {void} - nothing
 *
 * @example
 * ```js
 * matches 'abcde', 'bce'
 * ```
 * This test will pass.
 *
 * @example
 * ```js
 * matches 'aabbcc', /a+b+c+/
 * ```
 * This test will pass.
 */

export const matches = (value: any, expected: any) => {

	assert(isString(value), `Not a string: ${value}`)
	if (isString(expected)) {
		Deno.test(getTestName(), () => assertStringIncludes(value, expected))
	}
	else if (expected instanceof RegExp) {
		Deno.test(getTestName(), () => assertMatch(value, expected))
	}
	else {
		Deno.test(getTestName(), () => assert(false))
	}
	return
}

// ---------------------------------------------------------------------------

/**
 * In a unit test, tests if one hash matches another hash.
 * the first hash must have all the properties in the second hash,
 * but extra properties are allowed.
 * Reports line number of the test.
 *
 * @param {hash} value - any JavaScript object
 * @param {hash} expected - any JavaScript object
 * @returns {void} - nothing
 *
 * @example
 * ```js
 * like {a:1, b:2, c:3}, {a:1, c:3}
 * ```
 * This test will pass.
 */

export const like = (value: (hash | undefined), expected: hash): void => {

	// @ts-ignore
	Deno.test(getTestName(), () => assertObjectMatch(value, expected))
	return
}

// ---------------------------------------------------------------------------

/**
 * In a unit test, tests a value, which must be an array or object,
 * matches another array or object. For objects, the value must
 * have all the properties in the expected value, but extra
 * properties are allowed. For arrays, the value must have
 * at least the length of the expected array, and each item in
 * the value array must be an object that has at least all of the
 * properties that the object in the expected array at the
 * same position has.
 * Reports line number of the test.
 *
 * @param {array | object} value - any JavaScript value
 * @param {array | object} expected - any JavaScript value
 * @returns {void} - nothing
 *
 * @example
 * ```js
 * like {a:1, b:2, c:3}, {a:1, c:3}
 * ```
 * This test will pass.
 *
 * @example
 * ```js
 * like [{a:1, b:2, c:3}, {a:3, b:5, c:23}], [{a:1, b:2}]
 * ```
 * This test will pass.
 */

export const listLike = (value: hash[], expected: hash[]): void => {

	const label = getTestName()

	const len = value.length
	Deno.test(`${label}/len`, () => assertEquals(len, expected.length))
	for (let end = (len-1), i1 = 0; i1 <= end; ++i1) {const i = i1;
		// @ts-ignore
		Deno.test(`${label}/i`, () => assertObjectMatch(value[i], expected[i]))
	}
	return
}

// ---------------------------------------------------------------------------

export const unlike = (value: any, expected: any) => {

	assert(isHash(value), "unlike(): value not a hash")
	assert(isHash(expected), "unlike(): expected not a hash")
	const label = getTestName()
	for (const key of Object.keys(expected)) {
		Deno.test(label, () => assert((value[key] === undefined)))
	}
	return
}

// ---------------------------------------------------------------------------

/**
 * In a unit test, tests a value, which must be an array,
 * includes the expected value.
 * Reports line number of the test
 *
 * @param {Array<any>} value - an array
 * @param {any} expected - any JavaScript value
 * @returns {void} - nothing
 *
 * @example
 * ```js
 * includes ['a', 'b', 'c'], 'b'
 * ```
 * This test will pass.
 */

export const includes = (value: any, expected: any) => {

	assert(Array.isArray(value), `not an array: ${value}`)
	Deno.test(getTestName(), () => assertArrayIncludes(value, [expected]))
	return
}

// ---------------------------------------------------------------------------

/**
 * In a unit test, tests a value, which must be an array,
 * includes all of the items in the expected array.
 * Reports line number of the test
 *
 * @param {Array<any>} value - an array
 * @param {Array<any>} expected - an array
 * @returns {void} - nothing
 *
 * @example
 * ```js
 * includesAll ['a', 'b', 'c'], ['b', 'c']
 * ```
 * This test will pass.
 */

export const includesAll = (value: any, expected: any) => {

	assert(Array.isArray(value), `not an array: ${value}`)
	assert(Array.isArray(expected), `not an array: ${expected}`)
	Deno.test(getTestName(), () => assertArrayIncludes(value, expected))
	return
}

// ---------------------------------------------------------------------------

export const llthrows = (func: () => any) => {

	try {
		func()
		return false
	}
	catch (err) {
		return true
	}
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,