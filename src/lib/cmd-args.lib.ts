"use strict";
// cmd-args.lib.civet

import {mapNonOption} from 'base-utils'
import {
	undef, defined, notdefined, assert, croak,
	hash, hashof,
	isEmpty, isArray, isBoolean, isInteger, isHash, isString,
	} from 'datatypes'
import {
	keys, getOptions, o, spaces,
	} from 'llutils'
import {OL, DUMP} from 'to-nice'
import {
	TLogLevel, setLogLevel,
	} from 'log-levels'
import {LOG, DBG} from 'logger'
import {execCmd} from 'base-utils'

// ---------------------------------------------------------------------------

const hKeyToLogLevel: hashof<TLogLevel> = {
	P: 'profile',
	D: 'debug',
	I: 'info',
	W: 'warn',
	E: 'error',
	S: 'silent',
	N: 'none'
	}

export const logLevelFromArgs = (lArgs: string[]): (TLogLevel | undefined) => {

	for (const str of lArgs) {
		const lMatches = str.match(/^-([A-Za-z0-9_-]*)(=)?/)
		if (defined(lMatches)) {
			const keyStr = lMatches[1]
			const hasEq = lMatches[2]
			if (isEmpty(hasEq)) {
				for (const key of keys(hKeyToLogLevel)) {
					if (keyStr.includes(key)) {
						return hKeyToLogLevel[key]
					}
				}
			}
		}
	}
	return undef
}

// ---------------------------------------------------------------------------

type TCmdArgs = {
	[key: string]: unknown
	}

// --- Return a hash of args and an array of non-options

export const getCmdArgs = (
	hDesc: (hash | undefined) = undef,
	lArgs: string[] = Deno.args,
	hOptions: hash = {}
	): [TCmdArgs, string[]] => {

	type opt = {
		doSetLogger: boolean
		}
	const {doSetLogger} = getOptions<opt>(hOptions, {
		doSetLogger: true
		})

	if (lArgs.at(-1) === '!') {
		execCmd('clear')
		lArgs.pop()
	}

	if (doSetLogger && defined(hDesc)) {
		// --- Make sure hDesc does NOT include any of:
		//        P, D, Q, I, S
		for (const key of keys(hKeyToLogLevel)) {
			assert(notdefined(hDesc[key]),
					`invalid key ${OL(key)} set in hDesc`)
		}
		const logLevel = logLevelFromArgs(lArgs)
		if (defined(logLevel)) {
			setLogLevel(logLevel)
		}
	}

	if (defined(hDesc)) {
		DBG(`hDesc is: ${OL(hDesc)}`)
	}
	DBG(`lArgs is: ${OL(lArgs)}`)

	if (lArgs.includes('-h')) {
		if (defined(hDesc)) {
			LOG(helpStr(hDesc))
		}
		else {
			LOG("No help available")
		}
		Deno.exit(0)
	}

	const hResult: TCmdArgs = {}
	const lNonOptions: string[] = []

	// --- Utility functions

	// --- Even gets called for -D, -Q, -P, -S
	const addOption = (name: string, value: string | boolean) => {
		DBG(`addOption(${OL(name)}, ${OL(value)})`)
		assert((!(name in hResult)),
				`dup key ${name}, hResult = ${OL(hResult)}`)

		if (doSetLogger) {
			const logger = hKeyToLogLevel[name]
			if (defined(logger)) {
				hResult[name] = true
				setLogLevel(logger)
				return
			}
		}

		if (notdefined(hDesc)) {
			hResult[name] = value
			return
		}
		const {type} = getOptionInfo(hDesc, name)

		// --- type checking
		if (isArray(type)) {
			assert(type.includes(value), "type not an array")
			hResult[name] = value
		}
		else if (isBoolean(value)) {
			hResult[name] = value
		}
		else {
			// --- it's a string
			const float = parseFloat(value)
			if (Number.isNaN(float)) {
				hResult[name] = value
			}
			else {
				hResult[name] = float
			}
		}
		return
	}

	const addNonOption = (str: string) => {
		DBG(`addNonOption(${OL(str)})`)
		lNonOptions.push(mapNonOption(str))
	}

	for (const str of lArgs) {
		// --- ignore '--'
		if (str === '--') {
			DBG("skipping --")
			continue
		}

		// --- check if it's an option
		const lMatches = str.match(/^-([A-Za-z0-9_-]*)(?:(=)(.*))?$/)
		if (lMatches === null) {
			// --- it's a non-option
			addNonOption(str)
		}
		else {
			// --- it's an option
			const [_, optStr, eqStr, valueStr] = lMatches
			if (eqStr) {
				addOption(optStr, valueStr)
			}
			else {
				for (const ch of optStr.split('')) {
					addOption(ch, true)
				}
			}
		}
	}

	// --- if hDesc is set, then
	//     Fill in default values if available

	if (defined(hDesc)) {
		// --- Fill in missing keys with default values
		DBG("Filling in missing keys with default values")
		for (const name of keys(hDesc)) {
			if ((name !== '_') && notdefined(hResult[name])) {
				const {defaultVal} = getOptionInfo(hDesc, name)
				if (defined(defaultVal)) {
					hResult[name] = defaultVal
				}
			}
		}

		// --- Check of there's a restriction on the number of non-options
		if (('_' in hDesc) && isArray(hResult._)) {
			const len = hResult._.length
			DBG(`Check number of non-options (${len})`)
			const hInfo = getNonOptionInfo(hDesc)
			DBG(`Non-option info: ${OL(hInfo)}`)
			if (defined(hInfo)) {
				const {min, max} = hInfo
				if (defined(hInfo.min)) {
					assert((len >= hInfo.min), `${len} non-options < min (${hInfo.min})`)
				}
				if (defined(hInfo.max)) {
					assert((len <= hInfo.max), `${len} non-options > max (${hInfo.max})`)
				}
			}
		}
	}

	DBG(`hResult = ${OL(hResult)}`)
	DBG(`lNonOptions = ${OL(lNonOptions)}`)
	return [hResult, lNonOptions]
}

// ---------------------------------------------------------------------------

export const getOptionInfo = (hDesc: hash, name: string): hash => {

	// --- Return value is a hash with keys: type, desc

	assert((name !== '_'), "getOptionInfo(hDesc, '_') called")
	assert((name in hDesc), `No such option: -${name}`)
	const h = isHash(hDesc[name]) ? hDesc[name] : {desc: hDesc[name]}
	if (notdefined(h.type)) {
		h.type = (name.length === 1) ? 'boolean' : 'string'
	}
	if (notdefined(h.desc)) {
		h.desc = '<no description available>'
	}
	if ((!('defaultVal' in h)) && (h.type === 'boolean')) {
		h.defaultVal = false
	}
	return h
}

// ---------------------------------------------------------------------------
// --- returns undef if no '_' key in hDesc

type TNonOptionInfo = {
	desc: string
	min: number
	max: number
	}

export const getNonOptionInfo = (hDesc: hash): (TNonOptionInfo | undefined) => {

	DBG(`hDesc = ${OL(hDesc)}`)
	if (!('_' in hDesc)) {
		DBG("No '_' key in hDesc")
		return undef
	}
	const h = hDesc._
	if (!isHash(h)) {
		DBG("hDesc._ not a hash")
		return undef
	}
	let {desc, range} = h
	const realDesc = (
		  isEmpty(desc)  ? '<no description available>'
		: isString(desc) ? desc
		: "<bad _ description>"
		)
	DBG(`desc = ${desc}`)
	if (notdefined(range)) {
		DBG("No range key")
		return {
			desc: realDesc,
			min: 0,
			max: Number.MAX_SAFE_INTEGER
			}
	}

	DBG(`range = ${OL(range)}`)
	if (isInteger(range)) {
		DBG(`Integer range: ${range}`)
		return {
			desc: realDesc,
			min: range,
			max: range
			}
	}
	else if (isArray(range)) {
		assert((range.length === 2), `Bad '_' key: ${OL(range)}`)
		const [min, max] = range
		DBG(`Array range: ${min}..${max}`)
		if (isInteger(min) && isInteger(max)) {
			return {
				desc: realDesc,
				min,
				max
				}
		}
		else {
			croak(`range min or max not an integer: ${OL(min)}..${OL(max)}`)
		}
	}
	else {
		croak(`Invalid range: ${OL(range)}`)
	}
}

// ---------------------------------------------------------------------------

const cntStr = (n: number, str: string): string => {
	return (n===1) ? `1 ${str}` : `${n} ${str}s`
}

export const helpStr = (hDesc: hash): string => {

	const lLines = ["Available options:"]

	// --- define a utility function
	const push = (str: string, level: number=0): void => {
		lLines.push(spaces(3*level) + str)
	}

	for (const name of keys(hDesc)) {
		if (name !== '_') {
			const {type, desc} = getOptionInfo(hDesc, name)
			push(`-${name}: ${type} - ${desc}`, 1)
		}
	}
	if (defined(hDesc._)) {
		push("Non-options:")
		const hInfo = getNonOptionInfo(hDesc)
		if (defined(hInfo)) {
			const {desc, min, max} = hInfo
			push(desc, 1)
			if (min === max) {
				push(`There must be exactly ${min} non-options`, 1)
			}
			else {
				if (min > 0) {
					push(`There must be at least ${cntStr(min, 'non-option')}`, 1)
				}
				if (max < Number.MAX_SAFE_INTEGER) {
					push(`There must be at most ${cntStr(max, 'non-option')}`, 1)
				}
			}
		}
		else {
			DUMP(hDesc._)
			croak("Bad descriptor for '_'")
		}
	}
	return lLines.join('\n')
}

//# sourceMappingURL=data:application/json;base64,