"use strict";
// nice.lib.civet

import {
	undef, defined, notdefined, assert, croak, hash, hashof,
	isArray, isFunction, isBoolean, isString, isClass, isArrayOfStrings,
	jsType, className, functionName, symbolName,
	nonEmpty, classDef, functionDef, regexpDef,
	} from 'datatypes'
import {
	getOptions, escapeStr, unescapeStr,
	keys, toBlock, o, OL, rtrim, Fetcher,
	} from 'llutils'
import {
	indented,
	} from 'indent'
import {
	TPLLToken, tkEOF, tkIndent, tkUndent,
	TTokenGenerator, allTokensInBlock,
	} from 'pll'

// ---------------------------------------------------------------------------

type TCompareFunc = (a: string, b: string) => number

// ---------------------------------------------------------------------------

export const alphaCompare: TCompareFunc = (
		a: string,
		b: string
		): number => {

	return (a < b) ? -1 : (a > b) ? 1 : 0
}

// ---------------------------------------------------------------------------

// --- Returns a function that:
//        compares 2 strings based on their position in lSortKeys
//        else compares alphabetically

const getCompareFunc = (
		lSortKeys: string[]
		): TCompareFunc => {

	// --- Create map of key to number
	const h: hashof<number> = {}
	let i1 = 0;for (const key of lSortKeys) {const i = i1++;
		h[key] = i+1
	}

	return function(a: string, b: string): number {
		const aVal = h[a]
		const bVal = h[b]

		if (defined(aVal)) {
			if (defined(bVal)) {
				// --- compare numerically
				return (aVal < bVal) ? -1 : (aVal > bVal) ? 1 : 0
			}
			else {
				return -1
			}
		}
		else {
			if (defined(bVal)) {
				return 1
			}
			else {
				return alphaCompare(a, b)
			}
		}
	}
}

// ---------------------------------------------------------------------------

export const toNice = (
		x: unknown,
		hOptions: hash={}
		): string => {

	// --- When strict, classes and function
	//     include their definitions, with escaped chars

	type opt = {
		strict: boolean
		sortFunc: (TCompareFunc | undefined)
		sortKeys: ((string[]) | undefined)
		}
	const {strict, sortFunc, sortKeys
		} = getOptions<opt>(hOptions, {
		strict: false,
		sortFunc: undef,
		sortKeys: undef
		})

	if (typeof x === 'undefined') {
		return '.undef.'
	}

	if (typeof x === 'bigint') {
		return x.toString()
	}

	if (typeof x === 'number') {
		return (
			  Number.isNaN(x)    ? '.NaN.'
			: Number.isFinite(x) ? x.toString()
			: ((x < 0) ? '.neginfinity.' : '.infinity.')
			)
	}

	if (typeof x === 'function') {
		if (isClass(x)) {
			return `.class ${classDef(x)}.`
		}
		else {
			return `.function ${functionDef(x)}.`
		}
	}

	if (typeof x === 'object') {

		if (x === null) {
			return '.null.'
		}

		if (isArray(x)) {
			if (x.length === 0) {
				return '.[].'
			}
			const lLines = []
			for (const item of x) {
				const block = toNice(item, hOptions)
				if (shouldSplit(item)) {
					lLines.push('-')
					lLines.push(indented(block))
				}
				else {
					lLines.push(`- ${block}`)
				}
			}
			return toBlock(lLines)
		}

		if (x instanceof String) {
			const s = x.toString()
			if (needsPreEsc(s)) {
				return '\\' + escapeStr(s, o`style=C`)
			}
			else {
				return escapeStr(s, o`style=C`)
			}
		}

		if (x instanceof Boolean) {
			return x ? '.true.' : '.false.'
		}

		if (x instanceof Number) {
			return x.toString()
		}

		if (x instanceof RegExp) {
			const def = regexpDef(x)
			return def ? `.regexp ${def}.` : '.regexp.'
		}

//		sortKeysFunc: TCompareFunc := (
//			  isArray(sortKeys)    ? getCompareFunc(sortKeys)
//			: isFunction(sortKeys) ? sortKeys
//			:                        alphaCompare
//			)

		let sortKeysFunc: TCompareFunc
		if (defined(sortFunc)) {
			sortKeysFunc = sortFunc
		}
		else if (defined(sortKeys)) {
			sortKeysFunc = getCompareFunc(sortKeys)
		}
		else {
			sortKeysFunc = alphaCompare
		}

		const lKeys = Object.keys(x)
		if (lKeys.length === 0) {
			return '.{}.'
		}
		const lLines = []
		for (const key of lKeys.sort(sortKeysFunc)) {
			if (isString(key)) {
				const val = (x as hashof<unknown>)[key]
				const block = toNice(val, hOptions)
				if (shouldSplit(val)) {
					lLines.push(`${key}:`)
					lLines.push(indented(block))
				}
				else {
					lLines.push(`${key}: ${block}`)
				}
			}
		}
		return toBlock(lLines)
	}

	else {
		return `<Unknown object ${x}>`
	}
}

// ---------------------------------------------------------------------------

export const needsPreEsc = (str: string) => {

	// --- if it looks like an array item, it needs leading \
	if (str.match(/^-/)) {
		return true
	}

	// --- if it looks like a hash key, it needs leading \
	if (str.match(/^[A-Za-z][A-Za-z0-9_]*:/)) {
		return true
	}

	// --- if it looks like a number, it needs leading \
	if (str.match(/^\d+(?:\.\d*)?/)) {
		return true
	}

	// --- if it starts with a '.', it needs leading \
	if ((str.length > 0) && (str[0] === '.')) {
		return true
	}

	return false
}

// ---------------------------------------------------------------------------

const shouldSplit = (x: any): boolean => {

	return ['hash','array','class','instance'].includes(jsType(x))
}

// ---------------------------------------------------------------------------

export const niceSplitter: TTokenGenerator = function*(
		str: string
		) {
	let ref;let ref1;if ((ref = str.match(/^-(.*)$/))) {let lMatches = ref;
		const tail = lMatches[1].trim()
		if (tail) {
			yield {
				kind: 'list-item',
				str,
				value: getPrimitive(tail)
				}
		}
		else {
			yield {
				kind: 'list-head',
				name: str,
				str: ''
				}
		}
	}
	else if ((ref1 = str.match(/^([A-Za-z][A-Za-z0-9_]*):(.*)$/))) {let lMatches = ref1;
		const name = lMatches[1]
		const tail = lMatches[2].trim()
		if (tail) {
			yield {
				kind: 'hash-item',
				str,
				name,
				value: getPrimitive(tail)
				}
		}
		else {
			yield {
				kind: 'hash-head',
				name,
				str
				}
		}
	}
	else {
		yield {
			kind: 'primitive',
			str,
			value: getPrimitive(str)
			}
	}
}

// ---------------------------------------------------------------------------

export const allNiceTokens = function*(
		block: string,
		): Generator<TPLLToken, void, void> {

	for (const h of allTokensInBlock(block, niceSplitter)) {
		yield h
	}
	return
}

// ---------------------------------------------------------------------------

export const fromNice = (
		str: string,
		): any => {

	// --- Create a Fetcher, then use
	//     recursive descent parsing

	const fetcher = new Fetcher<TPLLToken>(allNiceTokens(str), tkEOF)

	const parseObj = (): any => {
		const {kind, str} = fetcher.peek()
		if(kind === 'list-item' || kind === 'list-head') {
				return parseList()}
else if(kind === 'hash-item' || kind === 'hash-head') {
				return parseHash()}
else if(kind === 'eof') {
				return undef}
else  {
				fetcher.skip()
				return getPrimitive(str)
			}
	}

	const parseList = (): any[] => {
		const lItems: any[] = []
		let {kind} = fetcher.peek()
		while (['list-item', 'list-head'].includes(kind)) {
			if (kind === 'list-head') {
				lItems.push(parseListNest())
			}
			else {
				lItems.push(fetcher.get().value)
			}
			kind = fetcher.peek().kind
		}
		return lItems
	}

	const parseListNest = (): any[] => {
		fetcher.get({kind: 'list-head', str: ''})
		fetcher.get({kind: 'indent', str: ''})
		const value = parseObj()
		fetcher.get({kind: 'undent', str: ''})
		return value
	}

	const parseHash = (): hash => {
		const hItems: hash = {}
		let {kind, name} = fetcher.peek()
		if (kind === 'hash-head') {
			fetcher.skip()
			fetcher.get({kind: 'indent', str: ''})
			const value = parseObj()
			if (defined(name)) {
				hItems[name] = value
			}
			fetcher.get({kind: 'undent', str: ''})
		}
		else {
			while (kind === 'hash-item') {
				const {name, value} = fetcher.get()
				if (defined(name)) {
					hItems[name] = value
				};
				({kind} = fetcher.peek())
			}
		}
		return hItems
	}

	debugger
	return parseObj()
}

// ---------------------------------------------------------------------------

export const getPrimitive = (
		str: string,
		): any => {

	str = str.trim()
	let ref2;if ((ref2 = str.match(/^\.(.*)\.$/))) {const lMatches = ref2;
		const s = lMatches[1].trim()
		if(s === 'undef') { return undef}
else if(s === 'null') { return null}
else if(s === 'true') { return true}
else if(s === 'false') { return false}
else if(s === 'NaN') { return NaN}
else if(s === 'infinity') { return Infinity}
else if(s === 'neginfinity') { return -Infinity}
else if(s === 'symbol') { return Symbol()}
else if(s === '[]') { return []}
else if(s === '{}') { return {}}
else if(typeof s === 'string' && /^symbol\s+(.+)$/.test(s)) {
				const lMatches = s.match(/^symbol\s+(.+)$/)
				if (defined(lMatches)) {
					const name = lMatches[1]
					return Symbol(name)
				}
				else {
					return Symbol()
				}}
else if(typeof s === 'string' && /^regexp\s+(.+)$/.test(s)) {
				const lMatches = s.match(/^regexp\s+(.+)$/)
				if (defined(lMatches)) {
					const name = lMatches[1]
					return new RegExp(name)
				}
				else {
					return new RegExp('^$')
				}}
else  {
				croak("Not Implemented")
			}
	}
	else if (str.match(/^\d+$/)) {
		return parseInt(str, 10)
	}
	else if (str.match(/^\d+\.\d*$/)) {
		return parseFloat(str)
	}
	else {
		return unescapeStr(str, o`purpose=C`)
	}
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,