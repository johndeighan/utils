"use strict";
// nice.lib.civet

import {
	undef, defined, notdefined, assert, croak, hash, hashof,
	isArray, isFunction, isBoolean, isString, isNonPrimitive,
	isClass, isArrayOfStrings, isEmpty, nonEmpty,
	className, functionName, symbolName,
	classDef, functionDef, regexpDef,
	} from 'datatypes'
import {
	getOptions, escapeStr, unescapeStr,
	keys, toBlock, o, OL, rtrim, Fetcher,
	} from 'llutils'
import {
	indented,
	} from 'indent'
import {
	TPLLToken, tkEOF, tkIndent, tkUndent,
	TTokenGenerator, allTokensInBlock,
	} from 'pll'

// ---------------------------------------------------------------------------

export type TCompareFunc = (a: string, b: string) => number
export type TMapFunc = (key: string, x: unknown) => unknown

// ---------------------------------------------------------------------------

export const alphaCompare: TCompareFunc = (
		a: string,
		b: string
		): number => {

	return (a < b) ? -1 : (a > b) ? 1 : 0
}

// ---------------------------------------------------------------------------

// --- Returns a function that:
//        compares 2 strings based on their position in lSortKeys
//        else compares alphabetically

const getCompareFunc = (
		lSortKeys: string[]
		): TCompareFunc => {

	// --- Create map of key to number
	const h: hashof<number> = {}
	let i1 = 0;for (const key of lSortKeys) {const i = i1++;
		h[key] = i+1
	}

	return function(a: string, b: string): number {
		const aVal = h[a]
		const bVal = h[b]

		if (defined(aVal)) {
			if (defined(bVal)) {
				// --- compare numerically
				return (aVal < bVal) ? -1 : (aVal > bVal) ? 1 : 0
			}
			else {
				return -1
			}
		}
		else {
			if (defined(bVal)) {
				return 1
			}
			else {
				return alphaCompare(a, b)
			}
		}
	}
}

// ---------------------------------------------------------------------------
// --- leading digit must be preceded by a single '\'
//     leading and trailing whitespace must be replaced
//        with \t, \n or \x20

export const toNiceString = (str: string): string => {

	// --- escape TABs and NEWLINEs

	const str1 = escapeStr(str, o`style=C`)

	// --- precede with '/' if starts with digit, '.' or '-'

	const str2 = str1.match(/^[\d.-]/) ? `\\${str1}` : str1
	const str3 = str2.match(/^\S+:/) ? `\\${str2}` : str2

	// --- check for leading or trailing spaces
	//     (TABs and NEWLINEs have already been escaped)
	//     (regex always matches)

	const lMatches = str3.match(/^(\x20+)?(.*?)(\x20+)?$/)
	if (defined(lMatches)) {
		const [_, pre, mid, post] = lMatches
		return (
			(defined(pre) ? '\\x20'.repeat(pre.length) : '')
			+ mid
			+ (defined(post) ? '\\x20'.repeat(post.length) : '')
			)
	}
	return str2
}

// ---------------------------------------------------------------------------

const pathadd = (
		path: string,
		key: string | number
		): string => {

	const newkey = (
		  (typeof key === 'number')
		? `[${key.toString()}]`
		: `/${key}`
		)
	return (path === '/') ? newkey : `${path}${newkey}`
}

// ---------------------------------------------------------------------------

export const toNice = (
		x: unknown,
		hOptions: hash={},
		mapVisited: Map<object, string> = new Map<object, string>(),
		path: string = '/'
		): string => {

	// --- When recoverable, classes and functions
	//     include their definitions,
	//     with escaped chars

	type opt = {
		recoverable: boolean
		ignoreEmptyKeys: boolean
		sortKeys: boolean
		sortFunc: (TCompareFunc | undefined)
		mapFunc: TMapFunc
		lInclude: ((string[]) | undefined)
		lExclude: string[]
		}
	const {recoverable,
			ignoreEmptyKeys,
			sortKeys,
			sortFunc,
			mapFunc,
			lInclude,
			lExclude,
		} = getOptions<opt>(hOptions, {
		recoverable: false,
		ignoreEmptyKeys: false,
		sortKeys: false,
		sortFunc: undef,
		mapFunc: (key: string, x: unknown) => { return x },
		lInclude: undef,
		lExclude: []
		})

	assert(!(sortKeys && defined(sortFunc)), "Bad options")
	switch(typeof x) {
		case 'undefined': {
			return '.undef.'
		}

		case 'boolean': {
			return x ? '.true.' : '.false.'
		}

		case 'number': {
			return (
				  Number.isNaN(x)    ? '.NaN.'
				: Number.isFinite(x) ? x.toString()
				: ((x < 0) ? '.neginfinity.' : '.infinity.')
				)
		}

		case 'bigint': {
			return x.toString() + 'n'
		}

		case 'string': {
			return toNiceString(x)
		}

		case 'symbol': {
			const name = symbolName(x)
			return name ? `.symbol ${name}.` : '.symbol.'
		}

		case 'function': {
			if (isClass(x)) {
				return `.class ${className(x)}.`
			}
			else {
				return `.function ${functionName(x)}.`
			}
		}

		case 'object': {
			if (x === null) {
				return '.null.'
			}

			if (x instanceof RegExp) {
				const def = regexpDef(x)
				return def ? `.regexp ${def}.` : '.regexp.'
			}

			if (x instanceof String) {
				return toNiceString(x.toString())
			}

			if (x instanceof Boolean) {
				return x ? '.true.' : '.false.'
			}

			if (x instanceof Number) {
				return x.toString()
			}

			// --- Check if object was previously visited
			const prevpath = mapVisited.get(x)
			if (prevpath) {
				return `.REF ${prevpath}.`
			}

			// --- a utility function ---

			const shouldSplit = (v: unknown): boolean => {
				return (
						(typeof v === 'object')
					&& (v !== null)
					&& !(v instanceof String)
					&& !(v instanceof Number)
					&& !(v instanceof Boolean)
					&& nonEmpty(v)
					&& !mapVisited.has(v)
					)
			}

			if (isArray(x)) {
				if (x.length === 0) {
					return '.[].'
				}
				const lLines = []
				let i2 = 0;for (const val of x) {const i = i2++;
					const doSplit = shouldSplit(val)
					const block = toNice(
							val,
							hOptions,
							mapVisited,
							pathadd(path, i)
							)
					if (doSplit) {
						lLines.push('-')
						lLines.push(indented(block, 1, {oneIndent: '   '}))
					}
					else {
						lLines.push(`- ${block}`)
					}
				}
				return toBlock(lLines)
			}

			// --- Add to visited map
			mapVisited.set(x, path)

			const lKeys = Object.keys(x)
			if (lKeys.length === 0) {
				return '.{}.'
			}

			const func: (TCompareFunc | undefined) = (
				  defined(sortFunc) ? sortFunc
				: defined(lInclude) ? getCompareFunc(lInclude)
				: sortKeys          ? alphaCompare
				:                     undef
				)

			const useKey = (key: unknown): boolean => {
				if (typeof key !== 'string') {
					return false
				}
				if (defined(lExclude) && lExclude.includes(key)) {
					return false
				}
				if (defined(lInclude) && !lInclude.includes(key)) {
					return false
				}
				return true
			}

			const lLines = []
			for (const key of (defined(func) ? lKeys.sort(func) : lKeys)) {
				if (useKey(key)) {
					const val = mapFunc(key, (x as hashof<unknown>)[key])
					if (!ignoreEmptyKeys || !isEmpty(val)) {
						const doSplit = shouldSplit(val)
						const block = toNice(
								val,
								hOptions,
								mapVisited,
								pathadd(path, key)
								)
						if (doSplit) {
							lLines.push(`${key}:`)
							lLines.push(indented(block, 1, {oneIndent: '   '}))
						}
						else {
							lLines.push(`${key}: ${block}`)
						}
					}
				}
			}
			return toBlock(lLines)
		}
	}

	return `<Unknown object ${OL(x)}>`
}

// ---------------------------------------------------------------------------


// ---------------------------------------------------------------------------

export const niceSplitter: TTokenGenerator = function*(
		str: string
		) {
	let ref;let ref1;if ((ref = str.match(/^-(.*)$/))) {let lMatches = ref;
		const tail = lMatches[1].trim()
		if (tail) {
			yield {
				kind: 'list-item',
				str,
				value: getPrimitive(tail)
				}
		}
		else {
			yield {
				kind: 'list-head',
				name: str,
				str: ''
				}
		}
	}
	else if ((ref1 = str.match(/^([A-Za-z][A-Za-z0-9_]*):(.*)$/))) {let lMatches = ref1;
		const name = lMatches[1]
		const tail = lMatches[2].trim()
		if (tail) {
			yield {
				kind: 'hash-item',
				str,
				name,
				value: getPrimitive(tail)
				}
		}
		else {
			yield {
				kind: 'hash-head',
				name,
				str
				}
		}
	}
	else {
		yield {
			kind: 'primitive',
			str,
			value: getPrimitive(str)
			}
	}
}

// ---------------------------------------------------------------------------

export const allNiceTokens = function*(
		block: string,
		): Generator<TPLLToken, void, void> {

	for (const h of allTokensInBlock(block, niceSplitter)) {
		yield h
	}
	return
}

// ---------------------------------------------------------------------------

export const fromNice = (
		str: string,
		): unknown => {

	// --- Create a Fetcher, then use
	//     recursive descent parsing

	const fetcher = new Fetcher<TPLLToken>(allNiceTokens(str), tkEOF)

	const parseObj = (): unknown => {
		const {kind, str} = fetcher.peek()
		if(kind === 'list-item' || kind === 'list-head') {
				return parseList()}
else if(kind === 'hash-item' || kind === 'hash-head') {
				return parseHash()}
else if(kind === 'eof') {
				return undef}
else  {
				fetcher.skip()
				if (defined(str)) {
					return getPrimitive(str)
				}
			}
	}

	const parseList = (): unknown[] => {
		const lItems: unknown[] = []
		let {kind} = fetcher.peek()
		while (['list-item', 'list-head'].includes(kind)) {
			if (kind === 'list-head') {
				lItems.push(parseListNest())
			}
			else {
				lItems.push(fetcher.get().value)
			}
			kind = fetcher.peek().kind
		}
		return lItems
	}

	const parseListNest = (): unknown[] => {
		fetcher.get({kind: 'list-head', str: ''})
		fetcher.get({kind: 'indent', str: ''})
		const value = parseObj()
		fetcher.get({kind: 'undent', str: ''})
		return [value]
	}

	const parseHash = (): hash => {
		const hItems: hash = {}
		let {kind, name} = fetcher.peek()
		if (kind === 'hash-head') {
			fetcher.skip()
			fetcher.get({kind: 'indent', str: ''})
			const value = parseObj()
			if (defined(name)) {
				hItems[name] = value
			}
			fetcher.get({kind: 'undent', str: ''})
		}
		else {
			while (kind === 'hash-item') {
				const {name, value} = fetcher.get()
				if (defined(name)) {
					hItems[name] = value
				};
				({kind} = fetcher.peek())
			}
		}
		return hItems
	}

	debugger
	return parseObj()
}

// ---------------------------------------------------------------------------

export const getPrimitive = (
		str: string,
		): unknown => {

	str = str.trim()
	let ref2;if ((ref2 = str.match(/^\.(.*)\.$/))) {const lMatches = ref2;
		const s = lMatches[1].trim()
		if(s === 'undef') { return undef}
else if(s === 'null') { return null}
else if(s === 'true') { return true}
else if(s === 'false') { return false}
else if(s === 'NaN') { return NaN}
else if(s === 'infinity') { return Infinity}
else if(s === 'neginfinity') { return -Infinity}
else if(s === 'symbol') { return Symbol()}
else if(s === '[]') { return []}
else if(s === '{}') { return {}}
else if(typeof s === 'string' && /^symbol\s+(.+)$/.test(s)) {
				const lMatches = s.match(/^symbol\s+(.+)$/)
				if (defined(lMatches)) {
					const name = lMatches[1]
					return Symbol(name)
				}
				else {
					return Symbol()
				}}
else if(typeof s === 'string' && /^regexp\s+(.+)$/.test(s)) {
				const lMatches = s.match(/^regexp\s+(.+)$/)
				if (defined(lMatches)) {
					const name = lMatches[1]
					return new RegExp(name)
				}
				else {
					return new RegExp('^$')
				}}
else  {
				croak("Not Implemented")
			}
	}
	else if (str.match(/^\d+$/)) {
		return parseInt(str, 10)
	}
	else if (str.match(/^\d+\.\d*$/)) {
		return parseFloat(str)
	}
	else {
		return unescapeStr(str, o`purpose=C`)
	}
}

//# sourceMappingURL=data:application/json;base64,