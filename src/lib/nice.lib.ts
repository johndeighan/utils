"use strict";
// nice.civet

import {
	undef, defined, notdefined, assert, hash,
	isArray, isFunction, isBoolean, isString,
	jsType, className, functionName, symbolName,
	nonEmpty, functionDef, regexpDef,
	} from './datatypes.lib.ts'
import {
	getOptions, escapeStr, unescapeStr,
	keys, toBlock, o, OL, croak, rtrim, Fetcher,
	} from './llutils.lib.ts'
import {
	indented,
	} from './indent.lib.ts'
import {
	Token, TTokenGenerator, allTokensInBlock,
	} from './tokens.lib.ts'

type TCompareFunc = (a: string, b: string) => number

// ---------------------------------------------------------------------------

export const niceSplitter: TTokenGenerator = function*(
		str: string
		) {
	let ref;let ref1;if ((ref = str.match(/^-(.*)$/))) {let lMatches = ref;
		const tail = lMatches[1].trim()
		if (tail) {
			yield {
				kind: 'list-item',
				str,
				value: getPrimitive(tail)
				}
		}
		else {
			yield {
				kind: 'list-head',
				str
				}
		}
	}
	else if ((ref1 = str.match(/^([A-Za-z][A-Za-z0-9_]*):(.*)$/))) {let lMatches = ref1;
		const name = lMatches[1]
		const tail = lMatches[2].trim()
		if (tail) {
			yield {
				kind: 'hash-item',
				str,
				name,
				value: getPrimitive(tail)
				}
		}
		else {
			yield {
				kind: 'hash-head',
				name,
				str
				}
		}
	}
	else {
		yield {
			kind: 'primitive',
			str,
			value: getPrimitive(str)
			}
	}
}

// ---------------------------------------------------------------------------

const getCompareFunc = (lSortKeys: string[]): TCompareFunc => {

	// --- Convert to a function
	const h: hash = {}
	let i1 = 0;for (const key of lSortKeys) {const i = i1++;
		h[key] = i+1
	}

	return function(a: string, b: string): number {
		const aVal = h[a]
		const bVal = h[b]

		if (defined(aVal)) {
			if (defined(bVal)) {
				// --- compare numerically
				return (aVal < bVal) ? -1 : (aVal > bVal) ? 1 : 0
			}
			else {
				return -1
			}
		}
		else {
			if (defined(bVal)) {
				return 1
			}
			else {
				return (a < b) ? -1 : (a > b) ? 1 : 0
			}
		}
	}
}

// ---------------------------------------------------------------------------

export const toNice = (x: any, hOptions: hash={}): string => {

	switch(jsType(x)) {
		case 'undef': {
			return '.undef.'
		}
		case 'boolean': {
			return x ? '.true.' : '.false.'
		}
		case 'string': {
			if (needsEsc(x)) {
				return '\\' + escapeStr(x, o`style=C`)
			}
			else {
				return escapeStr(x, o`style=C`)
			}
		}
		case 'NaN': {
			return '.NaN.'
		}
		case 'infinity': {
			return (x > 0) ? '.infinity.' : '.neginfinity.'
		}
		case 'number':case 'integer': {
			return x.toString()
		}
		case 'class': {
			const name = className(x)
			return name ? `.class ${name}.` : '.class'
		}
		case 'function': {
			const name = functionName(x)
			return name ? `.function ${name}.` : ".function."
		}
		case 'symbol': {
			const name = symbolName(x)
			return name ? `.symbol ${name}.` : ".symbol."
		}
		case 'regexp': {
			const def = regexpDef(x)
			return def ? `.regexp ${def}.` : '.regexp.'
		}

		case 'array': {
			if (x.length === 0) {
				return '.[].'
			}
			const lLines = []
			for (const item of x) {
				const block = toNice(item, hOptions)
				if (shouldSplit(item)) {
					lLines.push('-')
					lLines.push(indented(block))
				}
				else {
					lLines.push(`- ${block}`)
				}
			}
			return toBlock(lLines)
		}

		case 'hash':case 'instance': {
			const {sortKeys} = getOptions(hOptions, {
				sortKeys: false    // --- can be boolean/array/function
				})

			const sortKeysFunc: TCompareFunc = (
				  isArray(sortKeys)    ? getCompareFunc(sortKeys)
				: isFunction(sortKeys) ? sortKeys
				:                        (a: string, b: string) => { return (a < b) ? -1 : (a > b) ? 1 : 0 }
				)

			const lKeys = Object.keys(x)
			if (lKeys.length === 0) {
				return '.{}.'
			}
			const lLines = []
			if (sortKeys === true) {
				lKeys.sort()
			}
			else if (sortKeys !== false) {
				lKeys.sort(sortKeysFunc)
			}
			for (const key of lKeys) {
				assert(isString(key), `key not a string: ${OL(key)}`)
				const val = x[key]
				const block = toNice(val, hOptions)
				if (shouldSplit(val)) {
					lLines.push(`${key}:`)
					lLines.push(indented(block))
				}
				else {
					lLines.push(`${key}: ${block}`)
				}
			}
			return toBlock(lLines)
		}
		default: {
			return `<Unknown object ${x}`
		}
	}
}

// ---------------------------------------------------------------------------

export const needsEsc = (str: string) => {

	// --- if it looks like an array item, it needs quotes
	if (str.match(/^-/)) {
		return true
	}

	// --- if it looks like a hash key, it needs quotes
	if (str.match(/^[A-Za-z][A-Za-z0-9_]*:/)) {
		return true
	}

	// --- if it looks like a number, it needs quotes
	if (str.match(/^\d+(?:\.\d*)?/)) {
		return true
	}

	return false
}

// ---------------------------------------------------------------------------

const shouldSplit = (x: any): boolean => {

	return ['hash','array','class','instance'].includes(jsType(x))
}

// ---------------------------------------------------------------------------

export const allNiceTokens = function*(
		block: string,
		): Generator<Token, void, void> {

	for (const h of allTokensInBlock(block, niceSplitter)) {
		yield h
	}
	return
}

// ---------------------------------------------------------------------------

export const fromNice = (
		str: string,
		): any => {

	// --- Create a Fetcher, then use
	//     recursive descent parsing

	let ref2;let ref3;if ((ref2 = str.match(/^-(?:\s+(.*))?$/))) {const lMatches = ref2;
		// --- an array
		croak("Not Implemented")
	}
	else if ((ref3 = str.match(/^([A-Za-z][A-Za-z0-9_]*)\:\s+(.*)$/))) {const lMatches = ref3;
		// --- a hash
		croak("Not Implemented")
	}
	else {
		return getPrimitive(str)
	}
}

// ---------------------------------------------------------------------------

export const getPrimitive = (
		str: string,
		): any => {

	str = rtrim(str)
	let ref4;if ((ref4 = str.match(/^\.(.*)\.$/))) {const lMatches = ref4;
		const s = lMatches[1].trim()
		if(s === 'undef') { return undef}
else if(s === 'true') { return true}
else if(s === 'false') { return false}
else if(s === 'NaN') { return NaN}
else if(s === 'infinity') { return Infinity}
else if(s === 'neginfinity') { return -Infinity}
else if(s === 'symbol') { return Symbol()}
else if(s === '[]') { return []}
else if(s === '{}') { return {}}
else if(typeof s === 'string' && /^symbol\s+(.+)$/.test(s)) {
				const lMatches = s.match(/^symbol\s+(.+)$/)
				if (defined(lMatches)) {
					const name = lMatches[1]
					return Symbol(name)
				}
				else {
					return Symbol()
				}}
else if(typeof s === 'string' && /^regexp\s+(.+)$/.test(s)) {
				const lMatches = s.match(/^regexp\s+(.+)$/)
				if (defined(lMatches)) {
					const name = lMatches[1]
					return new RegExp(name)
				}
				else {
					return new RegExp('^$')
				}}
else  {
				croak("Not Implemented")
			}
	}
	else if (str.match(/^\d+$/)) {
		return parseInt(str, 10)
	}
	else if (str.match(/^\d+\.\d*$/)) {
		return parseFloat(str)
	}
	else {
		return unescapeStr(str, o`purpose=C`)
	}
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,