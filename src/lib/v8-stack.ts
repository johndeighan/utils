"use strict";
// v8-stack.civet

import {
	install, mapSourcePosition,
	} from 'source-map-support'
import {sprintf} from '@std/fmt/printf'

import {hash, optionspec} from './datatypes.ts'
import {
	undef, defined, notdefined, isEmpty, nonEmpty,
	assert, croak, hasKey, OL, ML, getOptions,
	isString, isNonEmptyString, isInteger, rpad, centered,
	isFile, mkpath, fileExt, withExt, normalizePath, relpath,
	DBG, LOG, WARN, ERR, INDENT, UNDENT,
	} from './utils.ts'

/**
 * @module v8-stack - runtime stack utilities
 */

install()     // from source-map-support
const width = 40

// ---------------------------------------------------------------------------

export type stackFrame = {
	type: string    // eval | native | constructor | method | function | script
	source: string  // source file name
	line: number
	column: number
	name: string    // name of function or method
	isConstructor: boolean
	isAsync: boolean
	objType: (string | undefined)  // --- if type == 'method'
	}

// ---------------------------------------------------------------------------

/**
 * Get the runtime stack from the v8 engine
 * ignores any stack frames from this module
 * files will be mapped to original source files
 * 	if a source map is available
 */

export var getV8Stack = (): stackFrame[] => {
	// --- ignores any stack frames from this module
	//     files will be mapped to original source files
	//        if a source map is available

	try {
		// @ts-ignore
		const oldLimit = Error.stackTraceLimit

		// @ts-ignore
		const oldPreparer = Error.prepareStackTrace

		// @ts-ignore
		Error.stackTraceLimit = Infinity

		// @ts-ignore
		Error.prepareStackTrace = (error, lFrames) => {
			const lResultFrames: stackFrame[] = []
			DBG(`getV8Stack(): ${lFrames.length} stack frames`)
			let i1 = 0;for (const frame of lFrames) {const i = i1++;

				DBG(`FRAME ${i}`, INDENT)

				// --- Call functions on the frame
				const fileName      = frame.getFileName()
				const functionName  = frame.getFunctionName()
				const functionObj   = frame.getFunction()
				const methodName    = frame.getMethodName()
				const line          = frame.getLineNumber()
				const column        = frame.getColumnNumber()
				const isTopLevel    = frame.isToplevel()
				const isAsync       = frame.isAsync()
				const isEval        = frame.isEval()
				const isNative      = frame.isNative()
				const isConstructor = frame.isConstructor()
				const typeName      = frame.getTypeName()

				DBG(centered('from V8', width, '-'))
				DBG(`fileName = ${OL(fileName)}`)
				DBG(`functionName = ${OL(functionName)}`)
				DBG(`defined(functionObj) = ${OL(defined(functionObj))}`)
				DBG(`methodName = ${OL(methodName)}`)
				DBG(`line = ${OL(line)}`)
				DBG(`column = ${OL(column)}`)
				DBG(`isTopLevel = ${OL(isTopLevel)}`)
				DBG(`isAsync = ${OL(isAsync)}`)
				DBG(`isEval = ${OL(isEval)}`)
				DBG(`isNative = ${OL(isNative)}`)
				DBG(`isConstructor = ${OL(isConstructor)}`)
				DBG(`typeName = ${OL(typeName)}`)
				DBG('-'.repeat(width))

				const source: string = fileName
				if (defined(source) && defined(source.match(/v8-stack\.(js|ts|civet)$/))) {
					DBG(`SKIP: source = '${source}'`, UNDENT)
					continue
				}

				const h = {
					type: (
						  isEval                ? 'eval'
						: isNative              ? 'native'
						: isConstructor         ? 'constructor'
						: defined(methodName)   ? 'method'
						: defined(functionName) ? 'function'
						: isTopLevel            ? 'script'
						:                         'unkn'
						),
					source,
					line,
					column,
					name: (
						  defined(functionName) ? functionName
						: defined(functionObj)  ? '<anon>'
						: defined(methodName)   ? methodName
						:                         ''
						),
					isConstructor,
					isAsync,
					objType: (methodName === undef) ? undef : typeName
					}

				// --- fix a bug in the V8 engine where calls inside a
				//     top level anonymous function is reported as
				//     being from the top level, i.e. type 'script'

				const tos = lResultFrames.at(-1)    // --- i.e. previous frame
				if (tos !== undef) {
					if ((h.type === 'script') && (tos.type === 'script')) {
						DBG(`Patch current TOS (currently ${lResultFrames.length} frames)`)
						tos.type = 'function'
						tos.name = '<anon>'
					}
				}

				DBG(centered('return frame', width, '-'))
				DBG(ML(h))
				DBG('-'.repeat(width))

				// --- Ignore this entry and any before it
				if (h.objType === 'ModuleJob') {
					DBG("objType is 'ModuleJob' - stop processing")
					break
				}

				lResultFrames.push(h)
				DBG(UNDENT)
			}

			DBG('-'.repeat(width))
			return lResultFrames
		}

		const errObj = new Error()

		// @ts-ignore - because errObj.stack will be an array
		const lStack: stackFrame[] = errObj.stack || []

		// --- reset to previous values

		// @ts-ignore
		Error.stackTraceLimit = oldLimit

		// @ts-ignore
		Error.prepareStackTrace = oldPreparer

		for (const h of lStack) {
			DBG(`before mapping, h = ${ML(h)}`)
			const {source, line, column, name, type} = h
			const hNew = mapSourcePosition({
				source,
				line,
				column
				})
			const newExt = fileExt(hNew.source)
			if (newExt === fileExt(h.source)) {
				DBG("Not mapped - returning original position")
				h.source = relpath(h.source)
			}
			else {
				DBG(`got, hNew = ${ML(hNew)}`)
				h.source = relpath(withExt(h.source, newExt))
				h.line = hNew.line
				h.column = hNew.column
				DBG(`after mapping, h = ${ML(h)}`)
			}
		}

		return lStack
	}
	catch (e) {
		// @ts-ignore
		ERR(e.message)
		return []
	}
}

// ---------------------------------------------------------------------------

/**
 * Get the runtime stack from the v8 engine as a string
 * ignores any stack frames from this module
 * files will be mapped to original source files
 * 	if a source map is available
 */

export const getV8StackStr = (hOptions: optionspec={}): string => {

	const lLines = getV8Stack().map((h) => {
		const {type, name, source, line, column} = h
		let ref;
			if (name) {
				ref = sprintf("%-18s", `${type} ${name}`)
			}
			else {
				ref = sprintf("%-18s", `${type}`)
			};const nameStr =ref
		return `[${nameStr}] ${source}:${line}:${column}`
	}
		)
	return lLines.join('\n')
}

// ---------------------------------------------------------------------------

/**
 * Get the current function's caller
 */

export const getMyCaller = (): (stackFrame | undefined) => {

	try {
		const lStack = getV8Stack()
		if (defined(lStack) && (lStack.length > 0)) {
			return lStack[1]
		}
		else {
			return undef
		}
	}
	catch (err) {
		if (err instanceof Error) {
			LOG(`ERROR in getV8Stack(): ${err.message}`)
		}
		return undef
	}
}

// ---------------------------------------------------------------------------

/**
 * Get the current function's caller, ignoring any calls
 * from the same module
 */

export const getMyOutsideCaller = (): (stackFrame | undefined) => {

	try {
		const lStack = getV8Stack()
		DBG(`Call stack has ${lStack.length} items`)
		if (lStack.length === 0) {
			return undef
		}
		const source = lStack[0].source
		DBG(`source = ${source}`)
		let i2 = 0;for (const frame of lStack) {const i = i2++;
			DBG(`frame[${i}].source = ${frame.source}`)
			if (frame.source !== source) {
				return frame
			}
		}
		return undef
	}
	catch (err) {
		if (err instanceof Error) {
			LOG(`ERROR in getV8Stack(): ${err.message}`)
		}
		return undef
	}
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,