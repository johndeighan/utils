"use strict";
// symbols.lib.civet

import {
	undef, defined, notdefined, assert,
	hash, hashof, nonEmpty,
	} from './datatypes.lib.ts'
import {
	pass, OL, ML, croak, o, getOptions, hasKey, keys,
	} from './llutils.lib.ts'
import {LOG, DBG, DBGVALUE} from './logger.lib.ts'
import {resetOneIndent} from './indent.lib.ts'
import {
	TPLLToken, TTokenGenerator, allTokensInBlock,
	} from './pll.lib.ts'
import {isFile, slurp} from './fs.lib.ts'

/**
 * @module symbols - locate common symbols
 *    parses a file (default: src/.symbols) that looks like:
 *       src/lib/indent.lib.ts
 *          oneIndent resetOneIndent indentLevel
 *          lineDesc splitLine indented
 *       src/lib/fs.lib.ts
 *          isFile isDir
 *          fileExt withExt
 *
 *    and implements function:
 *       sourceLib := (symbol: string): string?
 */

// --- not exported!
let hSymbols: hashof<string> = {}     // --- {<sym>: <lib>, ...}

// ---------------------------------------------------------------------------

export const loadSymbols = (
		strSymbols: string,
		hOptions: hash={}
		): hashof<string> => {

	// --- Check if libraries actually exist
	const {checkFiles} = getOptions(hOptions, {
		checkFiles: false
		})

	let level = 0   // --- symGen must know the current level

	const symGen: TTokenGenerator = function*(line: string) {

		if (level === 0) {
			yield {kind: 'lib', str: line}
		}
		else if (level === 1) {
			for (const str of line.split(/\s+/)) {
				yield {kind: 'symbol', str}
			}
		}
		else {
			croak(`level = ${level}`)
		}
		return
	}

	const hSymbols: hashof<string> = {}  // --- {<symbol>: <lib>, ...}
	let curLib: (string | undefined) = undef
	for (const {kind, str} of allTokensInBlock(strSymbols, symGen)) {
		switch(kind) {
			case 'indent': {
				level += 1;break;
			}
			case 'undent': {
				level -= 1;break;
			}
			case 'lib': {
				curLib = str;break;
			}
			case 'symbol':case 'guard': {
				assert(defined(str), "undefined str!")
				if (level === 0) {
					if (checkFiles) {
						assert(isFile(str), `No such file: ${str}`)
					}
					curLib = str
				}
				else if (defined(curLib)) {
					DBG(`ADD ${str} from ${curLib}`)
					hSymbols[str] = curLib
				}
				else {
					croak("curLib empty at level > 0")
				};break;
			}
			default: {
				croak(`Unknown kind: ${kind}`)
			}
		}
	}
	resetOneIndent()
	return hSymbols
}

// ---------------------------------------------------------------------------

export const sourceLib = (
		symbol: string,
		h: hashof<string>=hSymbols
		): string => {

	return h[symbol]
}

// ---------------------------------------------------------------------------

export const libsAndSymbols = (
		lSymbols: string[]
		): hashof<string[]> => {

	const hLibs: hashof<string[]> = {}
	for (const sym of lSymbols) {
		const srcLib = sourceLib(sym)
		if (defined(srcLib)) {
			if (hasKey(hLibs, srcLib)) {
				hLibs[srcLib].push(sym)
			}
			else {
				hLibs[srcLib] = [sym]
			}
		}
	}
	return hLibs
}

// ---------------------------------------------------------------------------

export const getNeededImportStmts = (
		lSymbols: string[]
		): string[] => {

	DBG(`CALL getNeededImportStmts(${OL(lSymbols)})`)
	const hLibs = libsAndSymbols(lSymbols)
	DBGVALUE('hLibs', hLibs)
	const results=[];for (const lib of keys(hLibs)) {
		const lSyms = hLibs[lib]
		const strSyms = lSyms.join(', ')
		if (lib.match(/^[A-Za-z][A-Za-z0-9_]*$/)) {
			results.push(`import {${strSyms}} from '${lib}';`)
		}
		else if (lib.match(/^[\@\.\/]/)) {
			results.push(`import {${strSyms}} from '${lib}';`)
		}
		else {
			results.push(`import {${strSyms}} from './${lib}';`)
		}
	};const lStmts =results
	return lStmts
}

// ---------------------------------------------------------------------------

if (isFile('src/.symbols')) {
	const contents = slurp('src/.symbols')
	hSymbols = loadSymbols(contents, o`checkFiles`)
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,