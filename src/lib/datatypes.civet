# datatypes.civet

/**
 * @module datatypes - TypeScript datatype checking
 */

/**
 * An alias for TypeScript type 'object' with string keys
 * [unit tests](../test/datatypes.test.civet#:~:text=DBG,hash)
 */

export interface hash
	[key: string | symbol]: any

/**
 * An array containing anything
 * [unit tests](../test/datatypes.test.civet#:~:text=DBG,array)
 */

export type array = any[]

/**
 * A function that takes no parameters and returns nothing
 * [unit tests](../test/datatypes.test.civet#:~:text=DBG,voidFunc)
 */

export type voidFunc = () => void

/**
 * specifying options for function getOptions()
 * [unit tests](../test/datatypes.test.civet#:~:text=DBG,optionspec)
 */

export type optionspec = hash | string

# ---------------------------------------------------------------------------

/**
 * An alias for JavaScript's `undefined`
 * [unit tests](../test/datatypes.test.civet#:~:text=DBG,undef)
 */

export undef := undefined

# ---------------------------------------------------------------------------

/**
 * returns true if the provided value is defined
 * (i.e. not null or undefined), else returns false
 * [unit tests](../test/datatypes.test.civet#:~:text=DBG,defined)
 */

export defined := (x: any): boolean =>

	return (x != undef) && (x != null)

# ---------------------------------------------------------------------------

/**
 * Returns true if all the values provided are not defined
 * (i.e. either null or undefined), else returns false
 * [unit tests](../test/datatypes.test.civet#:~:text=DBG,notdefined)
 */

export notdefined := (x: any): x is undefined =>

	return (x == undefined) || (x == null)

# ---------------------------------------------------------------------------

/**
 * returns true if (typeof item == 'string') or item instanceof String
 * [unit tests](../test/datatypes.test.civet#:~:text=DBG,isString)
 */

export isString := (x: any): x is string =>

	return (typeof x == 'string') || (x instanceof String)

# ---------------------------------------------------------------------------

/**
 * Test if something is a non-empty string,
 * i.e. isn't all whitespace
 * [unit tests](../test/datatypes.test.civet#:~:text=DBG,isNonEmptyString)
 */

export isNonEmptyString := (x: any): boolean =>

	# --- must contain non-whitespace character
	return isString(x) && defined(x.match(/\S/))

# ---------------------------------------------------------------------------

/**
 * Test if something is a boolean
 * [unit tests](../test/datatypes.test.civet#:~:text=DBG,isBoolean)
 */

export isBoolean := (x: any): x is boolean =>

	return (typeof x == 'boolean') || (x instanceof Boolean)

# ---------------------------------------------------------------------------

/**
 * Test if something is a number
 * [unit tests](../test/datatypes.test.civet#:~:text=DBG,isNumber)
 */

export isNumber := (x: any): x is number =>

	type := typeof x
	return (type == 'bigint') || (type == 'number') || (x instanceof Number)

# ---------------------------------------------------------------------------

/**
 * Type integer
 */

export type integer = number

/**
 * Test if something is an integer
 * [unit tests](../test/datatypes.test.civet#:~:text=DBG,isInteger)
 */

export isInteger := (x: any): x is integer =>

	return isNumber(x) && Number.isInteger(x.valueOf())

# ---------------------------------------------------------------------------

/**
 * Test if something is an array
 * [unit tests](../test/datatypes.test.civet#:~:text=DBG,isArray)
 */

export isArray := (x: any): x is array =>

	return Array.isArray(x)

# ---------------------------------------------------------------------------

/**
 * Test if something is an array of strings
 * [unit tests](../test/datatypes.test.civet#:~:text=DBG,isArrayOfStrings)
 */

export isArrayOfStrings := (x: any): boolean =>

	if not Array.isArray(x)
		return false
	for item of x
		if not isString(item)
			return false
	return true

# ---------------------------------------------------------------------------

/**
 * Type regexp - a regular expression
 * [unit tests](../test/datatypes.test.civet#:~:text=DBG,regexp)
 */

type regexp = object

/**
 * Test if something is a regular expression
 * [unit tests](../test/datatypes.test.civet#:~:text=DBG,isRegExp)
 */

export isRegExp := (item: any): item is regexp =>

	return (item instanceof RegExp)

# ---------------------------------------------------------------------------

/**
 * Test if something is an object
 * [unit tests](../test/datatypes.test.civet#:~:text=DBG,isObject)
 */

export isObject := (item: any): item is object =>

	return (typeof item == 'object')

# ---------------------------------------------------------------------------

/**
 * Test if something is a hash
 * [unit tests](../test/datatypes.test.civet#:~:text=DBG,isHash)
 */

export isHash := (item: any): item is hash =>

	return isObject(item) && not (isArray(item) || isRegExp(item))

# ---------------------------------------------------------------------------

/**
 * returns true if any of these is true:
 * 	- x is null or undef
 * 	- x is a string consisting of only whitespace
 * 	- x is an array of length 0
 * 	- x is a hash that has no keys
 * else returns false
 * [unit tests](../test/datatypes.test.civet#:~:text=DBG,isEmpty)
 */

export isEmpty := (x: any): boolean =>

	if (x == undef) || (x == null)
		return true
	if isString(x)
		return (x.match(/^\s*$/) != null)
	if isArray(x)
		return (x.length == 0)
	if isHash(x)
		return (Object.keys(x).length == 0)
	else
		return false

# ---------------------------------------------------------------------------

/**
 * returns not isEmpty(x)
 * [unit tests](../test/datatypes.test.civet#:~:text=DBG,nonEmpty)
 */

export nonEmpty := (x: any): boolean =>

	return not isEmpty(x)
