// cleanup.civet

import {expandGlobSync} from '@std/fs/expand-glob'
import pathLib from 'path'

// ---------------------------------------------------------------------------

const relpath = (path) => {

	const npath = pathLib.relative('', path).replaceAll('\\', '/')
	if (npath.charAt(1) === ':') {
		return npath.charAt(0).toLowerCase() + npath.substring(1)
	}
	else {
		return npath
	}
}

// ---------------------------------------------------------------------------

const rootDir =  Deno.env.get('PROJECT_ROOT_DIR')
if (rootDir === undefined) {
	console.log("Please set env var PROJECT_ROOT_DIR")
	Deno.exit()
}

for (const pattern of [
		'src/**/*.js',
		'src/**/*.temp.*',
		'test/**/*.js',
		'test/**/*.temp.*'
		]) {
	const hGlobOptions = {
		exclude: [
			'node_modules/**',
			'.git/**',
			'src/bin/cleanup.js',
			'test/base.test.js',
			`${rootDir}/.deno/bin/*.exe`,
			`${rootDir}/.deno/bin/cleanup*`
			],
		includeDirs: false
		}

	for (const {path} of expandGlobSync(pattern, hGlobOptions)) {
		console.log(`REMOVE: ${relpath(path)}`)
		Deno.removeSync(path)
	}
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3JjL2Jpbi9jbGVhbnVwLmNpdmV0LnRzeCIsInNvdXJjZXMiOlsic3JjL2Jpbi9jbGVhbnVwLmNpdmV0Il0sIm1hcHBpbmdzIjoiQUFBQSxnQkFBZTtBQUNmLEFBQUE7QUFDQSxBQUFBLE1BQU0sQ0FBQyxDQUFDLGNBQWMsQ0FBQyxDQUFDLElBQUksQ0FBQyxxQkFBcUI7QUFDbEQsQUFBQSxBQUFBLE1BQU0sQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLE1BQU07QUFDMUIsQUFBQTtBQUNBLEFBQUEsOEVBQTZFO0FBQzdFLEFBQUE7QUFDQSxBQUFBLEFBQU8sTUFBUCxPQUFPLENBQUMsQ0FBRSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFBLENBQUE7QUFDcEIsQUFBQTtBQUNBLEFBQUEsQ0FBTSxNQUFMLEtBQUssQ0FBQyxDQUFFLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDO0FBQzFELEFBQUEsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFFLENBQUMsR0FBRyxDQUFDLENBQUEsQ0FBQTtBQUM1QixBQUFBLEVBQUUsTUFBTSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxDQUFDLEM7Q0FBQyxDQUFBO0FBQzNELEFBQUEsQ0FBQyxJQUFJLENBQUEsQ0FBQTtBQUNMLEFBQUEsRUFBRSxNQUFNLENBQUMsSztDQUFLLEM7QUFBQSxDQUFBO0FBQ2QsQUFBQTtBQUNBLEFBQUEsOEVBQTZFO0FBQzdFLEFBQUE7QUFDQSxBQUFBLEFBQU8sTUFBUCxPQUFPLENBQUMsQ0FBRSxFQUFFLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLGtCQUFrQixDQUFDO0FBQzVDLEFBQUEsQUFBQSxHQUFHLENBQUMsT0FBTyxDQUFDLEdBQUUsQ0FBQyxTQUFTLENBQUMsQ0FBQSxDQUFBO0FBQ3pCLEFBQUEsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFBLEFBQUMscUNBQXFDLENBQUE7QUFDbEQsQUFBQSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQztBQUFDLENBQUE7QUFDWixBQUFBO0FBQ0EsQUFBQSxBQUFBLEdBQUcsQ0FBQyxDQUFBLE1BQUEsT0FBTyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQ2hCLEFBQUEsRUFBRSxhQUFhLENBQUE7QUFDZixBQUFBLEVBQUUsaUJBQWlCLENBQUE7QUFDbkIsQUFBQSxFQUFFLGNBQWMsQ0FBQTtBQUNoQixBQUFBLEVBQUUsa0JBQWtCO0FBQ3BCLEFBQUEsRUFBRSxDQUFDLENBQUEsQ0FBQSxDQUFBO0FBQ0gsQUFBQSxDQUFhLE1BQVosWUFBWSxDQUFDLENBQUUsQ0FBQyxDQUFDO0FBQ2xCLEFBQUEsRUFBRSxPQUFPLENBQUMsQ0FBQyxDQUFDO0FBQ1osQUFBQSxHQUFHLGlCQUFpQixDQUFBO0FBQ3BCLEFBQUEsR0FBRyxTQUFTLENBQUE7QUFDWixBQUFBLEdBQUcsb0JBQW9CLENBQUE7QUFDdkIsQUFBQSxHQUFHLG1CQUFtQixDQUFBO0FBQ3RCLEFBQUEsR0FBRyxDQUFDLEVBQUUsT0FBTyxDQUFDLGdCQUFnQixDQUFDLENBQUE7QUFDL0IsQUFBQSxHQUFHLENBQUMsRUFBRSxPQUFPLENBQUMsbUJBQW1CLENBQUM7QUFDbEMsQUFBQSxHQUFHLENBQUMsQ0FBQTtBQUNKLEFBQUEsRUFBRSxXQUFXLENBQUMsQ0FBQyxLQUFLO0FBQ3BCLEVBQUUsQ0FBQztBQUNILEFBQUE7QUFDQSxBQUFBLENBQUMsR0FBRyxDQUFDLENBQUEsTUFBQSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxjQUFjLENBQUMsT0FBTyxDQUFDLENBQUMsWUFBWSxDQUFDLENBQUEsQ0FBQSxDQUFBO0FBQ3BELEFBQUEsRUFBRSxPQUFPLENBQUMsR0FBRyxDQUFBLEFBQUMsQ0FBQyxRQUFRLEVBQUUsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQTtBQUN4QyxBQUFBLEVBQUUsSUFBSSxDQUFDLFVBQVUsQ0FBQSxBQUFDLElBQUksQztDQUFBLEM7QUFBQSxDQUFBO0FBQ3RCIiwibmFtZXMiOltdLCJzb3VyY2VzQ29udGVudCI6WyIjIGNsZWFudXAuY2l2ZXRcblxuaW1wb3J0IHtleHBhbmRHbG9iU3luY30gZnJvbSAnQHN0ZC9mcy9leHBhbmQtZ2xvYidcbmltcG9ydCBwYXRoTGliIGZyb20gJ3BhdGgnXG5cbiMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbnJlbHBhdGggOj0gKHBhdGgpID0+XG5cblx0bnBhdGggOj0gcGF0aExpYi5yZWxhdGl2ZSgnJywgcGF0aCkucmVwbGFjZUFsbCgnXFxcXCcsICcvJylcblx0aWYgKG5wYXRoLmNoYXJBdCgxKSA9PSAnOicpXG5cdFx0cmV0dXJuIG5wYXRoLmNoYXJBdCgwKS50b0xvd2VyQ2FzZSgpICsgbnBhdGguc3Vic3RyaW5nKDEpXG5cdGVsc2Vcblx0XHRyZXR1cm4gbnBhdGhcblxuIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxucm9vdERpciA6PSAgRGVuby5lbnYuZ2V0KCdQUk9KRUNUX1JPT1RfRElSJylcbmlmIChyb290RGlyID09IHVuZGVmaW5lZClcblx0Y29uc29sZS5sb2cgXCJQbGVhc2Ugc2V0IGVudiB2YXIgUFJPSkVDVF9ST09UX0RJUlwiXG5cdERlbm8uZXhpdCgpXG5cbmZvciBwYXR0ZXJuIG9mIFtcblx0XHQnc3JjLyoqLyouanMnXG5cdFx0J3NyYy8qKi8qLnRlbXAuKidcblx0XHQndGVzdC8qKi8qLmpzJ1xuXHRcdCd0ZXN0LyoqLyoudGVtcC4qJ1xuXHRcdF1cblx0aEdsb2JPcHRpb25zIDo9IHtcblx0XHRleGNsdWRlOiBbXG5cdFx0XHQnbm9kZV9tb2R1bGVzLyoqJ1xuXHRcdFx0Jy5naXQvKionXG5cdFx0XHQnc3JjL2Jpbi9jbGVhbnVwLmpzJ1xuXHRcdFx0J3Rlc3QvYmFzZS50ZXN0LmpzJ1xuXHRcdFx0XCIje3Jvb3REaXJ9Ly5kZW5vL2Jpbi8qLmV4ZVwiXG5cdFx0XHRcIiN7cm9vdERpcn0vLmRlbm8vYmluL2NsZWFudXAqXCJcblx0XHRcdF1cblx0XHRpbmNsdWRlRGlyczogZmFsc2Vcblx0XHR9XG5cblx0Zm9yIHtwYXRofSBvZiBleHBhbmRHbG9iU3luYyhwYXR0ZXJuLCBoR2xvYk9wdGlvbnMpXG5cdFx0Y29uc29sZS5sb2cgXCJSRU1PVkU6ICN7cmVscGF0aChwYXRoKX1cIlxuXHRcdERlbm8ucmVtb3ZlU3luYyBwYXRoXG4iXX0=