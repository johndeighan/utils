# compile.civet

import {
	undef, defined, notdefined, pass, OL, assert, croak,
	getCmdArgs, compileAllFiles, watchFiles,
	DBG, LOG, WARN, ERR,
	isDirSpec, compileFile,
	compileResult,
	} from '../lib/utils.ts'

{_, path, w: watch} := getCmdArgs {
	path: "one or more file paths"
	w:    "watch for and recompile files if they change"
	_: """
		files to compile, as one of the following:
			'test/<stub>' - file <stub>.<ext> in ./test folder
			'lib/<stub>'  - file <stub>.<ext> in ./src/lib folder
			'bin/<stub>'  - file <stub>.<ext> in ./src/bin folder
			'<stub>'      - search the above 3 for <stub>.<ext>
		where <ext> is a valid extension to compile
		"""
	}

let numCompiled = 0

# ---------------------------------------------------------------------------

logResult := (hResult: compileResult): void =>

	{relPath, status, outPath} := hResult
	switch status
		when 'compiled'
			LOG "==> #{OL(relPath)}"
			numCompiled += 1
		when 'exists'
			pass()
		else
			ERR "Not compiled: #{OL(relPath)}"
	return

# ---------------------------------------------------------------------------

if (_.length == 0)
	DBG "=====  Compiling all files  ====="
	for hResult of compileAllFiles()
		logResult hResult

else
	# --- Files must be specified as <stub>, or <dirspec>/<stub>

	for str of _
		DBG "non-option: #{OL(str)}"
		if str.includes('/')
			[dirspec, stubStr] := str.split('/')
			assert isDirSpec(dirspec), "Bad dirspec: #{OL(dirspec)}"
			for stub of stubStr.split(',')
				DBG "compile #{OL(dirspec)}/#{OL(stub)}"
				hResult := compileFile [dirspec, stub]
				logResult hResult
		else
			for stub of str.split(',')
				DBG "compile stub #{OL(stub)}"
				hResult := compileFile [undef, stub]
				logResult hResult

if defined(path)
	for filePath of path.split(',')
		hResult := compileFile filePath
		logResult hResult

LOG "(#{numCompiled} files compiled)"

if watch
	watchFiles Deno.cwd(), ({kind, path}) =>
		console.log "EVENT: #{kind} #{path}"
		return false
