// run-temp-file.civet

import {getCurrentLogger} from '@jdeighan/utils/logger.js'
import {
	undef, getCmdArgs, assert, compileFile,
	DBG, LOG, isFile, execCmd,
	} from "@jdeighan/utils/llutils.js"

const {compile} = getCmdArgs(Deno.args, {
	hArgs: {
		c: {alias: 'compile'}
		},
	doSetLogger: true
	})

// ---------------------------------------------------------------------------

console.log("in run-temp-file")
if (compile) {
	await execCmd('compile')
}
else {
	compileFile(['test', 'temp'])
}

assert(isFile('test/temp.js'), "Compile of temp script failed")
const {code} = await execCmd('deno', [
	'run',
	'-A',
	'test/temp.js',
	...Deno.args
	])
DBG(`Final result code from temp file: ${code}`)
console.log("DONE")

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3JjL2Jpbi9ydW4tdGVtcC1maWxlLmNpdmV0LnRzeCIsInNvdXJjZXMiOlsic3JjL2Jpbi9ydW4tdGVtcC1maWxlLmNpdmV0Il0sIm1hcHBpbmdzIjoiQUFBQSxzQkFBcUI7QUFDckIsQUFBQTtBQUNBLEFBQUEsTUFBTSxDQUFDLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxJQUFJLENBQUMsMkJBQTJCO0FBQzFELEFBQUEsQUFBQSxNQUFNLENBQUMsQ0FBQztBQUNSLENBQUMsS0FBSyxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsV0FBVyxDQUFDO0FBQ3hDLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsT0FBTyxDQUFDO0FBQzNCLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyw0QkFBNEI7QUFDcEMsQUFBQTtBQUNBLEFBQUEsQUFBUyxNQUFULENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBRSxDQUFDLFVBQVUsQ0FBQSxBQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO0FBQ3BDLEFBQUEsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO0FBQ1QsQUFBQSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsU0FBUyxDQUFDO0FBQ3ZCLEVBQUUsQ0FBQyxDQUFBO0FBQ0gsQUFBQSxDQUFDLFdBQVcsQ0FBQyxDQUFDLElBQUk7QUFDbEIsQ0FBQyxDQUFDLENBQUE7QUFDRixBQUFBO0FBQ0EsQUFBQSw4RUFBNkU7QUFDN0UsQUFBQTtBQUNBLEFBQUEsQUFBQSxPQUFPLENBQUMsR0FBRyxDQUFBLEFBQUMsa0JBQWtCLENBQUE7QUFDOUIsQUFBQSxBQUFBLEdBQUcsQ0FBQSxPQUFPLENBQUEsQ0FBQSxDQUFBO0FBQ1YsQUFBQSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUEsQUFBQyxTQUFTLEM7QUFBQSxDQUFBO0FBQ3hCLEFBQUEsQUFBQSxJQUFJLENBQUEsQ0FBQTtBQUNKLEFBQUEsQ0FBQyxXQUFXLENBQUEsQUFBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDO0FBQUEsQ0FBQTtBQUM3QixBQUFBO0FBQ0EsQUFBQSxBQUFBLE1BQU0sQ0FBQSxBQUFDLE1BQU0sQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDLCtCQUErQixDQUFBO0FBQzlELEFBQUEsQUFBTSxNQUFOLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBRSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUEsQUFBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO0FBQ2pDLEFBQUEsQ0FBQyxLQUFLLENBQUM7QUFDUCxBQUFBLENBQUMsSUFBSSxDQUFDO0FBQ04sQUFBQSxDQUFDLGNBQWMsQ0FBQTtBQUNmLEFBQUEsQ0FBVSxHQUFULElBQUksQ0FBQyxJQUFPO0FBQ2IsQUFBQSxDQUFDLENBQUMsQ0FBQTtBQUNGLEFBQUEsQUFBQSxHQUFHLENBQUEsQUFBQyxDQUFDLGtDQUFrQyxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUE7QUFDL0MsQUFBQSxBQUFBLE9BQU8sQ0FBQyxHQUFHLENBQUEsQUFBQyxNQUFNLENBQUE7QUFDbEIiLCJuYW1lcyI6W10sInNvdXJjZXNDb250ZW50IjpbIiMgcnVuLXRlbXAtZmlsZS5jaXZldFxyXG5cclxuaW1wb3J0IHtnZXRDdXJyZW50TG9nZ2VyfSBmcm9tICdAamRlaWdoYW4vdXRpbHMvbG9nZ2VyLmpzJ1xyXG5pbXBvcnQge1xyXG5cdHVuZGVmLCBnZXRDbWRBcmdzLCBhc3NlcnQsIGNvbXBpbGVGaWxlLFxyXG5cdERCRywgTE9HLCBpc0ZpbGUsIGV4ZWNDbWQsXHJcblx0fSBmcm9tIFwiQGpkZWlnaGFuL3V0aWxzL2xsdXRpbHMuanNcIlxyXG5cclxue2NvbXBpbGV9IDo9IGdldENtZEFyZ3MgRGVuby5hcmdzLCB7XHJcblx0aEFyZ3M6IHtcclxuXHRcdGM6IHthbGlhczogJ2NvbXBpbGUnfVxyXG5cdFx0fVxyXG5cdGRvU2V0TG9nZ2VyOiB0cnVlXHJcblx0fVxyXG5cclxuIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuXHJcbmNvbnNvbGUubG9nIFwiaW4gcnVuLXRlbXAtZmlsZVwiXHJcbmlmIGNvbXBpbGVcclxuXHRhd2FpdCBleGVjQ21kICdjb21waWxlJ1xyXG5lbHNlXHJcblx0Y29tcGlsZUZpbGUgWyd0ZXN0JywgJ3RlbXAnXVxyXG5cclxuYXNzZXJ0IGlzRmlsZSgndGVzdC90ZW1wLmpzJyksIFwiQ29tcGlsZSBvZiB0ZW1wIHNjcmlwdCBmYWlsZWRcIlxyXG57Y29kZX0gOj0gYXdhaXQgZXhlY0NtZCAnZGVubycsIFtcclxuXHQncnVuJyxcclxuXHQnLUEnLFxyXG5cdCd0ZXN0L3RlbXAuanMnXHJcblx0RGVuby5hcmdzLi4uXHJcblx0XVxyXG5EQkcgXCJGaW5hbCByZXN1bHQgY29kZSBmcm9tIHRlbXAgZmlsZTogI3tjb2RlfVwiXHJcbmNvbnNvbGUubG9nIFwiRE9ORVwiXHJcbiJdfQ==