"use strict";
// cleanup.civet

import {expandGlobSync} from '@std/fs/expand-glob'
import pathLib from 'node:path'

// ---------------------------------------------------------------------------

const relpath = (path: string) => {

	return pathLib.relative('', path).replaceAll('\\', '/')
}

// ---------------------------------------------------------------------------

const rootDir: (string | undefined) = Deno.env.get('PROJECT_ROOT_DIR')
if (rootDir === undefined) {
	console.log("Please set env var PROJECT_ROOT_DIR")
	Deno.exit()
}

const listOnly = (Deno.args[0] !== undefined)

const lFiles: string[] = []  // NOTE: a const, but can still push strings
for (const pattern of [
		'**/*.js',
		'compile.config.ts',
		'src/**/*.ts',
		'src/**/*.temp.*',
		'test/**/*.ts',
		'test/**/*.temp.*',
		'logs/logs.txt'
		]) {
	const hGlobOptions = {
		exclude: [
			'node_modules/**',
			'.git/**',
			'test/temp.ts'
			],
		includeDirs: false
		}

	for (const {path} of expandGlobSync(pattern, hGlobOptions)) {
		lFiles.push(path)
	}
}

if (lFiles.length === 0) {
	console.log("No files to remove")
}
else {
	for (const path of lFiles) {
		if (listOnly) {
			console.log(`WOULD REMOVE: ${path}`)
		}
		else {
			console.log(`REMOVE: ${relpath(path)}`)
			Deno.removeSync(path)
		}
	}
	console.log(`${lFiles.length} files removed`)
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3JjL2Jpbi9jbGVhbnVwLmNpdmV0LnRzeCIsInNvdXJjZXMiOlsic3JjL2Jpbi9jbGVhbnVwLmNpdmV0Il0sIm1hcHBpbmdzIjoiO0FBQUEsZ0JBQWU7QUFDZixBQUFBO0FBQ0EsQUFBQSxNQUFNLENBQUMsQ0FBQyxjQUFjLENBQUMsQ0FBQyxJQUFJLENBQUMscUJBQXFCO0FBQ2xELEFBQUEsQUFBQSxNQUFNLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxXQUFXO0FBQy9CLEFBQUE7QUFDQSxBQUFBLDhFQUE2RTtBQUM3RSxBQUFBO0FBQ0EsQUFBQSxBQUFPLE1BQVAsT0FBTyxDQUFDLENBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQSxDQUFBO0FBQzVCLEFBQUE7QUFDQSxBQUFBLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsQztBQUFDLENBQUE7QUFDeEQsQUFBQTtBQUNBLEFBQUEsOEVBQTZFO0FBQzdFLEFBQUE7QUFDQSxBQUFBLEFBQWdCLE1BQWhCLE9BQU8sQyxDLENBQUMsQUFBQyxNLFksQ0FBTyxDQUFDLENBQUUsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxrQkFBa0IsQ0FBQztBQUNwRCxBQUFBLEFBQUEsR0FBRyxDQUFDLE9BQU8sQ0FBQyxHQUFFLENBQUMsU0FBUyxDQUFDLENBQUEsQ0FBQTtBQUN6QixBQUFBLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQSxBQUFDLHFDQUFxQyxDQUFBO0FBQ2xELEFBQUEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEM7QUFBQyxDQUFBO0FBQ1osQUFBQTtBQUNBLEFBQUEsQUFBUSxNQUFSLFFBQVEsQ0FBQyxDQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUUsQ0FBQyxTQUFTLENBQUM7QUFDdkMsQUFBQTtBQUNBLEFBQUEsQUFBZ0IsTUFBaEIsTUFBTSxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsNENBQTJDO0FBQ25FLEFBQUEsQUFBQSxHQUFHLENBQUMsQ0FBQSxNQUFBLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUNoQixBQUFBLEVBQUUsU0FBUyxDQUFBO0FBQ1gsQUFBQSxFQUFFLG1CQUFtQixDQUFBO0FBQ3JCLEFBQUEsRUFBRSxhQUFhLENBQUE7QUFDZixBQUFBLEVBQUUsaUJBQWlCLENBQUE7QUFDbkIsQUFBQSxFQUFFLGNBQWMsQ0FBQTtBQUNoQixBQUFBLEVBQUUsa0JBQWtCLENBQUE7QUFDcEIsQUFBQSxFQUFFLGVBQWU7QUFDakIsQUFBQSxFQUFFLENBQUMsQ0FBQSxDQUFBLENBQUE7QUFDSCxBQUFBLENBQWEsTUFBWixZQUFZLENBQUMsQ0FBRSxDQUFDLENBQUM7QUFDbEIsQUFBQSxFQUFFLE9BQU8sQ0FBQyxDQUFDLENBQUM7QUFDWixBQUFBLEdBQUcsaUJBQWlCLENBQUE7QUFDcEIsQUFBQSxHQUFHLFNBQVMsQ0FBQTtBQUNaLEFBQUEsR0FBRyxjQUFjO0FBQ2pCLEFBQUEsR0FBRyxDQUFDLENBQUE7QUFDSixBQUFBLEVBQUUsV0FBVyxDQUFDLENBQUMsS0FBSztBQUNwQixFQUFFLENBQUM7QUFDSCxBQUFBO0FBQ0EsQUFBQSxDQUFDLEdBQUcsQ0FBQyxDQUFBLE1BQUEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsY0FBYyxDQUFDLE9BQU8sQ0FBQyxDQUFDLFlBQVksQ0FBQyxDQUFBLENBQUEsQ0FBQTtBQUNwRCxBQUFBLEVBQUUsTUFBTSxDQUFDLElBQUksQ0FBQSxBQUFDLElBQUksQztDQUFBLEM7QUFBQSxDQUFBO0FBQ2xCLEFBQUE7QUFDQSxBQUFBLEFBQUEsR0FBRyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsR0FBRSxDQUFDLENBQUMsQ0FBQyxDQUFBLENBQUE7QUFDdkIsQUFBQSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUEsQUFBQyxvQkFBb0IsQztBQUFBLENBQUE7QUFDakMsQUFBQSxBQUFBLElBQUksQ0FBQSxDQUFBO0FBQ0osQUFBQSxDQUFDLEdBQUcsQ0FBQyxDQUFBLE1BQUEsSUFBSSxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUEsQ0FBQSxDQUFBO0FBQ25CLEFBQUEsRUFBRSxHQUFHLENBQUEsUUFBUSxDQUFBLENBQUEsQ0FBQTtBQUNiLEFBQUEsR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFBLEFBQUMsQ0FBQyxjQUFjLEVBQUUsSUFBSSxDQUFDLENBQUMsQztFQUFBLENBQUE7QUFDdEMsQUFBQSxFQUFFLElBQUksQ0FBQSxDQUFBO0FBQ04sQUFBQSxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUEsQUFBQyxDQUFDLFFBQVEsRUFBRSxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFBO0FBQ3pDLEFBQUEsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFBLEFBQUMsSUFBSSxDO0VBQUEsQztDQUFBLENBQUE7QUFDdkIsQUFBQSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUEsQUFBQyxDQUFDLEVBQUUsTUFBTSxDQUFDLE1BQU0sQ0FBQyxjQUFjLENBQUMsQztBQUFBLENBQUE7QUFDN0MiLCJuYW1lcyI6W10sInNvdXJjZXNDb250ZW50IjpbIiMgY2xlYW51cC5jaXZldFxuXG5pbXBvcnQge2V4cGFuZEdsb2JTeW5jfSBmcm9tICdAc3RkL2ZzL2V4cGFuZC1nbG9iJ1xuaW1wb3J0IHBhdGhMaWIgZnJvbSAnbm9kZTpwYXRoJ1xuXG4jIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG5yZWxwYXRoIDo9IChwYXRoOiBzdHJpbmcpID0+XG5cblx0cmV0dXJuIHBhdGhMaWIucmVsYXRpdmUoJycsIHBhdGgpLnJlcGxhY2VBbGwoJ1xcXFwnLCAnLycpXG5cbiMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbnJvb3REaXI6IHN0cmluZz8gOj0gRGVuby5lbnYuZ2V0KCdQUk9KRUNUX1JPT1RfRElSJylcbmlmIChyb290RGlyID09IHVuZGVmaW5lZClcblx0Y29uc29sZS5sb2cgXCJQbGVhc2Ugc2V0IGVudiB2YXIgUFJPSkVDVF9ST09UX0RJUlwiXG5cdERlbm8uZXhpdCgpXG5cbmxpc3RPbmx5IDo9IChEZW5vLmFyZ3NbMF0gIT0gdW5kZWZpbmVkKVxuXG5sRmlsZXM6IHN0cmluZ1tdIDo9IFtdICAjIE5PVEU6IGEgY29uc3QsIGJ1dCBjYW4gc3RpbGwgcHVzaCBzdHJpbmdzXG5mb3IgcGF0dGVybiBvZiBbXG5cdFx0JyoqLyouanMnXG5cdFx0J2NvbXBpbGUuY29uZmlnLnRzJ1xuXHRcdCdzcmMvKiovKi50cydcblx0XHQnc3JjLyoqLyoudGVtcC4qJ1xuXHRcdCd0ZXN0LyoqLyoudHMnXG5cdFx0J3Rlc3QvKiovKi50ZW1wLionXG5cdFx0J2xvZ3MvbG9ncy50eHQnXG5cdFx0XVxuXHRoR2xvYk9wdGlvbnMgOj0ge1xuXHRcdGV4Y2x1ZGU6IFtcblx0XHRcdCdub2RlX21vZHVsZXMvKionXG5cdFx0XHQnLmdpdC8qKidcblx0XHRcdCd0ZXN0L3RlbXAudHMnXG5cdFx0XHRdXG5cdFx0aW5jbHVkZURpcnM6IGZhbHNlXG5cdFx0fVxuXG5cdGZvciB7cGF0aH0gb2YgZXhwYW5kR2xvYlN5bmMocGF0dGVybiwgaEdsb2JPcHRpb25zKVxuXHRcdGxGaWxlcy5wdXNoIHBhdGhcblxuaWYgKGxGaWxlcy5sZW5ndGggPT0gMClcblx0Y29uc29sZS5sb2cgXCJObyBmaWxlcyB0byByZW1vdmVcIlxuZWxzZVxuXHRmb3IgcGF0aCBvZiBsRmlsZXNcblx0XHRpZiBsaXN0T25seVxuXHRcdFx0Y29uc29sZS5sb2cgXCJXT1VMRCBSRU1PVkU6ICN7cGF0aH1cIlxuXHRcdGVsc2Vcblx0XHRcdGNvbnNvbGUubG9nIFwiUkVNT1ZFOiAje3JlbHBhdGgocGF0aCl9XCJcblx0XHRcdERlbm8ucmVtb3ZlU3luYyBwYXRoXG5cdGNvbnNvbGUubG9nIFwiI3tsRmlsZXMubGVuZ3RofSBmaWxlcyByZW1vdmVkXCJcbiJdfQ==