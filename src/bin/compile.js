// compile.civet

import {
	undef, defined, notdefined, pass, OL, assert, croak,
	getCmdArgs, compileFile, compileAllFiles,
	DBG, LOG, WARN, ERR,
	} from '@jdeighan/utils/llutils.js'

let numCompiled = 0

// ---------------------------------------------------------------------------

const logResult = (hResult) => {

	const {relPath, status, outPath} = hResult
	switch(status) {
		case 'compiled': {
			LOG(`==> ${OL(relPath)}`)
			numCompiled += 1;break;
		}
		case 'exists': {
			pass();break;
		}
		default: {
			ERR(`Not compiled: ${OL(relPath)}`)
		}
	}
	return
}

// ---------------------------------------------------------------------------

const {_, file, force, nopp, watch} = getCmdArgs(Deno.args, {
	hArgs: {
		file: {type: 'string'},
		f: {alias: 'force'},
		n: {alias: 'nopp'},
		w: {alias: 'watch'}
		},
	doSetLogger: true
	})

if (_.length === 0) {
	DBG("=====  Compiling all files  =====")
	let nFiles = 0
	for (const hResult of compileAllFiles(undef, {force, nopp})) {
		logResult(hResult)
	}
}

else {
	// --- Files must be specified as <stub>,... or <dirspec>/<stub>,...

	for (const str of _) {
		if (str.includes('/')) {
			const [dirspec, stubStr] = path.split('/')
			for (const stub of stubStr.split(',')) {
				DBG(`compile ${OL(dirspec)}/${OL(stub)}`)
				const hResult = compileFile([dirspec, stub], {force, nopp})
				logResult(hResult)
			}
		}
		else {
			for (const stub of str.split(',')) {
				DBG(`compile stub ${OL(stub)}`)
				const hResult = compileFile([undef, stub], {force, nopp})
				logResult(hResult)
			}
		}
	}
}

if (defined(file)) {
	for (const path of file.split(',')) {
		const {relPath, status, outPath} = compileFile(path, {force, nopp})
		logResult(status, outPath, relPath)
	}
}

LOG(`DONE (${numCompiled} files compiled)`)


//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3JjL2Jpbi9jb21waWxlLmNpdmV0LnRzeCIsInNvdXJjZXMiOlsic3JjL2Jpbi9jb21waWxlLmNpdmV0Il0sIm1hcHBpbmdzIjoiQUFBQSxnQkFBZTtBQUNmLEFBQUE7QUFDQSxBQUFBLE1BQU0sQ0FBQyxDQUFDO0FBQ1IsQ0FBQyxLQUFLLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxLQUFLLENBQUM7QUFDckQsQ0FBQyxVQUFVLENBQUMsQ0FBQyxXQUFXLENBQUMsQ0FBQyxlQUFlLENBQUM7QUFDMUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUM7QUFDckIsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLDRCQUE0QjtBQUNwQyxBQUFBO0FBQ0EsQUFBQSxBQUFBLEdBQUcsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDbkIsQUFBQTtBQUNBLEFBQUEsOEVBQTZFO0FBQzdFLEFBQUE7QUFDQSxBQUFBLEFBQVMsTUFBVCxTQUFTLENBQUMsQ0FBRSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsRUFBRSxDQUFBLENBQUE7QUFDekIsQUFBQTtBQUNBLEFBQUEsQ0FBMkIsTUFBMUIsQ0FBQyxPQUFPLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFFLENBQUMsT0FBTztBQUN0QyxBQUFBLENBQUMsTUFBTSxDQUFBLEFBQUMsTUFBTSxDQUFBLENBQUEsQ0FBQTtBQUNkLEFBQUEsRUFBRSxJQUFJLENBQUMsVUFBVSxDQUFBLENBQUEsQ0FBQTtBQUNqQixBQUFBLEdBQUcsR0FBRyxDQUFBLEFBQUMsQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQTtBQUMzQixBQUFBLEdBQUcsV0FBVyxDLEVBQUcsQ0FBQyxDQUFDLE87RUFBQSxDQUFBO0FBQ25CLEFBQUEsRUFBRSxJQUFJLENBQUMsUUFBUSxDQUFBLENBQUEsQ0FBQTtBQUNmLEFBQUEsR0FBRyxJQUFJLENBQUMsQ0FBQyxPO0VBQUEsQ0FBQTtBQUNULEFBQUEsRUFBRSxPQUFJLENBQUEsQ0FBQSxDQUFBO0FBQ04sQUFBQSxHQUFHLEdBQUcsQ0FBQSxBQUFDLENBQUMsY0FBYyxFQUFFLEVBQUUsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEM7RUFBQSxDO0NBQUEsQ0FBQTtBQUNyQyxBQUFBLENBQUMsTTtBQUFNLENBQUE7QUFDUCxBQUFBO0FBQ0EsQUFBQSw4RUFBNkU7QUFDN0UsQUFBQTtBQUNBLEFBQUEsQUFBNkIsTUFBN0IsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFFLENBQUMsVUFBVSxDQUFBLEFBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7QUFDeEQsQUFBQSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7QUFDVCxBQUFBLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQTtBQUN4QixBQUFBLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQTtBQUNyQixBQUFBLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQTtBQUNwQixBQUFBLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxPQUFPLENBQUM7QUFDckIsRUFBRSxDQUFDLENBQUE7QUFDSCxBQUFBLENBQUMsV0FBVyxDQUFDLENBQUMsSUFBSTtBQUNsQixDQUFDLENBQUMsQ0FBQTtBQUNGLEFBQUE7QUFDQSxBQUFBLEFBQUEsR0FBRyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsR0FBRSxDQUFDLENBQUMsQ0FBQyxDQUFBLENB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QztDQUFBLEM7QUFBQSxDQUFBO0FBQ3BDLEFBQUE7QUFDQSxBQUFBLEFBQUEsR0FBRyxDQUFBLEFBQUMsQ0FBQyxNQUFNLEVBQUUsV0FBVyxDQUFDLGdCQUFnQixDQUFDLENBQUE7QUFDMUM7QUFDQSIsIm5hbWVzIjpbXSwic291cmNlc0NvbnRlbnQiOlsiIyBjb21waWxlLmNpdmV0XG5cbmltcG9ydCB7XG5cdHVuZGVmLCBkZWZpbmVkLCBub3RkZWZpbmVkLCBwYXNzLCBPTCwgYXNzZXJ0LCBjcm9hayxcblx0Z2V0Q21kQXJncywgY29tcGlsZUZpbGUsIGNvbXBpbGVBbGxGaWxlcyxcblx0REJHLCBMT0csIFdBUk4sIEVSUixcblx0fSBmcm9tICdAamRlaWdoYW4vdXRpbHMvbGx1dGlscy5qcydcblxubGV0IG51bUNvbXBpbGVkID0gMFxuXG4jIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG5sb2dSZXN1bHQgOj0gKGhSZXN1bHQpID0+XG5cblx0e3JlbFBhdGgsIHN0YXR1cywgb3V0UGF0aH0gOj0gaFJlc3VsdFxuXHRzd2l0Y2ggc3RhdHVzXG5cdFx0d2hlbiAnY29tcGlsZWQnXG5cdFx0XHRMT0cgXCI9PT4gI3tPTChyZWxQYXRoKX1cIlxuXHRcdFx0bnVtQ29tcGlsZWQgKz0gMVxuXHRcdHdoZW4gJ2V4aXN0cydcblx0XHRcdHBhc3MoKVxuXHRcdGVsc2Vcblx0XHRcdEVSUiBcIk5vdCBjb21waWxlZDogI3tPTChyZWxQYXRoKX1cIlxuXHRyZXR1cm5cblxuIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxue18sIGZpbGUsIGZvcmNlLCBub3BwLCB3YXRjaH0gOj0gZ2V0Q21kQXJncyBEZW5vLmFyZ3MsIHtcblx0aEFyZ3M6IHtcblx0XHRmaWxlOiB7dHlwZTogJ3N0cmluZyd9XG5cdFx0Zjoge2FsaWFzOiAnZm9yY2UnfVxuXHRcdG46IHthbGlhczogJ25vcHAnfVxuXHRcdHc6IHthbGlhczogJ3dhdGNoJ31cblx0XHR9XG5cdGRvU2V0TG9nZ2VyOiB0cnVlXG5cdH1cblxuaWYgKF8ubGVuZ3RoID09IDApXG5cdERCRyBcIj09PT09ICBDb21waWxpbmcgYWxsIGZpbGVzICA9PT09PVwiXG5cdGxldCBuRmlsZXMgPSAwXG5cdGZvciBoUmVzdWx0IG9mIGNvbXBpbGVBbGxGaWxlcyh1bmRlZiwge2ZvcmNlLCBub3BwfSlcblx0XHRsb2dSZXN1bHQgaFJlc3VsdFxuXG5lbHNlXG5cdCMgLS0tIEZpbGVzIG11c3QgYmUgc3BlY2lmaWVkIGFzIDxzdHViPiwuLi4gb3IgPGRpcnNwZWM+LzxzdHViPiwuLi5cblxuXHRmb3Igc3RyIG9mIF9cblx0XHRpZiBzdHIuaW5jbHVkZXMoJy8nKVxuXHRcdFx0W2RpcnNwZWMsIHN0dWJTdHJdIDo9IHBhdGguc3BsaXQoJy8nKVxuXHRcdFx0Zm9yIHN0dWIgb2Ygc3R1YlN0ci5zcGxpdCgnLCcpXG5cdFx0XHRcdERCRyBcImNvbXBpbGUgI3tPTChkaXJzcGVjKX0vI3tPTChzdHViKX1cIlxuXHRcdFx0XHRoUmVzdWx0IDo9IGNvbXBpbGVGaWxlIFtkaXJzcGVjLCBzdHViXSwge2ZvcmNlLCBub3BwfVxuXHRcdFx0XHRsb2dSZXN1bHQgaFJlc3VsdFxuXHRcdGVsc2Vcblx0XHRcdGZvciBzdHViIG9mIHN0ci5zcGxpdCgnLCcpXG5cdFx0XHRcdERCRyBcImNvbXBpbGUgc3R1YiAje09MKHN0dWIpfVwiXG5cdFx0XHRcdGhSZXN1bHQgOj0gY29tcGlsZUZpbGUgW3VuZGVmLCBzdHViXSwge2ZvcmNlLCBub3BwfVxuXHRcdFx0XHRsb2dSZXN1bHQgaFJlc3VsdFxuXG5pZiBkZWZpbmVkKGZpbGUpXG5cdGZvciBwYXRoIG9mIGZpbGUuc3BsaXQoJywnKVxuXHRcdHtyZWxQYXRoLCBzdGF0dXMsIG91dFBhdGh9IDo9IGNvbXBpbGVGaWxlIHBhdGgsIHtmb3JjZSwgbm9wcH1cblx0XHRsb2dSZXN1bHQgc3RhdHVzLCBvdXRQYXRoLCByZWxQYXRoXG5cbkxPRyBcIkRPTkUgKCN7bnVtQ29tcGlsZWR9IGZpbGVzIGNvbXBpbGVkKVwiXG5cbiJdfQ==