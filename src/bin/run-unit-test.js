// run-unit-test.civet

import {
	DBG, LOG, WARN, ERR,
	} from '../lib/logger.js'
import {
	assert, execCmd, getCmdArgs, OL, relpath,
	compileAllFiles, runUnitTest, runAllUnitTests,
	} from '../lib/llutils.js'

const {_, watch, compile} = getCmdArgs(Deno.args, {
	hArgs: {
		w: {alias: 'watch'},
		c: {alias: 'compile'}
		},
	doSetLogger: true
	})

// ---------------------------------------------------------------------------

if (compile) {
	for (const {path, status, outPath} of compileAllFiles()) {
		if (status !== 'compiled') {
			LOG(`${relpath(path)} status = ${status}`)
		}
	}
}

if (_.length === 0) {
	DBG("Running all unit tests")
	for (const {code, cmdLine} of runAllUnitTests()) {
		if (code !== 0) {
			ERR(`FAILED: ${cmdLine}`)
		}
	}
}
else {
	DBG(`Running ${_.length} unit tests`)
	for (const stub of _) {
		// --- NOTE: runUnitTest() ensures that lib/bin file
		//           and unit test files are compiled
		const {code} = runUnitTest(stub)
		if (code !== 0) {
			ERR(`FAILED: Unit test ${stub}`)
		}
	}
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3JjL2Jpbi9ydW4tdW5pdC10ZXN0LmNpdmV0LnRzeCIsInNvdXJjZXMiOlsic3JjL2Jpbi9ydW4tdW5pdC10ZXN0LmNpdmV0Il0sIm1hcHBpbmdzIjoiQUFBQSxzQkFBcUI7QUFDckIsQUFBQTtBQUNBLEFBQUEsTUFBTSxDQUFDLENBQUM7QUFDUixDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQztBQUNyQixDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsa0JBQWtCO0FBQzFCLEFBQUEsQUFBQSxNQUFNLENBQUMsQ0FBQztBQUNSLENBQUMsTUFBTSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDO0FBQzFDLENBQUMsZUFBZSxDQUFDLENBQUMsV0FBVyxDQUFDLENBQUMsZUFBZSxDQUFDO0FBQy9DLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxtQkFBbUI7QUFDM0IsQUFBQTtBQUNBLEFBQUEsQUFBbUIsTUFBbkIsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFFLENBQUMsVUFBVSxDQUFBLEFBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7QUFDOUMsQUFBQSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7QUFDVCxBQUFBLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQTtBQUNyQixBQUFBLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxTQUFTLENBQUM7QUFDdkIsRUFBRSxDQUFDLENBQUE7QUFDSCxBQUFBLENBQUMsV0FBVyxDQUFDLENBQUMsSUFBSTtBQUNsQixDQUFDLENBQUMsQ0FBQTtBQUNGLEFBQUE7QUFDQSxBQUFBLDhFQUE2RTtBQUM3RSxBQUFBO0FBQ0EsQUFBQSxBQUFBLEdBQUcsQ0FBQSxPQUFPLENBQUEsQ0FBQSxDQUFBO0FBQ1YsQUFBQSxDQUFDLEdBQUcsQ0FBQyxDQUFBLE1BQUEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxFQUFFLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQSxDQUFBLENBQUE7QUFDakQsQUFBQSxFQUFFLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRSxDQUFDLFVBQVUsQ0FBQyxDQUFBLENBQUE7QUFDM0IsQUFBQSxHQUFHLEdBQUcsQ0FBQSxBQUFDLENBQUMsRUFBRSxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsVUFBVSxFQUFFLE1BQU0sQ0FBQyxDQUFDLEM7RUFBQSxDO0NBQUEsQztBQUFBLENBQUE7QUFDNUMsQUFBQTtBQUNBLEFBQUEsQUFBQSxHQUFHLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxHQUFFLENBQUMsQ0FBQyxDQUFDLENBQUEsQ0FBQTtBQUNsQixBQUFBLENBQUMsR0FBRyxDQUFBLEFBQUMsd0JBQXdCLENBQUE7QUFDN0IsQUFBQSxDQUFDLEdBQUcsQ0FBQyxDQUFBLE1BQUEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxFQUFFLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQSxDQUFBLENBQUE7QUFDekMsQUFBQSxFQUFFLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRSxDQUFDLENBQUMsQ0FBQyxDQUFBLENBQUE7QUFDaEIsQUFBQSxHQUFHLEdBQUcsQ0FBQSxBQUFDLENBQUMsUUFBUSxFQUFFLE9BQU8sQ0FBQyxDQUFDLEM7RUFBQSxDO0NBQUEsQztBQUFBLENBQUE7QUFDM0IsQUFBQSxBQUFBLElBQUksQ0FBQSxDQUFBO0FBQ0osQUFBQSxDQUFDLEdBQUcsQ0FBQSxBQUFDLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLENBQUE7QUFDckMsQUFBQSxDQUFDLEdBQUcsQ0FBQyxDQUFBLE1BQUEsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUEsQ0FBQSxDQUFBO0FBQ2QsQUFBQSxFQUFFLG9EQUFtRDtBQUNyRCxBQUFBLEVBQUUsNkNBQTRDO0FBQzlDLEFBQUEsRUFBUSxNQUFOLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBRSxDQUFDLFdBQVcsQ0FBQSxBQUFDLElBQUksQ0FBQTtBQUM1QixBQUFBLEVBQUUsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFFLENBQUMsQ0FBQyxDQUFDLENBQUEsQ0FBQTtBQUNoQixBQUFBLEdBQUcsR0FBRyxDQUFBLEFBQUMsQ0FBQyxrQkFBa0IsRUFBRSxJQUFJLENBQUMsQ0FBQyxDO0VBQUEsQztDQUFBLEM7QUFBQSxDQUFBO0FBQ2xDIiwibmFtZXMiOltdLCJzb3VyY2VzQ29udGVudCI6WyIjIHJ1bi11bml0LXRlc3QuY2l2ZXRcclxuXHJcbmltcG9ydCB7XHJcblx0REJHLCBMT0csIFdBUk4sIEVSUixcclxuXHR9IGZyb20gJy4uL2xpYi9sb2dnZXIuanMnXHJcbmltcG9ydCB7XHJcblx0YXNzZXJ0LCBleGVjQ21kLCBnZXRDbWRBcmdzLCBPTCwgcmVscGF0aCxcclxuXHRjb21waWxlQWxsRmlsZXMsIHJ1blVuaXRUZXN0LCBydW5BbGxVbml0VGVzdHMsXHJcblx0fSBmcm9tICcuLi9saWIvbGx1dGlscy5qcydcclxuXHJcbntfLCB3YXRjaCwgY29tcGlsZX0gOj0gZ2V0Q21kQXJncyBEZW5vLmFyZ3MsIHtcclxuXHRoQXJnczoge1xyXG5cdFx0dzoge2FsaWFzOiAnd2F0Y2gnfVxyXG5cdFx0Yzoge2FsaWFzOiAnY29tcGlsZSd9XHJcblx0XHR9XHJcblx0ZG9TZXRMb2dnZXI6IHRydWVcclxuXHR9XHJcblxyXG4jIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cclxuaWYgY29tcGlsZVxyXG5cdGZvciB7cGF0aCwgc3RhdHVzLCBvdXRQYXRofSBvZiBjb21waWxlQWxsRmlsZXMoKVxyXG5cdFx0aWYgKHN0YXR1cyAhPSAnY29tcGlsZWQnKVxyXG5cdFx0XHRMT0cgXCIje3JlbHBhdGgocGF0aCl9IHN0YXR1cyA9ICN7c3RhdHVzfVwiXHJcblxyXG5pZiAoXy5sZW5ndGggPT0gMClcclxuXHREQkcgXCJSdW5uaW5nIGFsbCB1bml0IHRlc3RzXCJcclxuXHRmb3Ige2NvZGUsIGNtZExpbmV9IG9mIHJ1bkFsbFVuaXRUZXN0cygpXHJcblx0XHRpZiAoY29kZSAhPSAwKVxyXG5cdFx0XHRFUlIgXCJGQUlMRUQ6ICN7Y21kTGluZX1cIlxyXG5lbHNlXHJcblx0REJHIFwiUnVubmluZyAje18ubGVuZ3RofSB1bml0IHRlc3RzXCJcclxuXHRmb3Igc3R1YiBvZiBfXHJcblx0XHQjIC0tLSBOT1RFOiBydW5Vbml0VGVzdCgpIGVuc3VyZXMgdGhhdCBsaWIvYmluIGZpbGVcclxuXHRcdCMgICAgICAgICAgIGFuZCB1bml0IHRlc3QgZmlsZXMgYXJlIGNvbXBpbGVkXHJcblx0XHR7Y29kZX0gOj0gcnVuVW5pdFRlc3Qgc3R1YlxyXG5cdFx0aWYgKGNvZGUgIT0gMClcclxuXHRcdFx0RVJSIFwiRkFJTEVEOiBVbml0IHRlc3QgI3tzdHVifVwiXHJcbiJdfQ==