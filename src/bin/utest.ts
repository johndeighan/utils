"use strict";
// run-unit-test.civet

import {
	undef, assert, getCmdArgs, OL, relpath,
	compileAllFiles, runUnitTest, runAllUnitTests,
	DBG, LOG, WARN, ERR,
	} from '../lib/utils.ts'

const {_, w: watch, c: compile} = getCmdArgs({
	w: {type: 'boolean'},
	c: {type: 'boolean'}
	})

// ---------------------------------------------------------------------------

if (compile) {
	for (const {path, status, outPath} of compileAllFiles()) {
		if (status === 'nofile') {
			WARN("compileAllFiles() returned non-file")
		}
		else if ((status !== 'compiled') && (path !== undef)) {
			LOG(`${relpath(path)} status = ${status}`)
		}
	}
}

if (_.length === 0) {
	DBG("Running all unit tests")
	for (const {stub, success, msg, code} of runAllUnitTests()) {
		if (!success) {
			if (msg === undef) {
				ERR(`UNIT TEST FAILED: ${stub}`)
			}
			else {
				ERR(`UNIT TEST FAILED: ${stub} - ${msg}`)
			}
		}
	}
}
else {
	DBG(`Running ${_.length} unit tests`)
	for (const stub of _) {
		// --- NOTE: runUnitTest() ensures that lib/bin file
		//           and unit test files are compiled
		const {code} = runUnitTest(stub)
		if (code !== 0) {
			ERR(`FAILED: Unit test ${stub}`)
		}
	}
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3JjL2Jpbi91dGVzdC5jaXZldC50c3giLCJzb3VyY2VzIjpbInNyYy9iaW4vdXRlc3QuY2l2ZXQiXSwibWFwcGluZ3MiOiI7QUFBQSxzQkFBcUI7QUFDckIsQUFBQTtBQUNBLEFBQUEsTUFBTSxDQUFDLENBQUM7QUFDUixDQUFDLEtBQUssQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQztBQUN4QyxDQUFDLGVBQWUsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxDQUFDLGVBQWUsQ0FBQztBQUMvQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQztBQUNyQixDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsaUJBQWlCO0FBQ3pCLEFBQUE7QUFDQSxBQUFBLEFBQXlCLE1BQXpCLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBRSxDQUFDLFVBQVUsQ0FBQSxBQUFDLENBQUM7QUFDekMsQUFBQSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUE7QUFDckIsQUFBQSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsU0FBUyxDQUFDO0FBQ3JCLENBQUMsQ0FBQyxDQUFBO0FBQ0YsQUFBQTtBQUNBLEFBQUEsOEVBQTZFO0FBQzdFLEFBQUE7QUFDQSxBQUFBLEFBQUEsR0FBRyxDQUFBLE9BQU8sQ0FBQSxDQUFBLENBQUE7QUFDVixBQUFBLENBQUMsR0FBRyxDQUFDLENBQUEsTUFBQSxDQUFDLElBQUksQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxlQUFlLENBQUMsQ0FBQyxDQUFBLENBQUEsQ0FBQTtBQUNqRCxBQUFBLEVBQUUsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFFLENBQUMsUUFBUSxDQUFDLENBQUEsQ0FBQTtBQUN6QixBQUFBLEdBQUcsSUFBSSxDQUFBLEFBQUMscUNBQXFDLEM7RUFBQSxDQUFBO0FBQzdDLEFBQUEsRUFBRSxJQUFJLENBQUMsR0FBRyxDQUFBLENBQUMsTUFBTSxDQUFDLEdBQUUsQ0FBQyxVQUFVLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRSxDQUFDLEtBQUssQ0FBQyxDQUFBLENBQUEsQ0FBQTtBQUNuRCxBQUFBLEdBQUcsR0FBRyxDQUFBLEFBQUMsQ0FBQyxFQUFFLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxVQUFVLEVBQUUsTUFBTSxDQUFDLENBQUMsQztFQUFBLEM7Q0FBQSxDO0FBQUEsQ0FBQTtBQUM1QyxBQUFBO0FBQ0EsQUFBQSxBQUFBLEdBQUcsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLEdBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQSxDQUFBO0FBQ2xCLEFBQUEsQ0FBQyxHQUFHLENBQUEsQUFBQyx3QkFBd0IsQ0FBQTtBQUM3QixBQUFBLENBQUMsR0FBRyxDQUFDLENBQUEsTUFBQSxDQUFDLElBQUksQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxlQUFlLENBQUMsQ0FBQyxDQUFBLENBQUEsQ0FBQTtBQUNwRCxBQUFBLEVBQUUsR0FBRyxDQUFBLENBQUksT0FBTyxDQUFBLENBQUEsQ0FBQTtBQUNoQixBQUFBLEdBQUcsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFFLENBQUMsS0FBSyxDQUFDLENBQUEsQ0FBQTtBQUNwQixBQUFBLElBQUksR0FBRyxDQUFBLEFBQUMsQ0FBQyxrQkFBa0IsRUFBRSxJQUFJLENBQUMsQ0FBQyxDO0dBQUEsQ0FBQTtBQUNuQyxBQUFBLEdBQUcsSUFBSSxDQUFBLENBQUE7QUFDUCxBQUFBLElBQUksR0FBRyxDQUFBLEFBQUMsQ0FBQyxrQkFBa0IsRUFBRSxJQUFJLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDLEM7R0FBQSxDO0VBQUEsQztDQUFBLEM7QUFBQSxDQUFBO0FBQzVDLEFBQUEsQUFBQSxJQUFJLENBQUEsQ0FBQTtBQUNKLEFBQUEsQ0FBQyxHQUFHLENBQUEsQUFBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxDQUFBO0FBQ3JDLEFBQUEsQ0FBQyxHQUFHLENBQUMsQ0FBQSxNQUFBLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFBLENBQUEsQ0FBQTtBQUNkLEFBQUEsRUFBRSxvREFBbUQ7QUFDckQsQUFBQSxFQUFFLDZDQUE0QztBQUM5QyxBQUFBLEVBQVEsTUFBTixDQUFDLElBQUksQ0FBQyxDQUFDLENBQUUsQ0FBQyxXQUFXLENBQUEsQUFBQyxJQUFJLENBQUE7QUFDNUIsQUFBQSxFQUFFLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRSxDQUFDLENBQUMsQ0FBQyxDQUFBLENBQUE7QUFDaEIsQUFBQSxHQUFHLEdBQUcsQ0FBQSxBQUFDLENBQUMsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLENBQUMsQztFQUFBLEM7Q0FBQSxDO0FBQUEsQ0FBQTtBQUNsQyIsIm5hbWVzIjpbXSwic291cmNlc0NvbnRlbnQiOlsiIyBydW4tdW5pdC10ZXN0LmNpdmV0XHJcblxyXG5pbXBvcnQge1xyXG5cdHVuZGVmLCBhc3NlcnQsIGdldENtZEFyZ3MsIE9MLCByZWxwYXRoLFxyXG5cdGNvbXBpbGVBbGxGaWxlcywgcnVuVW5pdFRlc3QsIHJ1bkFsbFVuaXRUZXN0cyxcclxuXHREQkcsIExPRywgV0FSTiwgRVJSLFxyXG5cdH0gZnJvbSAnLi4vbGliL3V0aWxzLnRzJ1xyXG5cclxue18sIHc6IHdhdGNoLCBjOiBjb21waWxlfSA6PSBnZXRDbWRBcmdzIHtcclxuXHR3OiB7dHlwZTogJ2Jvb2xlYW4nfVxyXG5cdGM6IHt0eXBlOiAnYm9vbGVhbid9XHJcblx0fVxyXG5cclxuIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuXHJcbmlmIGNvbXBpbGVcclxuXHRmb3Ige3BhdGgsIHN0YXR1cywgb3V0UGF0aH0gb2YgY29tcGlsZUFsbEZpbGVzKClcclxuXHRcdGlmIChzdGF0dXMgPT0gJ25vZmlsZScpXHJcblx0XHRcdFdBUk4gXCJjb21waWxlQWxsRmlsZXMoKSByZXR1cm5lZCBub24tZmlsZVwiXHJcblx0XHRlbHNlIGlmIChzdGF0dXMgIT0gJ2NvbXBpbGVkJykgJiYgKHBhdGggIT0gdW5kZWYpXHJcblx0XHRcdExPRyBcIiN7cmVscGF0aChwYXRoKX0gc3RhdHVzID0gI3tzdGF0dXN9XCJcclxuXHJcbmlmIChfLmxlbmd0aCA9PSAwKVxyXG5cdERCRyBcIlJ1bm5pbmcgYWxsIHVuaXQgdGVzdHNcIlxyXG5cdGZvciB7c3R1Yiwgc3VjY2VzcywgbXNnLCBjb2RlfSBvZiBydW5BbGxVbml0VGVzdHMoKVxyXG5cdFx0aWYgbm90IHN1Y2Nlc3NcclxuXHRcdFx0aWYgKG1zZyA9PSB1bmRlZilcclxuXHRcdFx0XHRFUlIgXCJVTklUIFRFU1QgRkFJTEVEOiAje3N0dWJ9XCJcclxuXHRcdFx0ZWxzZVxyXG5cdFx0XHRcdEVSUiBcIlVOSVQgVEVTVCBGQUlMRUQ6ICN7c3R1Yn0gLSAje21zZ31cIlxyXG5lbHNlXHJcblx0REJHIFwiUnVubmluZyAje18ubGVuZ3RofSB1bml0IHRlc3RzXCJcclxuXHRmb3Igc3R1YiBvZiBfXHJcblx0XHQjIC0tLSBOT1RFOiBydW5Vbml0VGVzdCgpIGVuc3VyZXMgdGhhdCBsaWIvYmluIGZpbGVcclxuXHRcdCMgICAgICAgICAgIGFuZCB1bml0IHRlc3QgZmlsZXMgYXJlIGNvbXBpbGVkXHJcblx0XHR7Y29kZX0gOj0gcnVuVW5pdFRlc3Qgc3R1YlxyXG5cdFx0aWYgKGNvZGUgIT0gMClcclxuXHRcdFx0RVJSIFwiRkFJTEVEOiBVbml0IHRlc3QgI3tzdHVifVwiXHJcbiJdfQ==