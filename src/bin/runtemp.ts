"use strict";
// runtemp.civet

import {
	undef, getCmdArgs, assert,
	DBG, LOG, isFile,
	compileFile, execCmd,
	} from "../lib/utils.ts"

const {c: compile} = getCmdArgs({
	c: 'boolean'
	})

// ---------------------------------------------------------------------------

DBG("in run-temp-file")
if (compile) {
	DBG("compiling all files")
	await execCmd('compile')
}
else {
	DBG("compiling test/temp.civet")
	compileFile(['testDir', 'temp'])
}

assert(isFile('test/temp.ts'), "Compile of test/temp.civet failed")
const {code} = await execCmd('deno', [
	'run',
	'-A',
	'test/temp.ts',
	...Deno.args
	])
DBG(`Final result code from temp file: ${code}`)

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3JjL2Jpbi9ydW50ZW1wLmNpdmV0LnRzeCIsInNvdXJjZXMiOlsic3JjL2Jpbi9ydW50ZW1wLmNpdmV0Il0sIm1hcHBpbmdzIjoiO0FBQUEsZ0JBQWU7QUFDZixBQUFBO0FBQ0EsQUFBQSxNQUFNLENBQUMsQ0FBQztBQUNSLENBQUMsS0FBSyxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsTUFBTSxDQUFDO0FBQzNCLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsTUFBTSxDQUFDO0FBQ2xCLENBQUMsV0FBVyxDQUFDLENBQUMsT0FBTyxDQUFDO0FBQ3RCLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxpQkFBaUI7QUFDekIsQUFBQTtBQUNBLEFBQUEsQUFBWSxNQUFaLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBRSxDQUFDLFVBQVUsQ0FBQSxBQUFDLENBQUM7QUFDNUIsQUFBQSxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVM7QUFDYixDQUFDLENBQUMsQ0FBQTtBQUNGLEFBQUE7QUFDQSxBQUFBLDhFQUE2RTtBQUM3RSxBQUFBO0FBQ0EsQUFBQSxBQUFBLEdBQUcsQ0FBQSxBQUFDLGtCQUFrQixDQUFBO0FBQ3RCLEFBQUEsQUFBQSxHQUFHLENBQUEsT0FBTyxDQUFBLENBQUEsQ0FBQTtBQUNWLEFBQUEsQ0FBQyxHQUFHLENBQUEsQUFBQyxxQkFBcUIsQ0FBQTtBQUMxQixBQUFBLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQSxBQUFDLFNBQVMsQztBQUFBLENBQUE7QUFDeEIsQUFBQSxBQUFBLElBQUksQ0FBQSxDQUFBO0FBQ0osQUFBQSxDQUFDLEdBQUcsQ0FBQSxBQUFDLDJCQUEyQixDQUFBO0FBQ2hDLEFBQUEsQ0FBQyxXQUFXLENBQUEsQUFBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDO0FBQUEsQ0FBQTtBQUNoQyxBQUFBO0FBQ0EsQUFBQSxBQUFBLE1BQU0sQ0FBQSxBQUFDLE1BQU0sQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDLG1DQUFtQyxDQUFBO0FBQ2xFLEFBQUEsQUFBTSxNQUFOLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBRSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUEsQUFBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO0FBQ2pDLEFBQUEsQ0FBQyxLQUFLLENBQUM7QUFDUCxBQUFBLENBQUMsSUFBSSxDQUFDO0FBQ04sQUFBQSxDQUFDLGNBQWMsQ0FBQTtBQUNmLEFBQUEsQ0FBVSxHQUFULElBQUksQ0FBQyxJQUFPO0FBQ2IsQUFBQSxDQUFDLENBQUMsQ0FBQTtBQUNGLEFBQUEsQUFBQSxHQUFHLENBQUEsQUFBQyxDQUFDLGtDQUFrQyxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUE7QUFDL0MiLCJuYW1lcyI6W10sInNvdXJjZXNDb250ZW50IjpbIiMgcnVudGVtcC5jaXZldFxyXG5cclxuaW1wb3J0IHtcclxuXHR1bmRlZiwgZ2V0Q21kQXJncywgYXNzZXJ0LFxyXG5cdERCRywgTE9HLCBpc0ZpbGUsXHJcblx0Y29tcGlsZUZpbGUsIGV4ZWNDbWQsXHJcblx0fSBmcm9tIFwiLi4vbGliL3V0aWxzLnRzXCJcclxuXHJcbntjOiBjb21waWxlfSA6PSBnZXRDbWRBcmdzIHtcclxuXHRjOiAnYm9vbGVhbidcclxuXHR9XHJcblxyXG4jIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cclxuREJHIFwiaW4gcnVuLXRlbXAtZmlsZVwiXHJcbmlmIGNvbXBpbGVcclxuXHREQkcgXCJjb21waWxpbmcgYWxsIGZpbGVzXCJcclxuXHRhd2FpdCBleGVjQ21kICdjb21waWxlJ1xyXG5lbHNlXHJcblx0REJHIFwiY29tcGlsaW5nIHRlc3QvdGVtcC5jaXZldFwiXHJcblx0Y29tcGlsZUZpbGUgWyd0ZXN0RGlyJywgJ3RlbXAnXVxyXG5cclxuYXNzZXJ0IGlzRmlsZSgndGVzdC90ZW1wLnRzJyksIFwiQ29tcGlsZSBvZiB0ZXN0L3RlbXAuY2l2ZXQgZmFpbGVkXCJcclxue2NvZGV9IDo9IGF3YWl0IGV4ZWNDbWQgJ2Rlbm8nLCBbXHJcblx0J3J1bicsXHJcblx0Jy1BJyxcclxuXHQndGVzdC90ZW1wLnRzJ1xyXG5cdERlbm8uYXJncy4uLlxyXG5cdF1cclxuREJHIFwiRmluYWwgcmVzdWx0IGNvZGUgZnJvbSB0ZW1wIGZpbGU6ICN7Y29kZX1cIlxyXG4iXX0=